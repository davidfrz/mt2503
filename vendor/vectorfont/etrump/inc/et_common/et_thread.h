///////////////////////////////////////////////////////////////////////
/// \file       et_thread.h
/// \brief      thread utilities
/// \details
/// <br><br>
/// Chang Log: <br>
///   0.1       Zheng Xu     Initialize <br>
///
/// \author     Zheng Xu<zxu@etrump.net>
/// \version    0.1
/// \date       November 2010
///
///////////////////////////////////////////////////////////////////////
#ifndef __ET_THREAD_H__
#define __ET_THREAD_H__

#include "et_types.h"

/// mutex type
typedef ET_VOID* ET_Mutex;

////////////////////////////////////////////////////////////////////////
/// \brief create a mutex
/// \details 
/// \param[in,out] pMutex -- the created mutex
/// \return ET_API ET_ERROR
////////////////////////////////////////////////////////////////////////
ET_API ET_ERROR ET_Mutex_Create(ET_Mutex* INOUT pMutex);

////////////////////////////////////////////////////////////////////////
/// \brief destroy a mutex
/// \details 
/// \param[] mutex -- mutex to be destroyed
/// \return ET_API ET_ERROR
////////////////////////////////////////////////////////////////////////
ET_API ET_ERROR ET_Mutex_Destroy(ET_Mutex IN mutex);

////////////////////////////////////////////////////////////////////////
/// \brief lock mutex
/// \details 
/// \param[] mutex -- mutex to be locked
/// \return ET_API ET_ERROR
////////////////////////////////////////////////////////////////////////
ET_API ET_ERROR ET_Mutex_Lock(ET_Mutex IN mutex);

////////////////////////////////////////////////////////////////////////
/// \brief unlock mutex
/// \details 
/// \param[] mutex -- mutex to be unlocked
/// \return ET_API ET_ERROR
////////////////////////////////////////////////////////////////////////
ET_API ET_ERROR ET_Mutex_Unlock(ET_Mutex IN mutex);

#endif
