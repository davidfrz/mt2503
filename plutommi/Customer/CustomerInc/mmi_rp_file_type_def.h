/*****************************************************************************
*  Copyright Statement:
*  --------------------
*  This software is protected by Copyright and the information contained
*  herein is confidential. The software may not be copied and the information
*  contained herein may not be used or disclosed except with the written
*  permission of MediaTek Inc. (C) 2005
*
*  BY OPENING THIS FILE, BUYER HEREBY UNEQUIVOCALLY ACKNOWLEDGES AND AGREES
*  THAT THE SOFTWARE/FIRMWARE AND ITS DOCUMENTATIONS ("MEDIATEK SOFTWARE")
*  RECEIVED FROM MEDIATEK AND/OR ITS REPRESENTATIVES ARE PROVIDED TO BUYER ON
*  AN "AS-IS" BASIS ONLY. MEDIATEK EXPRESSLY DISCLAIMS ANY AND ALL WARRANTIES,
*  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE IMPLIED WARRANTIES OF
*  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE OR NONINFRINGEMENT.
*  NEITHER DOES MEDIATEK PROVIDE ANY WARRANTY WHATSOEVER WITH RESPECT TO THE
*  SOFTWARE OF ANY THIRD PARTY WHICH MAY BE USED BY, INCORPORATED IN, OR
*  SUPPLIED WITH THE MEDIATEK SOFTWARE, AND BUYER AGREES TO LOOK ONLY TO SUCH
*  THIRD PARTY FOR ANY WARRANTY CLAIM RELATING THERETO. MEDIATEK SHALL ALSO
*  NOT BE RESPONSIBLE FOR ANY MEDIATEK SOFTWARE RELEASES MADE TO BUYER'S
*  SPECIFICATION OR TO CONFORM TO A PARTICULAR STANDARD OR OPEN FORUM.
*
*  BUYER'S SOLE AND EXCLUSIVE REMEDY AND MEDIATEK'S ENTIRE AND CUMULATIVE
*  LIABILITY WITH RESPECT TO THE MEDIATEK SOFTWARE RELEASED HEREUNDER WILL BE,
*  AT MEDIATEK'S OPTION, TO REVISE OR REPLACE THE MEDIATEK SOFTWARE AT ISSUE,
*  OR REFUND ANY SOFTWARE LICENSE FEES OR SERVICE CHARGE PAID BY BUYER TO
*  MEDIATEK FOR SUCH MEDIATEK SOFTWARE AT ISSUE. 
*
*  THE TRANSACTION CONTEMPLATED HEREUNDER SHALL BE CONSTRUED IN ACCORDANCE
*  WITH THE LAWS OF THE STATE OF CALIFORNIA, USA, EXCLUDING ITS CONFLICT OF
*  LAWS PRINCIPLES.  ANY DISPUTES, CONTROVERSIES OR CLAIMS ARISING THEREOF AND
*  RELATED THERETO SHALL BE SETTLED BY ARBITRATION IN SAN FRANCISCO, CA, UNDER
*  THE RULES OF THE INTERNATIONAL CHAMBER OF COMMERCE (ICC).
*
*****************************************************************************/

/*******************************************************************************
 * Filename:
 * ---------
 *   mmi_rp_file_type_def.h
 *
 * Project:
 * --------
 *   MAUI
 *
 * Description:
 * ------------
 *   Resource populate function generated by XML resgen
 *
 * Author:
 * -------
 * -------
 *
 *******************************************************************************/
#ifndef _MMI_RP_FILE_TYPE_DEF_H
#define _MMI_RP_FILE_TYPE_DEF_H
typedef enum 
{
    FMGR_TYPE_ALL,      /* this type represent all files (included not supported types, like *.doc */
    FMGR_TYPE_UNKNOWN,
    /* ================== App type begin ================== */
    FMGR_TYPE_FOLDER,
    FMGR_TYPE_HYPER_LINK,
    FMGR_TYPE_BMP,
    FMGR_TYPE_JPG,
    FMGR_TYPE_JPEG,
    FMGR_TYPE_GIF,
    FMGR_TYPE_EMS,
    FMGR_TYPE_ANM,
    FMGR_TYPE_IMY,
    FMGR_TYPE_MID,
    FMGR_TYPE_MIDI,
    FMGR_TYPE_WAV,
    FMGR_TYPE_AMR,
    FMGR_TYPE_AAC,
    FMGR_TYPE_DAF,
    FMGR_TYPE_VM,
    FMGR_TYPE_3GP,
    FMGR_TYPE_MP4,
    FMGR_TYPE_3G2,
    FMGR_TYPE_MRE_TXT,
    FMGR_TYPE_LRC,
    FMGR_TYPE_DCF,
    FMGR_TYPE_DM,
    /* ================== App type end ================== */
    FMGR_TYPE_COUNT
} filetypes_file_type_enum;

typedef enum 
{
    FMGR_GROUP_TYPE_BEGIN = FMGR_TYPE_COUNT,
    FMGR_GROUP_UNKNOWN,
    /* ================== App group type begin ================== */
    FMGR_GROUP_COMMON,
    FMGR_GROUP_IMAGE,
    FMGR_GROUP_AUDIO,
    FMGR_GROUP_VIDEO,
    FMGR_GROUP_MRE_TXT,
    /* ================== App group type end ================== */
    FMGR_GROUP_TYPE_END
} filetypes_group_type_enum;

#define FMGR_MAX_FILTER_COUNT           (FMGR_TYPE_COUNT-5)

typedef struct { 
    unsigned int mask[(FMGR_TYPE_COUNT+32)/32];
} FMGR_FILTER;

#define FMGR_FILTER_INIT(f)             do { memset((f)->mask, 0,    sizeof((f)->mask)); } while(0)
#define FMGR_FILTER_SET_ALL(a)          do { memset((a)->mask, 0xff, sizeof((a)->mask)); } while(0)

#define FMGR_FILTER_SET(f,b)            do { if((b)<FMGR_TYPE_COUNT) ((f)->mask[b/32]) |= ( (((unsigned int)1)<<(b%32))); } while(0)
#define FMGR_FILTER_CLEAR(f,b)          do { if((b)<FMGR_TYPE_COUNT) ((f)->mask[b/32]) &= (~(((unsigned int)1)<<(b%32))); } while(0)

#define FMGR_FILTER_IS_SET(f,b)         ( ((b)<FMGR_TYPE_COUNT) ? (((f)->mask[b/32]) &  (((unsigned int)1)<<(b%32))) : 0)


#define FMGR_TYPE_PNG (FMGR_TYPE_COUNT + 1)
#define FMGR_TYPE_WBMP (FMGR_TYPE_COUNT + 2)
#define FMGR_TYPE_WBM (FMGR_TYPE_COUNT + 3)
#define FMGR_TYPE_M3D (FMGR_TYPE_COUNT + 4)
#define FMGR_TYPE_SVG (FMGR_TYPE_COUNT + 5)
#define FMGR_TYPE_MP2 (FMGR_TYPE_COUNT + 6)
#define FMGR_TYPE_AWB (FMGR_TYPE_COUNT + 7)
#define FMGR_TYPE_AIF (FMGR_TYPE_COUNT + 8)
#define FMGR_TYPE_AIFF (FMGR_TYPE_COUNT + 9)
#define FMGR_TYPE_AIFC (FMGR_TYPE_COUNT + 10)
#define FMGR_TYPE_AU (FMGR_TYPE_COUNT + 11)
#define FMGR_TYPE_SND (FMGR_TYPE_COUNT + 12)
#define FMGR_TYPE_M4A (FMGR_TYPE_COUNT + 13)
#define FMGR_TYPE_MMF (FMGR_TYPE_COUNT + 14)
#define FMGR_TYPE_WMA (FMGR_TYPE_COUNT + 15)
#define FMGR_TYPE_BSAC (FMGR_TYPE_COUNT + 16)
#define FMGR_TYPE_KUR (FMGR_TYPE_COUNT + 17)
#define FMGR_TYPE_APE (FMGR_TYPE_COUNT + 18)
#define FMGR_TYPE_OGG (FMGR_TYPE_COUNT + 19)
#define FMGR_TYPE_MPG (FMGR_TYPE_COUNT + 20)
#define FMGR_TYPE_AVI (FMGR_TYPE_COUNT + 21)
#define FMGR_TYPE_SDP (FMGR_TYPE_COUNT + 22)
#define FMGR_TYPE_RAM (FMGR_TYPE_COUNT + 23)
#define FMGR_TYPE_RA (FMGR_TYPE_COUNT + 24)
#define FMGR_TYPE_RV (FMGR_TYPE_COUNT + 25)
#define FMGR_TYPE_RM (FMGR_TYPE_COUNT + 26)
#define FMGR_TYPE_RMVB (FMGR_TYPE_COUNT + 27)
#define FMGR_TYPE_P12 (FMGR_TYPE_COUNT + 28)
#define FMGR_TYPE_CER (FMGR_TYPE_COUNT + 29)
#define FMGR_TYPE_PFX (FMGR_TYPE_COUNT + 30)
#define FMGR_TYPE_DER (FMGR_TYPE_COUNT + 31)
#define FMGR_TYPE_PEM (FMGR_TYPE_COUNT + 32)
#define FMGR_TYPE_P7B (FMGR_TYPE_COUNT + 33)
#define FMGR_TYPE_CRT (FMGR_TYPE_COUNT + 34)
#define FMGR_TYPE_SPC (FMGR_TYPE_COUNT + 35)
#define FMGR_TYPE_WML (FMGR_TYPE_COUNT + 36)
#define FMGR_TYPE_HTML (FMGR_TYPE_COUNT + 37)
#define FMGR_TYPE_HTM (FMGR_TYPE_COUNT + 38)
#define FMGR_TYPE_XHTML (FMGR_TYPE_COUNT + 39)
#define FMGR_TYPE_WMLC (FMGR_TYPE_COUNT + 40)
#define FMGR_TYPE_JAD (FMGR_TYPE_COUNT + 41)
#define FMGR_TYPE_JAR (FMGR_TYPE_COUNT + 42)
#define FMGR_TYPE_VCF (FMGR_TYPE_COUNT + 43)
#define FMGR_TYPE_VCS (FMGR_TYPE_COUNT + 44)
#define FMGR_TYPE_THEME (FMGR_TYPE_COUNT + 45)
#define FMGR_TYPE_EBOOK_TXT (FMGR_TYPE_COUNT + 46)
#define FMGR_TYPE_EBOOK_PDB (FMGR_TYPE_COUNT + 47)
#define FMGR_TYPE_EBOOK_TXZ (FMGR_TYPE_COUNT + 48)
#define FMGR_TYPE_EBOOK_PBZ (FMGR_TYPE_COUNT + 49)
#define FMGR_TYPE_EBOOK_NF1 (FMGR_TYPE_COUNT + 50)
#define FMGR_TYPE_EBOOK_NF2 (FMGR_TYPE_COUNT + 51)
#define FMGR_TYPE_EBOOK_LTS (FMGR_TYPE_COUNT + 52)
#define FMGR_TYPE_EBOOK_LTM (FMGR_TYPE_COUNT + 53)
#define FMGR_TYPE_EBOOK_LTL (FMGR_TYPE_COUNT + 54)
#define FMGR_TYPE_EBOOK_LPS (FMGR_TYPE_COUNT + 55)
#define FMGR_TYPE_EBOOK_LPM (FMGR_TYPE_COUNT + 56)
#define FMGR_TYPE_EBOOK_LPL (FMGR_TYPE_COUNT + 57)
#define FMGR_TYPE_FOTA_FULL (FMGR_TYPE_COUNT + 58)
#define FMGR_TYPE_VXP (FMGR_TYPE_COUNT + 59)
#define FMGR_TYPE_URL (FMGR_TYPE_COUNT + 60)
#define FMGR_TYPE_VBM (FMGR_TYPE_COUNT + 61)
#define FMGR_TYPE_MBC (FMGR_TYPE_COUNT + 62)
#define FMGR_TYPE_UDX (FMGR_TYPE_COUNT + 63)
#define FMGR_TYPE_3GQ (FMGR_TYPE_COUNT + 64)
#define FMGR_TYPE_IMPS_IM (FMGR_TYPE_COUNT + 65)
#define FMGR_TYPE_MMS_TXT (FMGR_TYPE_COUNT + 66)
#define FMGR_TYPE_APPICON (FMGR_TYPE_COUNT + 67)

#endif /* _MMI_RP_FILE_TYPE_DEF_H */
