[APP NAME] = Setting App
[SCOPE] = PLUTO, COSMOS
[MODULE] = MOD_MMI_COMMON_APP

TRC_MSG(MMI_RTC_DT_GET_EXACTTIME,"<<** CMGetExactTime ** >> CMCallCount = %d, CMCallBackCount = %d\n")
TRC_MSG(MMI_RTC_DT_GET_EXACTTIME_CB,"<<** CMGetExactTimeCB ** >>\n")
TRC_MSG(MMI_RTC_DT_GET_EXACTTIME_CB_INFO,"<<** CMGetExactTimeCB ** >> CMCallCount = %d, CMCallBackCount = %d\n")
/* NITZ */
TRC_MSG(MMI_RTC_NITZ_INIT_INFO,"NITZ: NITZHandlerInit: g_nitz_cntx.NITZDST = %d, g_nitz_cntx.NITZTimeZone = %d")
TRC_MSG(MMI_RTC_NITZ_DT_INFO,"NITZ: NITZHandler: nitzTempTZ = %d, g_nitz_cntx.NITZTime.nHour = %d, g_nitz_cntx.NITZTime.nMin = %d, g_nitz_cntx.NITZTime.nSec = %d")
TRC_MSG(MMI_RTC_NITZ_TZ_INFO,"NITZ: NITZHandler:nitzTempTZ = %d")
TRC_MSG(MMI_RTC_NITZ_DST_INFO,"NITZ: NITZHandler:nitzTempDST = %d")
TRC_MSG(MMI_RTC_NITZ_UPDATE_SHORT_NETWORK_NAME,"NITZ: NITZHandler:updateShortNW = %d")
TRC_MSG(MMI_RTC_NITZ_UPDATE_FULL_NETWORK_NAME,"NITZ: NITZHandler:updateFullNW = %d")
TRC_MSG(MMI_RTC_NITZ_RECEIVE_TIME,"NITZ: RecvTime:RecvTime.nHour, RecvTime.nMin = %d, RecvTime.nSec = %d")
TRC_MSG(MMI_RTC_NITZ_IGNORE_NITZ_NW,"NITZ: return 1, updateShortNW = %d, updateFullNW = %d")
TRC_MSG(MMI_RTC_NITZ_IGNORE_NITZ_DEFAULT_NW,"NITZ: return 2, msgReq->short_nw_name_len = %d")
TRC_MSG(MMI_RTC_NITZ_DISPLAY_POPUP,"NITZ: display popup")
TRC_MSG(MMI_RTC_NITZ_GET_NW_NAME,"NITZ: mmi_nitz_get_nw_name")
TRC_MSG(MMI_RTC_NITZ_NW_NAME_LEN,"NITZ: mmi_nitz_get_nw_name, len!=0")
TRC_MSG(MMI_RTC_NITZ_CHECK_DT_REF1,"NITZ: mmi_nitz_check_dt:refTime1.nHour = %d, NITZ: mmi_nitz_check_dt:refTime1.nMin = %d, NITZ: mmi_nitz_check_dt:refTime1.nSec = %d")
TRC_MSG(MMI_RTC_NITZ_CHECK_DT_REF2,"NITZ: mmi_nitz_check_dt:refTime2.nHour = %d, NITZ: mmi_nitz_check_dt:refTime2.nMin = %d, NITZ: mmi_nitz_check_dt:refTime2.nSec = %d")
TRC_MSG(MMI_RTC_NITZ_CHECK_DT_IGNOER1,"NITZ: mmi_nitz_check_dt: return 1")
TRC_MSG(MMI_RTC_NITZ_CHECK_DT_IGNOER2_2,"NITZ: mmi_nitz_check_dt: return 2-2")
TRC_MSG(MMI_RTC_NITZ_CHECK_DT_IGNOER2_1,"NITZ: mmi_nitz_check_dt: return 2-1")
TRC_MSG(MMI_RTC_NITZ_CHECK_DT_IGNOER3,"NITZ: mmi_nitz_check_dt: return 3")
TRC_MSG(MMI_RTC_NITZ_CHECK_DT_IGNOER4,"NITZ: mmi_nitz_check_dt: return 4")
TRC_MSG(MMI_RTC_NITZ_CHECK_TZ,"NITZ: mmi_nitz_check_tz")
TRC_MSG(MMI_RTC_NITZ_CHECK_TZ_INFO,"NITZ: mmi_nitz_check_tz: g_nitz_cntx.NITZTimeZone = %d, nitzTempTZ = %d, g_nitz_cntx.NITZDST = %d, nitzTempDST = %d")
TRC_MSG(MMI_RTC_NITZ_SET_SIM,"NITZ: set sim = %d")
TRC_MSG(MMI_RTC_NITZ_BUSY,"NITZ: busy, return ")
TRC_MSG(MMI_RTC_NITZ_STATE_OFF,"----[NITZ.c] NITZ setting is OFF ----")
TRC_MSG(MMI_RTC_NITZ_SET_STATE,"----[NITZ.c]srv_set_nitz_state_ext(state[%d], LINE[%d])----")
TRC_MSG(MMI_RTC_NITZ_GET_STATE,"----[NITZ.c]srv_get_nitz_state_ext(LINE[%d]) return %d----")
TRC_MSG(MMI_RTC_NITZ_PARSE,"----[NITZ.c]srv_nitz_parse_msg()----")
TRC_MSG(MMI_RTC_NITZ_MSG,"----[NITZ.c]NITZ msg %d-%d-%d %d:%d:%d TZ[%d]----")
TRC_MSG(MMI_RTC_NITZ_RECV_TZ,"----[NITZ.c]receive nitzTempTZ[%d]----")
TRC_MSG(MMI_RTC_NITZ_RECV_INVALID_TZ,"----[NITZ.c]Invalid Time Zone in NITZ msg ----")
TRC_MSG(MMI_RTC_NITZ_RECV_DST,"----[NITZ.c]receive nitzTempDST[%d]----")
TRC_MSG(MMI_RTC_NITZ_SET_APPLY_TYPE,"----[NITZ.c] srv_set_apply_nitz_type(%d)----")
TRC_MSG(MMI_RTC_NITZ_GET_APPLY_TYPE,"----[NITZ.c] srv_get_apply_nitz_type(%d)----")
TRC_MSG(MMI_RTC_NITZ_MSG_HDLR,"----[NITZ.c] srv_nitz_handler(sim=%d)----")
/* MMI theme */
TRC_MSG(MMI_THEME_UPDATE_CALLBACK, "[MMITheme.c][ThemeAlarmCallBack]count = %d, current theme = %d, total theme = %d")
TRC_MSG(MMI_THEME_UPDATE_CALLBACK_PATH, "[MMITheme.c][ThemeAlarmCallBack]path: --- %d ---")
TRC_MSG(MMI_THEME_UPDATE_NO_THEME, "[MMITheme.c][ThemeAlarmCallBack]No theme to update")
TRC_MSG(MMI_THEME_GET_ID, "[MMITheme.c][GetIDList]count = %d")
TRC_MSG(MMI_THEME_CHECK_FOR_ORDER, "[MMITheme.c][CheckForCorrectOrder]Enter...")
TRC_MSG(MMI_THEME_ACTIVE_SYSTEM_PATH, "[MMITheme.c][mmi_tm_activate_system_theme]path: --- %d ---")
TRC_MSG(MMI_THEME_ACTIVE_THEME_PATH, "[MMITheme.c][mmi_tm_activate_theme]path: --- %d ---")
TRC_MSG(MMI_THEME_PLUG_OUT_CARD_THM_DRV, "[mmitheme.c][CardPlugOut]drv_letter = %d")
TRC_MSG(MMI_THEME_PLUG_OUT_CARD_PLUGOUT_DRV, "[mmitheme.c][CardPlugOut]plug out drv_letter = %d")
TRC_MSG(MMI_THEME_ENTRY_GET_THEMES, "---[MMITheme.c]Entry mmi_tm_get_themes() ---")
TRC_MSG(MMI_THEME_GET_THEMES_COUNT, "---[MMITheme.c]mmi_tm_get_themes, search all folder: dwnl_ph_thm_cnt = %d, dwnl_card_thm_cnt = %d ---")
TRC_MSG(MMI_THEME_AFTER_SEARCH_COUNT,"---[MMITheme.c]mmi_tm_get_themes, exclude both exist: dwnl_ph_thm_cnt = %d, dwnl_card_thm_cnt = %d ---")
TRC_MSG(MMI_THEME_SEARCH_PHONE_FILE_NAME, "---[MMITheme.c]mmi_tm_get_themes, search phone, filename = %c ---")
TRC_MSG(MMI_THEME_AFTER_SEARCH_PHONE_COUNT, "---[MMITheme.c]mmi_tm_get_themes, after search phone, dwnl_ph_thm_cnt = %d, dwnl_card_thm_cnt = %d ---")
TRC_MSG(MMI_THEME_SEARCH_CARD_FILE_NAME, "---[MMITheme.c]mmi_tm_get_themes, search card, filename = %c ---")
TRC_MSG(MMI_THEME_AFTER_SEARCH_CARD_COUNT,"---[MMITheme.c]mmi_tm_get_themes, after search card, dwnl_ph_thm_cnt = %d, dwnl_card_thm_cnt = %d ---")
TRC_MSG(MMI_THEME_GETATTRIBUTES_PHONE,"[MMITheme.c]mmi_tm_get_themes(): FS_GetAttribute, phone, found")
TRC_MSG(MMI_THEME_SAME_NAME,"[MMITheme.c]mmi_tm_get_themes(): same name")
TRC_MSG(MMI_THEME_GETATTRIBUTES_CARD,"[MMITheme.c]mmi_tm_get_themes(): FS_GetAttribute, card, found")
TRC_MSG(MMI_THEME_ENTRY_ACTIVE_FROM_FMGR, "---[MMITheme.c]Entry mmi_tm_activate_theme_from_fmgr() ---")
TRC_MSG(MMI_THEME_ACTIVE_FMGR_ALREADY_EXIST, "---[MMITheme.c]mmi_tm_activate_theme_from_fmgr(), already exist in list, i = %d ---")
TRC_MSG(MMI_THEME_ACTIVE_FMGR_ALREADY_ADDED, "---[MMITheme.c]mmi_tm_activate_theme_from_fmgr(), already added into list, i = %d ---")
TRC_MSG(MMI_THEME_ENTRY_DEL_FROM_FMGR, "---[MMITheme.c]Entry mmi_tm_delete_theme_from_fmgr() ---")
TRC_MSG(MMI_THEME_DEL_FROM_FMGR_FOUND, "---[MMITheme.c]mmi_tm_delete_theme_from_fmgr(), already found, i = %d ---")
TRC_MSG(MMI_THEME_GET_CURR_THEME_ID, "---[MMITheme.c]mmi_tm_get_current_theme_id(), current theme id = %d ---")
TRC_MSG(MMI_THEME_ENTRY_READ_FROM_NVRAM, "---[MMITheme.c]Entry ReadThemesFromNVRAM() ---")
TRC_MSG(MMI_THEME_ENTRY_WRITE_FROM_NVRAM, "---[MMITheme.c]Entry WriteThemesToNVRAM() ---")
TRC_MSG(MMI_THEME_CONSTRUCT_THEME_ORDERLIST, "---[MMITheme.c]Entry ConstructThemeOrderList() ---")
TRC_MSG(MMI_THEME_CONSTRUCT_THEME_LIST, "---[MMITheme.c]ConstructThemeList(), orders = %d, g_thm_cntx.TotalTheme = %d, g_thm_cntx.CurrTheme = %d  ---")
TRC_MSG(MMI_THEME_GET_FMGR_PHN_ICMP_SUCCESS, "---[MMITheme.c]mmi_tm_get_themes_for_fmgr(), PHN file name mmi_ucs2icmp() success, exist_idx = %d  ---")
TRC_MSG(MMI_THEME_GET_FMGR_PHN_CMP_FAIL, "---[MMITheme.c]mmi_tm_get_themes_for_fmgr(), PHN file name mmi_ucs2cmp() not the same ---")
TRC_MSG(MMI_THEME_GET_FMGR_PHN_ADD_TEMP, "---[MMITheme.c]mmi_tm_get_themes_for_fmgr(), PHN add to temp list, k = %d ---")
TRC_MSG(MMI_THEME_GET_FMGR_CARD_ICMP_SUCCESS, "---[MMITheme.c]mmi_tm_get_themes_for_fmgr(), CARD file name mmi_ucs2icmp() success, exist_idx = %d  ---")
TRC_MSG(MMI_THEME_GET_FMGR_CARD_CMP_FAIL, "---[MMITheme.c]mmi_tm_get_themes_for_fmgr(), CARD file name mmi_ucs2cmp() not the same ---")
TRC_MSG(MMI_THEME_GET_FMGR_CARD_ADD_TEMP, "---[MMITheme.c]mmi_tm_get_themes_for_fmgr(), CARD add to temp list, k = %d ---")
TRC_MSG(MMI_THEME_ACTIVATE_DOWNLOADED, "---[MMITheme.c]mmi_tm_activate_downloaded_theme(), checksum result = %d ---")
TRC_MSG(MMI_THEME_ACTIVATE_DOWNLOAD_CURR_ID, "---[MMITheme.c]mmi_tm_activate_downloaded_theme(), current activate id = %d ---")
/* Phone Setup */
TRC_MSG(MMI_PHNSET_INIT_PHONESETUP_APP,     "---[PhoneSetup.c] start InitPhoneSetupApp function ---")
TRC_MSG(MMI_PHNSET_PENSETTING_SPEED_ERROR,  "---[PhoneSetup.c] NVRAM PenSetting Write Speed Failed. Error -%d ---")
TRC_MSG(MMI_PHNSET_PENSETTING_COLOR_ERROR,  "---[PhoneSetup.c] NVRAM PenSetting Write Color Failed. Error -%d ---")
TRC_MSG(MMI_PHNSET_READ_CALIBRATION_FAIL,   "---[PhoneSetup.c] Calibration NVRAM data read failed, Error = %d ---")
TRC_MSG(MMI_PHNSET_NOT_CALIBRATION_DATA,    "---[PhoneSetup.c] NVRAM Calibration Data not found ---")
TRC_MSG(MMI_PHNSET_TEST_PEN_DOWN,           "---[PhoneSetup.c] TestControlAreaPenDown - state:%d   (%d, %d) ---")
TRC_MSG(MMI_PHNSET_COMMON_TRC_LINE,			"---[PhoneSetup.c] PhoneSetup Common Trace Line - %d ---")
TRC_MSG(MMI_PHNSET_CALIBRATION_DATA_INFO,	"---[Calibrationsrv.c] Calibration data - %d ---")
TRC_MSG(MMI_PHNSET_SET_MAIN_WP_ID,          "---[Wallpaper.c] PhnsetWallpaperSet:Set Main ID=%d ---")
TRC_MSG(MMI_PHNSET_SET_SUB_WP_ID,           "---[Wallpaper.c] PhnsetWallpaperSet:Set Sub ID=%d ---")
TRC_MSG(MMI_PHNSET_SET_THEME_WP_ID,         "---[Wallpaper.c] ThemeManagerSetWallpaper:Set Main ID=%d ---")
TRC_MSG(MMI_PHNSET_WP_FWFROM_FMGR,          "---[Wallpaper.c] PhnsetWallpaperForwardFromFmgr:path=%s, is_short=%d ---")
TRC_MSG(MMI_PHNSET_SUB_WP_FWFROM_FMGR,      "---[Wallpaper.c] PhnsetSubWallpaperForwardFromFmgr:path=%s, is_short=%d ---")
TRC_MSG(MMI_PHNSET_WP_USER_DEF_SELECT,      "---[Wallpaper.c] PhnsetWpUsrDefSelect:main phnset_dispchar_strp=%s ---")
TRC_MSG(MMI_PHNSET_SUBWP_USER_DEF_SELECT,   "---[Wallpaper.c] PhnsetWpUsrDefSelect:sub phnset_dispchar_strp=%s ---")
TRC_MSG(MMI_PHSNET_SS_USER_DEF_SELECT,      "---[Wallpaper.c] PhnsetWpUsrDefSelect:ss phnset_dispchar_strp=%s ---")
TRC_MSG(MMI_PHNSET_WP_USER_DEF_VIEW,        "---[Wallpaper.c] PhnsetWpUsrDefPreView: phnset_dispchar_strp=%s ---")
TRC_MSG(MMI_PHNSET_WPSS_PLAY_CALLBACK,      "---[Wallpaper.c] PhnsetWpSsPlayCallBack: result=%d ---")
TRC_MSG(MMI_PHNSET_RST_WP_DEFAULT,          "---[Wallpaper.c] PhnsetRstWallpaperDefault: Main, ID=%d ---")
TRC_MSG(MMI_PHNSET_RST_SUBWP_DEFAULT,       "---[Wallpaper.c] PhnsetRstSubWallpaperDefault: Sub, ID=%d ---")
TRC_MSG(MMI_PHNSET_READ_WP_ID,              "---[Wallpaper.c] PhnsetReadWallpaper: Main ID=%d ---")
TRC_MSG(MMI_PHNSET_READ_SUBWP_ID,           "---[Wallpaper.c] PhnsetReadWallpaper: Sub ID=%d ---")
TRC_MSG(MMI_PHNSET_GET_CUR_WP_SHORT_NAME,   "---[Wallpaper.c] PhnsetGetCurWallpaperName: path=%s, encode=%d ---")
TRC_MSG(MMI_PHNSET_GET_CUR_WP_NAME,         "---[Wallpaper.c] PhnsetGetCurWallpaperName: path=%s ---")
TRC_MSG(MMI_PHNSET_GET_CUR_SUBWP_SHORT_NAME,"---[Wallpaper.c] PhnsetGetCurSubWallpaperName: path=%s, encode=%d ---")
TRC_MSG(MMI_PHNSET_GET_CUR_SUBWP_NAME,      "---[Wallpaper.c] PhnsetGetCurSubWallpaperName: path=%s ---")
TRC_MSG(MMI_PHNSET_SET_WP_ID,               "---[Wallpaper.c] PhnsetSetWallpaperByImgID: Main, ID=%d ---")
TRC_MSG(MMI_PHNSET_SET_SUBWP_ID,            "---[Wallpaper.c] PhnsetSetWallpaperByImgID: Sub, ID=%d ---")
TRC_MSG(MMI_PHNSET_SET_WP_NAME,             "---[Wallpaper.c] PhnsetSetWallpaperByFileName: Main, isWPShort=%d, path=%s ---")
TRC_MSG(MMI_PHNSET_SET_SUBWP_NAME,          "---[Wallpaper.c] PhnsetSetWallpaperByFileName: Sub, isWPShort=%d, path=%s ---")
TRC_MSG(MMI_PHNSET_WP_USE_DEFAULT,          "---[Wallpaper.c] PhnsetWPUseDefault: Main, ID=%d ---")
TRC_MSG(MMI_PHNSET_SUBWP_USE_DEFAULT,       "---[Wallpaper.c] PhnsetWPUseDefault: Sub, ID=%d ---")
TRC_MSG(MMI_PHNSET_WP_SPEEDUP_FUNCTION,     "---[Wallpaper.c] mmi_phnset_save_wallpaper_to_speedup() ---")
TRC_MSG(MMI_PHNSET_FM_SAVE_STATUS_ICON,     "---[FlightMode.c] PhnsetFlightModeSaveStatusIconFlags: Save status icon by mode %d and count %d ---")
TRC_MSG(MMI_PHNSET_FM_RESTORE_STATUS_ICON,  "---[FlightMode.c] PhnsetFlightModeRestoreStatusIconFlags: Restore status icon by mode %d and count %d ---")
TRC_MSG(MMI_PHNSET_FM_SELECTION_FINISH,     "---[FlightMode.c] mmi_phnset_flight_mode_selection_finish: Flight mode: switch done ---")
TRC_MSG(MMI_PHNSET_FM_BT_TIMEOUT,           "---[FlightMode.c] mmi_phnset_flight_mode_bt_timeout_hdlr: BT deactivation timeout ---")
TRC_MSG(MMI_PHNSET_FM_BT_RESET,             "---[FlightMode.c] mmi_flight_mode_switch_bluetooth: BT reset ---")
TRC_MSG(MMI_PHNSET_FM_SWITCH_IRDA,          "---[FlightMode.c] mmi_flight_mode_switch_irda: IrDA disconnect ---")
TRC_MSG(MMI_PHNSET_FM_SAVE_MODE,            "---[FlightMode.c] PhnsetFlightModeSaveMode: save mode ---")
TRC_MSG(MMI_PHNSET_FM_CLOSE_WLAN,           "---[FlightMode.c] mmi_flight_mode_switch_wlan: turn off WLAN ---")
TRC_MSG(MMI_PHNSET_FM_OPEN_WLAN,            "---[FlightMode.c] mmi_flight_mode_switch_wlan: turn on WLAN ---")
TRC_MSG(MMI_PHNSET_FM_CLOSE_WLAN_2,         "---[FlightMode.c] mmi_phnset_power_on_query_with_flight_mode: turn off WLAN ---")
TRC_MSG(MMI_PHNSET_FM_SWITCH_MODE,          "---[FlightMode.c] mmi_phnset_switch_flight_mode: switch mode ---")
TRC_MSG(MMI_PHNSET_FM_DISPLAY_ICON,         "---[FlightMode.c] mmi_flight_mode_is_status_icon_visible: Status icon %d is requested to display but invisible")
TRC_MSG(MMI_PHNSET_RST_CHECK_PHONELOCK,     "---[Restore.c] EntryRstCheckPhoneLock() ---")
TRC_MSG(MMI_PHNSET_RST_VERIFY_PHONELOCK_REQ,"---[Restore.c] RstVerifyPhoneLockReq() ---")
TRC_MSG(MMI_PHNSET_RST_PROCESSING,          "---[Restore.c] EntryRstRestoreProcessing() ---")
TRC_MSG(MMI_PHNSET_RST_SYNCHDL_RESET_WAP,   "---[Restore.c] RstSyncHandler: Reset WAP ---")
TRC_MSG(MMI_PHNSET_RST_SYNCHDL_REBOOT,      "---[Restore.c] RstSyncHandler: Reboot ---")
TRC_MSG(MMI_PHNSET_RST_WAP_RSP_HDL_REBOOT,  "---[Restore.c] RstWapRspHdlr: Reboot ---")
TRC_MSG(MMI_PHNSET_RST_POPUP_SUCCESS,       "---[Restore.c] RstRestoreDisplayPopup: Restore Successful ---")
TRC_MSG(MMI_PHNSET_RST_POPUP_FAIL,          "---[Restore.c] RstRestoreDisplayPopup: Restore Fail ---")
TRC_MSG(MMI_PHNSET_RST_POPUP_DEL_SCR,       "---[Restore.c] RstRestoreDisplayPopup: Delete Screen ---")
TRC_MSG(MMI_PHNSET_RST_NITZ_STATUS,         "---[Restore.c] RstGetNITZStatusDefault: gAutoUpdateTime = %d ---")
TRC_MSG(MMI_PHNSET_RST_SRCSAVER_STATUS,     "---[Restore.c] RstGetScrSaverStatusDefault: ScrSvrStatus = %d ---")
TRC_MSG(MMI_PHNSET_RST_SRCSAVER_WAIT_STATUS,"---[Restore.c] RstGetScrSaverWaitingDefault: gRestorScrWaitingVal =%d ---")
TRC_MSG(MMI_PHNSET_RST_SRCSAVER_IMAGE_ID,   "---[Restore.c] RstGetScrSaverImgIdDefault: gScreenSaverId = %d ---")
TRC_MSG(MMI_PHNSET_RST_WP_IMAGE_ID,         "---[Restore.c] RstGetWallpaperImgIdDefault: gWallPaperId = %d ---")
TRC_MSG(MMI_PHNSET_RST_SUBWP_IMAGE_ID,      "---[Restore.c] RstGetWallpaperSubImgIdDefault: gSubWallPaperId = %d ---")
TRC_MSG(MMI_PHNSET_RST_INPUTMETHOD,         "---[Restore.c] RstRestorePhoneSetup: Start restore InputMethod ---")
TRC_MSG(MMI_PHNSET_RST_SPEEDDIAL_STATUS,    "---[Restore.c] RstRestorePhoneSetup: Start restore Speed dial status ---")
TRC_MSG(MMI_PHNSET_RST_CONTRASTLEVEL,       "---[Restore.c] RstRestorePhoneSetup: Start restore Contrast Level ---")
TRC_MSG(MMI_PHNSET_RST_GREETING_TEXT,       "---[Restore.c] RstRestorePhoneSetup: Start restore greeting text ---")
TRC_MSG(MMI_PHNSET_RST_APHORISM,            "---[Restore.c] RstRestorePhoneSetup: Start restore Aphorism ---")
TRC_MSG(MMI_PHNSET_RST_OWNER_NUMBER,        "---[Restore.c] RstRestorePhoneSetup: Start restore OwnerNumber ---")
TRC_MSG(MMI_PHNSET_RST_DATE_TIME,           "---[Restore.c] RstRestorePhoneSetup: Start restore DateTime Status ---")
TRC_MSG(MMI_PHNSET_RST_NITZ,                "---[Restore.c] RstRestorePhoneSetup: Start restore NITZ ---")
TRC_MSG(MMI_PHNSET_RST_SPEEDDIAL,           "---[Restore.c] RstRestorePhoneSetup: Start restore Speed dial ---")
TRC_MSG(MMI_PHNSET_RST_DATE_FORMAT,         "---[Restore.c] RstRestorePhoneSetup: Start restore Date Format ---")
TRC_MSG(MMI_PHNSET_RST_TIME_FORMAT,         "---[Restore.c] RstRestorePhoneSetup: Start restore Time Format ---")
TRC_MSG(MMI_PHNSET_RST_SPEEDDIAL_DEFAULT,    "---[Restore.c] RstGetSpeedDialStatusDefault() ---")
TRC_MSG(MMI_PHNSET_RST_DATE_FORMAT_STATUS,  "---[Restore.c] RstGetDateFormatDefault() ---")
TRC_MSG(MMI_PHNSET_RST_TIME_FORMAT_STATUS,  "---[Restore.c] RstGetTimeFormatDefault() ---")
TRC_MSG(MMI_PHNSET_RST_SUB_CONTRASTLEVEL,   "---[Restore.c] RstGetContrastLevelSubDefault() ---")
TRC_MSG(MMI_PHNSET_RST_MAIN_CONTRASTLEVEL,  "---[Restore.c] RstGetContrastLevelMainDefault() ---")
TRC_MSG(MMI_PHNSET_RST_GREETINGTEXT_STATUS, "---[Restore.c] RstGetGreetingTextStatusDefault() ---")
TRC_MSG(MMI_PHNSET_RST_APHORISM_STATUS,     "---[Restore.c] RetGetAphorismTextStatusDefault() ---")
TRC_MSG(MMI_PHNSET_RST_OWNER_NUMBER_STATUS, "---[Restore.c] RstGetOwnerNumStatusDefault() ---")
TRC_MSG(MMI_PHNSET_RST_DATE_TIME_STATUS,    "---[Restore.c] RstGetShowDTStatusDefault() ---")
TRC_MSG(MMI_PHNSET_ENTRY_SS_SYSTEM,         "---[ScreenSaver.c] EntryPhnsetScrSvrSystem() ---")
TRC_MSG(MMI_PHNSET_ENTRY_SS_SYS_VIEW,       "---[ScreenSaver.c] EntryPhnsetScrSvrSysView: screenSaverId=%d ---")
TRC_MSG(MMI_PHNSET_EXIT_SS_SYS_VIEW,        "---[ScreenSaver.c] ExitPhnsetScrSvrSysView() ---")
TRC_MSG(MMI_PHNSET_SS_SYS_VIEW_PRE,         "---[ScreenSaver.c] PhnsetScrSvrSysViewPre: highlight=%d ---")
TRC_MSG(MMI_PHNSET_SS_SYS_VIEW_NEXT,        "---[ScreenSaver.c] PhnsetScrSvrSysViewNext: highlight=%d ---")
TRC_MSG(MMI_PHNSET_SS_SYS_VIEW_LSK_HDL,     "---[ScreenSaver.c] PhnsetScrSvrSysViewLskHdlr: ID=%d ---")
TRC_MSG(MMI_PHNSET_SS_BADFILE_CALLBACK,     "---[ScreenSaver.c] PhnsetScreenSaverBadFileCallBack ---")
TRC_MSG(MMI_PHNSET_SS_FWFROM_FMGR,          "---[ScreenSaver.c] PhnsetScrSvrForwardFromFmgr: short=%d ---")
TRC_MSG(MMI_PHNSET_SET_SS_NAME,             "---[ScreenSaver.c] PhnsetSetScrSvrByFileName: short=%d ---")
TRC_MSG(MMI_PHNSET_GET_CUR_SS_NAME,         "---[ScreenSaver.c] PhnsetGetCurScrSvrFileName() ---")
TRC_MSG(MMI_PHNSET_SS_RST_DEFAULT,          "---[ScreenSaver.c] PhnsetRstScrSvrDefault: ID=%d ---")
TRC_MSG(MMI_PHNSET_SS_GET_CUR_SS_ID,        "---[ScreenSaver.c] PhnsetGetCurScrSvr: ID=%d ---")
TRC_MSG(MMI_PHNSET_SS_GET_SS_INFO,          "---[ScreenSaver.c] PhnsetGetScrSvrSetings: status=%d, time=%d ---")
TRC_MSG(MMI_PHNSET_SS_READ_SS_INFO,         "---[ScreenSaver.c] PhnsetReadNvramScrSvrSettings: ID=%d, status=%d, time=%d ---")
TRC_MSG(MMI_PHNSET_SS_GET_CUR_SS_NAME,      "---[ScreenSaver.c] PhnsetGetCurScrSvrName: ID=%d ---")
TRC_MSG(MMI_PHNSET_SS_GET_NAME_BY_ID,       "---[ScreenSaver.c] PhnsetGetScrSvrNameById: ID=%d ---")
TRC_MSG(MMI_PHNSET_SS_USE_DEFAULT,          "---[ScreenSaver.c] PhnsetSSUseDefault: ID=%d ---")
TRC_MSG(MMI_PHNSET_PWR_READ_PWRON_ID,       "---[PowerOnOffDisplay.c] PhnsetReadPwrOnOffDisp: On, id=%d ---")
TRC_MSG(MMI_PHNSET_PWR_READ_PWROFF_ID,      "---[PowerOnOffDisplay.c] PhnsetReadPwrOnOffDisp: Off, id=%d ---")
TRC_MSG(MMI_PHNSET_PWR_ENTRY_SEL_POWERON,   "---[PowerOnOffDisplay.c] EntryPhnsetPowerOnOffSel: On ---")
TRC_MSG(MMI_PHNSET_PWR_ENTRY_SEL_POWEROFF,  "---[PowerOnOffDisplay.c] EntryPhnsetPowerOnOffSel: Off ---")
TRC_MSG(MMI_PHNSET_PWR_ENTRY_SYS_POWERON,   "---[PowerOnOffDisplay.c] EntryPhnsetPowerOnOffSys: On ---")
TRC_MSG(MMI_PHNSET_PWR_ENTRY_SYS_POWEROFF,  "---[PowerOnOffDisplay.c] EntryPhnsetPowerOnOffSys: Off ---")
TRC_MSG(MMI_PHNSET_PWR_ENTRY_SYS_VIDEO_VIEW,"---[PowerOnOffDisplay.c] EntryPhnsetPwrOnOffSysView: Video strID=%d, resID=%d ---")
TRC_MSG(MMI_PHNSET_PWR_ENTRY_SYS_IMAGE_VIEW,"---[PowerOnOffDisplay.c] EntryPhnsetPwrOnOffSysView: Image strID=%d, resID=%d ---")
TRC_MSG(MMI_PHNSET_PWR_ENTRY_SYS_VIEW_PRE,  "---[PowerOnOffDisplay.c] PhnsetPwrOnOffSysViewPre: highlight=%d ---")
TRC_MSG(MMI_PHNSET_PWR_ENTRY_SYS_VIEW_NEXT, "---[PowerOnOffDisplay.c] PhnsetPwrOnOffSysViewNext: highlight=%d ---")
TRC_MSG(MMI_PHNSET_PWR_GET_PWRON_ID,        "---[PowerOnOffDisplay.c] PhnsetGetPwrOnDisp: ID=%d ---")
TRC_MSG(MMI_PHNSET_PWR_GET_PWRON_NAME,      "---[PowerOnOffDisplay.c] PhnsetGetPwrOnFileName: path=%s ---")
TRC_MSG(MMI_PHNSET_PWR_GET_PWROFF_ID,       "---[PowerOnOffDisplay.c] PhnsetGetPwrOffDisp: ID=%d ---")
TRC_MSG(MMI_PHNSET_PWR_GET_PWROFF_NAME,     "---[PowerOnOffDisplay.c] PhnsetGetPwrOffFileName: path=%s ---")
TRC_MSG(MMI_PHNSET_PWR_RST_PWRON_DEFAULT,   "---[PowerOnOffDisplay.c] PhnsetRstPwrOnDisplayDefault: On ID=%d ---")
TRC_MSG(MMI_PHNSET_PWR_GET_PWRON_DEFAULT,   "---[PowerOnOffDisplay.c] PPhnsetGetPwrOnDisplayDefault: On ID=%d ---")
TRC_MSG(MMI_PHNSET_PWR_RST_PWROFF_DEFAULT,  "---[PowerOnOffDisplay.c] PhnsetRstPwrOffDisplayDefault: Off ID=%d ---")
TRC_MSG(MMI_PHNSET_PWR_GET_PWROFF_DEFAULT,  "---[PowerOnOffDisplay.c] PhnsetGetPwrOffDisplayDefault: Off ID=%d ---")
TRC_MSG(MMI_PHNSET_PWR_ONOFF_PLAY_CALLBACK, "---[PowerOnOffDisplay.c] PhnsetPwrOnOffPlayCallBack: result=%d ---")
TRC_MSG(MMI_PHNSET_PWR_BAD_DISP_POPUP,      "---[PowerOnOffDisplay.c] PhnsetPwrOnOffBadDisplayPopup() ---")
TRC_MSG(MMI_PHNSET_EXIT_PWR_ONOFF_SYS_VIEW, "---[PowerOnOffDisplay.c] ExitPhnsetPwrOnOffSysView: isCorrectSet=%d ---")
TRC_MSG(MMI_PHNSET_SET_PWR_DISPLAY,         "---[PowerOnOffDisplay.c] PhnsetSetPwrOnOffDisplay() ---")
TRC_MSG(MMI_PHNSET_PWR_SET_PWRON_ID,        "---[PowerOnOffDisplay.c] PhnsetSetPwrOnOffDisplayByImgID: On ID=%d ---")
TRC_MSG(MMI_PHNSET_PWR_SET_PWROFF_ID,       "---[PowerOnOffDisplay.c] PhnsetSetPwrOnOffDisplayByImgID: Off ID=%d ---")
TRC_MSG(MMI_PHNSET_PWR_SET_PWRON_PATH,      "---[PowerOnOffDisplay.c] PhnsetSetPwrOnOffDisplayByFileName: On path=%s, short=%d ---")
TRC_MSG(MMI_PHNSET_PWR_SET_PWROFF_PATH,     "---[PowerOnOffDisplay.c] PhnsetSetPwrOnOffDisplayByFileName: Off path=%s, short=%d ---")
TRC_MSG(MMI_PHNSET_ENTRY_PWRON_USER_VIEW,   "---[PowerOnOffDisplay.c] EntryPhnsetPwrOnOffUserView: On path=%s ---")
TRC_MSG(MMI_PHNSET_ENTRY_PWROFF_USER_VIEW,  "---[PowerOnOffDisplay.c] EntryPhnsetPwrOnOffUserView: Off path=%s ---")
TRC_MSG(MMI_PHNSET_ENTRY_PWR_USER_VIEW_PATH,"---[PowerOnOffDisplay.c] EntryPhnsetPwrOnOffUserView: path=%s ---")
TRC_MSG(MMI_PHNSET_PWR_SEL_FMGR_CALLBACK,   "---[PowerOnOffDisplay.c] PhnsetPwrOnOffSelectFmgrCallBack: path=%s, is_short=%d ---")
TRC_MSG(MMI_PHNSET_PWR_FWFROM_FMGR_CALLBACK,"---[PowerOnOffDisplay.c] PhnsetPwrOnOffForwardFromFmgr: path=%s, action=%d, is_short=%d ---")
TRC_MSG(MMI_PHNSET_PWR_USE_DEFAULT,         "---[PowerOnOffDisplay.c] PhnsetPwrOnOffUseDefault: On ID=%d, Off ID=%d ---")
/* Phone Setup Display Menu Service */
TRC_MSG(MMI_PHNSET_DISP_MENU_TRC_LINE,      "---[PhnsetDispMenuService.c] LINE -- %d ---")
/* Dual Mode switch */
TRC_MSG(MMI_DUALMODE_FILL_MSG_STRUCT,		"---[DualModeSwitch] MTPNP_PFAL_Fill_MSG_Struct : switch_case = %d ---")
TRC_MSG(MMI_DUALMODE_SWITCH_MODE_FAIL,		"---[DualModeSwitch] MTPNP_PFAL_Switch_Mode_Process_Fail : Start retry[%d] cur_switch_list.cur_step[%d] ---")
TRC_MSG(MMI_DUALMODE_SWITCH_MODE_FAIL_2,	"---[DualModeSwitch] MTPNP_PFAL_Switch_Mode_Process_Fail : retry_case[%d] ---")
TRC_MSG(MMI_DUALMODE_SWITCH_PROCESS,		"---[DualModeSwitch] MTPNP_PFAL_Switch_Mode_Process : cur_step[%d] expect_response[%d]---")
TRC_MSG(MMI_DUALMODE_SWITCH_PROCESS_MSGINFO,"---[DualModeSwitch] MTPNP_PFAL_Switch_Mode_Process : message[%d] msg_id[%d] dest_mod_id[%d]---")
TRC_MSG(MMI_DUALMODE_CFUN_RESULT,			"---[DualModeSwitch] cfun_state_rsp->result = %d ---")
TRC_MSG(MMI_DUALMODE_CFUN_FIRST_FAIL,		"---[DualModeSwitch] first fail and return ---")
TRC_MSG(MMI_DUALMODE_SEND_CFUN,				"---[DualModeSwitch] Send PRT_NW_CFUN_STATE_REQ ---")
TRC_MSG(MMI_DUALMODE_FAIL_RETRY_CASE,		"---[DualModeSwitch] Save retry_case = %d ---")
TRC_MSG(MMI_DUALMODE_SEND_UPDATE_REQ,		"---[DualModeSwitch] Send MSG_ID_MMI_SMU_SIM_STATUS_UPDATE_REQ ---")
TRC_MSG(MMI_DUALMODE_SEND_DM_TO_FLIGHT,		"---[DualModeSwitch] Send MSG_ID_MMI_SMU_DUAL_SIM_TO_FLIGHT_MODE_REQ ---")
TRC_MSG(MMI_DUALMODE_MSG_ZERO_CASE,			"---[DualModeSwitch] case 0 to MTPNP_AD_Switch_Mode_Rsp(1) ---")
/* Network Setup */
TRC_MSG(MMI_NETSET_GET_PLMN_LIST_REQ,       "---[NetworkSetup.c] NETSETGetPLMNListReq ---")
TRC_MSG(MMI_NETSET_GET_PLMN_LIST_RSP,       "---[NetworkSetup.c] NETSETGetPLMNListRsp ---")
TRC_MSG(MMI_NETSET_ABORT_PLMN_LIST_REQ,     "---[NetworkSetup.c] NETSETAbortPLMNListReq ---")
TRC_MSG(MMI_NETSET_ABORT_PLMN_LIST_TO_IDLE, "---[NetworkSetup.c] AbortGetPLMNListToIdle ---")
TRC_MSG(MMI_NETSET_SHOW_PLMN_LIST,          "---[NetworkSetup.c] EntryNETSETShowPlmnList ---")
TRC_MSG(MMI_NETSET_SET_BAND_REQ,            "---[NetworkSetup.c] NETSETSetBandSelectionReq ---")
TRC_MSG(MMI_NETSET_SET_BAND_RSP,            "---[NetworkSetup.c] NETSETSetBandSelectionRsp ---")
TRC_MSG(MMI_NETSET_GET_BAND_REQ,            "---[NetworkSetup.c] NETSETGetBandSelectionReq ---")
TRC_MSG(MMI_NETSET_GET_BAND_RSP,            "---[NetworkSetup.c] NETSETGetBandSelectionRsp ---")
TRC_MSG(MMI_NETSET_MSG_Q_IDX_ADD_ONE,       "---[NetworkSetup.c] NETSETMsgQueueIndexAddOne, Index:%d, Top:%d ---")
TRC_MSG(MMI_NETSET_MSG_Q_TOP_ADD_ONE,       "---[NetworkSetup.c] NETSETMsgQueueTopAddOne, Index:%d, Top:%d ---")
TRC_MSG(MMI_NETSET_MSG_Q_TOP_MINUS_ONE,     "---[NetworkSetup.c] NETSETMsgQueueTopMinusOne, Index:%d, Top:%d ---")
TRC_MSG(MMI_NETSET_MSG_Q_PROT_HDLR,         "---[NetworkSetup.c] NETSETMsgQueueProtocolHandler, Index:%d, Top:%d ---")
TRC_MSG(MMI_NETSET_MSG_Q_PUSH_EXEC,         "---[NetworkSetup.c] NETSETMsgQueuePush, Type:%d, Index=Top, Exec ---")
TRC_MSG(MMI_NETSET_MSG_Q_PUSH_ONLY_ONE_ADD, "---[NetworkSetup.c] NETSETMsgQueuePush, Type:%d, Only One, Add ---")
TRC_MSG(MMI_NETSET_MSG_Q_PUSH_ADD_RESTORE,  "---[NetworkSetup.c] NETSETMsgQueuePush, Type:%d, Add Restore ---")
TRC_MSG(MMI_NETSET_MSG_Q_PUSH_REPLACE_LAST, "---[NetworkSetup.c] NETSETMsgQueuePush, Type:%d, Replace Last ---")
TRC_MSG(MMI_NSS_APP_ICON_PATH,  "mmi_nss_generic_list_thumbnail_get_image_path info.image.data.path = %s, pos = %d ")
TRC_MSG(MMI_NSS_APP_ICON_TYPE,  "mmi_nss_list_thumbnail_set_displayable: NAME = %s, info.image.type = %d")
TRC_MSG(MMI_NSS_APP_GET_INFOR,"mmi_nss get apps infor: APPID = %d, ICON = %d, cf= %d;SOUND = %d, cf = %d; SCRN = %d, cf = %d; NCENTER= %d, cf = %d; ALERT= %d, cf = %d")
TRC_MSG(MMI_NSS_APP_SET_INFOR,"mmi_nss set apps infor: APPID = %d, ICON = %d, cf= %d;SOUND = %d, cf = %d; SCRN = %d, cf = %d; NCENTER= %d, cf = %d; ALERT= %d, cf = %d; ret = %d")