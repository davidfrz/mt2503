/*****************************************************************************
*  Copyright Statement:
*  --------------------
*  This software is protected by Copyright and the information contained
*  herein is confidential. The software may not be copied and the information
*  contained herein may not be used or disclosed except with the written
*  permission of MediaTek Inc. (C) 2008
*
*  BY OPENING THIS FILE, BUYER HEREBY UNEQUIVOCALLY ACKNOWLEDGES AND AGREES
*  THAT THE SOFTWARE/FIRMWARE AND ITS DOCUMENTATIONS ("MEDIATEK SOFTWARE")
*  RECEIVED FROM MEDIATEK AND/OR ITS REPRESENTATIVES ARE PROVIDED TO BUYER ON
*  AN "AS-IS" BASIS ONLY. MEDIATEK EXPRESSLY DISCLAIMS ANY AND ALL WARRANTIES,
*  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE IMPLIED WARRANTIES OF
*  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE OR NONINFRINGEMENT.
*  NEITHER DOES MEDIATEK PROVIDE ANY WARRANTY WHATSOEVER WITH RESPECT TO THE
*  SOFTWARE OF ANY THIRD PARTY WHICH MAY BE USED BY, INCORPORATED IN, OR
*  SUPPLIED WITH THE MEDIATEK SOFTWARE, AND BUYER AGREES TO LOOK ONLY TO SUCH
*  THIRD PARTY FOR ANY WARRANTY CLAIM RELATING THERETO. MEDIATEK SHALL ALSO
*  NOT BE RESPONSIBLE FOR ANY MEDIATEK SOFTWARE RELEASES MADE TO BUYER'S
*  SPECIFICATION OR TO CONFORM TO A PARTICULAR STANDARD OR OPEN FORUM.
*
*  BUYER'S SOLE AND EXCLUSIVE REMEDY AND MEDIATEK'S ENTIRE AND CUMULATIVE
*  LIABILITY WITH RESPECT TO THE MEDIATEK SOFTWARE RELEASED HEREUNDER WILL BE,
*  AT MEDIATEK'S OPTION, TO REVISE OR REPLACE THE MEDIATEK SOFTWARE AT ISSUE,
*  OR REFUND ANY SOFTWARE LICENSE FEES OR SERVICE CHARGE PAID BY BUYER TO
*  MEDIATEK FOR SUCH MEDIATEK SOFTWARE AT ISSUE.
*
*  THE TRANSACTION CONTEMPLATED HEREUNDER SHALL BE CONSTRUED IN ACCORDANCE
*  WITH THE LAWS OF THE STATE OF CALIFORNIA, USA, EXCLUDING ITS CONFLICT OF
*  LAWS PRINCIPLES.  ANY DISPUTES, CONTROVERSIES OR CLAIMS ARISING THEREOF AND
*  RELATED THERETO SHALL BE SETTLED BY ARBITRATION IN SAN FRANCISCO, CA, UNDER
*  THE RULES OF THE INTERNATIONAL CHAMBER OF COMMERCE (ICC).
*
*****************************************************************************/

/*****************************************************************************
 *
 * Filename:
 * ---------
 *   custom_FeatureConfig.h
 *
 * Project:
 * --------
 *   Maui_Software
 *
 * Description:
 * ------------
 *   This Module defines feature-related configurations.
 *
 * Author:
 * -------
 *  mcu\custom\System\BB_Folder Configuration Template
 *
 *============================================================================
 *             HISTORY
 * Below this line, this part is controlled by PVCS VM. DO NOT MODIFY!!
 *------------------------------------------------------------------------------
 * $Revision$
 * $Modtime$
 * $Log$
 *
 * 04 08 2015 dongming.li
 * [MAUI_03532835] [Tiny System]Tiny system slim
 * .support thor61/aster02A after tiny system slim
 *
 * 07 02 2014 hung-wen.hsieh
 * [MAUI_03508226] [Wearable_Phase2][Tiny System]Neet long time to repose the touch event after exiting H mode
 * 	.
 *
 * 05 26 2014 money.kang
 * [MAUI_03500087] [SystemService][Auto-Gen][scatGen][Request For Design Change]support Tiny System AAPMC
 * copy from CQ attachment
 * request from Yinli Liang.
 *
 * 05 16 2014 money.kang
 * [MAUI_03500087] [SystemService][Auto-Gen][scatGen][Request For Design Change]support Tiny System AAPMC
 * request Yinli Liang
 * file as attachment.
 *
 * 04 26 2013 money.kang
 * [MAUI_03393160] [Create New Project][PMA used]create new customer folder for 60A project
 * request form ivan and Chun-Hung Wu.
 *
 * 12 26 2012 money.kang
 * [MAUI_03300687] [MakeFile] [New Flavor Request]COBRAS60A_DEMO_GPRS(12864_COSMOS_HVGA)...etc. custom system folder
 * add custom system folder.
 *
 * 12 24 2012 money.kang
 * [MAUI_03298709] [MakeFile] [New Flavor Request] Clone customer\system folder for COBRAS60A_DEMO_GPRS(COSMOS_JAVA)
 * cloned from 11B\mcu\custom\system\COBRAS60A_DEMO_BB.
 *
 * 11 21 2012 ke-ting.chen
 * [MAUI_03271527] [VIVA] Turn off auto check-in
 * .
 *
 * 11 21 2012 ke-ting.chen
 * [MAUI_03271527] [VIVA] Turn off auto check-in
 * .
 *
 * 11 07 2012 ke-ting.chen
 * [MAUI_03258113] [Compression] Phase in code compression MT6260 support
 * .
 *
 * 10 18 2012 ke-ting.chen
 * [MAUI_03241322] [ZIMAGE] Phase in ZIMAGE_CONTENT_POLICY and phase out ZIMAGE_FAVOR_ROM
 * Add VIVA veneer reserve size configuration
 * .
 *
 * 05 29 2012 qmei.yang
 * [MAUI_03188950] [SystemService][Auto-Gen][Internal Refinement] Phase-in BL AAPMC
 * .
 *
 * 05 28 2012 larry.hsu
 * [MAUI_03192893] [SDS] remove hard-coded custom value for 11B
 * <saved by Perforce>
 *
 * 05 24 2012 timon.lu
 * [MAUI_03190893] [System Service][New Feature] Phase in MBA with compression
 * .
 *
 * 05 17 2012 ke-ting.chen
 * [MAUI_03187326] [MT6250D] Phase in MT6250D SS slim approaches to 11B
 * Phase in BOOT_ZIMAGE
 * .
 *
 * 04 25 2012 ke-ting.chen
 * [MAUI_03174656] [ALICE] Phase in ALICE to 11B
 * .
 *
 * 11 03 2011 ken.lin
 * [MAUI_03054612] [TST][USB] Bootup trace with USB
 * [MAUI_03054612] [TST][USB] Bootup trace with USB
 * .
 *
 * 10 20 2011 claudia.lo
 * [MAUI_03059031] [SystemService][custom][Internal Refinement] Refine custom_FeatureConfig.h MAX_SIZE and SDS comments to add more restrictions
 * .
 *
 * 09 13 2011 carlos.yeh
 * [MAUI_03026689] [Need Patch] [Sanity Fail] Sanity Test of 11B_LION52_V5_12864_GPRS(SEC_REGRESSION).W11.38 is Fail!!
 * .
 *
 * 09 02 2011 claudia.lo
 * [MAUI_03018782] [SystemService][Auto-Gen][CFG Gen][Scatter Gen][Sys Gen][Request for New Feature] Move memory-independent feature configurations to custom_FeatureConfig.h
 * .
 *
 *
 *
 *------------------------------------------------------------------------------
 * Upper this line, this part is controlled by PVCS VM. DO NOT MODIFY!!
 *============================================================================
 ****************************************************************************/

#ifndef __CUSTOM_FEATURECONFIG_H__
#define __CUSTOM_FEATURECONFIG_H__

/*
 ****************************************************************************
 [README , VERY IMPORTANT NOTICE]
 --------------------------------
 After user configured this C header file, not only C compiler compile it but
 also auto-gen tool parse user's configure setting.
 Here are recommend configure convention to make both work fine.

 1. All configurations in this file form as #define MACRO_NAME MACRO_VALUE format.
    Note the #define must be the first non-space character of a line

 2. To disable the optional configurable item. Please use // before #define,
    for example: //#define MEMORY_DEVICE_TYPE

 3. Please don't use #if , #elif , #else , #endif conditional macro key word here.
    Such usage might cause compile result conflict with auto-gen tool parsing result.
    Auto-Gen tool will show error and stop.
    3.1.  any conditional keyword such as #if , #ifdef , #ifndef , #elif , #else detected.
          execpt this #ifndef __CUSTOM_FEATURECONFIG_H__
    3.2.  any duplicated MACRO_NAME parsed. For example auto-gen tool got
          2nd MEMORY_DEVICE_TYPE macro value.
 ****************************************************************************
*/

/*
 ****************************************************************************
 [NOTE]
 --------------------------------
 Add include header files here.
 Please note that the include file path needs to exist in
 custom/bootloader/fota modules under all cases.
 ****************************************************************************
*/
#include "kbd_table.h"
#include "bl_custom.h"
#include "kal_general_types.h"
#include "dcl.h"


/*
 ****************************************************************************
 Part 1: Following definitions are used to configure the VI sizes

         [Makefile option] ZIMAGE_SUPPORT = TRUE
                           BOOT_ZIMAGE_SUPPORT = TRUE
                           ALICE_SUPPORT = TRUE
                           DCM_COMPRESSION_SUPPORT = TRUE

         [Configurations]
         CONFIG_ZIMAGE_MAX_COMPRESSED_SIZE - defines the maximum ROM space allocated
                                             for ZIMAGE compressed binary
         CONFIG_BOOT_ZIMAGE_MAX_COMPRESSED_SIZE - defines the maximum ROM space allocated
                                                  for BOOT_ZIMAGE compressed binary
         CONFIG_ALICE_MAX_COMPRESSED_SIZE - defines the maximum ROM space allocated
                                            for ALICE compressed binary
         CONFIG_DCMP_MAX_COMPRESSED_SIZE - defines the maximum ROM space allocated
                                           for DYNAMICE_COMP_CODE compressed binary

         Not that configurations below only take effect when MBA + ZIMAGE is enable

         CONFIG_LANG_PACK_ROM_DECOMPRESSED_SIZE - defines the maximum RAM space allocated
                                                  for langpack decompressed binary
         CONFIG_LANG_PACK_ROM_MAX_COMPRESSED_SIZE - defines the maximum ROM space allocated
                                                  for langpack compressed binary
         CONFIG_CUSTPACK_ROM_DECOMPRESSED_SIZE - defines the maximum RAM space allocated
                                                  for custpack decompressed binary
         CONFIG_CUSTPACK_ROM_MAX_COMPRESSED_SIZE - defines the maximum ROM space allocated
                                                  for custpack compressed binary

         [VERY IMPORTANT NOTICE]
         =======================
         If the setting is invalid. An auto mechanism will try to calculate valid
         values and replace the settings.

   Low
   +------------------+
   |      ROM         |
   |                  |
   +------------------+
   |     VIVA         |
   |                  |
   +------------------+   <-----  FS_BASE_ADDRESS
   |       FS         |
   |                  |
   +------------------+
   High

   When MBA enable

      Low
   +------------------+
   |      ROM         |
   |                  |
   +------------------+
   |    langpack      |
   |                  |
   +------------------+
   |    custpack      |
   |                  |
   +------------------+
   |      VIVA        |
   |                  |
   +------------------+   <-----  FS_BASE_ADDRESS
   |       FS         |
   |                  |
   +------------------+
   High


 ****************************************************************************
*/
#define CONFIG_ZIMAGE_MAX_COMPRESSED_SIZE      0x00080000
#define CONFIG_BOOT_ZIMAGE_MAX_COMPRESSED_SIZE 0x00001B80
#define CONFIG_ALICE_MAX_COMPRESSED_SIZE       0x00098000
#define CONFIG_DCMP_MAX_COMPRESSED_SIZE        0x00004F00

#define CONFIG_LANG_PACK_ROM_DECOMPRESSED_SIZE      0x3F800
#define CONFIG_LANG_PACK_ROM_MAX_COMPRESSED_SIZE    0x12000
#define CONFIG_CUSTPACK_ROM_DECOMPRESSED_SIZE       0xA9800
#define CONFIG_CUSTPACK_ROM_MAX_COMPRESSED_SIZE     0x81000

#define FAST_BOOT_LIMIT_ZIMAGE_MAX_DECOMPRESSED_SIZE  0x64000
//#define CONFIG_VIVA_VENEER_RESERVE_SIZE_RATIO 0.05
//#define CONFIG_VIVA_MIN_VENEER_RESERVE_SIZE 5120
//#define CONFIG_VIVA_MAX_VENEER_RESERVE_SIZE 102400
/*
 ****************************************************************************
 Part 2: The following definitions are used to configure flash memory arrangement
         for FOTA enabled image.

         [Makefile option] FOTA_ENABLE = FOTA_DM

         [Document] FOTA customization document.doc
         			http://dms.mediatek.inc:80/webtop/drl/objectId/0900006f80126799

         [Configurations]
         CONFIG_FOTA_UE_FLASH_SPACE - the maximum available flash memory size
                                      for update engine image
         CONFIG_FOTA_NAND_MAP_TABLE_SIZE - the maximum mapping table size for update engine
                                           to manage NAND flash image.
         CONFIG_FOTA_PACKAGE_BLOCK_NUMBER - the size of NOR flash area
                                            for update package and update state record
         CONFIG_FOTA_PACKAGE_AREA_SIZE - the size of NAND flash area
                                         for update package and update state record

         [VERY IMPORTANT NOTICE]
         =======================
         CONFIG_FOTA_UE_FLASH_SPACE is used to configure flash memory arrangement
         for FOTA update agent image. It must be the same as that specified in FUE scatter file.
         Otherwise, error may occur during update agent image linking process. Besides,
         these values would be transfered into a block aligned setting, FOTA_UE_FLASH_SPACE_SIZE,
         in custom_img_config.h

         CONFIG_FOTA_PACKAGE_BLOCK_NUMBER and CONFIG_FOTA_PACKAGE_AREA_SIZE are used to
         configure the reserved flash area for update purpose. Without enhanced single bank support,
         the reserved flash space would share the same bank with FAT. Moreover,
         the blocks within the reserved area must have the same size.

         [REMINDER]
         =======================
         The reserved block space is not equal to the available space for update package storage,
         since some flash space is used for management and update status record purpose.

         NOR flash vailable update package storage space:
         ( CONFIG_FOTA_PACKAGE_BLOCK_NUMBER - 2 ) x ( block size - 4KB )

         NAND flash vailable update package storage space:
         ( (CONFIG_FOTA_PACKAGE_AREA_SIZE/block_size) - 2 ) x ( block size - 4KB )

 ****************************************************************************
*/
#define CONFIG_FOTA_UE_FLASH_SPACE        0x60000
#define CONFIG_FOTA_NAND_MAP_TABLE_SIZE   0x800
#define CONFIG_FOTA_PACKAGE_BLOCK_NUMBER  4
#define CONFIG_FOTA_PACKAGE_AREA_SIZE     0x200000


/*
 ****************************************************************************
 Part 3: The following definitions are used to configure flash memory arrangement
         for SDS secure data storage region.

         [Makefile option] SDS_SUPPORT = TRUE

         [Document] Secure_Data_Storage_Introduction_Customer.pptx
                    http://dms.mediatek.inc:80/webtop/drl/objectId/0900006f801671f5

         [Configurations]
         SDS_MAX_SIZE - The the total size of the secure storage.
                        The secure data storage region will be placed behind the file system
                        so that it will not be erased unexpectedly. This max size specifies
                        the size of flash memory that secure storage can occupy.
                        The total size must be multiple of block size.
                        In NAND case, the SDS_MAX_SIZE should be specified by
                        (the size of flash memory that secure storage can occupy +
                         SDS_RESERVED_SIZE_FOR_BBM)
         SDS_RGN_NUM - The number of sub-regions in secure storage region.
         SDS_RESERVED_SIZE_FOR_BBM - The size of reserved blocks used for bad block management
                                     in NAND flash. It should be set as 0 for other types
                                     of flash devices (NOR/S-F/eMMC)

 ****************************************************************************
*/
//#define SDS_MAX_SIZE  	           0x80000
//#define SDS_RGN_NUM 	           2
//#define SDS_RESERVED_SIZE_FOR_BBM  0x0


/*
 ****************************************************************************
 Part 4: The following definitions are used to enable Root Key Management feature on secure chip.

         [Makefile option] N/A

         [Document] N/A

         [Configurations]
         ROOT_KEY_MANAGEMENT_ENABLE - Uncomment this configuration to enable Root Key Management.

         [VERY IMPORTANT NOTICE]
         =======================
         It can only be enabled on SV5 secure chip project.

 ****************************************************************************
*/
//#define ROOT_KEY_MANAGEMENT_ENABLE


/*
 ****************************************************************************
 Part 5: This is an optional step specially for Internal Project ONLY!
         By default, Scatter File will bound CODE BINARY as FS BASE ADDRESS.
         And bound the RAM Limit as Memory Density.
         For specific purpose, users are able to manually configure a smaller
         EXPECTED RAM LIMIT and EXPECTED CODE LIMIT here.

         [Makefile option] N/A

         [Document] N/A

         [Configurations]
         PROJECT_EXPECTED_RAM_LIMIT - Specify expected RAM limit when the physical RAM boundary
                                      is larger than expected.
         PROJECT_EXPECTED_CODE_LIMIT - Specify expected CODE/ROM limit when
                                       the expected ROM boundary is smaller than FS BASE.
         PROJECT_EXPECTED_RAM_LIMIT_NFB - Specify the expected RAM limit when
                                          the physical RAM boundary is larger than expected
                                          on NAND_FLASH_BOOTINIG/EMMC_BOOTING projects.

         [VERY IMPORTANT NOTICE]
         =======================
         Recommend to comment out these configurations and use the default setting.

         PROJECT_EXPECTED_RAM_LIMIT and PROJECT_EXPECTED_CODE_LIMIT are only for
         Generic NOR-XIP configuration.
         For NAND+DRAM case, please set PROJECT_EXPECTED_RAM_LIMIT_NFB as RAM boundary.

         Please note that the manually configured value cannot exceeded physical density
         and cannot overlap with FAT.
         DO NOT set PROJECT_EXPECTED_CODE_LIMIT if the expected CODE/ROM limit is
         the same as FS BASE!!

 ****************************************************************************
*/
//#define PROJECT_EXPECTED_RAM_LIMIT
//#define PROJECT_EXPECTED_CODE_LIMIT
//#define PROJECT_EXPECTED_RAM_LIMIT_NFB


/*
 ****************************************************************************
 Part 6: The following definitions define the upper limit of each binary.

         [Makefile option] NAND_FLASH_BOOTING = ONDEMAND or
                           EMMC_BOOTING = ONDEMAND or
                           FOTA_ENABLE = FOTA_DM or
                           MULTIPLE_BINARY_FILES = TRUE

         [Document] Demand_Paging_User_Guide_V1.2.doc
                    http://dms.mediatek.inc:80/webtop/drl/objectId/0900006f80183188
                    FOTA customization document.doc
         			http://dms.mediatek.inc:80/webtop/drl/objectId/0900006f80126799
         			Multiple Bin Architecture (MBA) Standard Operating Procedure.doc
         			http://dms.mediatek.inc:80/webtop/drl/objectId/0900006f8019993e

         [Configurations]
         MAX_ROM_SIZE - Specify the binary size upper limit of ROM for
                        FOTA/Multi-Bin partial update.
         MAX_SECONDARY_ROM_SIZE - Specify the binary size upper limit of SECONDARY_ROM for
                                  FOTA/Multi-Bin partial update.
         MAX_DEMAND_PAGING_ROM0_SIZE - Specify Demand Paging binary size upper limit.
                                       This value, if defined, will be used as
                                       the upper bound of DEMAND_PAGING_ROM0 region
                                       when NAND_FLASH_BOOTING = ONDEMAND or
                                       EMMC_BOOTING = ONDEMAND.
                                       This value will also be used as partial update
                                       reserved size for FOTA and Multi-Bin.
         MAX_LANG_PACK_ROM_SIZE - Specify the binary size upper limit of LANG_PACK_ROM
                                  for Multi-Bin partial update.
         MAX_CUSTPACK_ROM_SIZE - Specify the binary size upper limit of CUSTPACK_ROM
                                 for Multi-Bin partial update.
         MAX_BL_SIZE - Specify the binary size upper limit of bootloader reserved sizes
         MAX_EXT_BL_SIZE - Specify the binary size upper limit of ext_bootloader reserved sizes

         MAX_TS_ROM1_SIZE - Specify the binary size upper limit of TS_ROM1 reserved sizes
         MAX_TS_ROM2_SIZE - Specify the binary size upper limit of TS_ROM2 reserved sizes
         MAX_TS_MM_DUMP_SIZE - Specify the reserved size upper limit for TINY_SYS memory dump area

         [VERY IMPORTANT NOTICE]
         =======================
         Please note that MAX_DEMAND_PAGING_ROM0_SIZE, MAX_LANG_PACK_ROM_SIZE,
         and MAX_CUSTPACK_ROM_SIZE should be multiples of MB when
         NAND_FLASH_BOOTING/EMMC_BOOTING = ONDEMAND.
         This is for page table setting.

 ****************************************************************************
*/
//#define MAX_ROM_SIZE
//#define MAX_SECONDARY_ROM_SIZE
//#define MAX_DEMAND_PAGING_ROM0_SIZE
//#define MAX_LANG_PACK_ROM_SIZE
//#define MAX_CUSTPACK_ROM_SIZE
//#define MAX_BL_SIZE 
//#define MAX_EXT_BL_SIZE 
//#define MAX_TS_ROM1_SIZE 
//#define MAX_TS_ROM2_SIZE 
//#define MAX_TS_ROM3_SIZE
//#define MAX_TS_ROM3_EMI_SIZE
//#define MAX_TS_MM_DUMP_SIZE 

/*
 ****************************************************************************
 Part 7: The following definitions define Demand Paging related configurations.

         [Makefile option] NAND_FLASH_BOOTING = ONDEMAND or
                           EMMC_BOOTING = ONDEMAND

         [Document] Demand_Paging_User_Guide_V1.2.doc
                    http://dms.mediatek.inc:80/webtop/drl/objectId/0900006f80183188

         [Configurations]
         DEMAND_PAGING_POOL_SIZE - Specify the size of Demand Paging pool.

 ****************************************************************************
*/
//#define CONFIG_DEMAND_PAGE_SHARE_POOL_SIZE


/*
 ****************************************************************************
 Part 8: Define USB-Download related configurations

         [Makefile option] USB_DOWNLOAD_IN_BL != NONE

         [Document] N/A

         [Configurations]
         USBDL_KEY_POSITION - USB Download Key Configure. The key ID is defined in kbd_table.h
                              To disable USBDL by key press, set it as NO_USBDL_KEY.
         USBDL_AUTO_TIMEOUT - USB Download Auto Mode Configure (ms).
                              To disable USBDL by key press, set it NO_USBDL_AUTO_TIMEOUT.
                              Maximum value is 65535.
         USBDL_HOLDING_MODE - USB Download Holding mode Configure. When holding mode is enabled,
                              Bootloader will wait for USB connection forever
                              once USBDL is triggered. Do not enable this option
                              when USBDL_AUTO_TIMEOUT is not NO_USBDL_AUTO_TIMEOUT.

 ****************************************************************************
*/
//#define USBDL_KEY_POSITION
//#define USBDL_AUTO_TIMEOUT
//#define USBDL_HOLDING_MODE


/*
 ****************************************************************************
 Part 9: Define configurations for KAL_RECORD_BOOTUP_LOG & KEYPAD_DEBUG_TRACE
            & all time memory dump

         [Makefile option] KAL_RECORD_BOOTUP_LOG = TRUE
                           or KEYPAD_DEBUG_TRACE = TRUE

         [Document] MAUI Init Debugging Trace.ppt
                    http://dms.mediatek.inc:80/webtop/drl/objectId/0900006f80038f69

         [Configurations]
         DEBUG_PORT - Define the port of boot-up trace and all time memory dump.
         DEBUG_BAUDRATE - Baudrate of boot-up trace and all time memory dump.

 ****************************************************************************
*/
//#define DEBUG_PORT
//#define DEBUG_BAUDRATE


/*
 ****************************************************************************
 Part 10: Define Bootloader and Fast META related configurations

         [Makefile option] N/A

         [Document] N/A

         [Configurations]
         BOOTLOADER_DEBUG_LEVEL - Define what kinds of BL debugging messages can be dumped to UART.
         FAST_META_KEY_POSITION - Define USB Fast Meta key. When pressing Fast Meta Key,
                                  Bootloader will not try to open USB COM port but switch to
                                  USB Meta mode directly in order to speed up
                                  the readiness of Meta mode.

 ****************************************************************************
*/
//#define BOOTLOADER_DEBUG_LEVEL
//#define FAST_META_KEY_POSITION

/*
 ****************************************************************************
 Part11: Following definitions are used to configure if resource BIN need to be compressed.

         [Makefile option] MULTIPLE_BINARY_FILES = TRUE, ZIMAGE_SUPPORT = TRUE
                           Can only enable when SV5+MBA+Zimage switch on

         [Document] MBA SOP.doc
                    http://dms.mediatek.inc:80/webtop/drl/objectId/0900006f80322fcf
         [Configurations]
         LANG_PACK_ROM_COMPRESS - Decide if langpack should be compressed or not
         CUSTPACK_ROM_COMPRESS  - Decide if custpack should be compressed or not

         Compress = 1
         Don't compress = 0
 ****************************************************************************
*/
#define LANG_PACK_ROM_COMPRESS  0
#define CUSTPACK_ROM_COMPRESS   0


#endif /* __CUSTOM_FEATURECONFIG_H__ */
