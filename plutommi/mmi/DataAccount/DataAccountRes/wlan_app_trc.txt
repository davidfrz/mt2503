[APP NAME] = WLAN
[SCOPE] = PLUTO
[MODULE] = MOD_MMI_CONN_APP

/* DataAccountUI.c */
TRC_MSG(MMI_WLAN_INIT_RESULT, "[WLAN UI] wlan_init result = %d, num = %d")
TRC_MSG(MMI_WLAN_INIT_PROFILE, "[WLAN UI] wlan_init profile id = %d, priority = %d, i = %d")
TRC_MSG(MMI_WLAN_INIT_NUM, "[WLAN UI] wlan_init profile num: ad_hoc = %d, infra = %d")
TRC_MSG(MMI_WLAN_WAPI_MODE, "[WLAN UI] wlan_init wapi_mod = %d")
TRC_MSG(MMI_WLAN_ENTRY_STATUS, "[WLAN UI] entry_wlan_wizard_new status = %d")
TRC_MSG(MMI_WLAN_IS_TETHERING_IN_SWITCHING, "[WLAN UI] WLAN tethering - In switching: [%d]")
TRC_MSG(MMI_WLAN_TURN_OFF_TETHERING, "[WLAN UI] Call srv_tethering_stop to turn off tethering")
TRC_MSG(MMI_WLAN_RECEIVE_TURN_OFF_TETHERING_CB, "[WLAN UI] Receive notification from tethering. Result - [%d]")
TRC_MSG(MMI_WLAN_SCAN_JOB, "[WLAN UI] entry_find_network scan job = %d")
TRC_MSG(MMI_WLAN_EVENT_ID, "[WLAN UI] evnet callback evt_id = %d")
TRC_MSG(MMI_WLAN_CONN_EVENT, "[WLAN UI] connect_event success id = %d")
TRC_MSG(MMI_WLAN_CONN_EVENT_ERR, "[WLAN UI] ===> Connect to AP failed!!")
TRC_MSG(MMI_WLAN_SAVE_CONN_AP, "[WLAN UI] save_connected_ap()")
TRC_MSG(MMI_WLAN_STORE_PROF, "[WLAN UI] store_add_prof() add = %d")
TRC_MSG(MMI_WLAN_CONN_APP_PROF, "[WLAN UI] ===> Send connect request to Dtcnt SRV. Result: %d Profile ID: %d SSID's length: %d Priority: %d")
TRC_MSG(MMI_WLAN_CONNECT_ABORT, "[WLAN UI] ===> Connection has been abort by user. Total of abort: %d")
TRC_MSG(MMI_WLAN_NETWORK_DISCONN, "[WLAN UI] network_disconnect() return = %d")
TRC_MSG(MMI_WLAN_DELETE_PROF, "[WLAN UI] network_delete_yes() index = %d, prof_id = %d")
TRC_MSG(MMI_WLAN_CHANGE_PRIO, "[WLAN UI] list_change_priority() old prio = %d, new prio = %d")
TRC_MSG(MMI_WLAN_PROF_MATCH, "[WLAN UI] profile_matched_searched() status = %d, search = %d")    
TRC_MSG(MMI_WLAN_POWER_SAVE_MODE_IN_SERVICE, "[WLAN UI] mmi_wlan_entry_power_save_mode() power mode in srv = %d")
TRC_MSG(MMI_WLAN_RESULT_OF_SET_POWER_SAVE_MODE, "[WLAN UI] mmi_wlan_power_save_mode_ok() rzlt of set power mode = %d")
TRC_MSG(MMI_WLAN_RESULT_OF_SET_POWER_SAVE_MODE_CB, "[WLAN UI] mmi_wlan_set_power_mode_cb_hdlr() rzlt of set power mode in callback= %d")    
TRC_MSG(MMI_WLAN_POWER_SAVE_MODE_TO_SET, "[WLAN UI] mmi_wlan_power_save_mode_ok() power save mode to set = %d")
TRC_MSG(MMI_WLAN_EM_SET_EAP_MODE, "[WLAN UI] mmi_em_select_wlan_mode() set EAP mode as [%d]")
TRC_MSG(MMI_WLAN_RESELECT_STATUS, "[WLAN UI] mmi_wlan_ap_reselect_start status = %d")
TRC_MSG(MMI_WLAN_RESELECT_SCAN_JOB, "[WLAN UI] mmi_wlan_ap_reselect_start scan job = %d")
TRC_MSG(MMI_WLAN_RESELECT_AP, "[WLAN UI] mmi_wlan_reselect_valid_ap num of ap = %d")
TRC_MSG(MMI_WLAN_RESELECT_AP_INDEX, "[WLAN UI] mmi_wlan_reselect_connect index of ap = %d")
TRC_MSG(MMI_WLAN_NO_AVAI_AP, "[WLAN UI] no available access point!")
TRC_MSG(MMI_WLAN_RESELECT_SUCC, "[WLAN UI] reselect access point succ!")
TRC_MSG(MMI_WLAN_NETWORK_CONN, "[WLAN UI] find_network_connect() step = %d, id = %d")
TRC_MSG(MMI_WLAN_EDIT_SAVE, "[WLAN UI] edit_save_yes() insert = %d")
TRC_MSG(MMI_WLAN_ALWAYS_ASK_CONN, "[WLAN UI] always_ask_connnect() status = %d")
TRC_MSG(MMI_WLAN_SIGNAL_LEVEL, "[WLAN UI] signal_level_icon() status = %d")
TRC_MSG(MMI_WLAN_OPT_OFF, "[WLAN UI] wizard_option_off() status = %d, return = %d")
TRC_MSG(MMI_WLAN_OPT_ON, "[WLAN UI] wizard_option_on() status = %d")
TRC_MSG(MMI_WLAN_WIZARD_CONN, "[WLAN UI] wizard_connect() status = %d")
TRC_MSG(MMI_WLAN_CONNECT_IND_EVENT, "[WLAN UI] [CONN_IND]connect_ind_event_hdlr(). Total of connections: [%d] In selection proc: [%d]")
TRC_MSG(MMI_WLAN_DISCONNECT_IND_EVENT, "[WLAN UI] ===> Receive disconnect event. Total of connections: %d Is aborted by user: %d")
TRC_MSG(MMI_WLAN_SCAN_EVENT, "[WLAN UI] scan_event_hdlr() result = %d")
TRC_MSG(MMI_WLAN_DEINIT_EVENT, "[WLAN UI] deinit_event_hdlr() - result [%d]")
TRC_MSG(MMI_WLAN_IPADDR_UPDATE_EVENT, "[WLAN UI] === EVT_ID_SRV_DTCNT_WLAN_IPADDR_UPDATE ===")
TRC_MSG(MMI_WLAN_AP_INFO_EVENT, "[WLAN UI] ap_info_event_hdlr()")
TRC_MSG(MMI_WLAN_IPADDR_CONFLICT_EVENT, "[WLAN UI] ipaddr_conflict_event_hdlr()")
TRC_MSG(MMI_WLAN_IPADDR_QUERY_EVENT, "[WLAN UI] ipaddr_query_event_hdlr()")
TRC_MSG(MMI_WLAN_DISCONNECT_EVENT, "[WLAN UI] disconn_event_hdlr()")
TRC_MSG(MMI_WLAN_IPADDR_QUERY_INFO, "[WLAN UI] ipaddr_query_event_hdlr() ap=%x, dhcp=%d")
TRC_MSG(MMI_WLAN_SRV2APP_PROFILE_CONVERT_CA, "[WLAN UI] srv2app_profile_convert cert id = %d")
TRC_MSG(MMI_WLAN_SRV2APP_PROFILE_CONVERT_USER, "[WLAN UI] srv2app_profile_convert user cert id = %d")
TRC_MSG(MMI_WLAN_EVT_WLAN_ACTIVE, "[WLAN UI] === EVT_ID_SRV_DTCNT_WLAN_ACTIVE ===")
TRC_MSG(MMI_WLAN_EVT_WLAN_INACTIVE, "[WLAN UI] === EVT_ID_SRV_DTCNT_WLAN_INACTIVE ===")
TRC_MSG(MMI_WLAN_EVT_WLAN_INIT_RES_IND, "[WLAN UI] === EVT_ID_SRV_DTCNT_WLAN_INIT_RES_IND ===")
TRC_MSG(MMI_WLAN_EVT_WLAN_DEINIT_RES_IND, "[WLAN UI] === EVT_ID_SRV_DTCNT_WLAN_DEINIT_RES_IND ===")
TRC_MSG(MMI_WLAN_EVT_WLAN_CONN_RES_IND, "[WLAN UI] === EVT_ID_SRV_DTCNT_WLAN_CONN_RES_IND ===")
TRC_MSG(MMI_WLAN_EVT_WLAN_CONN_IND, "[WLAN UI] === EVT_ID_SRV_DTCNT_WLAN_CONN_IND ===")
TRC_MSG(MMI_WLAN_EVT_WLAN_DISC_RES_IND, "[WLAN UI] === EVT_ID_SRV_DTCNT_WLAN_DISC_RES_IND ===")
TRC_MSG(MMI_WLAN_EVT_WLAN_DISC_IND, "[WLAN UI] === EVT_ID_SRV_DTCNT_WLAN_DISC_IND ===")
TRC_MSG(MMI_WLAN_EVT_WLAN_SCAN_RES_IND, "[WLAN UI] === EVT_ID_SRV_DTCNT_WLAN_SCAN_RES_IND ===")
TRC_MSG(MMI_WLAN_EVT_WLAN_IPADDR_CHANGE_QRY, "[WLAN UI] === EVT_ID_SRV_DTCNT_WLAN_IPADDR_CHANGE_QRY ===")
TRC_MSG(MMI_WLAN_EVT_WLAN_IPADDR_UPDATE, "[WLAN UI] === EVT_ID_SRV_DTCNT_WLAN_IPADDR_UPDATE ===")
TRC_MSG(MMI_WLAN_EVT_WLAN_CURR_AP_INFO, "[WLAN UI] === EVT_ID_SRV_DTCNT_WLAN_CURR_AP_INFO ===")
TRC_MSG(MMI_WLAN_EVT_WLAN_IPADDR_CONFLICT_IND, "[WLAN UI] === EVT_ID_SRV_DTCNT_WLAN_IPADDR_CONFLICT_IND ===")
TRC_MSG(MMI_WLAN_EVT_WLAN_CHIP_INVALID, "[WLAN UI] === EVT_ID_SRV_DTCNT_WIFI_CHIP_INVALID ===")
TRC_MSG(MMI_WLAN_EVT_PROV_IND, "[WLAN UI] === EVT_ID_SRV_DTCNT_PROV_IND ===")
TRC_MSG(MMI_WLAN_EVT_PROV_INSTALL_RES_IND, "[WLAN UI] === EVT_ID_SRV_DTCNT_PROV_INSTALL_RES_IND ===")
TRC_MSG(MMI_WLAN_EVT_PROV_DONE_IND, "[WLAN UI] === EVT_ID_SRV_DTCNT_PROV_DONE_IND ===")
TRC_MSG(MMI_WLAN_AFTER_RECEIVE_SCAN_RES_RSP, "[WLAN UI] Scan result: %d | AP number: %d")
TRC_MSG(MMI_WLAN_AUTO_CONN_PRE_START, "[WLAN UI][Auto Conn] Pre-Condition Wlan status - %d")
TRC_MSG(MMI_WLAN_AUTO_CONN_CHECK_SCAN_RES, "[WLAN UI][Auto Conn] Operator network [Saved: %d] [Found: %d] | [Saved AP Found: %d]")
TRC_MSG(MMI_WLAN_AUTO_CONN_INFORM_CALLER, "[WLAN UI][Auto Conn] Inform callback func with result - %d")
TRC_MSG(MMI_WLAN_SELECT_USER_CERT_RSP, "[WLAN UI] wlan_select_user_cert_rsp result = %d")
TRC_MSG(MMI_WLAN_SELECT_USER_CERT_RSP_ID, "[WLAN UI] wlan_select_user_cert_rsp cert id = %d")
TRC_MSG(MMI_WLAN_SELECT_CERT_RSP, "[WLAN UI] mmi_wlan_select_cert_rsp result = %d")
TRC_MSG(MMI_WLAN_SELECT_CERT_RSP_ID, "[WLAN UI] mmi_wlan_select_cert_rsp cert id = %d")
TRC_MSG(MMI_WLAN_PREPARE_CONN_PROFILE, "[WLAN UI] ===> Construct profile to be activated. Total of connections: [%d] is triggerred by CUI: [%d]")
TRC_MSG(MMI_WLAN_CONTEXT_CONN_NUM, "[WLAN UI] ===> Receive connect cnf. Total of connection: %d, Is trigger by CUI: %d")
TRC_MSG(MMI_WLAN_CLOSE_MENU_CUI, "[WLAN UI] MMI_WLAN_CLOSE_MENU_CUI Group ID = %d")
TRC_MSG(MMI_WLAN_CLOSE_INLINE_CUI, "[WLAN UI] MMI_WLAN_CLOSE_INLINE_CUI Group ID = %d")
TRC_MSG(MMI_WLAN_CLOSE_SEARCHING_POPUP_IN_END_KEY, "[WLAN UI] Close searching popup in end key. Scan Job ID: %d")    
TRC_MSG(MMI_WLAN_UPDATE_AP_DETAILS_INFO, "[WLAN UI] Update AP's details info - Match Type(%d)")
TRC_MSG(MMI_WLAN_CMCC_INIT_CNTX_BLACK_LIST, "[WLAN UI] %d. Add profile(SSID Len: %d) into black list")
TRC_MSG(MMI_WLAN_CMCC_INIT_CNTX_STATICTIS, "[WLAN UI] Init - Trust list: %d Black list: %d")
TRC_MSG(MMI_WLAN_CMCC_STORAGE_SAVE_BLACK_LIST, "[WLAN UI] Save black list - Id(%d) Profile(%d) IsInBlackList(%d)")
TRC_MSG(MMI_WLAN_CMCC_STORAGE_SAVE_AUTO_SEARCH, "[WLAN UI] Save auto searching - Enable(%d) Interval(%d) AutoConn(%d) Network(%d) SSIDSwitch(%d) Cellular(%d) AutoPortal(%d) PowerSave(%d)")
TRC_MSG(MMI_WLAN_CMCC_STORAGE_READ_BLACK_LIST, "[WLAN UI] Read black list - Id(%d) Profile(%d) IsInBlackList(%d)")    
TRC_MSG(MMI_WLAN_CMCC_STORAGE_READ_AUTO_SEARCH, "[WLAN UI] Read auto searching - Enable(%d) Interval(%d) AutoConn(%d) Network(%d) SSIDSwitch(%d) Cellular(%d) AutoPortal(%d) PowerSave(%d)")
TRC_MSG(MMI_WLAN_CMCC_PREPARE_SEARCH_AP, "[WLAN UI] ----> Search -- SSID's Length: %d ")
TRC_MSG(MMI_WLAN_CMCC_PREPARE_SEARCH_AP_FOUND, "[WLAN UI] ---->Found! SSID's Length: %d Profile ID: %d ")
TRC_MSG(MMI_WLAN_CMCC_PREPARE_SEARCH_AP_ACTIVATE, "[WLAN UI] ---->And it's activated!! ")
TRC_MSG(MMI_WLAN_CMCC_PREPARE_SEARCH_AP_NOT_FOUND, "[WLAN UI] ---->Not found!!! ")
TRC_MSG(MMI_WLAN_CMCC_PREPARE_SAVE_AP, "[WLAN UI] ---->Save(Not in scan result.) -- SSID's Length: %d Profile ID: %d ")
TRC_MSG(MMI_WLAN_CMCC_PREPARE_SPERATOR, "[WLAN UI] ========================================================= ")
TRC_MSG(MMI_WLAN_CMCC_PREPARE_AP_MATCH_TYPE, "[WLAN UI] SSID's Length: %d \t MGR: %d Match: %d ")
TRC_MSG(MMI_WLAN_CMCC_SHOW_AP_LIST, "[WLAN UI] ---->Start to show the ap list!! ")
TRC_MSG(MMI_WLAN_CMCC_SHOW_AP_LIST_SE_SA, "[WLAN UI] ----> SE_SA|SE_SA_C: ssid's length: %d profile_id: %d ")
TRC_MSG(MMI_WLAN_CMCC_SHOW_AP_LIST_SE, "[WLAN UI] ----> SE: ssid's length: %d ")
TRC_MSG(MMI_WLAN_CMCC_SHOW_AP_LIST_SA, "[WLAN UI] ----> SA: ssid's length: %d profile_id: %d ")
TRC_MSG(MMI_WLAN_CMCC_UI_STATUS_MACHINE, "[WLAN UI] Original status: %d ==> Current status: %d ")
TRC_MSG(MMI_WLAN_CMCC_CUI_AP_SELECTION_LIST_START, "[WLAN UI] ==EVT_ID_SRV_DTCNT_WLAN_SEARCH_AP_OPEN_IND== ")
TRC_MSG(MMI_WLAN_CMCC_CUI_AP_SELECTION_LIST_END, "[WLAN UI] ==EVT_ID_SRV_DTCNT_WLAN_SEARCH_AP_CLOSE_IND== ")
TRC_MSG(MMI_WLAN_CMCC_AP_SELECTION_LIST_LEAVE_CB, "[WLAN UI] cui_wlan_leave_callback - EVT_ID_SCRN_DELETE_REQ ")
TRC_MSG(MMI_WLAN_CMCC_AP_SELECTION_LIST_ABORT_SEARCH, "[WLAN UI] Abort scanning for networks - Close CUI(%d)")
TRC_MSG(MMI_WLAN_CMCC_AP_SELECTION_LIST_CANCEL, "[WLAN UI] Press RSK 'Cancel' ")
TRC_MSG(MMI_WLAN_CMCC_AP_SELECTION_LIST_CANCEL_IN_END_KEY, "[WLAN UI] EVT_ID_GROUP_GOBACK_IN_END_KEY - CUI or AP List - [%d]")
TRC_MSG(MMI_WLAN_CMCC_AP_SELECTION_LIST_CONNECT_SUCCESS, "[WLAN UI] Close CUI(%d) after connect to ap successfully ")
TRC_MSG(MMI_WLAN_CMCC_AP_SELECTION_LIST_DEINIT, "[WLAN UI] [CUI][AP SELECTION LIST] Group deinit! ")
TRC_MSG(MMI_WLAN_CMCC_AP_SELECTION_LIST_SCAN_SCREEN_DELETE, "[WLAN UI] ====EVT_ID_SCRN_DELETE_REQ_IN_END_KEY==== ")
TRC_MSG(MMI_WLAN_CMCC_AP_SELECTION_LIST_SCAN_SCREEN_GOBACK, "[WLAN UI] ====EVT_ID_SCRN_GOBACK_IN_END_KEY==== ")
TRC_MSG(MMI_WLAN_CMCC_AP_SELECTION_LIST_INVOKE_CB, "[WLAN UI] Invoke callback to inform DTCNT SRV action - %d ")
TRC_MSG(MMI_WLAN_CMCC_AUTO_SEARCH_SETTINGS, "[WLAN UI] [Auto Search] ===> Auto search switch - [%d]")
TRC_MSG(MMI_WLAN_CMCC_AUTO_SEARCH_START_TIMER, "[WLAN UI] [Auto Search] ===> Start Timer!!! Id - [%d]")
TRC_MSG(MMI_WLAN_CMCC_AUTO_SEARCH_STOP_TIMER, "[WLAN UI] [Auto Search] ===> Stop Timer!!! ")
TRC_MSG(MMI_WLAN_CMCC_AUTO_CONN_START, "[WLAN UI]Total AP: %d Auto conn. AP: %d")
TRC_MSG(MMI_WLAN_CMCC_AUTO_CONN_RUN, "[WLAN UI]Current conn idx: %d Total Auto conn AP: %d")
TRC_MSG(MMI_WLAN_CMCC_AUTO_CONN_PROC, "[WLAN UI]Connect to AP(%d), its ssid length: %d priority: %d")
TRC_MSG(MMI_WLAN_CMCC_AUTO_CONN_RESULT, "[WLAN UI]Connection result - %d, in auto conn or not - %d")
TRC_MSG(MMI_WLAN_CMCC_AUTO_CONN_RESULT_FAILED, "[WLAN UI]Connect failed, current conn idx: %d Total Auto conn AP: %d")
TRC_MSG(MMI_WLAN_CMCC_AP_RESELECTION_START, "[WLAN UI] ==EVT_ID_SRV_DTCNT_WLAN_AP_LIST_QUERY_IND== ")
TRC_MSG(MMI_WLAN_CMCC_AP_RESELECTION_SCAN_RESULT, "[WLAN UI] AP Index: %d SSID's length %d RSSI: %d Total: %d ")
TRC_MSG(MMI_WLAN_CMCC_AP_RESELECTION_MATCH, "[WLAN UI] MATCH!! ")
TRC_MSG(MMI_WLAN_CMCC_AP_RESELECTION_MATCH_TOTAL, "[WLAN UI] (%d) APs have been chossen. ")
TRC_MSG(MMI_WLAN_CMCC_AP_RESELECTION_SHOW, "[WLAN UI] Show AP selection list. Group ID: %d")
TRC_MSG(MMI_WLAN_CMCC_AP_RESELECTION_CLOSE, "[WLAN UI] Close transfer AP selection list - Group ID: [%d]")
TRC_MSG(MMI_WLAN_CMCC_AP_RESELECTION_STATUS, "[WLAN UI] Is in the ap reselection proc - [%d] Group ID: [%d]")
TRC_MSG(MMI_WLAN_CMCC_TRANSFER_TO_CELLULAR_START, "[WLAN UI] ==EVT_ID_SRV_DTCNT_BEARER_INIT_WLAN_AP_QUERY_IND== ")
TRC_MSG(MMI_WLAN_CMCC_TRANSFER_TO_CELLULAR_END, "[WLAN UI] ==EVT_ID_SRV_DTCNT_BEARER_DEINIT_WLAN_AP_QUERY_IND== ")
TRC_MSG(MMI_WLAN_CMCC_TRANSFER_TO_CELLULAR_INFORM, "[WLAN UI] Inform Dtcnt Service. Bearer Type: %d Account ID: %d")
TRC_MSG(MMI_WLAN_CMCC_TRANSFER_TO_CELLULAR_SCAN_RESULT, "[WLAN UI] Scan result - %d Total of APs: %d ")
TRC_MSG(MMI_WLAN_CMCC_TRANSFER_TO_CELLULAR_NO_AP_AVAILABLE, "[WLAN UI] No AP available! Switch's status: %d")
TRC_MSG(MMI_WLAN_CMCC_TRANSFER_TO_CELLULAR_BTN_YES, "[WLAN UI] PRESS 'Yes' Transfer to cellular ")
TRC_MSG(MMI_WLAN_CMCC_TRANSFER_TO_CELLULAR_BTN_NO, "[WLAN UI] PRESS 'No' ")
TRC_MSG(MMI_WLAN_CMCC_TRANSFER_TO_CELLULAR_IN_END_KEY, "[WLAN UI] PRESS end key! ")
TRC_MSG(MMI_WLAN_CMCC_TRANSFER_TO_CELLULAR_INTERRUPT_EXIT, "[WLAN UI] Interrupt exit! ")
TRC_MSG(MMI_WLAN_CMCC_NETWORK_LIST_START, "[WLAN UI][Bearer Init] AP query start - Status machine: [%d]")
TRC_MSG(MMI_WLAN_CMCC_NETWORK_LIST_SCAN, "[WLAN UI][Bearer Init] Scan for wlan networks - Job Id - [%d] ")
TRC_MSG(MMI_WLAN_CMCC_NETWORK_LIST_SHOW, "[WLAN UI][Bearer Init] Show network list - Group Id - [%d] ")
TRC_MSG(MMI_WLAN_CMCC_NETWORK_LIST_CLOSE, "[WLAN UI][Bearer Init] Close network list - Group Id - [%d] ")
TRC_MSG(MMI_WLAN_CMCC_NETWORK_LIST_DEINIT, "[WLAN UI][Bearer Init] == EVT_ID_GROUP_DEINIT Flag: [%d] ")
TRC_MSG(MMI_WLAN_CMCC_BEARER_INIT_SCAN_RESULT, "[WLAN UI] [Bearer Init] ==> Scan result - %d Total of APs: %d ")
TRC_MSG(MMI_WLAN_CMCC_BEARER_INIT_SCAN_RESULT_DETAILS, "[WLAN UI] [Bearer Init] ==> AP Index: %d SSID's length %d RSSI: %d")
TRC_MSG(MMI_WLAN_CMCC_BEARER_INIT_APN_LIST_NUM, "[WLAN UI] [Bearer Init] ==> Total number of APN list: %d")
TRC_MSG(MMI_WLAN_CMCC_BEARER_INIT_APN_LIST_DETAILS, "[WLAN UI] [Bearer Init] ==> Add profile ID: %d")
TRC_MSG(MMI_WLAN_CMCC_BEARER_INIT_CONNECT, "[WLAN UI] [Bearer Init] Press 'Connect' ==> Index: %d Total of ssid: %d Total of APN: %d")
TRC_MSG(MMI_WLAN_CMCC_BEARER_INIT_USER_ACTION, "[WLAN UI] [Bearer Init] User action: %d Status machine: %d ")
TRC_MSG(MMI_WLAN_CMCC_BEARER_INIT_SHOW_CONN_POPUP, "[WLAN UI] [Bearer Init] Show 'Connecting' popup Group ID: [%d]")
TRC_MSG(MMI_WLAN_CMCC_BEARER_INIT_CLOSE_CONN_POPUP, "[WLAN UI] [Bearer Init] Close 'Connecting' popup Group ID: [%d]")
TRC_MSG(MMI_WLAN_CMCC_TRANSFER_TO_WLAN_INIT, "[WLAN UI] ==EVT_ID_SRV_DTCNT_WLAN_INIT_RES_IND== ")
TRC_MSG(MMI_WLAN_CMCC_TRANSFER_TO_WLAN_START, "[WLAN UI] Start Timer - Interval(%d) ")
TRC_MSG(MMI_WLAN_CMCC_TRANSFER_TO_WLAN_TIMEOUT_CB, "[WLAN UI] CBM STATUS - %d Is in portal proc: %d")
TRC_MSG(MMI_WLAN_CMCC_TRANSFER_TO_WLAN_BG_SCAN_RESULT, "[WLAN UI] Scan result - %d Total of APs: %d ")
TRC_MSG(MMI_WLAN_CMCC_TRANSFER_TO_WLAN_MATCH, "[WLAN UI] MATCH!! ")
TRC_MSG(MMI_WLAN_CMCC_TRANSFER_TO_WLAN_SWITCH_STAUTS, "[WLAN UI] Switch status - %d ")
TRC_MSG(MMI_WLAN_CMCC_TRANSFER_TO_WLAN_ALWAYS_ASK, "[WLAN UI] Allow to ask user - %d ")
TRC_MSG(MMI_WLAN_CMCC_TRANSFER_TO_WLAN_INFORM, "[WLAN UI] Transfer to WLAN! Start timer1! ")
TRC_MSG(MMI_WLAN_CMCC_TRANSFER_TO_WLAN_START_TIMER_ONE, "[WLAN UI] Begin backgound searching! Start timer1! Interval (%d)")
TRC_MSG(MMI_WLAN_CMCC_TRANSFER_TO_WLAN_START_TIMER_TWO, "[WLAN UI] Not to ask in one hour! Start timer2! Interval (%d)")
TRC_MSG(MMI_WLAN_CMCC_TRANSFER_TO_WLAN_CONFIRM_YES, "[WLAN UI] Press 'Yes' ==> Transfer to WLAN! ")
TRC_MSG(MMI_WLAN_CMCC_TRANSFER_TO_WLAN_CONFIRM_NO, "[WLAN UI] Press 'No' ")
TRC_MSG(MMI_WLAN_CMCC_TRANSFER_TO_WLAN_CONFIRM_PROC, "[WLAN UI] Is in transferring to wlan's proc - [%d]")
TRC_MSG(MMI_WLAN_CMCC_TRANSFER_TO_WLAN_CONFIRM_SEND_DISC, "[WLAN UI][TRANS_NETWORK][CONN_IND] Send disconnect if the AP belongs to CMCC")
TRC_MSG(MMI_WLAN_CMCC_SWITCH_BETWEEN_SSID_START, "[WLAN UI] ==> Transfer networks between APs with different SSID. Switch - %d")
TRC_MSG(MMI_WLAN_CMCC_SWITCH_BETWEEN_SSID_RUN, "[WLAN UI] ==> %d. Start switch. Total: %d")
TRC_MSG(MMI_WLAN_CMCC_SWITCH_BETWEEN_SSID_PROC, "[WLAN UI] ==> Try to connect to AP. SSID's length(%d) Profile ID(%d) Priority(%d)")
TRC_MSG(MMI_WLAN_CMCC_SWITCH_AP_LIST_SHOW, "[WLAN UI] ==> Transfer AP list's group id: %d")
TRC_MSG(MMI_WLAN_CMCC_SWITCH_AP_LIST_INFO, "[WLAN UI] ==> Transfer AP list. Index: %d Profile Id: %d Network Type: %d RSSI: %d")
TRC_MSG(MMI_WLAN_CMCC_SWITCH_AP_LIST_ENTER, "[WLAN UI] ==> Enter transfer AP list. Highlight index: %d")
TRC_MSG(MMI_WLAN_CMCC_SWITCH_AP_LIST_GOBACK, "[WLAN UI] ==> Transfer AP list. ==EVT_ID_GROUP_GOBACK_IN_END_KEY==")
TRC_MSG(MMI_WLAN_CMCC_SWITCH_AP_LIST_DEINIT, "[WLAN UI] ==> Transfer AP list. ==EVT_ID_GROUP_DEINIT==")
TRC_MSG(MMI_WLAN_CMCC_AUTO_PORTAL_SHOW_SETTINGS, "[WLAN UI] ==> Show auto portal settings. Settings ID: %d Parent ID: %d")
TRC_MSG(MMI_WLAN_CMCC_AUTO_PORTAL_LOGIN_START, "[WLAN UI] ==> Start to auto. protal certification!!! ")
TRC_MSG(MMI_WLAN_CMCC_AUTO_PORTAL_LOGIN_PROC, "[WLAN UI] ==> [Login] Return value of cmcc_wlan_auth_login is [%d] ")
TRC_MSG(MMI_WLAN_CMCC_AUTO_PORTAL_LOGIN_CB, "[WLAN UI] ==> [Login]Callback from portal server. Result: %d ")
TRC_MSG(MMI_WLAN_CMCC_AUTO_PORTAL_LOGOUT_START, "[WLAN UI] ==> Start to logout portal server. ")
TRC_MSG(MMI_WLAN_CMCC_AUTO_PORTAL_LOGOUT_PROC, "[WLAN UI] ==> [Logout] Return value of cmcc_wlan_auth_logout is [%d]")
TRC_MSG(MMI_WLAN_CMCC_AUTO_PORTAL_LOGOUT_CB, "[WLAN UI] ==> [Logout]Callback from portal server. Result: %d ")
TRC_MSG(MMI_WLAN_CMCC_AUTO_PORTAL_LOGOUT_CANCEL, "[WLAN UI] ==> [Logout]Cancel the logout proc. ")
TRC_MSG(MMI_WLAN_CMCC_AUTO_PORTAL_ABORT_AFTER_DISC, "[WLAN UI] ==> !!! [Abort logout/login after disconnect] Login/Logout - [%d] Send abort request! ")
TRC_MSG(MMI_WLAN_CMCC_AUTO_PORTAL_ABORT_LOGIN_BEFORE_LOGOUT, "[WLAN UI] ==> !!! [Abort login before logout] Login/Logout - [%d]  Send abort request! ")
TRC_MSG(MMI_WLAN_CMCC_AUTO_PORTAL_CNF_RES, "[WLAN UI] ==> [CONN_CNF][Login]Is in portal proc - [%d] switch - [%d]")
TRC_MSG(MMI_WLAN_CMCC_AUTO_PORTAL_LOGOUT_IND, "[WLAN UI] ==> ===EVT_ID_SRV_DTCNT_WLAN_LOGOUT_IND===")
TRC_MSG(MMI_WLAN_CMCC_AUTO_PORTAL_LOGOUT_IND_SET_CB, "[WLAN UI] ==> 1. Set logout indication callback!! ")
TRC_MSG(MMI_WLAN_CMCC_AUTO_PORTAL_LOGOUT_IND_STATUS, "[WLAN UI] ==> Return value from cmcc_wlan_auth_logout -> [%d]")
TRC_MSG(MMI_WLAN_CMCC_AUTO_PORTAL_LOGOUT_IND_INFORM_DTCNT_SRV, "[WLAN UI] ==> 2. Inform dtcnt service. Response: [%d]")
TRC_MSG(MMI_WLAN_CMCC_LOGIN_SEND_DISC_REQ_AFTER_ABORTED, "[WLAN UI] ==> [Login] Send disconnect request after user abort login. Flag: [%d]")
TRC_MSG(MMI_WLAN_CMCC_LOGIN_SEND_DISC_REQ_AFTER_FAILED, "[WLAN UI] ==> [Login] Send disconnect request after login failed. Flag: [%d]")
TRC_MSG(MMI_WLAN_CMCC_IS_IN_LOGOUT_PROC, "[WLAN UI] ==> [Login] Is in logout proc or not - [%d]")
TRC_MSG(MMI_WLAN_CMCC_IS_IN_WAIT_FOR_IP_ADDR_PROC, "[WLAN UI] ==> [Login] Is in wait for ip update proc or not - [%d]")
TRC_MSG(MMI_WLAN_CMCC_LOGOUT_FOR_DEINIT_IN_IDLE, "[WLAN UI] ==> [Logout] Tap icon in idle. Login proc: [%d] Logout proc: [%d] WLAN status: [%d]")
TRC_MSG(MMI_WLAN_CMCC_SET_PORTAL_SWITCH, "[WLAN UI] ==> Set Portal switch for DTCNT: [%d]")
TRC_MSG(MMI_WLAN_CMCC_DISC_DEFAULT_AP_IN_WEBCAM, "[WLAN UI] ==> [Login] Disconnect default AP as in the webcam!!")
TRC_MSG(MMI_WLAN_CMCC_SHOW_PORTAL_RESULT, "[WLAN UI] ==> The result for portal: [%d]")
/* connect confirm event*/
TRC_MSG(MMI_WLAN_SEND_CONNECT_REQ, "[WLAN UI] ==> Press 'Connect' Status machine - [%d]")
TRC_MSG(MMI_WLAN_CONN_CNF_CLOSE_WAITING_POPUP, "[WLAN UI] ===> [CONN_CNF] Close waiting popup!!")
TRC_MSG(MMI_WLAN_CONN_CNF_CLOSE_OPTION_MENU, "[WLAN UI] ===> [CONN_CNF] Close option menu!!")
TRC_MSG(MMI_WLAN_CONN_CNF_REFRESH_PRIORITY_LIST, "[WLAN UI] ===> [CONN_CNF] Refresh priority list!")
TRC_MSG(MMI_WLAN_CONN_CNF_REFRESH_MAIN_LIST, "[WLAN UI] ===> [CONN_CNF] Refresh main list!")
TRC_MSG(MMI_WLAN_CONN_CNF_REFRESH_NOTHING, "[WLAN UI] ===> [CONN_CNF] !!! Nothing to update!!! ")
TRC_MSG(MMI_WLAN_CONN_CNF_SHOW_RES_MSG, "[WLAN UI] ===> [CONN_CNF] Show connect result popup! Result: %d Cause: %d!")
TRC_MSG(MMI_WLAN_CONN_CNF_RESULT_SUCCESS, "[WLAN UI] ===> conn. has been aborted by user or not - %d connected ap's profile ID: %d!")
TRC_MSG(MMI_WLAN_CONN_CNF_RESULT_SUCCESS_SAVE, "[WLAN UI] ===> SSID's length in CNF_EVT: %d AP to be activated: %d!")
TRC_MSG(MMI_WLAN_CONN_CNF_SET_IP_UPDATE_FLAG, "[WLAN UI] ===> [CONN_CNF] === Set wait for IP address update flag ===")
/* connect indication event */
TRC_MSG(MMI_WLAN_CONN_IND_REFRESH_PRIORITY_LIST, "[WLAN UI] ===> [CONN_IND] Refresh priority list!")
TRC_MSG(MMI_WLAN_CONN_IND_REFRESH_MAIN_LIST, "[WLAN UI] ===> [CONN_IND] Refresh main list!")
TRC_MSG(MMI_WLAN_CONN_IND_SHOW_ACTIVATED_POPUP, "[WLAN UI] ===> [CONN_IND] Show 'Activated' popup!")
TRC_MSG(MMI_WLAN_CONN_IND_PROFILE_INFO, "[WLAN UI] ===> [CONN_IND] Profile ID: [%d] Need login or not: [%d]!")
TRC_MSG(MMI_WLAN_CONN_IND_SEND_PORTAL_LOGIN_STOP_REQ, "[WLAN UI] ===> [CONN_IND] !Send portal login stop request!")
TRC_MSG(MMI_WLAN_CONN_IND_SERACH_PROFILE, "[WLAN UI] ===> [CONN_IND] App hilt length: [%d] Cui hilt length: [%d] Ind SSID length: [%d]")
TRC_MSG(MMI_WLAN_CONN_IND_SERACH_PROFILE_FOUND, "[WLAN UI] ===> [CONN_IND] Found! Profile ID: [%d]")
TRC_MSG(MMI_WLAN_CONN_IND_SERACH_PROFILE_NOT_FOUND, "[WLAN UI] ===> [CONN_IND] Not found! Profile ID: [%d]")
/* disconnect event */
TRC_MSG(MMI_WLAN_SEND_DISCONNECT_REQ, "[WLAN UI] ===> Press 'Disconnect' in option menu!! Wait for IP update - [%d]")
TRC_MSG(MMI_WLAN_DISC_CNF_REFRESH_PRIORITY_LIST, "[WLAN UI] ===> [DISC_CNF] Refresh priority list!!")
TRC_MSG(MMI_WLAN_DISC_CNF_SHOW_DISCONNECT_POPUP, "[WLAN UI] ===> [DISC_CNF] Show 'Disconnect' popup!")
TRC_MSG(MMI_WLAN_DISC_IND_REFRESH_PRIORITY_LIST, "[WLAN UI] ===> [DISC_IND] Refresh priority list!!")
TRC_MSG(MMI_WLAN_DISC_IND_SHOW_DISCONNECT_POPUP, "[WLAN UI] ===> [DISC_IND] Show 'Disconnect' popup!")
TRC_MSG(MMI_WLAN_SEND_DEINIT_REQ, "[WLAN UI] ===> [DISC_IND] Press 'Turn off WLAN' Wait for IP update - [%d]")
/* Ip address change confirm event */
TRC_MSG(MMI_WLAN_IPADDR_CHANGE_CNF_EVT_ID, "[WLAN UI] === EVT_ID_SRV_DTCNT_WLAN_IPADDR_CHANGE_CNF ===")
TRC_MSG(MMI_WLAN_IPADDR_CHANGE_CNF_USE_DHCP, "[WLAN UI] ==> Use DHCP: [%d]")
/* Power saving mode */
TRC_MSG(MMI_WLAN_SET_POWER_SAVING_MODE, "[WLAN UI] ==> Set power saving mode [%d]")
TRC_MSG(MMI_WLAN_GET_POWER_SAVING_MODE, "[WLAN UI] ==> Get power saving mode: [%d]")
TRC_MSG(MMI_WLAN_SET_POWER_SAVING_MODE_CB, "[WLAN UI] ==> Callback after set power saving mode. Result: [%d]")
/* WAPI - Load cert. file */
TRC_MSG(MMI_WLAN_FILE_MGR_USER_ACTION, "[WLAN UI] ==> File manager - User action[%d]")
TRC_MSG(MMI_WLAN_SELECT_CERT_FILE, "[WLAN UI] ==> Select certification file - result[%d]")
/* WPS */
TRC_MSG(MMI_WLAN_WPS_CONNECT_REQ, "[WLAN UI][WPS] ==> Send WPS connect request. Connection Type: [%d]")
TRC_MSG(MMI_WLAN_WPS_INFO_EVT_HDLR, "[WLAN UI][WPS] === EVT_ID_SRV_DTCNT_WLAN_WPS_INFO === Array num: [%d]")
TRC_MSG(MMI_WLAN_WPS_SET_INFO, "[WLAN UI][WPS] Action: [%d] Value: [%d]")
TRC_MSG(MMI_WLAN_WPS_SHOW_INFO_POPUP, "[WLAN UI][WPS] Start to show WPS info popup. GID: [%d]")
TRC_MSG(MMI_WLAN_WPS_INFO_POPUP_ENTER, "[WLAN UI][WPS] ==> Enter WPS info popup.")
TRC_MSG(MMI_WLAN_WPS_INFO_POPUP_DEINIT, "[WLAN UI][WPS] ==> Deinit WPS info popup.")
TRC_MSG(MMI_WLAN_WPS_INFO_LEAVE_IN_END_KEY, "[WLAN UI][WPS] ==> Deinit WPS info popup.")
TRC_MSG(MMI_WLAN_WPS_INFO_START_TIMER, "[WLAN UI][WPS] ==> Start timer! ")
TRC_MSG(MMI_WLAN_WPS_INFO_STOP_TIMER, "[WLAN UI][WPS] ==> Stop timer! ")
TRC_MSG(MMI_WLAN_WPS_INFO_TIMER_OUT, "[WLAN UI][WPS] ==> Timer is out! Send disconnect request. ")
TRC_MSG(MMI_WLAN_WPS_SEARCH_CONNECTED_AP, "[WLAN UI][WPS] ==> Profile's SSID length: [%d] Conn Res SSID length: [%d]")
TRC_MSG(MMI_WLAN_WPS_SEARCH_CONNECTED_AP_FOUND, "[WLAN UI][WPS] ==> Found. Conn Res Profile Id: [%d]")
TRC_MSG(MMI_WLAN_WPS_SEARCH_CONNECTED_AP_NOT_FOUND, "[WLAN UI][WPS] ==> Not found. Conn Res Profile Id: [%d]")
TRC_MSG(MMI_WLAN_WPS_SAVE_CONNECTED_AP, "[WLAN UI][WPS] ==> Save. Priority: [%d] Infra Num: [%d] Adhoc Num: [%d]")
TRC_MSG(MMI_WLAN_WPS_EXIT_SEARCHING_END_KEY, "[WLAN UI][WPS] ==> End Key:evt->result: [%d]")TRC_MSG(CUI_WLAN_LIST_CREATE, "[WLAN UI][CUI] cui_wlan_list_create() gid = %d")
TRC_MSG(CUI_WLAN_INPUT_DONE_CONN, "[WLAN UI][CUI] input_done_connect() step = %d")
TRC_MSG(CUI_WLAN_PASSPHRASE_INPUT, "[WLAN UI][CUI] passphrase_input()")
TRC_MSG(CUI_WLAN_DEFAULT_EAP_INPUT, "[WLAN UI][CUI] default_eap_input()")
TRC_MSG(CUI_WLAN_PRE_CONNECT, "[WLAN UI][CUI] wlan_pre_connect() step =%d")
TRC_MSG(CUI_WLAN_CONNECT_EVENT_HDR, "[WLAN UI][CUI] connect_event_hdlr()")
TRC_MSG(CUI_WLAN_SCAN_EVENT_HDR, "[WLAN UI][CUI] scan_event_hdlr()")
TRC_MSG(CUI_WLAN_EVENT_HDR, "[WLAN UI][CUI] wlan_event_handler() evt_id = %d")
TRC_MSG(CUI_WLAN_LIST_RUN, "[WLAN UI][CUI] wlan_list_run Group ID = %d")
TRC_MSG(CUI_WLAN_LIST_CLOSE, "[WLAN UI][CUI] wlan_list_close Group ID = %d")
TRC_MSG(CUI_WLAN_SCAN_JOB, "[WLAN UI][CUI] entry_find_network scan job = %d")
TRC_MSG(CUI_WLAN_CONNECT_SAVED, "[WLAN UI][CUI] cui_wlan_connect saved ap.")
TRC_MSG(CUI_WLAN_CONNECT_SEARCH, "[WLAN UI][CUI] cui_wlan_connect ap searched.")
TRC_MSG(CUI_WLAN_CMCC_CONNECT_SUCCESS, "[WLAN UI][CUI] Close CUI(%d) after connect to ap successfully ")
TRC_MSG(CUI_WLAN_CMCC_CANCEL, "[WLAN UI][CUI] Press RSK 'Cancel' CUI ID - [%d] Notify caller!! ")
TRC_MSG(CUI_WLAN_CMCC_ABORT_SEARCH, "[WLAN UI][CUI] Abort scanning for networks - Notify caller to close CUI(%d)")
TRC_MSG(CUI_WLAN_CMCC_CREATE_FAILED, "[WLAN UI][CUI] Create CUI failed - Notify caller to close CUI(%d)")
TRC_MSG(CUI_WLAN_CMCC_SHOW_AP_LIST_AFTER_SCAN, "[WLAN UI][CUI] Show WLAN CUI after receive scan event. - Group ID: [%d]")
TRC_MSG(CUI_WLAN_CMCC_AP_LIST_HIGHLIGHT_INDEX, "[WLAN UI][CUI] CID: [%d] Hilt idx: [%d] Main list idx: [%d] Type: [%d]")
TRC_MSG(CUI_WLAN_CMCC_AP_LIST_BEFORE_CONNECT, "[WLAN UI][CUI] ==> Before connect to AP. Type: [%d] SSID length: [%d] Profile ID: [%d]")
TRC_MSG(CUI_WLAN_STOP_TETHERING_CNF, "[WLAN CUI] Wi-Fi tethering is off or not - %d")
TRC_MSG(CUI_WLAN_AFTER_STOP_TETHERING_CB, "[WLAN CUI] Stop tethering. Result: %d")
TRC_MSG(WLAN_CMCC_FUNC_CMCC_WLAN_WPS_INIT_REQ, "[WLAN CMCC][FUNC] cmcc_wlan_wps_init_req [Line:%d]")
TRC_MSG(WLAN_CMCC_FUNC_CMCC_WLAN_WPS_INIT_RSP, "[WLAN CMCC][FUNC] cmcc_wlan_wps_init_rsp [Line:%d]")
TRC_MSG(WLAN_CMCC_FUNC_CMCC_WLAN_WPS_TRY_REQ, "[WLAN CMCC][FUNC] cmcc_wlan_wps_try_req [Line:%d]")
TRC_MSG(WLAN_CMCC_FUNC_CMCC_WLAN_WPS_PORTAL_REQ, "[WLAN CMCC][FUNC] cmcc_wlan_wps_portal_req [Line:%d]")
TRC_MSG(WLAN_CMCC_FUNC_CMCC_WLAN_WPS_PORTAL_RSP, "[WLAN CMCC][FUNC] cmcc_wlan_wps_portal_rsp [Line:%d]")
TRC_MSG(WLAN_CMCC_FUNC_CMCC_WLAN_WPS_LOGIN_REQ, "[WLAN CMCC][FUNC] cmcc_wlan_wps_login_req [Line:%d]")
TRC_MSG(WLAN_CMCC_FUNC_CMCC_WLAN_WPS_LOGIN_RSP, "[WLAN CMCC][FUNC] cmcc_wlan_wps_login_rsp [Line:%d]")
TRC_MSG(WLAN_CMCC_FUNC_CMCC_WLAN_WPS_LOGOUT_REQ, "[WLAN CMCC][FUNC] cmcc_wlan_wps_logout_req [Line:%d]")
TRC_MSG(WLAN_CMCC_FUNC_CMCC_WLAN_WPS_LOGOUT_RSP, "[WLAN CMCC][FUNC] cmcc_wlan_wps_logout_rsp [Line:%d]")
TRC_MSG(WLAN_CMCC_FUNC_CMCC_WLAN_WPS_CLEAN_REQ, "[WLAN CMCC][FUNC] cmcc_wlan_wps_clean_req [Line:%d]")
TRC_MSG(WLAN_CMCC_FUNC_CMCC_WLAN_WPS_CLEAN_RSP, "[WLAN CMCC][FUNC] cmcc_wlan_wps_clean_rsp [Line:%d]")
TRC_MSG(WLAN_CMCC_FUNC_CMCC_WLAN_WPS_CANCEL_REQ, "[WLAN CMCC][FUNC] cmcc_wlan_wps_cancel_req [Line:%d]")
TRC_MSG(WLAN_CMCC_FUNC_CMCC_WLAN_WPS_CANCEL_RSP, "[WLAN CMCC][FUNC] cmcc_wlan_wps_cancel_rsp [Line:%d]")
TRC_MSG(WLAN_CMCC_FUNC_CMCC_WLAN_WPS_HTTP_REQUEST, "[WLAN CMCC][FUNC] cmcc_wlan_wps_http_request [Line:%d]")
TRC_MSG(WLAN_CMCC_FUNC_CMCC_WLAN_AUTH_FSM, "[WLAN CMCC][FUNC] cmcc_wlan_auth_fsm [state:%d]")
TRC_MSG(WLAN_CMCC_FUNC_CMCC_WLAN_HTTP_LOGIN, "[WLAN CMCC][FUNC] cmcc_wlan_http_login [activity:%d, state:%d]")
TRC_MSG(WLAN_CMCC_FUNC_CMCC_WLAN_HTTP_LOGOUT, "[WLAN CMCC][FUNC] cmcc_wlan_http_logout [activity:%d, state:%d]")
TRC_MSG(WLAN_CMCC_FUNC_CMCC_WLAN_SEND_CALLBACK, "[WLAN CMCC][FUNC] cmcc_wlan_send_callback [activity:%d, state:%d]")
TRC_MSG(WLAN_CMCC_FUNC_CMCC_WLAN_HTTP_ABORT, "[WLAN CMCC][FUNC] cmcc_wlan_http_abort [activity:%d, state:%d]")
TRC_MSG(WLAN_CMCC_FUNC_CMCC_WLAN_HTTP_IS_BUSY, "[WLAN CMCC][FUNC] cmcc_wlan_http_is_busy [busy:%d]")
TRC_MSG(WLAN_CMCC_FUNC_CMCC_WLAN_HTTP_IS_AP_ALIVE, "[WLAN CMCC][FUNC] cmcc_wlan_http_is_ap_alive [alive:%d]")
TRC_MSG(WLAN_CMCC_FUNC_CMCC_WLAN_AUTH_LOGIN, "[WLAN CMCC][API FUNC] cmcc_wlan_auth_login [para:%d]")
TRC_MSG(WLAN_CMCC_FUNC_CMCC_WLAN_AUTH_LOGOUT, "[WLAN CMCC][API FUNC] cmcc_wlan_auth_logout [para:%d]")
TRC_MSG(WLAN_CMCC_FUNC_CMCC_WLAN_AUTH_ABORT, "[WLAN CMCC][API FUNC] cmcc_wlan_auth_abort [Line:%d]")
TRC_MSG(WLAN_CMCC_FUNC_CMCC_WLAN_AUTH_UI_LOGIN_CALLBACK, "[WLAN CMCC][FUNC] cmcc_wlan_auth_ui_login_callback [ret:%d, para=%d]")
TRC_MSG(WLAN_CMCC_FUNC_CMCC_WLAN_AUTH_UI_LOGOUT_CALLBACK, "[WLAN CMCC][FUNC] cmcc_wlan_auth_ui_logout_callback [ret:%d, para=%d]")
TRC_MSG(MMI_WLAN_EVT_WLAN_POWER_SAVE_IS_SLEEP, "[WLAN UI] is_sleep=%d")
TRC_MSG(MMI_WLAN_EVT_WLAN_POWER_SAVE, "[WLAN UI] === EVT_ID_SRV_DTCNT_WLAN_POWER_SAVE ===")