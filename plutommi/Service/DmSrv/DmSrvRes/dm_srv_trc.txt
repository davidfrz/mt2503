[APP NAME] = DM SRV
[SCOPE] = PLUTO, COSMOS
[MODULE] = MOD_MMI_CONN_APP

#start trace
TRC_MSG(TRC_SRV_DM_INIT,                                "[DM][SRV] srv_dm_init(), evt_id: %Msrv_bootup_event_enum")
TRC_MSG(TRC_SRV_DM_INIT_SIM_AVAIL,                      "[DM][SRV] srv_dm_init(), sim available")
TRC_MSG(TRC_SRV_DM_INIT_SET_FLAG,                       "[DM][SRV] srv_dm_init_set_flag(), flag: %Msrv_dm_init_flag_enum")
TRC_MSG(TRC_SRV_DM_INIT_SRV_FIN,                        "[DM][SRV] srv_dm_init_srv_finish()")
TRC_MSG(TRC_SRV_DM_INIT_SR_RESULT_IND_HDLR,             "[DM][SRV] srv_dm_init_sr_result_ind_hdlr(), reg_sim: %Mmmi_sim_enum")
TRC_MSG(TRC_SRV_DM_INIT_SET_STATUS,                     "[DM][SRV] srv_dm_init_set_status(), status: %Msrv_dm_init_status_enum")
TRC_MSG(TRC_SRV_DM_DEFER_USER_INTERACTION,              "[DM][SRV] srv_dm_defer_user_interaction(), evt_id: %Msrv_dm_app_adp_evt_enum, defer_time: %d")
TRC_MSG(TRC_SRV_DM_CANCEL_DEFER_USER_INTERACTION,       "[DM][SRV] srv_dm_cancel_defer_user_interaction()")
TRC_MSG(TRC_SRV_DM_RESUME_USER_INTERACTION,             "[DM][SRV] srv_dm_resume_user_interaction(), evt_id: %Msrv_dm_app_adp_evt_enum")
TRC_MSG(TRC_SRV_DM_SIM_UNAVAILABLE_NOTIFY_HDLR,         "[DM][SRV] srv_dm_sim_unavailable_notify_hdlr()")
TRC_MSG(TRC_SRV_DM_SIM_CTRL_DET_HDLR,                   "[DM][SRV] srv_dm_sim_ctrl_det_hdlr(), event_type: %Msrv_sim_ctrl_event_detection_enum, det_sim: %Mmmi_sim_enum, reg_sim: %Mmmi_sim_enum ")
TRC_MSG(TRC_SRV_DM_RESTORE_START_NOTIFY_HDLR,           "[DM][SRV] srv_dm_restore_start_notify_hdlr()")
TRC_MSG(TRC_SRV_DM_NW_CHANGED,                          "[DM][SRV] srv_dm_nw_changed(), nw_status: %d")
TRC_MSG(TRC_SRV_DM_CHECK_NW_AVAILABLE,                  "[DM][SRV] srv_dm_check_nw_available(), is_avail: %d")
TRC_MSG(TRC_SRV_DM_SET_NW_MASK,                         "[DM][SRV] srv_dm_set_nw_mask(), mask: %d ")
TRC_MSG(TRC_SRV_DM_UNSET_NW_MASK,                       "[DM][SRV] srv_dm_unset_nw_mask(), mask: %d ")
TRC_MSG(TRC_SRV_DM_NW_INFO_SRV_AVAIL_CHANGED_HDLR,      "[DM][SRV] srv_dm_nw_info_srv_avail_changed_hdlr(), new_status: %Msrv_nw_info_service_availability_enum, sim: %Mmmi_sim_enum, reg_sim: %Mmmi_sim_enum")
TRC_MSG(TRC_SRV_DM_UCM_STATUS_CHANGED_HDLR,             "[DM][SRV] srv_dm_ucm_status_change_hdlr(), result: %d")
TRC_MSG(TRC_SRV_DM_APP_ADP_SEND_EVT,                    "[DM][SRV] srv_dm_app_adp_send_evt(), evt_id: %Msrv_dm_app_adp_evt_enum")
TRC_MSG(TRC_SRV_DM_RECV_DA_FILE,                        "[DM][SRV] srv_dm_session_notification_receive_da_file(), used_sim: %Mmmi_sim_enum")
TRC_MSG(TRC_SRV_DM_BOOTSTRAP_RECV_DA_FILE,              "[DM][SRV] srv_dm_session_bootstrap_receive_da_file(), action: %Msrv_da_action_enum")
TRC_MSG(TRC_SRV_DM_SESSION_SET_STATUS,                  "[DM][SRV] srv_dm_session_set_status(), session_status: %Msrv_dm_session_status_enum")
TRC_MSG(TRC_SRV_DM_SESSION_NOTIFICATION_IND_HDLR,       "[DM][SRV] srv_dm_session_notification_ind_hdlr()")
TRC_MSG(TRC_SRV_DM_SESSION_SEND_APP_NOTIFICATION_EVT,   "[DM][SRV] srv_dm_session_send_app_notification_evt(), ui_mode: %Mdm_ui_mode_enum")
TRC_MSG(TRC_SRV_DM_SESSION_NOTIFICATION_APP_RSP,        "[DM][SRV] srv_dm_session_notification_app_rsp(), result: %Mdm_ui_interaction_enum")
TRC_MSG(TRC_SRV_DM_SESSION_SEND_NOTIFICATION_RSP,       "[DM][SRV] srv_dm_session_send_notification_rsp(), result: %Mdm_ui_interaction_enum")
TRC_MSG(TRC_SRV_DM_SESSION_START_IND_HDLR,              "[DM][SRV] srv_dm_session_start_ind_hdlr()")
TRC_MSG(TRC_SRV_DM_SESSION_FINISH_IND_HDLR,             "[DM][SRV] srv_dm_session_finish_ind_hdlr()")
TRC_MSG(TRC_SRV_DM_SESSION_CHECK_SUSPEND,               "[DM][SRV] srv_dm_session_check_suspend(), result: %d")
TRC_MSG(TRC_SRV_DM_SESSION_SUSPEND,                     "[DM][SRV] srv_dm_session_suspend()")
TRC_MSG(TRC_SRV_DM_SESSION_RESUME,                      "[DM][SRV] srv_dm_session_resume()")
TRC_MSG(TRC_SRV_DM_SESSION_SUSPEND_TIMEOUT_HDLR,        "[DM][SRV] srv_dm_session_suspend_timeout_hdlr()")
TRC_MSG(TRC_SRV_DM_SESSION_ABORT,                       "[DM][SRV] srv_dm_session_abort(), session_status = %Msrv_dm_session_status_enum")
TRC_MSG(TRC_SRV_DM_SESSION_PS_STATUS_IND_HDLR,          "[DM][SRV] srv_dm_session_ps_status_ind_hdlr(), ps_status: %Mdm_ps_status_enum")
TRC_MSG(TRC_SRV_DM_SESSION_SET_ENDING_MSG,              "[DM][SRV] srv_dm_session_set_ending_msg(), ending_msg: %Msrv_dm_app_adp_session_ending_msg_enum")
TRC_MSG(TRC_SRV_DM_SESSION_ALERT_INIT,                  "[DM][SRV] srv_dm_session_alert_init()")
TRC_MSG(TRC_SRV_DM_SESSION_ALERT_DEINIT,                "[DM][SRV] srv_dm_session_alert_deinit()")
TRC_MSG(TRC_SRV_DM_SESSION_ALERT_IND_HDLR,              "[DM][SRV] srv_dm_session_alert_ind_hdlr()")
TRC_MSG(TRC_SRV_DM_SESSION_ALERT_SEND_APP_ALERT_EVT,    "[DM][SRV] srv_dm_session_alert_send_app_alert_evt(), alert_type: %Mdm_alert_type_enum")
TRC_MSG(TRC_SRV_DM_SESSION_ALERT_APP_RSP,               "[DM][SRV] srv_dm_session_alert_app_rsp(), ui_interaction: %Mdm_ui_interaction_enum")
TRC_MSG(TRC_SRV_DM_SESSION_GET_OPTION_VAL,              "[DM][SRV] srv_dm_session_alert_get_option_val(), mask: %d, val: %d, result: %d")
TRC_MSG(TRC_SRV_DM_DL_RECEIVE_UPC_FILE,                 "[DM][SRV] srv_dm_dl_receive_upc_file()")
TRC_MSG(TRC_SRV_DM_DL_DA_FUMO_SETTING,                  "[DM][SRV] srv_dm_dl_da_fumo_setting()")
TRC_MSG(TRC_SRV_DM_DL_SET_STATUS,                       "[DM][SRV] srv_dm_dl_set_status(), status: %Msrv_dm_dl_status_enum")
TRC_MSG(TRC_SRV_DM_DL_START_OMA_DL,                     "[DM][SRV] srv_dm_dl_start_oma_dl()")
TRC_MSG(TRC_SRV_DM_DL_START_DL_IND_HDLR,                "[DM][SRV] srv_dm_dl_start_dl_ind_hdlr()")
TRC_MSG(TRC_SRV_DM_DL_START_APP_RSP,                    "[DM][SRV] srv_dm_dl_start_app_rsp(), result: %Mdm_ui_interaction_enum")
TRC_MSG(TRC_SRV_DM_DL_START_OMA_DL_CB_HDLR,             "[DM][SRV] srv_dm_dl_start_oma_dl_cb_hdlr(), result: %d")
TRC_MSG(TRC_SRV_DM_DL_DA_REPORT_HDLR,                   "[DM][SRV] srv_dm_dl_da_report_hdlr(), status: %Msrv_da_state_enum, error: %Msrv_da_error_enum")
TRC_MSG(TRC_SRV_DM_DL_DA_DOWNLOADING_INFO,              "[DM][SRV] srv_dm_dl_da_report_hdlr(), acc_size: %d, total_size: %d")
TRC_MSG(TRC_SRV_DM_DL_PROGRESS_APP_RSP,                 "[DM][SRV] srv_dm_dl_progress_app_rsp(), status: %Mdm_dl_status_enum")
TRC_MSG(TRC_SRV_DM_DL_CHECK_SUSPEND,                    "[DM][SRV] srv_dm_dl_check_suspend(), result: %d")
TRC_MSG(TRC_SRV_DM_DL_SUSPEND,                          "[DM][SRV] srv_dm_dl_suspend()")
TRC_MSG(TRC_SRV_DM_DL_AUTO_RESUME_TIMEOUT_HDLR,         "[DM][SRV] srv_dm_dl_auto_resume_timeout_hdlr()")
TRC_MSG(TRC_SRV_DM_DL_SEND_REPORT_IND,                  "[DM][SRV] srv_dm_dl_send_report_ind(), status: %Mdm_dl_status_enum")
TRC_MSG(TRC_SRV_DM_DL_GET_CURR_PERCENT,                 "[DM][SRV] srv_dm_dl_get_curr_percent(), percent: %d")
TRC_MSG(TRC_SRV_DM_FOTA_SET_STATUS,                     "[DM][SRV] srv_dm_fota_set_status(), status: %Msrv_dm_fota_status_enum")
TRC_MSG(TRC_SRV_DM_FOTA_BOOTUP_CHECK_UPDATE,            "[DM][SRV] srv_dm_fota_bootup_check_update(), fota_update_flag: %d")
TRC_MSG(TRC_SRV_DM_FOTA_UPDATE_REQ_IND_HDLR,            "[DM][SRV] srv_dm_fota_update_req_ind_hdlr()")
TRC_MSG(TRC_SRV_DM_FOTA_UPDATE_APP_RSP,                 "[DM][SRV] srv_dm_fota_update_app_rsp(), result: %Mdm_ui_interaction_enum, defer_time:%d")
TRC_MSG(TRC_SRV_DM_FOTA_RESET_IND_HDLR,                 "[DM][SRV] srv_dm_fota_reset_ind_hdlr(), result: %d")
TRC_MSG(TRC_SRV_DM_CHECK_SR_SIM_MATCH,                  "[DM][SRV] srv_dm_check_sr_sim_match(), result: %d, mode: %Msrv_mode_state_enum, reg_sim: %Mmmi_sim_enum")
TRC_MSG(TRC_SRV_DM_OTAP_CCA_APP_GET_PROF_HDLR,          "[DM][SRV] srv_dm_otap_cca_app_get_prof_hdlr()")
TRC_MSG(TRC_SRV_DM_OTAP_CCA_APP_CONFIGURE_HDLR,         "[DM][SRV] srv_dm_otap_cca_app_configure_hdlr()")
TRC_MSG(TRC_SRV_DM_OTAP_CCA_APP_UPDATE_PROF_HDLR,       "[DM][SRV] srv_dm_otap_cca_app_update_prof_hdlr()")
TRC_MSG(TRC_SRV_DM_OTAP_SEND_CCA_APP_GET_PROF_RSP,      "[DM][SRV] srv_dm_otap_send_cca_app_get_prof_rsp(), status: %Msrv_cca_status_enum")
TRC_MSG(TRC_SRV_DM_OTAP_SEND_CCA_APP_CONFIGURE_RSP,     "[DM][SRV] srv_dm_otap_send_cca_app_configure_rsp(), status: %Msrv_cca_status_enum")
TRC_MSG(TRC_SRV_DM_OTAP_SEND_CCA_APP_UPDATE_PROF_RSP,   "[DM][SRV] srv_dm_otap_send_cca_app_update_prof_rsp(), status: %Msrv_cca_status_enum")
TRC_MSG(TRC_SRV_DM_OTAP_INSTALL_PROF_APP_RSP,           "[DM][SRV] srv_dm_otap_install_prof_app_rsp(), status: %Msrv_cca_status_enum")
TRC_MSG(TRC_SRV_DM_OTAP_GET_VALID_PROF_NUM,             "[DM][SRV] srv_dm_otap_get_valid_prof_num(), number: %d")
TRC_MSG(TRC_SRV_DM_OTAP_CHECK_OTAP_PROF_VALID,          "[DM][SRV] srv_dm_otap_check_otap_prof_valid(), is_valid: %d")
TRC_MSG(TRC_SRV_DM_OTAP_CHECK_CURR_PROF_IS_TO_UPDATE,   "[DM][SRV] srv_dm_otap_check_curr_prof_is_to_udpate(), match_update: %d")
TRC_MSG(TRC_SRV_DM_OTAP_INSTALL_PROF,                   "[DM][SRV] srv_dm_otap_install_prof()")
TRC_MSG(TRC_SRV_DM_OTAP_FIND_NEXT_PROF,                 "[DM][SRV] srv_dm_otap_find_next_prof(), iter: %d")
TRC_MSG(TRC_SRV_DM_ACC_GET_ACC_REQ_HDLR,                "[DM][SRV] srv_dm_acc_get_acc_req_hdlr(), server_id: %s")
TRC_MSG(TRC_SRV_DM_ACC_RESTORE_DEFAULT_ACC,             "[DM][SRV] srv_dm_acc_restore_default_acc()")
TRC_MSG(TRC_SRV_DM_ACC_CHECK_SERVER_ID_EXIST,           "[DM][SRV] srv_dm_acc_check_server_id_exist(), is_exist: %d")
TRC_MSG(TRC_SRV_DM_ACC_DTCNT_CHANGED_HDLR,              "[DM][SRV] srv_dm_acc_dtcnt_changed_hdlr(), evt_id: %Mmmi_rp_srv_dtcnt_event_enum")
TRC_MSG(TRC_SRV_DM_ACC_GET_CURR_USED_DTCNT,             "[DM][SRV] srv_dm_acc_get_curr_used_dtcnt_id(), dtcnt_id: %d")
TRC_MSG(TRC_SRV_DM_ACC_GET_PROXY_INFO,                  "[DM][SRV] srv_dm_acc_get_proxy_info(), dtcnt_id: %d, proxy_is_used: %d, proxy_addr: %s, proxy_port: %d")

TRC_MSG(TRC_SRV_DM_LAWMO_REBOOT_LOCK,                   "[DM][SRV] REBOOT LOCK STATUS")
TRC_MSG(TRC_SRV_DM_LAWMO_REBOOT_UNLOCK,                 "[DM][SRV] REBOOT UNLOCK STATUS")
TRC_MSG(TRC_SRV_DM_LAWMO_REQ_IND_HDLR,                  "[DM][SRV] srv_dm_lawmo_req_ind_hdlr()")
TRC_MSG(TRC_SRV_DM_LAWMO_LOCK_SEND_EVT,                 "[DM][SRV] srv_dm_lawmo_lock_send_evt(), cmd = %Msrv_dm_lawmo_lock_cmd_enum")
TRC_MSG(TRC_SRV_DM_LAWMO_WIPE_SEND_EVT,                 "[DM][SRV] srv_dm_lawmo_wipe_send_evt(), cmd = %Msrv_dm_lawmo_wipe_cmd_enum")
TRC_MSG(TRC_SRV_DM_LAWMO_IS_LOCK,                       "[DM][SRV] srv_dm_lawmo_is_locked(), result: %d")
TRC_MSG(TRC_SRV_DM_LAWMO_SAVE_LOCK_STATUS_TO_NVRAM,     "[DM][SRV] srv_dm_lawmo_save_lock_status_to_nvram(), is_locked: %d")
TRC_MSG(TRC_SRV_DM_LAWMO_GET_LOCK_STATUS_FROM_NVRAM,    "[DM][SRV] srv_dm_lawmo_get_lock_status_from_nvram(), is_locked: %d")
TRC_MSG(TRC_SRV_DM_LAWMO_SAVE_WIPE_STATUS_TO_NVRAM,     "[DM][SRV] srv_dm_lawmo_save_wipe_status_to_nvram(), is_wipping: %d")
TRC_MSG(TRC_SRV_DM_LAWMO_GET_WIPE_STATUS_FROM_NVRAM,    "[DM][SRV] srv_dm_lawmo_get_wipe_status_from_nvram(), is_wipping: %d")
TRC_MSG(TRC_SRV_DM_LAWMO_EXE_LOCK_CMD,                  "[DM][SRV] srv_dm_lawmo_exe_lock_cmd(), cmd: %Msrv_dm_lawmo_lock_cmd_enum")
TRC_MSG(TRC_SRV_DM_LAWMO_EXE_WIPE_CMD,                  "[DM][SRV] srv_dm_lawmo_exe_wipe_cmd(), cmd: %Msrv_dm_lawmo_wipe_cmd_enum")
TRC_MSG(TRC_SRV_DM_SCOMO_INSTALL_BY_SERVER_IND,         "[DM][SRV] srv_dm_scomo_install_by_srv_ind_hdlr()")
TRC_MSG(TRC_SRV_DM_SCOMO_REMOVE_BY_SERVER_IND,          "[DM][SRV] srv_dm_scomo_remove_by_srv_ind_hdlr()")
TRC_MSG(TRC_SRV_DM_SCOMO_REPORT_SERVER_CMD,             "[DM][SRV] srv_dm_scomo_report() <Server command>")
TRC_MSG(TRC_SRV_DM_SCOMO_REPORT_APP_CMD,                "[DM][SRV] srv_dm_scomo_report() <APP command>")
TRC_MSG(TRC_SRV_DM_SCOMO_HANDLE_UNFINISHED_REPORT,      "[DM][SRV] srv_dm_scomo_handle_unfinished_report()")
TRC_MSG(TRC_SRV_DM_MO_GET_STATUS,                       "[DM][SRV] srv_dm_scomo_get_status(): mo_type = %Msrv_dm_mo_type_enum, mo_status = %Msrv_dm_status_enum")
TRC_MSG(TRC_SRV_DM_MO_GET_MO_TYPE,                      "[DM][SRV] srv_dm_scomo_get_mo_type(): mo_type = %Msrv_dm_mo_type_enum")

TRC_MSG(MMI_DMUI_LAWMO_REG_NOTIFY_EMPTY_CB,             "[DMUI][LAWMO] mmi_dmui_lawmo_register_notify() <Empty callback function!>: app_id = %Mmmi_dmui_app_id_enum, mo_type = %Mmmi_dmui_mo_type_enum")
TRC_MSG(MMI_DMUI_LAWMO_REG_NOTIFY_EXISY_CB,             "[DMUI][LAWMO] mmi_dmui_lawmo_register_notify() <Exist callback function!>: app_id = %Mmmi_dmui_app_id_enum, mo_type = %Mmmi_dmui_mo_type_enum")
TRC_MSG(MMI_DMUI_LAWMO_REG_NOTIFY_REPLACE_CB,           "[DMUI][LAWMO] mmi_dmui_lawmo_register_notify() <Callback replace!>: app_id = %Mmmi_dmui_app_id_enum, mo_type = %Mmmi_dmui_mo_type_enum")
TRC_MSG(MMI_DMUI_LAWMO_REG_NOTIFY_SUCCESS,              "[DMUI][LAWMO] mmi_dmui_lawmo_register_notify() <SUCCESS!>: app_id = %Mmmi_dmui_app_id_enum, mo_type = %Mmmi_dmui_mo_type_enum")
TRC_MSG(MMI_DMUI_LAWMO_REQ_IND_HDLR,                    "[DMUI][LAWMO] mmi_dmui_lawmo_req_ind_hdlr()")
TRC_MSG(MMI_DMUI_LAWMO_CMD_SENDER,                      "[DMUI][LAWMO] mmi_dmui_lawmo_cmd_sender()")
TRC_MSG(MMI_DMUI_LAWMO_CMD_SENDER_INFO,                 "[DMUI][LAWMO] mmi_dmui_lawmo_cmd_sender(): app_id = %Mmmi_dmui_app_id_enum, cmd = %Mmmi_dmui_cmd_enum")
TRC_MSG(MMI_DMUI_LAWMO_REQ_IND_HDLR_NO_CB,              "[DMUI][LAWMO] mmi_dmui_lawmo_cmd_sender() <No callback function has been called>")
TRC_MSG(MMI_DMUI_LAWMO_CMD_SPE_APP_SENDER_INFO,         "[DMUI][LAWMO] mmi_dmui_lawmo_special_app_cmd_sender(): app_id = %Mmmi_dmui_app_id_enum, cmd = %Mmmi_dmui_cmd_enum")
TRC_MSG(MMI_DMUI_LAWMO_REPORT_INFO,                     "[DMUI][LAWMO] mmi_dmui_lawmo_report(): app_id = %Mmmi_dmui_app_id_enum, cmd = %Mmmi_dmui_cmd_enum, result = %Mmmi_dmui_result_enum")
TRC_MSG(MMI_DMUI_LAWMO_REPORT_COMPLETE,                 "[DMUI][LAWMO] mmi_dmui_lawmo_report() <All app reported!>")
TRC_MSG(MMI_DMUI_LAWMO_CMD_FINISH,                      "[DMUI][LAWMO] mmi_dmui_lawmo_cmd_finish()")
TRC_MSG(MMI_DMUI_LAWMO_REBOOT_LOCK,                     "[DMUI][LAWMO] REBOOT LOCK STATUS")
TRC_MSG(MMI_DMUI_LAWMO_REBOOT_UNLOCK,                   "[DMUI][LAWMO] REBOOT UNLOCK STATUS")
TRC_MSG(MMI_DMUI_SCOMO_REG_NOTIFY_EMPTY_CB,             "[DMUI][SCOMO] mmi_dmui_scomo_register_notify() <Empty callback function!>: app_id = %Mmmi_dmui_app_id_enum, mo_type = %Mmmi_dmui_mo_type_enum")
TRC_MSG(MMI_DMUI_SCOMO_REG_NOTIFY_EXIST_CB,             "[DMUI][SCOMO] mmi_dmui_scomo_register_notify() <Exist callback function!>: app_id = %Mmmi_dmui_app_id_enum, mo_type = %Mmmi_dmui_mo_type_enum")
TRC_MSG(MMI_DMUI_SCOMO_REG_NOTIFY_REPLACE_CB,           "[DMUI][SCOMO] mmi_dmui_scomo_register_notify() <Callback replace!>: app_id = %Mmmi_dmui_app_id_enum, mo_type = %Mmmi_dmui_mo_type_enum")
TRC_MSG(MMI_DMUI_SCOMO_REG_NOTIFY_SUCCESS,              "[DMUI][SCOMO] mmi_dmui_scomo_register_notify() <SUCCESS!>: app_id = %Mmmi_dmui_app_id_enum, mo_type = %Mmmi_dmui_mo_type_enum")
TRC_MSG(MMI_DMUI_SCOMO_REPORT_INFO,                     "[DMUI][SCOMO] mmi_dmui_scomo_report(): app_id = %Mmmi_dmui_app_id_enum, cmd = %Mmmi_dmui_cmd_enum, result = %Mmmi_dmui_result_enum")
TRC_MSG(MMI_DMUI_SCOMO_REPORT_SERVER_CMD,               "[DMUI][SCOMO] mmi_dmui_scomo_report() <Server command>")
TRC_MSG(MMI_DMUI_SCOMO_REPORT_APP_CMD,                  "[DMUI][SCOMO] mmi_dmui_scomo_report() <APP command>")
TRC_MSG(MMI_DMUI_SCOMO_HANDLE_UNFINISHED_REPORT,        "[DMUI][SCOMO] mmi_dmui_scomo_handle_unfinished_report()")
TRC_MSG(MMI_DMUI_MO_GET_MO_CMD,                         "[DMUI][MO] mmi_dmui_get_mo_cmd(): cmd = %Mmmi_dmui_cmd_enum")
TRC_MSG(MMI_DMUI_MO_GET_STATUS,                         "[DMUI][MO] mmi_dmui_get_status(): mo_type = %Mmmi_dmui_mo_type_enum, mo_status = %Mmmi_dmui_status_enum")
TRC_MSG(MMI_DMUI_MO_GET_MO_TYPE,                        "[DMUI][MO] mmi_dmui_get_mo_type(): mo_type = %Mmmi_dmui_mo_type_enum")
