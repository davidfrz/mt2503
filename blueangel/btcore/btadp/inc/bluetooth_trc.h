/* Copyright Statement:
 *
 * This software/firmware and related documentation ("MediaTek Software") are
 * protected under relevant copyright laws. The information contained herein
 * is confidential and proprietary to MediaTek Inc. and/or its licensors.
 * Without the prior written permission of MediaTek inc. and/or its licensors,
 * any reproduction, modification, use or disclosure of MediaTek Software,
 * and information contained herein, in whole or in part, shall be strictly prohibited.
 *
 * MediaTek Inc. (C) 2010. All rights reserved.
 *
 * BY OPENING THIS FILE, RECEIVER HEREBY UNEQUIVOCALLY ACKNOWLEDGES AND AGREES
 * THAT THE SOFTWARE/FIRMWARE AND ITS DOCUMENTATIONS ("MEDIATEK SOFTWARE")
 * RECEIVED FROM MEDIATEK AND/OR ITS REPRESENTATIVES ARE PROVIDED TO RECEIVER ON
 * AN "AS-IS" BASIS ONLY. MEDIATEK EXPRESSLY DISCLAIMS ANY AND ALL WARRANTIES,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE IMPLIED WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE OR NONINFRINGEMENT.
 * NEITHER DOES MEDIATEK PROVIDE ANY WARRANTY WHATSOEVER WITH RESPECT TO THE
 * SOFTWARE OF ANY THIRD PARTY WHICH MAY BE USED BY, INCORPORATED IN, OR
 * SUPPLIED WITH THE MEDIATEK SOFTWARE, AND RECEIVER AGREES TO LOOK ONLY TO SUCH
 * THIRD PARTY FOR ANY WARRANTY CLAIM RELATING THERETO. RECEIVER EXPRESSLY ACKNOWLEDGES
 * THAT IT IS RECEIVER'S SOLE RESPONSIBILITY TO OBTAIN FROM ANY THIRD PARTY ALL PROPER LICENSES
 * CONTAINED IN MEDIATEK SOFTWARE. MEDIATEK SHALL ALSO NOT BE RESPONSIBLE FOR ANY MEDIATEK
 * SOFTWARE RELEASES MADE TO RECEIVER'S SPECIFICATION OR TO CONFORM TO A PARTICULAR
 * STANDARD OR OPEN FORUM. RECEIVER'S SOLE AND EXCLUSIVE REMEDY AND MEDIATEK'S ENTIRE AND
 * CUMULATIVE LIABILITY WITH RESPECT TO THE MEDIATEK SOFTWARE RELEASED HEREUNDER WILL BE,
 * AT MEDIATEK'S OPTION, TO REVISE OR REPLACE THE MEDIATEK SOFTWARE AT ISSUE,
 * OR REFUND ANY SOFTWARE LICENSE FEES OR SERVICE CHARGE PAID BY RECEIVER TO
 * MEDIATEK FOR SUCH MEDIATEK SOFTWARE AT ISSUE.
 *
 * The following software/firmware and/or related documentation ("MediaTek Software")
 * have been modified by MediaTek Inc. All revisions are subject to any receiver's
 * applicable license agreements with MediaTek Inc.
 */

/*****************************************************************************
*  Copyright Statement:
*  --------------------
*  This software is protected by Copyright and the information contained
*  herein is confidential. The software may not be copied and the information
*  contained herein may not be used or disclosed except with the written
*  permission of MediaTek Inc. (C) 2005
*
*  BY OPENING THIS FILE, BUYER HEREBY UNEQUIVOCALLY ACKNOWLEDGES AND AGREES
*  THAT THE SOFTWARE/FIRMWARE AND ITS DOCUMENTATIONS ("MEDIATEK SOFTWARE")
*  RECEIVED FROM MEDIATEK AND/OR ITS REPRESENTATIVES ARE PROVIDED TO BUYER ON
*  AN "AS-IS" BASIS ONLY. MEDIATEK EXPRESSLY DISCLAIMS ANY AND ALL WARRANTIES,
*  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE IMPLIED WARRANTIES OF
*  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE OR NONINFRINGEMENT.
*  NEITHER DOES MEDIATEK PROVIDE ANY WARRANTY WHATSOEVER WITH RESPECT TO THE
*  SOFTWARE OF ANY THIRD PARTY WHICH MAY BE USED BY, INCORPORATED IN, OR
*  SUPPLIED WITH THE MEDIATEK SOFTWARE, AND BUYER AGREES TO LOOK ONLY TO SUCH
*  THIRD PARTY FOR ANY WARRANTY CLAIM RELATING THERETO. MEDIATEK SHALL ALSO
*  NOT BE RESPONSIBLE FOR ANY MEDIATEK SOFTWARE RELEASES MADE TO BUYER'S
*  SPECIFICATION OR TO CONFORM TO A PARTICULAR STANDARD OR OPEN FORUM.
*
*  BUYER'S SOLE AND EXCLUSIVE REMEDY AND MEDIATEK'S ENTIRE AND CUMULATIVE
*  LIABILITY WITH RESPECT TO THE MEDIATEK SOFTWARE RELEASED HEREUNDER WILL BE,
*  AT MEDIATEK'S OPTION, TO REVISE OR REPLACE THE MEDIATEK SOFTWARE AT ISSUE,
*  OR REFUND ANY SOFTWARE LICENSE FEES OR SERVICE CHARGE PAID BY BUYER TO
*  MEDIATEK FOR SUCH MEDIATEK SOFTWARE AT ISSUE.
*
*  THE TRANSACTION CONTEMPLATED HEREUNDER SHALL BE CONSTRUED IN ACCORDANCE
*  WITH THE LAWS OF THE STATE OF CALIFORNIA, USA, EXCLUDING ITS CONFLICT OF
*  LAWS PRINCIPLES.  ANY DISPUTES, CONTROVERSIES OR CLAIMS ARISING THEREOF AND
*  RELATED THERETO SHALL BE SETTLED BY ARBITRATION IN SAN FRANCISCO, CA, UNDER
*  THE RULES OF THE INTERNATIONAL CHAMBER OF COMMERCE (ICC).
*
*****************************************************************************/

/*******************************************************************************
 * Filename:
 * ---------
 *   bluetooth_trc.h
 *
 * Project:
 * --------
 *   MAUI
 *
 * Description:
 * ------------
 *   This is trace map definition.
 *
 * Author:
 * -------
 * -------
 *
 *==============================================================================
 * 				HISTORY
 * Below this line, this part is controlled by PVCS VM. DO NOT MODIFY!!
 *------------------------------------------------------------------------------
 * removed!
 * removed!
 * removed!
 *
 * removed!
 * removed!
 * removed!
 *
 * removed!
 * removed!
 * removed!
 *
 * removed!
 * removed!
 * removed!
 *
 * removed!
 * removed!
 * removed!
 *

 * removed!
 * removed!
 * removed!
 * removed!
 * removed!
 * removed!
 * removed!
 *
 * removed!
 * removed!
 * removed!
 *
 * removed!
 * removed!
 * removed!
 *
 * removed!
 * removed!
 * removed!
 * removed!
 *
 * removed!
 * removed!
 * removed!
 *
 * removed!
 * removed!
 * removed!
 *
 * removed!
 * removed!
 * removed!
 * removed!
 *
 * removed!
 * removed!
 * removed!
 *
 * removed!
 * removed!
 * removed!
 *
 * removed!
 * removed!
 * removed!
 *
 * removed!
 * removed!
 * removed!
 *
 * removed!
 * removed!
 * removed!
 *
 * removed!
 * removed!
 * removed!
 *
 * removed!
 * removed!
 * removed!
 *
 * removed!
 * removed!
 * removed!
 *
 * removed!
 * removed!
 * removed!
 *
 * removed!
 * removed!
 * removed!
 *
 * removed!
 * removed!
 * removed!
 *
 * removed!
 * removed!
 * removed!
 *
 * removed!
 * removed!
 * removed!
 *
 * removed!
 * removed!
 * removed!
 *
 * removed!
 * removed!
 * removed!
 *
 * removed!
 * removed!
 * removed!
 *
 * removed!
 * removed!
 * removed!
 *
 * removed!
 * removed!
 *
 *
 * removed!
 * removed!
 *
 *
 * removed!
 * removed!
 *
 *
 * removed!
 * removed!
 *
 *
 * removed!
 * removed!
 *
 *
 * removed!
 * removed!
 *
 *
 * removed!
 * removed!
 *
 *
 * removed!
 * removed!
 *
 *
 * removed!
 * removed!
 *
 *
 * removed!
 * removed!
 *
 *
 * removed!
 * removed!
 *
 *
 * removed!
 * removed!
 *
 *
 * removed!
 * removed!
 *
 *
 * removed!
 * removed!
 *
 *
 * removed!
 * removed!
 *
 *
 * removed!
 * removed!
 *
 *
 * removed!
 * removed!
 *
 *
 * removed!
 * removed!
 *
 *
 * removed!
 * removed!
 *
 *
 * removed!
 * removed!
 *
 *
 * removed!
 * removed!
 *
 *
 * removed!
 * removed!
 *
 *
 * removed!
 * removed!
 *
 *
 * removed!
 * removed!
 *
 *
 * removed!
 * removed!
 *
 *
 * removed!
 * removed!
 *
 *
 * removed!
 * removed!
 *
 *
 * removed!
 * removed!
 *
 *
 * removed!
 * removed!
 *
 *
 * removed!
 * removed!
 *
 *
 * removed!
 * removed!
 *
 *
 * removed!
 * removed!
 *
 *
 * removed!
 * removed!
 *
 *
 * removed!
 * removed!
 *
 *
 * removed!
 * removed!
 *
 *
 * removed!
 * removed!
 *
 *
 * removed!
 * removed!
 *
 *
 * removed!
 * removed!
 *
 *
 * removed!
 * removed!
 *
 *
 * removed!
 * removed!
 *
 *
 * removed!
 * removed!
 *
 *
 * removed!
 * removed!
 *
 *
 * removed!
 * removed!
 *
 *
 * removed!
 * removed!
 *
 *
 * removed!
 * removed!
 *
 *
 * removed!
 * removed!
 *
 *
 * removed!
 * removed!
 *
 *
 * removed!
 * removed!
 *
 *
 * removed!
 * removed!
 *
 *
 * removed!
 * removed!
 *
 *
 * removed!
 * removed!
 *
 *
 * removed!
 * removed!
 *
 *
 * removed!
 * removed!
 *
 *
 * removed!
 * removed!
 *
 *
 * removed!
 * removed!
 *
 *
 * removed!
 * removed!
 *
 *
 * removed!
 * removed!
 *
 *
 * removed!
 * removed!
 *
 *
 * removed!
 * removed!
 *
 *
 * removed!
 * removed!
 *
 *
 * removed!
 * removed!
 *
 *
 * removed!
 * removed!
 *
 *
 * removed!
 * removed!
 *
 *
 * removed!
 * removed!
 *
 *
 * removed!
 * removed!
 *
 *
 * removed!
 * removed!
 *
 *
 * removed!
 * removed!
 *
 *
 * removed!
 * removed!
 *
 *
 * removed!
 * removed!
 *
 *
 * removed!
 * removed!
 *
 *
 * removed!
 * removed!
 *
 *
 * removed!
 * removed!
 *
 *
 * removed!
 * removed!
 *
 *
 * removed!
 * removed!
 *
 *
 * removed!
 * removed!
 *
 *
 * removed!
 * removed!
 *
 *
 * removed!
 * removed!
 *
 *
 * removed!
 * removed!
 *
 *
 * removed!
 * removed!
 *
 *
 * removed!
 * removed!
 *
 *
 * removed!
 * removed!
 *
 *
 * removed!
 * removed!
 *
 *
 * removed!
 * removed!
 *
 *
 * removed!
 * removed!
 *
 *
 * removed!
 * removed!
 *
 *
 * removed!
 * removed!
 *
 *
 * removed!
 * removed!
 *
 *
 * removed!
 * removed!
 *
 *
 * removed!
 * removed!
 *
 *
 * removed!
 * removed!
 *
 *
 * removed!
 * removed!
 *
 *
 * removed!
 * removed!
 *
 *
 * removed!
 * removed!
 *
 *
 * removed!
 * removed!
 *
 *
 * removed!
 * removed!
 *
 *
 * removed!
 * removed!
 *
 *
 * removed!
 * removed!
 *
 *
 * removed!
 * removed!
 *
 *
 * removed!
 * removed!
 *
 *
 * removed!
 * removed!
 *
 *
 * removed!
 * removed!
 *
 *
 * removed!
 * removed!
 *
 *
 * removed!
 * removed!
 *
 *
 * removed!
 * removed!
 *
 *
 * removed!
 * removed!
 *
 *
 * removed!
 * removed!
 *
 *
 * removed!
 * removed!
 *
 *
 * removed!
 * removed!
 *
 *
 * removed!
 * removed!
 *
 *
 * removed!
 * removed!
 *
 *
 * removed!
 * removed!
 *
 *
 * removed!
 * removed!
 *
 *
 * removed!
 * removed!
 *
 *
 * removed!
 * removed!
 *
 *
 * removed!
 * removed!
 * removed!
 *
 * removed!
 * removed!
 * removed!
 *
 * removed!
 * removed!
 *
 *
 * removed!
 * removed!
 * removed!
 *
 * removed!
 * removed!
 *
 *
 * removed!
 * removed!
 *
 *
 * removed!
 * removed!
 * removed!
 *
 * removed!
 * removed!
 *
 *
 * removed!
 * removed!
 *
 *
 * removed!
 * removed!
 *
 *
 * removed!
 * removed!
 *
 *
 * removed!
 * removed!
 *
 *
 * removed!
 * removed!
 *
 *
 * removed!
 * removed!
 *
 *
 * removed!
 * removed!
 *
 *
 * removed!
 * removed!
 *
 *
 * removed!
 * removed!
 *
 *
 * removed!
 * removed!
 *
 *
 * removed!
 * removed!
 *
 *
 * removed!
 * removed!
 *
 *
 * removed!
 * removed!
 *
 *
 * removed!
 * removed!
 *
 *
 * removed!
 * removed!
 *
 *
 * removed!
 * removed!
 *
 *
 * removed!
 * removed!
 *
 *
 * removed!
 * removed!
 *
 *
 * removed!
 * removed!
 * removed!
 *
 * removed!
 * removed!
 *
 *
 * removed!
 * removed!
 *
 *
 * removed!
 * removed!
 *
 *
 * removed!
 * removed!
 *
 *
 * removed!
 * removed!
 *
 *
 * removed!
 * removed!
 *
 *
 * removed!
 * removed!
 * removed!
 *
 * removed!
 * removed!
 * removed!
 *
 * removed!
 * removed!
 *
 *
 * removed!
 * removed!
 *
 *
 * removed!
 * removed!
 * removed!
 *
 * removed!
 * removed!
 *
 *
 * removed!
 * removed!
 * removed!
 *
 * removed!
 * removed!
 *
 *
 * removed!
 * removed!
 *
 *
 * removed!
 * removed!
 *
 *
 * removed!
 * removed!
 *
 *
 * removed!
 * removed!
 *
 *
 * removed!
 * removed!
 *
 *
 * removed!
 * removed!
 *
 *
 * removed!
 * removed!
 *
 *
 * removed!
 * removed!
 *
 *
 * removed!
 * removed!
 *
 *
 * removed!
 * removed!
 * removed!
 *
 * removed!
 * removed!
 * removed!
 *
 * removed!
 * removed!
 *
 *
 * removed!
 * removed!
 *
 *
 * removed!
 * removed!
 *
 *
 * removed!
 * removed!
 *
 *
 * removed!
 * removed!
 *
 *
 * removed!
 * removed!
 *
 *
 * removed!
 * removed!
 *
 *
 * removed!
 * removed!
 *
 *
 * removed!
 * removed!
 *
 *
 * removed!
 * removed!
 *
 *
 * removed!
 * removed!
 *
 *
 * removed!
 * removed!
 *
 *
 * removed!
 * removed!
 *
 *
 * removed!
 * removed!
 *
 *
 * removed!
 * removed!
 *
 *
 * removed!
 * removed!
 *
 *
 * removed!
 * removed!
 *
 *
 * removed!
 * removed!
 *
 *
 * removed!
 * removed!
 *
 *
 * removed!
 * removed!
 *
 *
 * removed!
 * removed!
 *
 *
 * removed!
 * removed!
 *
 *
 * removed!
 * removed!
 *
 *
 * removed!
 * removed!
 *
 *
 * removed!
 * removed!
 * removed!
 *
 *------------------------------------------------------------------------------
 * Upper this line, this part is controlled by PVCS VM. DO NOT MODIFY!!
 *==============================================================================
 *******************************************************************************/

#ifndef _BLUETOOTH_TRC_H
#define _BLUETOOTH_TRC_H
#ifdef BTMTK_ON_MAUI
#include "stack_config.h"
#include "kal_trace.h"
#ifndef GEN_FOR_PC
#ifndef _STACK_CONFIG_H
#error "stack_config.h should be included before tst_config.h"
#endif

#else
#include "kal_trace.h"
#endif /* GEN_FOR_PC */


#ifndef _KAL_TRACE_H
#error "kal_trace.h should be included before tst_trace.h"
#endif

#else /* BTMTK_ON_MAUI */
#include "bt_adp_log.h"
#endif  /* BTMTK_ON_MAUI */

#if !defined(GEN_FOR_PC)
#if defined(__TST_MODULE__) || defined(__CUSTOM_RELEASE__)
#include "bluetooth_trc_gen.h"
#endif /* TST Trace Defintion */
#endif

#define BT_TRACE_FUNC TRACE_FUNC
#define BT_TRACE_STATE TRACE_STATE
#define BT_TRACE_INFO TRACE_INFO                /* */
#define BT_TRACE_WARNING TRACE_WARNING          /* */
#define BT_TRACE_ERROR 	 TRACE_ERROR            /* FAULT ERROR */
#define BT_TRACE_G1_PROTOCOL TRACE_GROUP_1      /* L2CAP/SDP/RFCOMM */
#define BT_TRACE_G2_PROFILES TRACE_GROUP_2      /* HID/DI/PAN */
#define BT_TRACE_G3_TRAN TRACE_GROUP_3          /* Transport layer */
#define BT_TRACE_G4_SPP TRACE_GROUP_4           /* SPP/DUN */
#define BT_TRACE_G5_HF TRACE_GROUP_5            /* HF/HS */
#define BT_TRACE_G6_OBEX TRACE_GROUP_6          /* OBEX/OPP/FTP */
#define BT_TRACE_G7_A2DP TRACE_GROUP_7          /* A2DP */
#define BT_TRACE_G7_GAVDP TRACE_GROUP_7        /* GAVDP */
#define BT_TRACE_G8_AVRCP TRACE_GROUP_8         /* AVRCP */
#define BT_TRACE_G9_BPP TRACE_GROUP_9  	        /* BIP/BPP/PBAP/MAP */
#define BT_TRACE_G10_RESERVED TRACE_GROUP_10
#define BT_TRACE_JSR82_GROUP   TRACE_GROUP_10   /* JSR82 */
#define BT_TRACE_BLE_PROFILES	TRACE_GROUP_10	/* HTP/FMP */

/* FUNC */
#define BT_FUNC_ENTRY_LOG(TAG)                kal_trace(TRACE_FUNC, TAG)
#define BT_FUNC_ENTRY_LOG1(TAG, ARG1)         kal_trace(TRACE_FUNC, TAG, (ARG1))
#define BT_FUNC_ENTRY_LOG2(TAG, ARG1, ARG2)   kal_trace(TRACE_FUNC, TAG, (ARG1), (ARG2))

/* STATE */
#define BT_STATE_LOG(state)            			kal_trace(TRACE_STATE, BT_CM_STATE_STATE, (state))
#define BT_REGISTER_STATE_LOG(state)          kal_trace(TRACE_STATE, BT_REGISTER_STATE, (state))

/* INFO */
#define BT_INFO_LOG(TAG)                      kal_trace(TRACE_INFO, TAG)

/* WARNNING */
#define BT_WARNING_LOG(TAG)                   kal_trace(TRACE_WARNING, TAG)
#define BT_WARNING_LOG1(TAG, ARG1)            kal_trace(TRACE_WARNING, TAG, (ARG1))
#define BT_WARNING_LOG2(TAG, ARG1,ARG2)       kal_trace(TRACE_WARNING, TAG, (ARG1),(ARG2))
#define BT_WARNING_LOG3(TAG, ARG1,ARG2,ARG3)  kal_trace(TRACE_WARNING, TAG, (ARG1),(ARG2),(ARG3))

/* ERROR */
#define BT_ERROR_LOG(TAG)                     kal_trace(TRACE_ERROR, TAG)
#define BT_ERROR_LOG1(TAG,ARG1)               kal_trace(TRACE_ERROR, TAG, (ARG1))
#define BT_ERROR_LOG2(TAG,ARG1,ARG2)          kal_trace(TRACE_ERROR, TAG, (ARG1), (ARG2))

/* general */
#define BT_TRACE(args) kal_lib_trace args

/* BIP*/
#define BT_BIP_FUNC_ENTRY(TAG)    kal_trace(BT_TRACE_G6_OBEX, TAG)
#define BT_BIP_FUNC_ENTRY1(TAG, ARG1)    kal_trace(BT_TRACE_G6_OBEX, TAG, (ARG1))
#define BT_BIP_FUNC_ENTRY2(TAG, ARG1, ARG2)    kal_trace(BT_TRACE_G6_OBEX, TAG, (ARG1), (ARG2))
#define BT_BIP_FUNC_ENTRY3(TAG, ARG1, ARG2, ARG3)    kal_trace(BT_TRACE_G6_OBEX, TAG, (ARG1), (ARG2), (ARG3))
#define BT_BIP_FUNC_ENTRY4(TAG, ARG1, ARG2, ARG3, ARG4)    kal_trace(BT_TRACE_G6_OBEX, TAG, (ARG1), (ARG2), (ARG3), (ARG4))
#define BT_BIP_FUNC_ENTRY5(TAG, ARG1, ARG2, ARG3, ARG4, ARG5)    kal_trace(BT_TRACE_G6_OBEX, TAG, (ARG1), (ARG2), (ARG3), (ARG4), (ARG5))
#define BT_BIP_FUNC_ENTRY6(TAG, ARG1, ARG2, ARG3, ARG4, ARG5, ARG6)    kal_trace(BT_TRACE_G6_OBEX, TAG, (ARG1), (ARG2), (ARG3), (ARG4), (ARG5), (ARG6))
#define BT_BIP_I_STATE(ARG1)    kal_trace(BT_TRACE_G6_OBEX, BT_BIP_PRINT_I_STATE, (ARG1))
#define BT_BIP_I_STATE_TRANS(ARG1, ARG2) kal_trace(BT_TRACE_G6_OBEX, BT_BIP_PRINT_I_STATE_TRANS, (ARG1), (ARG2))
#define BT_BIP_R_STATE(ARG1)    kal_trace(BT_TRACE_G6_OBEX, BT_BIP_PRINT_R_STATE, (ARG1))
#define BT_BIP_R_STATE_TRANS(ARG1, ARG2) kal_trace(BT_TRACE_G6_OBEX, BT_BIP_PRINT_R_STATE_TRANS, (ARG1), (ARG2))
#define BT_BIP_LOG(TAG) kal_trace(BT_TRACE_G6_OBEX, TAG)
#define BT_BIP_LOG1(TAG, ARG1) kal_trace(BT_TRACE_G6_OBEX, TAG, ARG1)
#define BT_BIP_LOG2(TAG, ARG1, ARG2) kal_trace(BT_TRACE_G6_OBEX, TAG, ARG1, ARG2)
#define BT_BIP_LOG3(TAG, ARG1, ARG2, ARG3) kal_trace(BT_TRACE_G6_OBEX, TAG, ARG1, ARG2, ARG3)


/* CSJ_PBAP */
#define BT_PBAP_LOG(TAG)    kal_trace(BT_TRACE_G6_OBEX, TAG)
#define BT_PBAP_LOG1(TAG, ARG1)    kal_trace(BT_TRACE_G6_OBEX, TAG, (ARG1))
#define BT_PBAP_LOG2(TAG, ARG1, ARG2)    kal_trace(BT_TRACE_G6_OBEX, TAG, (ARG1), (ARG2))
#define BT_PBAP_LOG3(TAG, ARG1, ARG2, ARG3)    kal_trace(BT_TRACE_G6_OBEX, TAG, (ARG1), (ARG2), (ARG3))
#define BT_PBAP_LOG4(TAG, ARG1, ARG2, ARG3, ARG4)    kal_trace(BT_TRACE_G6_OBEX, TAG, (ARG1), (ARG2), (ARG3), (ARG4))
#define BT_PBAP_LOG5(TAG, ARG1, ARG2, ARG3, ARG4, ARG5)    kal_trace(BT_TRACE_G6_OBEX, TAG, (ARG1), (ARG2), (ARG3), (ARG4), (ARG5))
#define BT_PBAP_LOG6(TAG, ARG1, ARG2, ARG3, ARG4, ARG5, ARG6)    kal_trace(BT_TRACE_G6_OBEX, TAG, (ARG1), (ARG2), (ARG3), (ARG4), (ARG5), (ARG6))
#define BT_PBAP_STATE_LOG(ARG1)    kal_trace(BT_TRACE_G6_OBEX, BT_PBAP_SERVER_STATE_LOG, (ARG1))
#define BT_PBAP_STATE_TRANS_LOG(ARG1, ARG2) kal_trace(BT_TRACE_G6_OBEX, BT_PBAP_SERVER_STATE_TRANS_LOG, (ARG1), (ARG2))

/* BPP*/
#define BT_BPP_FUNC_ENTRY(TAG)    kal_trace(BT_TRACE_G9_BPP, TAG)
#define BT_BPP_FUNC_ENTRY1(TAG, ARG1)    kal_trace(BT_TRACE_G9_BPP, TAG, (ARG1))
#define BT_BPP_FUNC_ENTRY2(TAG, ARG1, ARG2)    kal_trace(BT_TRACE_G9_BPP, TAG, (ARG1), (ARG2))
#define BT_BPP_FUNC_ENTRY3(TAG, ARG1, ARG2, ARG3)    kal_trace(BT_TRACE_G9_BPP, TAG, (ARG1), (ARG2), (ARG3))
#define BT_BPP_FUNC_ENTRY4(TAG, ARG1, ARG2, ARG3, ARG4)    kal_trace(BT_TRACE_G9_BPP, TAG, (ARG1), (ARG2), (ARG3), (ARG4))
#define BT_BPP_FUNC_ENTRY5(TAG, ARG1, ARG2, ARG3, ARG4, ARG5)    kal_trace(BT_TRACE_G9_BPP, TAG, (ARG1), (ARG2), (ARG3), (ARG4), (ARG5))
#define BT_BPP_FUNC_ENTRY6(TAG, ARG1, ARG2, ARG3, ARG4, ARG5, ARG6)    kal_trace(BT_TRACE_G9_BPP, TAG, (ARG1), (ARG2), (ARG3), (ARG4), (ARG5), (ARG6))
#define BT_BPP_STATE(ARG1)    kal_trace(BT_TRACE_G9_BPP, BT_BPP_PRINT_STATE, (ARG1))
#define BT_BPP_STATE_TRANS(ARG1, ARG2) kal_trace(BT_TRACE_G9_BPP, BT_BPP_PRINT_STATE_TRANS, (ARG1), (ARG2))
#define BPP_TRACE_ERROR         BT_TRACE_ERROR
#define BPP_TRACE_WARNING       BT_TRACE_WARNING
#define BPP_TRACE_INFO          BT_TRACE_INFO

#define BT_BPP_TRACE_ERROR(TAG)                     kal_trace(BT_TRACE_G9_BPP, TAG)
#define BT_BPP_TRACE_ERROR_ARG1(TAG,ARG1)           kal_trace(BT_TRACE_G9_BPP, TAG,(ARG1))
#define BT_BPP_TRACE_ERROR_ARG2(TAG,ARG1,ARG2)      kal_trace(BT_TRACE_G9_BPP, TAG,(ARG1),(ARG2))

#define BT_BPP_TRACE_WARNING(TAG)                   kal_trace(BT_TRACE_G9_BPP, TAG)
#define BT_BPP_TRACE_WARNING_ARG1(TAG,ARG1)         kal_trace(BT_TRACE_G9_BPP, TAG,(ARG1))

#define BT_BPP_TRACE_INFO(TAG)                      kal_trace(BT_TRACE_G9_BPP, TAG)
#define BT_BPP_TRACE_INFO_ARG1(TAG,ARG1)            kal_trace(BT_TRACE_G9_BPP, TAG,(ARG1))
#define BT_BPP_TRACE_INFO_ARG2(TAG,ARG1,ARG2)       kal_trace(BT_TRACE_G9_BPP, TAG,(ARG1),(ARG2))
#define BT_BPP_TRACE_INFO_ARG3(TAG,ARG1,ARG2,ARG3)       kal_trace(BT_TRACE_G9_BPP, TAG,(ARG1),(ARG2),(ARG3))
#define BT_BPP_TRACE_INFO_ARG4(TAG,ARG1,ARG2,ARG3,ARG4)       kal_trace(BT_TRACE_G9_BPP, TAG,(ARG1),(ARG2),(ARG3),(ARG4))

/* MAP */
#define BT_MAP_LOG(TAG)    kal_trace(BT_TRACE_G6_OBEX, TAG)
#define BT_MAP_LOG1(TAG, ARG1)    kal_trace(BT_TRACE_G6_OBEX, TAG, (ARG1))
#define BT_MAP_LOG2(TAG, ARG1, ARG2)    kal_trace(BT_TRACE_G6_OBEX, TAG, (ARG1), (ARG2))
#define BT_MAP_LOG3(TAG, ARG1, ARG2, ARG3)    kal_trace(BT_TRACE_G6_OBEX, TAG, (ARG1), (ARG2), (ARG3))
#define BT_MAP_LOG4(TAG, ARG1, ARG2, ARG3, ARG4)    kal_trace(BT_TRACE_G6_OBEX, TAG, (ARG1), (ARG2), (ARG3), (ARG4))
#define BT_MAP_LOG5(TAG, ARG1, ARG2, ARG3, ARG4, ARG5)    kal_trace(BT_TRACE_G6_OBEX, TAG, (ARG1), (ARG2), (ARG3), (ARG4), (ARG5))
#define BT_MAP_LOG6(TAG, ARG1, ARG2, ARG3, ARG4, ARG5, ARG6)    kal_trace(BT_TRACE_G6_OBEX, TAG, (ARG1), (ARG2), (ARG3), (ARG4), (ARG5), (ARG6))
#define BT_MAP_STATE_LOG(ARG1)    kal_trace(BT_TRACE_G6_OBEX, BT_MAP_MCE_STATE_LOG, (ARG1))
#define BT_MAP_STATE_TRANS_LOG(ARG1, ARG2) kal_trace(BT_TRACE_G6_OBEX, BT_PBAP_MCE_STATE_TRANS_LOG, (ARG1), (ARG2))

/* A2DP */
#define BT_A2DP_FUNC_ENTRY(TAG)    kal_trace(BT_TRACE_G7_A2DP, TAG)
#define BT_A2DP_FUNC_ENTRY1(TAG, ARG1)    kal_trace(BT_TRACE_G7_A2DP, TAG, (ARG1))
#define BT_A2DP_FUNC_ENTRY2(TAG, ARG1, ARG2)    kal_trace(BT_TRACE_G7_A2DP, TAG, (ARG1), (ARG2))
#define BT_A2DP_FUNC_ENTRY3(TAG, ARG1, ARG2, ARG3)    kal_trace(BT_TRACE_G7_A2DP, TAG, (ARG1), (ARG2), (ARG3))
#define BT_A2DP_FUNC_ENTRY4(TAG, ARG1, ARG2, ARG3, ARG4)    kal_trace(BT_TRACE_G7_A2DP, TAG, (ARG1), (ARG2), (ARG3), (ARG4))
#define BT_A2DP_FUNC_ENTRY5(TAG, ARG1, ARG2, ARG3, ARG4, ARG5)    kal_trace(BT_TRACE_G7_A2DP, TAG, (ARG1), (ARG2), (ARG3), (ARG4), (ARG5))
#define BT_A2DP_FUNC_ENTRY6(TAG, ARG1, ARG2, ARG3, ARG4, ARG5, ARG6)    kal_trace(BT_TRACE_G7_A2DP, TAG, (ARG1), (ARG2), (ARG3), (ARG4), (ARG5), (ARG6))

#define BT_A2DP_STATE_TRACE(ARG1)    kal_trace(BT_TRACE_G7_A2DP, BT_A2DP_PRINT_STATE, (ARG1))

#define BT_A2DP_VAL_TRACE1(ARG1)    kal_trace(BT_TRACE_G7_A2DP, BT_A2DP_PRINT_VALUE1, (ARG1))
#define BT_A2DP_VAL_TRACE2(ARG1, ARG2)    kal_trace(BT_TRACE_G7_A2DP, BT_A2DP_PRINT_VALUE2, (ARG1), (ARG2))
#define BT_A2DP_VAL_TRACE3(ARG1, ARG2, ARG3)    kal_trace(BT_TRACE_G7_A2DP, BT_A2DP_PRINT_VALUE3, (ARG1), (ARG2), (ARG3))
#define BT_A2DP_VAL_TRACE4(ARG1, ARG2, ARG3, ARG4)    kal_trace(BT_TRACE_G7_A2DP, BT_A2DP_PRINT_VALUE4, (ARG1), (ARG2), (ARG3), (ARG4))
#define BT_A2DP_VAL_TRACE5(ARG1, ARG2, ARG3, ARG4, ARG5)    kal_trace(BT_TRACE_G7_A2DP, BT_A2DP_PRINT_VALUE5, (ARG1), (ARG2), (ARG3), (ARG4), (ARG5))
#define BT_A2DP_VAL_TRACE6(ARG1, ARG2, ARG3, ARG4, ARG5, ARG6)    kal_trace(BT_TRACE_G7_A2DP, BT_A2DP_PRINT_VALUE6, (ARG1), (ARG2), (ARG3), (ARG4), (ARG5), (ARG6))

/*AVRCP*/
#define BT_AVRCP_FUNC_ENTRY(TAG)    kal_trace(BT_TRACE_G8_AVRCP, TAG)
#define BT_AVRCP_FUNC_ENTRY1(TAG, ARG1)    kal_trace(BT_TRACE_G8_AVRCP, TAG, (ARG1))
#define BT_AVRCP_FUNC_ENTRY2(TAG, ARG1, ARG2)    kal_trace(BT_TRACE_G8_AVRCP, TAG, (ARG1), (ARG2))
#define BT_AVRCP_FUNC_ENTRY3(TAG, ARG1, ARG2, ARG3)    kal_trace(BT_TRACE_G8_AVRCP, TAG, (ARG1), (ARG2), (ARG3))
#define BT_AVRCP_FUNC_ENTRY4(TAG, ARG1, ARG2, ARG3, ARG4)    kal_trace(BT_TRACE_G8_AVRCP, TAG, (ARG1), (ARG2), (ARG3), (ARG4))
#define BT_AVRCP_FUNC_ENTRY5(TAG, ARG1, ARG2, ARG3, ARG4, ARG5)    kal_trace(BT_TRACE_G8_AVRCP, TAG, (ARG1), (ARG2), (ARG3), (ARG4), (ARG5))
#define BT_AVRCP_FUNC_ENTRY6(TAG, ARG1, ARG2, ARG3, ARG4, ARG5, ARG6)    kal_trace(BT_TRACE_G8_AVRCP, TAG, (ARG1), (ARG2), (ARG3), (ARG4), (ARG5), (ARG6))

#define BT_A2DP_ENTER_STATE(_s_) BT_A2DP_STATE_TRACE(_s_);\
    (bt_a2dp_ctx.state = _s_)



BEGIN_TRACE_MAP(MOD_BT)

/*
 * TRACE_FUNC trace class
 */
/* STACK TRACE START */
TRC_MSG(BT_SEC_ACCESS_REQ_FIND_ONE, "BT_LOG_SEC_Access_Req Find a matched security record")
TRC_MSG(BT_LOG_SEC_ACCESS_REQ_TOKEN_LEVEL, "BT_LOG_SEC_Access_Req: case=0x%02x tok_level=0x%02x")
TRC_MSG(BT_LOG_BTBM_AUTH_CFM_DEL_DEV_RECORD_STATUS, "BtbmAuthenticatedCfm():Delete Device Record status=%d")
/* AVTP */
TRC_MSG(BT_AVTP_TX_TIMEOUT, "AVTP:  TX Timeout and aclTxPacketsLeft=%d")
/* DDB4W */
TRC_MSG(BT_DDB4W_DB_NOT_EXIST, "DeviceDB: Device Database file does not exist")
TRC_MSG(BT_DDB4W_DB_OPENED, "DeviceDB: Device database file opened")
TRC_MSG(BT_DDB4W_DB_NUMBER, "DeviceDB: Database contains %d records")
TRC_MSG(BT_DDB4W_DB_FLUSHED, "DeviceDB: DDB FLUSH")
TRC_MSG(BT_DDB4W_DB_NUMBER_WRITE, "DeviceDB: Database write %d records")
TRC_MSG(BT_DDB4W_DB_SAVEING_ERROR, "DeviceDB: DDB Saving error:%d")
TRC_MSG(BT_DDB4W_DB_FIND_RECORD, "DeviceDB: DDB find record:%02x,%02x,%02x")
TRC_MSG(BT_DDB4W_DB_FIND_RECORD_7, "DeviceDB: DDB find record:%02x,%02x,%02x,%02x,%02x,%02x linktype:0x%x")
TRC_MSG(BT_DDB4W_DB_STORED_RECORD, "DeviceDB: DDB stored record:%02x,%02x,%02x")
TRC_MSG(BT_DDB4W_DB_STORED_RECORD_7, "DeviceDB: DDB stored record:%02x,%02x,%02x,%02x,%02x,%02x linktype:0x%x")

TRC_MSG(BT_DDB4W_DB_LINK_KEY, "DeviceDB: DDB link key:%02x,%02x,%02x,%02x,  %02x,%02x,%02x,%02x,  %02x,%02x,%02x,%02x,  %02x,%02x,%02x,%02x")
TRC_MSG(BT_DDB4W_COD_NOT_EXIST, "DeviceDB: Device Database file does not exist")
TRC_MSG(BT_DDB4W_COD_OPENED, "DeviceDB: COD database file opened")
TRC_MSG(BT_DDB4W_COD_NUMBER, "DeviceDB: COD contains %d records")
TRC_MSG(BT_DDB4W_COD_FLUSHED, "DeviceDB: DDB COD FLUSH")
TRC_MSG(BT_DDB4W_COD_FLUSHED_ERROR, "DeviceDB: DDB COD FLUSH Error")
TRC_MSG(BT_DDB4W_COD_NUMBER_WRITE, "DeviceDB: COD write %d records")
TRC_MSG(BT_DDB4W_COD_SAVEING_ERROR, "DeviceDB: DDB COD Saving error:%d")
TRC_MSG(BT_DDB4W_COD_FIND_RECORD, "DeviceDB: DDB COD find record:%02x,%02x,%02x,%02x")
TRC_MSG(BT_DDB4W_COD_STORED_RECORD, "DeviceDB: DDB COD stored record:%02x,%02x,%02x,%02x")
/* BTBM */
TRC_MSG(BT_BTBM_ENTER_REJECT_HANDLER, "BTBM Message enter reject handler")
TRC_MSG(BT_BTBM_ERROR_MESSAGE, "BMA Error Message!")
TRC_MSG(BT_BTBM_DISCOVERY_COMPLETE, "Discovery complete with total_num:%02x")
TRC_MSG(BT_BTBM_DISCOVERY_CANCEL, "Discovery cancel with total_num:%02x")
TRC_MSG(BT_BTBM_DISCOVERY_COD, "Discovery result with cod:%08x")
TRC_MSG(BT_BTBM_DISCOVERY_NAME_LEN, "Discovery result with name len:%d")
TRC_MSG(BT_BTBM_DISCOVERY_BDADDR, "Discovery result with bdaddr:%08x, %02x, %08x")
TRC_MSG(BT_BTBM_POWEROFF, "BTBM Send Power Off msg")
TRC_MSG(BT_BTBM_TIMEOUT, "BTBMTimerHandler timeout")
TRC_MSG(BT_BTBM_TIMESTART, "BTBMTimerStart")
TRC_MSG(BT_BTBM_TIMECANCEL, "BTBMTimerCancel")
TRC_MSG(BT_BTBM_PREVIOUS_ONGOING, "Prevous operation is ongoing, activity is 0x%02x")
TRC_MSG(BT_BTBM_DEVICE_MOTO820, "Remote Device MOTO820")
TRC_MSG(BT_BTBM_DEVICE_WI_REVO, "Remote Device WI_REVO")
TRC_MSG(BT_BTBM_DEVICE_HP, "Remote Device HP")
TRC_MSG(BT_BTBM_DEVICE_GENERAL, "Remote Device General")
TRC_MSG(BT_BTBM_INQUIRY_CMD, "Inq cmd cod:%08x, type:%08x,number:%08x")
TRC_MSG(BT_BTBM_NAMEREQ_BDADDR, "Name Req bdaddr:%02x, %02x, %02x")
TRC_MSG(BT_BTBM_RESTORE_ERROR, "Restore setting error")
TRC_MSG(BT_BTBM_DISCONNECT_ALL_LINK, "BTBM will disconnect all link")
TRC_MSG(BT_BTBM_SHOW_BDADDR, "Bdaddr:%02x, %02x, %02x")
TRC_MSG(BT_BTBM_CON_ALLOCATED_RELEASE, "BTBM Conn Allocated. release it!")
TRC_MSG(BT_BTBM_CON_NOT_ALLOCATED_RELEASE, "BTBM Conn not Allocated,can not release")
TRC_MSG(BT_BTBM_CON_RELEASE_VALUE_LARGE, "BTBM Conn Release index larger than max value")
TRC_MSG(BT_BTBM_DUMMY_LINK_CONN_REQ, "DummyLinkCallback BTEVENT_LINK_CONNECT_REQ")
TRC_MSG(BT_BTBM_LINK_CONN_REQ, "BTEVENT_LINK_CONNECT_REQ")
TRC_MSG(BT_BTBM_RUN_MULTIPLE_NAME_QUERY, "btbmMultipleNameQuery")
TRC_MSG(BT_BTBM_NAME_REQ, "btbmUtilNameReq: token=%d")
TRC_MSG(BTLOG_DEVICE_IN_CONNECTING_MOD, "Device in connecting mode, ignore the name req")
TRC_MSG(BT_BTBM_UNABLE_TO_GET_NAME, "Unable to get the name for device")
TRC_MSG(BT_BTBM_NAME_SEARCH_COMPLETED, "name search completed")
TRC_MSG(BT_BTBM_NAME_SEARCH_CANCELED, "name search canceled")
TRC_MSG(BT_BTBM_PSI_INFO_NOT_IN_DDB, "PSI information not in DB")
TRC_MSG(BT_BTBM_NOT_AUTH_NAME_FAILED, "Search remote name failed in btbmHandlerRemoteNameQueryAtNoAuthEnabled")
TRC_MSG(BT_BTBM_REMOTE_NAME, "Name in char:%c")
TRC_MSG(BT_BTBM_LINK_EXISTS_CONFIRM, "link exists, WriteConfirm")
TRC_MSG(BT_BTBM_MATCH_COD, "btbmMatchCoD: filter=0x%x, cod=0x%x")
TRC_MSG(BT_BTBM_INQ_RESULT_TOO_MUCH, "MTK BTBM Inquiry result number larger than MMI assigned number")
TRC_MSG(BT_BTBM_ADD_INQUIRED_DEVICE, "btbmUtilAddInquiredDevice")
TRC_MSG(BT_BTBM_ADD_INQUIRED_DEVICE_DUPLICATE, "btbmUtilAddInquiredDevice: duplicate device")
TRC_MSG(BT_BTBM_INQ_RESULT_DDB_FULL, "MTK BTBM Inquiry result with DB %d full. return")
TRC_MSG(BT_BTBM_INQ_COMPLETED, "MTKBTBM Inquiry complete")
TRC_MSG(BT_BTBM_INQ_NO_TIME_NAME_QUERY, "We don't still have time to do the name discovery")
TRC_MSG(BT_BTBM_LINK_DEVICE_TABLE_FULL, "DevRemNameTbl is full in BTBMGetFreeEntryFromDevRemoteNameTbl()")
TRC_MSG(BT_BTBM_LINK_FREE_TABLE_ENTRY, "Free an entry from DevRemNameTbl")
TRC_MSG(BT_BTBM_EVENT_CONNECT_IND, "MTKBTBM BTEVENT_LINK_CONNECT_IND")
TRC_MSG(BT_BTBM_EVENT_CONNECT_IND_LEVEL3, "MTKBTBM BTEVENT_LINK_CONNECT_IND BSM_SEC_LEVEL_3")
TRC_MSG(BT_BTBM_FORCE_DISCONNECT, "MTKBTBM Force Disconnect")
TRC_MSG(BT_BTBM_CONNECT_FAILED, "Connect Failed")
TRC_MSG(BT_BTBM_EVENT_CONNECT_CNF, "MTKBTBM BTEVENT_LINK_CONNECT_CNF")
TRC_MSG(BT_BTBM_CHANGE_NAME_SUCCESS, "Local Name change success")
TRC_MSG(BT_BTBM_PIN_CODE_REQ, "MTKBTBM BTEVENT_PIN_REQ:%02x")
TRC_MSG(BT_BTBM_BONDING_PIN_REQ, "MTKBTBM BM_BONDING_PINCODE_REQ")
TRC_MSG(BT_BTBM_BDC_IS_ZERO, "(bdc ==0)")
TRC_MSG(BT_BTBM_PIN_REJECT, "MTKBTBM Pin Reject")
TRC_MSG(BT_BTBM_OP_NONE_REJECT_BMOPACTIVITY, "MTKBTBM BM_OP_NONE Pin Reject bm_opactivity=0x%02x")
TRC_MSG(BT_BTBM_REMOTE_PIN_REQ, "MTK BTBM remote device Pin request")
TRC_MSG(BT_BTBM_EVENT_PAIRING_COMPLETED, "MTKBTBM BTEVENT_PAIRING_COMPLETE %08x,%08x,%02x,%02x,")
TRC_MSG(BT_BTBM_PAIRING_WRONG_TIME, "MTKBTBM PAIRING in wrong timing, delete the stored link key")
TRC_MSG(BT_BTBM_EVENT_AUTHENTICATION_CNF, "MTKBTBM BTEVENT_AUTHENTICATE_CNF")
TRC_MSG(BT_BTBM_BONDING_CANCELED, "No link exists, BM_BONDING_CANCELED")
TRC_MSG(BT_BTBM_EVENT_INQ_CANCELED, "MTKBTBM BTEVENT_INQUIRY_CANCELED")
TRC_MSG(BT_BTBM_LINK_AS_MASTER, "MTKBTBM Put link as master")
TRC_MSG(BT_BTBM_START_NAMETOKEN, "Start anothe NameTok2 req")
TRC_MSG(BT_BTBM_FREE_NAME_ENTRY_FAILED, "Entry not on list, free failed")
TRC_MSG(BT_BTBM_DISCONNECT_LINK, "Try to disconnect")
/* GAP TESTER */
TRC_MSG(BT_GAPTS_INIT, "GAP tester Init")
TRC_MSG(BT_GAPTS_NONDISCOVERY, "GAP tester Nondiscovery")
TRC_MSG(BT_GAPTS_LIMITEDDISCOVERY, "GAP tester Limited discovery")
TRC_MSG(BT_GAPTS_GENERALDISCOVERY, "GAP tester General discovery")
TRC_MSG(BT_GAPTS_NONCONNECTABLE, "GAP tester Non Connected")
TRC_MSG(BT_GAPTS_NONPAIRED, "GAP tester Non Paired")
TRC_MSG(BT_GAPTS_PAIRED, "GAP tester Paired")
TRC_MSG(BT_GAPTS_SECLEVEL1, "GAP tester Sec Level1")
TRC_MSG(BT_GAPTS_SECLEVEL2, "GAP tester Sec Level2")
TRC_MSG(BT_GAPTS_SECLEVEL3, "GAP tester Sec Level3")
TRC_MSG(BT_GAPTS_LIMITEDINQUIRY, "GAP tester Limited inquiry")
TRC_MSG(BT_GAPTS_GENERALINQUIRY, "GAP tester General inquiry")
TRC_MSG(BT_GAPTS_DEVICEDISCOVERY, "GAP tester Device discovery")
TRC_MSG(BT_GAPTS_BONDING, "GAP tester Device bonding")
TRC_MSG(BT_GAPTS_DELETEKEY, "GAP tester Delete link key")
TRC_MSG(BT_GAPTS_CREATELINK, "GAP tester create link")
TRC_MSG(BT_GAPTS_CREATECHNL, "GAP tester create channel")
TRC_MSG(BT_GAPTS_NAME_LEN, "Name len:%d")
TRC_MSG(BT_GAPTS_DISCOVERY_BDADDR, "Discovery result with bdaddr:%08x, %02x, %08x, cod:%08x")
TRC_MSG(BT_GAPTS_DISCOVERY_COMPLETE, "Discovery complete result:%02x with total_num:%02x")
TRC_MSG(BT_GAPTS_DISCOVERY_CANCEL, "Discovery cancel result:%02x with total_num:%02x")
TRC_MSG(BT_GAPTS_WRITE_LOCAL_NAME, "Write Local Name result:%02x")
TRC_MSG(BT_GAPTS_BDADDR, "Bdaddr:%08x, %02x, %08x")
TRC_MSG(BT_GAPTS_DISCOVERY_RESULT_NAME_LEN, "Discovery result :%02x with name len:%d")
TRC_MSG(BT_GAPTS_DISCOVERY_NAME_CHAR, "Name char :%02x")
TRC_MSG(BT_GAPTS_BONDING_CNF_RESULT, "Bonding cfm result:%02x")
TRC_MSG(BT_GAPTS_BONDING_RESULT_IND, "Bonding result ind:%02x, cod:%08x")
TRC_MSG(BT_GAPTS_READ_WRITESCAN_RESULT, "Read WriteScan result:%02x, modeA:%02x, modeB:%02x")
TRC_MSG(BT_GAPTS_SET_WRITESCAN_RESULT, "Set WriteScan result:%02x")
TRC_MSG(BT_GAPTS_SAVE_SETTING_RESULT, "Save Setting cnf result:%02x")
TRC_MSG(BT_GAPTS_RESTORE_SETTING_RESULT, "Restore Setting cnf result:%02x")
TRC_MSG(BT_GAPTS_DELETE_TRUST_RESULT, "Delete Trust List cnf result:%02x")
TRC_MSG(BT_GAPTS_BONDING_CANCEL_RESULT, "Bonding cancel result:%02x")
TRC_MSG(BT_GAPTS_PAIRING_CANCEL_RESULT, "Pairing cancel result:%02x")
TRC_MSG(BT_GAPTS_SUPPORTED_UUID, "Supported UUID:%04x")
TRC_MSG(BT_GAPTS_SEARCHED_COMPLETE_RESULT, "SDP service search result:%02x, number:%02x")
TRC_MSG(BT_GAPTS_READ_LOCAL_COD_RESULT, "Read Local COD result:%02x, cod:%08x")
TRC_MSG(BT_GAPTS_SET_AUTHENTICATION_RESULT, "Set enter authentication result:%02x")
TRC_MSG(BT_GAPTS_READ_LOCAL_ADDR_RESULT, "Read local addr result:%02x")
TRC_MSG(GAP_TESTER_SET_TO_GENERAL_INQUIRY, "gap tester set to general inquiry")
/* ME*/
TRC_MSG(BT_ME_CREATELINK_CASE, "BT_LOG_ME_CreateLink_case=%d")
TRC_MSG(BT_ME_EVENT, "ME rx event :%02x")
TRC_MSG(BT_ME_NO_EVENT_HDL, "ME: HCI Handle event with no task handler, event = %02x")
TRC_MSG(BT_ME_INQUIRY_COMPLETE, "ME Report Inquiry Completed")
TRC_MSG(BT_ME_INQUIRY_CANCELED, "ME Report Inquiry Canceled")
TRC_MSG(BT_ME_READ_ADDR, "MeCon: Automatic Read BD_ADDR command")
TRC_MSG(BT_ME_OPEN_DDB_FAILED, "ME: DDB_Open failed")
TRC_MSG(BT_ME_WRITE_PAGE_TIMEOUT, "ME: RadioParms wrote page timeout")
TRC_MSG(BT_ME_STORE_PAGE_TIMEOUT, "ME: RadioParms store page timeout:%08x")
TRC_MSG(BT_ME_READ_VERSION_INFO, "ME: Received Bluetooth version info")
TRC_MSG(BT_ME_RECEIVED_FEATURE_INFO, "ME: Received Bluetooth features info")
TRC_MSG(BT_ME_STORING_ADDR, "ME: RadioParms storing BD_ADDR.")
TRC_MSG(BT_ME_ERROR_CODE, "ME: RadioParms error opcode = %02x, errCode = %02x")
TRC_MSG(BT_ME_WAIT_PENDING_CMD, "ME: Waiting for pending commands")

TRC_MSG(IN_TEST_MODE_RFEVENT_OPEN_CALL_MECHANGEPACKETTYPE, "In test mode RFEVENT_OPEN: call MeChangePacketType()")
TRC_MSG(SEND_GROUP_DATA, "Send Group Data")
TRC_MSG(RADIOMGR_TRANSPORT_INITIALIZED, "RADIOMGR:  Transport initialized")
TRC_MSG(MESEC_RECEIVED_PIN_CODE_REQUEST_EVENT, "MeSec: Received Pin Code Request Event")
TRC_MSG(MESCO_SCO_CONNECTION_COMPLETE_HCIHANDLE__xX, "MeSco: SCO Connection Complete hciHandle=0x%x")
TRC_MSG(MEACC_INQSCANACTIVITY_COMPLETE, "MeAcc: InqScanActivity complete")
TRC_MSG(RADIOMGR_RADIO_INITIALIZED, "RADIOMGR:  Radio initialized")
TRC_MSG(MESEC_KEY_EXISTS__SENDING_LINK_KEY_REQUEST_REPLY_COMMAND, "MeSec: Key exists - sending Link Key Request Reply command")
TRC_MSG(RADIOMGR_TRANSPORT_IS_DOWN, "RADIOMGR:  Transport is down")
TRC_MSG(MESEC_SENDING_ENCYRPTION_MODE_COMMAND, "MeSec: Sending encyrption mode command")
TRC_MSG(ME_START_OPERATION_BUSY, "MeStartOperation() HCI command busy")
TRC_MSG(ME_START_OPERATION, "MeStartOperation(): curOp = 0x%x")
TRC_MSG(ME_START_OPERATION_FAIL_STATE, "MeStartOperation() busy, stackState = %d, curOp = 0x%x")
TRC_MSG(ME_INQUIRY_OPERATION_COMPLETED_WITH_ERROR__xX, "ME: Inquiry operation completed with error=0x%x")
TRC_MSG(MECON_SETTING_ERROR_FOR_LINK_REJECT_OLD_ERROR__0XxX, "MeCon: Setting error for link reject. Old error = 0x%x")
TRC_MSG(MESEC_REMOTE_DEVICE_PERFORMING_AUTHENTICATION, "MeSec: remote device performing authentication")
TRC_MSG(SCO_CONNECTION_RSULT_BT_DEBUGx02X, "SCO connection result:%02x")
TRC_MSG(MESEC_ENABLING_AUTHENTICATION_FOR_ALL_CONNECTIONS, "MeSec: Enabling Authentication for all connections")
TRC_MSG(SNIFF_END, "sniff end")
TRC_MSG(MESEC_HANDLESECURITYCOMMANDCOMPLETE_OPCODE_MISMATCHOPCODE__xX_CURTASK__xX, "MeSec: HandleSecurityCommandComplete opcode mismatchopcode=0x%x, curTask=0x%x")
TRC_MSG(EVENT_0XFCC1, "event 0xFCC1")
TRC_MSG(ME_SET_HCI_EVENT_MASK_COMPLETED_STATUS__xX, "ME: Set Hci Event Mask completed status=0x%x")
TRC_MSG(MESEC_CREATING_OPERATION_FOR_LINK_KEY_RESPONSE, "MeSec: Creating operation for link key response")
TRC_MSG(MECON_ACL_CONNECT_COMPLETE_INTERNAL_REJECT, "MeCon: ACL Connect Complete internal reject")
TRC_MSG(RADIOMGR_RMGRHCICALLBACK_VALID_EVENT, "RADIOMGR:  RmgrHciCallback: valid event.")
TRC_MSG(MESEC_SENDING_AUTHENTICATION_ENABLE_COMMAND, "MeSec: Sending Authentication enable command")
TRC_MSG(ME_MEHANDLECOMPLETETASK_OPCODE_MISMATCH_OPCODE__xX_CURTASK__xX, "ME: MeHandleCompleteTask opcode mismatch opcode=0x%x, curTask=0x%x")
TRC_MSG(SNIFF_REQ, "sniff req")
TRC_MSG(MESCO_VOICESETTINGS_DONE_STATUS_xX, "MeSco: VoiceSettings done. Status=0x%x")
TRC_MSG(RADIOMGR_BEGINNING_INITIALIZATION, "RADIOMGR:  Beginning Initialization")
TRC_MSG(FLUSH_OCCURED, "flush occured")
TRC_MSG(RADIOMGR_RESET_FAILED, "RADIOMGR:  Reset failed")
TRC_MSG(MESEC_NUM_LINK_KEYS__xD_BDADDR_xX_xX_xX_xX_xX_xX, "MeSec: num link keys =%d, bdaddr=0x%x %x %x %x %x %x")
TRC_MSG(MESEC_ACCESS_REQUEST_NEEDS_ENCRYPTION, "MeSec: Access request needs encryption")
TRC_MSG(STARTING_RTXBT_DEBUGx04X, "Starting RTX(%04x)")
TRC_MSG(BOP_SWITCH_ROLE_IS_REPORTED_AS_ROLExD, "BOP_SWITCH_ROLE is reported as role=%d")
TRC_MSG(MESEC_SECURITY_TOKEN_LIST_IS_EMPTY, "MeSec: Security token list is empty")
TRC_MSG(FORCEDISCONNECT, "!forceDisconnect")
TRC_MSG(MESEC_STARTING_AUTHENTICATION_REQUESTED_COMMAND, "MeSec: Starting Authentication_Requested command")
TRC_MSG(MECON_EXIT_PARK_MODE_TO_HCIHANDLE_xX, "MeCon: Exit Park mode to hciHandle=0x%x")
TRC_MSG(MESEC_DISABLING_AUTHENTICATION_FOR_ALL_CONNECTIONS, "MeSec: Disabling Authentication for all connections")
TRC_MSG(POWER_OFF_REJECT_IT, "Power off, reject it")
TRC_MSG(MESEC_RECEIVED_AUTHENTICATE_COMPLETE_EVENT_ERR__xD, "MeSec: Received Authenticate Complete event. err = 0x%02x")
TRC_MSG(MECON_RECEIVED_SCO_CONNECT_REQUEST, "MeCon: Received SCO Connect Request")
TRC_MSG(MESEC_RECEIVED_ENCRYPTION_CHANGE_ERR__xD, "MeSec: Received encryption change err = 0x%02x")
TRC_MSG(ME_EXIT_SNIFF_MODE_OPERATION_ERROR_STATUS__xX, "ME: Exit Sniff mode operation error. Status=0x%x")
TRC_MSG(MECONLINKREJECTERROR__xX, "MeCon:LinkRejectError=0x%x")
TRC_MSG(MECON_STARTING_LOCAL_NAME_CHANGE_COMMAND_LEN__xD, "MeCon: Starting Local name change command, len = %d")
TRC_MSG(MEACC_AUTO_ACCESS_MODE_SWITCH_ON_FIRST_CONNECT__NO_OP_ON_QUEUE, "MeAcc: Auto access mode switch on first connect - no op on queue")
TRC_MSG(MECON_STARTING_DISCONNECT_TO_HCIHANDLE_xX, "MeCon: Starting disconnect to hciHandle=0x%x")
TRC_MSG(ME_HCI_INIT_COMPLETE_STATUS_xD, "ME: HCI Init complete status: %d")
TRC_MSG(RXBUFF_INVALID_BUFFER_TYPE_ON_FREE, "RXBUFF:  Invalid buffer type on free")
TRC_MSG(RADIOMGR_INITIALIZING_TRANSPORT, "RADIOMGR:  Initializing Transport")
TRC_MSG(WRITESCANxD, "WriteScan:%d")
TRC_MSG(MECON_DISCONNECT_COMPLETE_EVENT_FOR_HCIHANDLE__xD, "MeCon: Disconnect complete event for hciHandle = %d")
TRC_MSG(MELINKREADYTOSEND_START_TIMER, "MeLinkReadyToSend Start Timer")
TRC_MSG(RADIOMGR_TRANSPORT_INIT_FAILED_GIVING_UP, "RADIOMGR:  Transport init failed (giving up)")
TRC_MSG(MECON_INTERNAL_LINK_REJECT__xX, "MeCon: Internal link reject=0x%x")
TRC_MSG(MECONLINKACCEPTERROR__xX, "MeCon:LinkAcceptError=0x%x")
TRC_MSG(MESCO_LINKREJECTERROR__xX, "MeSco: LinkRejectError=0x%x")
TRC_MSG(MEACC_AUTO_ACCESS_MODE_SWITCH_ON_FIRST_CONNECT__UP_OP_ON_QUEUE, "MeAcc: Auto access mode switch on first connect - up op on queue")
TRC_MSG(SCO_SENDDATABT_DEBUGx04X_SENT_xD_BYTE_DATA_PACKET, "SCO: SendData(%04x) Sent %d byte Data Packet.")
TRC_MSG(MESEC_NO_AUTHORIZATION_HANDLE_OR_PREVIOUS_ATTEMPT_FAILED, "MeSec: No authorization handle or previous attempt failed")
TRC_MSG(ME_LOCAL_NAME_CHANGE_OPERATION_COMPLETED_STATUS__0XxX, "ME: Local Name Change operation completed. Status = 0x%x")
TRC_MSG(MESEC_DISABLING_ENCRYPTION_FOR_ALL_CONNECTIONS, "MeSec: Disabling Encryption for all connections")
TRC_MSG(MESEC_NO_PAIRING_HANDLER, "MeSec: No pairing handler")
TRC_MSG(MECON_MEHANDLELINKDISCONNECTOP_TASK_END_ERRCODE__xX, "MeCon: MeHandleLinkDisconnectOp task End errcode = 0x%x")
TRC_MSG(MESCO_SETTING_ERROR_FOR_LINK_REJECT_OLD_ERROR__0XxX, "MeSco: Setting error for link reject. Old error = 0x%x")
TRC_MSG(MESEC_SENDING_PIN_CODE_REQUEST_REPLY_COMMAND, "MeSec: Sending Pin Code Request Reply command")
TRC_MSG(IN_TEST_MODE_CHANGE_DATA_PKT_TYPE_TO_BAPT_DH3, "In test mode, change data pkt type to BAPT_DH3")
TRC_MSG(MECON_RECEIVED_ACL_CONNECT_REQUEST, "MeCon: Received ACL Connect Request")
TRC_MSG(MECON_STARTING_REMOTE_NAME_REQUEST_COMMAND_CLOCK_OFFSET_SR_MODE, "MeCon: Starting Remote name request command, clock offset=0x%02x%02x, SR mode=0x%02x")
TRC_MSG(MEACC_AUTO_ACCESS_MODE_SWITCH_ON_FIRST_CONNECT__DOWN_OP_ON_QUEUE, "MeAcc: Auto access mode switch on first connect - down op on queue")
TRC_MSG(MESEC_LINK_KEY_IS_SAVED_DEVICE_TRUSTED, "MeSec: Link key is saved. Device trusted")
TRC_MSG(STOP5, "stop5")
TRC_MSG(ME_MEHANDLEDISCOVERROLETASK_OPCODE_MISMATCH_OPCODE__xX_CURTASK__xX, "ME: MeHandleDiscoverRoleTask opcode mismatch opcode=0x%x, curTask=0x%x")
TRC_MSG(MESCO_ESCO_CONNECTION_CHANGED_HCIHANDLE__xX, "MeSco: eSCO Connection Changed hciHandle=0x%x")
TRC_MSG(ME_GET_REMOTE_DEVICE_NAME_CANCEL_OPERATION_COMPLETE_STATUS__xX, "ME: Get Remote Device Name Cancel operation complete. Status=0x%x")
TRC_MSG(ME_WRITE_DEFAULT_LINK_POLICY_OPERATION_COMPLETED_ERROR__0XxX, "ME: Write Default Link Policy operation completed error = 0x%x")
TRC_MSG(MEACC_STARTING_WRITE_SCAN_ACTIVITY_COMMAND, "MeAcc: Starting Write Scan Activity command")
TRC_MSG(ME_FORCEDISCONNECTLINKWITHREASONxD, "ME_ForceDisconnectLinkWithReason:%d")
TRC_MSG(ME_CREATE_LINK_CANCEL_OPERATION_COMPLETE_STATUS__xX, "ME: Create Link Cancel operation complete. Status=0x%x")
TRC_MSG(MESEC_ADDING_CANCEL_AUTHENTICATION_OPERATION_TO_QUEUE, "MeSec: Adding cancel authentication operation to queue")
TRC_MSG(ME_SWITCH_ROLE_OPERATION_ERROR_STATUS__xX, "ME: Switch Role operation error. Status=0x%x")
TRC_MSG(MECON_CHANGE_PACKET_TYPE_TO_HCIHANDLE_xX, "MeCon: Change Packet Type to  hciHandle=0x%x")
TRC_MSG(ME_HOLD_MODE_OPERATION_ERROR_STATUS__xX, "ME: Hold mode operation error. Status=0x%x")
TRC_MSG(EVENT_0XFCC0, "event 0xFCC0")
TRC_MSG(MECACCMODENC_BT_DEBUGx04X, "MEC(accModeNC) :%04X")
TRC_MSG(MECON_PARK_MODE_TO_HCIHANDLE_xX, "MeCon: Park mode to hciHandle=0x%x")
TRC_MSG(RADIOMGR_TRANSPORT_SHUTTING_DOWN, "RADIOMGR:  Transport shutting down")
TRC_MSG(MESEC_ADDING_AUTHORIZE_OPERATION_TO_QUEUE, "MeSec: Adding authorize operation to queue")
TRC_MSG(MESEC_ADDING_AUTHENTICATE_OPERATION_TO_QUEUE, "MeSec: Adding authenticate operation to queue")
TRC_MSG(SERIOUS_ERROR, "Serious Error")
TRC_MSG(COD_NOT_MATCH, "Cod not match")
TRC_MSG(SET_ME_SETACCESSIBLEMODENCBT_DEBUGx02X, "Set ME_SetAccessibleModeNC:%02x")
TRC_MSG(MEACC_AUTO_ACCESS_MODE_SWITCH_ON_LAST_DISCONNECT__EXISTING_OP_ON_QUEUE, "MeAcc: Auto access mode switch on last disconnect - existing op on queue")
TRC_MSG(RADIOMGR_RMGRTRANCALLBACK_xX, "RADIOMGR:  RmgrTranCallback: %#x")
TRC_MSG(MESEC_SENDING_LINK_KEY_REQUEST_NEGATIVE_REPLY_COMMAND, "MeSec: Sending Link Key Request Negative Reply command")
TRC_MSG(MESEC_SECPROCESSALLSECURITYTOKENS_REMOVING_TOKEN, "MeSec: SecProcessAllSecurityTokens: removing token")
TRC_MSG(MESCO_ESCO_CONNECTION_CHANGED_EVENT, "MeSco: eSCO Connection Changed event")
TRC_MSG(MECON_STARTING_CREATE_LINK_CANCEL_COMMAND, "MeCon: Starting Create Link Cancel command")
TRC_MSG(MEINQUIRY_RESULT_CLOCKOFFSET__xX, "ME:Inquiry result clockOffset=0x%x")
TRC_MSG(REMDEV_0, "remDev ==0")
TRC_MSG(BDCLINKSTATEBT_DEBUGx02X, "bdc->link->state:%02x")
TRC_MSG(MESEC_REMOTE_DEVICE_PERFORMING_PAIRING, "MeSec: Remote device performing pairing")
TRC_MSG(MESCO_STARTING_SCO_LINK_TO_ACL_LINK_xX, "MeSco: Starting SCO link to ACL link=0x%x")
TRC_MSG(MESEC_NO_AUTHORIZATION_HANDLER, "MeSec: No authorization handler")
TRC_MSG(RADIOMGR_INTIALIZING_RADIO, "RADIOMGR:  Intializing Radio")
TRC_MSG(MESCO_STARTING_DISCONNECT_TO_SCO_HCIHANDLE_xX, "MeSco: Starting disconnect to SCO hciHandle=0x%x")
TRC_MSG(RADIOMGR_INITIALIZING_HCI, "RADIOMGR:  Initializing HCI")
TRC_MSG(MESEC_SECURITY_COMMAND_STATUS_EVENT_RECEIVED_ERR__xX, "MeSec: Security Command status event received. Err=0x%x")
TRC_MSG(MESEC_SENDING_PIN_CODE_REQUEST_NEGATIVE_REPLY_COMMAND, "MeSec: Sending Pin Code Request Negative Reply command")
TRC_MSG(MESEC_ACCESS_REQUEST_NEEDS_AUTHENTICATION, "MeSec: Access Request needs authentication")
TRC_MSG(ISNODEONLISTREMDEVHANDLERS_HANDLERNODE, "IsNodeOnList(&(remDev->handlers), &(handler->node))")
TRC_MSG(CALLANDREMOVEHANDLERS_1, "CallAndRemoveHandlers 1")
TRC_MSG(MEACC_PAGESCANACTIVITY_COMPLETE, "MeAcc: PageScanActivity complete")
TRC_MSG(MEACC_PAGESCANACTIVITY_EVENT, "MeAcc: PageScanActivity event:%02x")
TRC_MSG(MEACC_PAGESCANACTIVITY_ACTIVITY, "MeAcc: PageScanActivity operation index:%02x")
TRC_MSG(RADIOMGR_RMGR_RADIOINIT, "RADIOMGR:  RMGR_RadioInit")
TRC_MSG(MESEC_ENABLING_ENCRYPTION_FOR_ALL_CONNECTIONS, "MeSec: Enabling Encryption for all connections")
TRC_MSG(MESEC_ERROR_SAVING_LINK_KEY, "MeSec: Error saving link key")
TRC_MSG(BT_MEIF_SEC_PASSKEYENTRY, "SEC_PasskeyEntry(): accept=%d, passkey=%d")
TRC_MSG(MODE_CHANGE, "mode change")
TRC_MSG(CALLANDREMOVEHANDLERS, "CallAndRemoveHandlers")
TRC_MSG(MESEC_CALLING_PAIRING_HANDLER_INDICATING_PAIRING_COMPLETE, "MeSec: Calling pairing handler indicating pairing complete")
TRC_MSG(DS_ADDDEVICE_NO_RESOURCE, "DS_AddDevice no resource")
TRC_MSG(ME_INQUIRY_CANCEL_OPERATION_COMPLETED_ERROR__xX, "ME: Inquiry cancel operation completed error=0x%x")
TRC_MSG(RELEASE_PREVIOUS_ONE, "Release previous one.")
TRC_MSG(MEACC_STARTING_WRITE_CURRENT_IAC_LAP, "MeAcc: Starting Write_Current_IAC_LAP")
TRC_MSG(MEACC_WRITE_SCAN_OP__xD_INT__xD_WIN__xD, "MeAcc: Write Scan op = %d, int = %d, win = %d")
TRC_MSG(MECON_CONNECTION_COMPLETE_EVENT_STATUS__0XxX, "MeCon: Connection complete event. Status = 0x%x")
TRC_MSG(MESCO_SCO_DISCONNECT_COMPLETE_EVENT_FOR_HCIHANDLE__xD, "MeSco: SCO Disconnect complete event for hciHandle = %d")
TRC_MSG(MESCO_SCOHANDLELINKDISCONNECTOP_TASK_END_ERRCODE__xX, "MeSco: ScoHandleLinkDisconnectOp task End errcode=0x%x")
TRC_MSG(MECREATELINK_INSERT_HANDLER_2, "MeCreateLink insert handler 2")
TRC_MSG(RADIOMGR_RMGR_RADIOSHUTDOWN, "RADIOMGR:  RMGR_RadioShutdown")
TRC_MSG(RMGR_RADIO_INIT_STATUS, "RMGR:  RADIO_INIT_STATUS")
TRC_MSG(MEACC_STARTING_WRITE_SCAN_ENABLE, "MeAcc: Starting Write_Scan_Enable")
TRC_MSG(RADIOMGR_INITIALIZATION_FAILED, "RADIOMGR:  Initialization failed")
TRC_MSG(WRITESCAN1xD, "WriteScan1:%d")
TRC_MSG(RADIOMGR_TRANSPORT_INITIALIZING, "RADIOMGR:  Transport initializing")
TRC_MSG(MESEC_IGNORING_SECOND_PIN_REQUEST, "MeSec: ignoring second PIN request")
TRC_MSG(MTK_NUM_KNOWN_DEVICES_FULL, "MTK NUM_KNOWN_DEVICES full")
TRC_MSG(RADIOMGR_RESET_INITIATED, "RADIOMGR:  Reset initiated")
TRC_MSG(MESEC_ADDING_ENCRYPTION_OPERATION_TO_QUEUE, "MeSec: Adding encryption operation to queue")
TRC_MSG(RADIOMGR_COULD_NOT_INIT_TRANSPORT_DURING_RESET, "RADIOMGR:  Could not init transport during reset")
TRC_MSG(MESEC_REMOTE_DEVICE_DOES_NOT_EXIST_FOR_PAIRING, "MeSec: Remote device does not exist for pairing")
TRC_MSG(MECON_ACL_CONNECT_COMPLETE_HCIHANDLE__xX, "MeCon: ACL Connect Complete hciHandle=0x%x")
TRC_MSG(MESEC_CALLING_PAIRING_HANDLER_FOR_A_PIN_CODE, "MeSec: Calling pairing handler for a pin code")
TRC_MSG(PACKETDATAOFFSETBT_DEBUGx02XBT_DEBUGx02XBT_DEBUGx02XBT_DEBUGx02X, "packet->data+offset:%02x,%02x,%02x,%02x,")
TRC_MSG(ME_PARK_MODE_OPERATION_ERROR_STATUS__xX, "ME: Park mode operation error. Status=0x%x")
TRC_MSG(MECON_STARTING_LINK_REJECT_COMMAND, "MeCon: Starting Link Reject command")
TRC_MSG(MEACC_AUTO_ACCESS_MODE_SWITCH_ON_FIRST_CONNECT__EXISTING_OP_ON_QUEUE, "MeAcc: Auto access mode switch on first connect - existing op on queue")
TRC_MSG(ME_DISCOVER_ROLE_OPERATION_COMPLETED_ERROR__0XxX, "ME: Discover Role operation completed error = 0x%x")
TRC_MSG(STOP_4, "stop 4")
TRC_MSG(RADIOMGR_RESET_DURING_SHUTDOWN, "RADIOMGR:  Reset during shutdown")
TRC_MSG(MESCO_SCO_CONNECTION_COMPLETE_INTERNAL_REJECT, "MeSco: SCO connection complete internal reject")
TRC_MSG(MESEC_SECPROCESSALLSECURITYTOKENS_PROCESSING_A_TOKEN, "MeSec: SecProcessAllSecurityTokens: processing a token")
TRC_MSG(RADIOMGR_RMGR_HCIRESET, "RADIOMGR:  RMGR_HciReset")
TRC_MSG(MESCO_DETECTED_RACE_CONDITION, "MeSco: Detected race condition.")
TRC_MSG(MESEC_CANCELING_PIN_CODE_REQUEST, "MeSec: Canceling pin code request")
TRC_MSG(ME_MEHANDLECONNECTIONSTATUSONLY_OPCODE_MISMATCHOPCODE__xX_CURTASK__xX, "ME: MeHandleConnectionStatusOnly opcode mismatchopcode=0x%x, curTask=0x%x")
TRC_MSG(MELINKREADYTOSENDBT_DEBUGx02X, "MeLinkReadyToSend:%02x")
TRC_MSG(MECON_SCO_CONNECT_COMPLETE_EVENT, "MeCon: SCO Connect complete event.")
TRC_MSG(RADIOMGR_SHUTDOWN_FAILED_ALREADY_DOWN_OR_INTIALIZING, "RADIOMGR:  Shutdown failed (already down or intializing)")
TRC_MSG(MESCO_STARTING_SCO_VOICE_SETTINGS_COMMAND, "MeSco: Starting SCO Voice Settings command")
TRC_MSG(MESEC_TIMEOUT_ON_SECURITY_ACCESS_REQUEST, "MeSec: Timeout on security access request")
TRC_MSG(MEHANDLEDISCONNECTCOMPLETE_REPORT_TO_UPERxX, "MeHandleDisconnectComplete report to uper=0x%x")
TRC_MSG(MESCO_RECONFIGURING_ESCO_LINK_xX, "MeSco: Re-configuring eSCO link=0x%x")
TRC_MSG(MESCO_STARTING_SCO_LINK_ACCEPT_COMMAND, "MeSco: Starting SCO Link Accept command")
TRC_MSG(MECON_STARTING_GENERAL_COMMAND, "MeCon: Starting General command")
TRC_MSG(MEDEV_CALLING_SELECT_DEVICE_HANDLER, "MeDev: Calling select device handler.")
TRC_MSG(RADIOMGR_TRANSPORT_INIT_FAILED_RETRYING, "RADIOMGR:  Transport init failed (retrying)")
TRC_MSG(RADIOMGR_INIT_CALLED_DURING_INIT, "RADIOMGR:  Init called during init")
TRC_MSG(MECON_SWITCH_ROLE_TO_HCIHANDLE_xX, "MeCon: Switch role to hciHandle=0x%x")
TRC_MSG(ME_HCI_TRANSPORT_ERROR, "ME: HCI transport error")
TRC_MSG(START_INQUIRY_LOOP, "Start Inquiry Loop")
TRC_MSG(RADIOMGR_RADIODEINIT, "RADIOMGR:  RadioDeinit")
TRC_MSG(ME_EXIT_PARK_MODE_OPERATION_ERROR_STATUS__xX, "ME: Exit Park mode operation error. Status=0x%x")
TRC_MSG(MESCO_RECEIVED_SCO_LINK_CONNECT_REQUEST, "MeSco: Received SCO Link Connect Request")
TRC_MSG(RADIOMGR_RMGRHCICALLBACK_xX, "RADIOMGR:  RmgrHciCallback: %#x")
TRC_MSG(MECON_COD__0XxX, "MeCon: COD = 0x%x")
TRC_MSG(MESCO_ESCO_CONNECTION_CHANGED_UNKNOWN_HCIHANDLE__xX, "MeSco: eSCO connection changed unknown hciHandle=0x%x")
TRC_MSG(RADIOMGR_TRANSPORT_DEINITIALIZATION_FAILED, "RADIOMGR:  Transport deinitialization failed")
TRC_MSG(RADIOMGR_RADIO_INIT_FAILED_RETRYING, "RADIOMGR:  Radio init failed (retrying)")
TRC_MSG(RADIOMGR_TRANSPORT_FAILED_SHUTDOWN, "RADIOMGR:  Transport failed shutdown")
TRC_MSG(RADIOMGR_RADIO_IS_DOWN, "RADIOMGR:  Radio is down")
TRC_MSG(ME_WRITE_LINK_POLICY_STATUS__xX, "ME: Write Link Policy Status=0x%x")
TRC_MSG(ME_HCI_DEINIT_COMPLETE_STATUS_xD, "ME: HCI deinit complete status: %d")
TRC_MSG(MECON_STARTING_LINK_CONNECT_COMMAND_CLOCK_OFFSET__0XxX_ALLOWROLECHANGE__xD, "MeCon: Starting Link Connect command clock offset = 0x%x allowRoleChange = %d")
TRC_MSG(MESCO_RECEIVED_SCO_LINK_CONNECT_REQUEST_REJECT, "MeSco: Received SCO Link Connect Request (Reject)")
TRC_MSG(ME_HCI_COMMAND_SENT, "ME: HCI Command sent")
TRC_MSG(INQUIRY_RESULT, "Inquiry result (already found:0x%02x)")
TRC_MSG(ME_RECEIVED_INQUIRY_COMPLETE_EVENT, "ME: Received Inquiry complete event. Status = 0x%x")
TRC_MSG(MECON_STARTING_LINK_ACCEPT_COMMAND_ACCEPT_ROLE__xD, "MeCon: Starting Link Accept command. Accept Role = %d")
TRC_MSG(MESEC_LINK_KEY_IS_SAVED_DEVICE_NOT_TRUSTED, "MeSec: Link key is saved. Device not trusted")
TRC_MSG(ME_HANDLEGENERALTASK_OPCODE_MISMATCH, "ME: HandleGeneralTask opcode mismatch")
TRC_MSG(MEACC_AUTO_ACCESS_MODE_SWITCH_ON_FIRST_CONNECT__EXISTING_OP_EXECUTING, "MeAcc: Auto access mode switch on first connect - existing op executing")
TRC_MSG(ME_GENERAL_COMMAND_COMPLETED_STATUS__0XxX, "ME: General Command completed. Status = 0x%x")
TRC_MSG(ME_WRITE_CLASS_OF_DEVICE_OPERATION_COMPLETED_ERROR__xX, "ME: Write Class of Device operation completed error=0x%x")
TRC_MSG(RADIOMGR_RMGRRADIOCALLBACK_xX, "RADIOMGR:  RmgrRadioCallback: %#x")
TRC_MSG(RADIOMGR_RADIO_MODULE_IS_DOWN, "RADIOMGR:  Radio Module is down")
TRC_MSG(MECACCINFONC_BT_DEBUGx04X, "MEC(accInfoNC) :%04X")
TRC_MSG(MESEC_NO_PAIRING_HANDLER_TO_REPORT_PAIRING_COMPLETE, "MeSec: No pairing handler to report pairing complete")
TRC_MSG(MECREATELINK_INSERT_HANDLER_1, "MeCreateLink insert handler 1")
TRC_MSG(MESEC_STARTING_SET_CONNECTION_ENCRYPTION_COMMAND, "MeSec: Starting Set Connection Encryption command")
TRC_MSG(RADIOMGR_INITIALIZING_TRANSPORT_DURING_RESET, "RADIOMGR:  Initializing transport during reset")
TRC_MSG(MEACC_AUTO_ACCESS_MODE_SWITCH_ON_LAST_DISCONNET__EXISTING_OP_EXECUTING, "MeAcc: Auto access mode switch on last disconnet - existing op executing")
TRC_MSG(MECON_ACL_CONNECT_COMPLETE_EVENT, "MeCon: ACL Connect complete event.")
TRC_MSG(MESCO_STARTING_ESCO_LINK_TO_ACL_LINK_xX, "MeSco: Starting eSCO link to ACL link=0x%x")
TRC_MSG(HANDLER__0, "handler == 0")
TRC_MSG(RFCOMM_NEGOTIATION_SENT_SUCCESSFULLY_TO_DLCI_xD_ON_MUX_xD, "RFCOMM:  Negotiation sent successfully to DLCI=0x%02x on Mux=0x%02x")
TRC_MSG(ME_SNIFF_MODE_OPERATION_ERROR_STATUS__xX, "ME: Sniff mode operation error. Status=0x%x")
TRC_MSG(MECON_DISCONNECT_COMPLETE_EVENT_STATUS__0XxX, "MeCon: Disconnect complete event. Status = 0x%x")
TRC_MSG(MECON_HOLD_MODE_TO_HCIHANDLE_xX, "MeCon: Hold mode to hciHandle=0x%x")
TRC_MSG(RADIOMGR_TRANSPORT_INITIATED, "RADIOMGR:  Transport initiated")
TRC_MSG(ACCOPNC_IS_BT_DEBUGx04X, "ACCOP->nc is :%04X,%04X,%04X")
TRC_MSG(MEACC_AUTO_ACCESS_MODE_SWITCH_ON_LAST_DISCONNECT__NO_OP_ON_QUEUE, "MeAcc: Auto access mode switch on last disconnect - no op on queue")
TRC_MSG(MECON_REMOTE_NAME_REQUEST_COMPLETE_STATUS__0XxX, "MeCon: Remote name request complete status = 0x%02x")
TRC_MSG(ME_WRITE_AFH_COMPLETED_ERROR__xX, "ME: Write AFH completed error=0x%x")
TRC_MSG(MESCO_SCO_CONNECTION_COMPLETE_EVENT, "MeSco: SCO Connection complete event")
TRC_MSG(MESEC_LINK_KEY_NOTIFY_EVENT, "MeSec: Link key notify event")
TRC_MSG(RADIOMGR_HCI_DEINIT_STARTED, "RADIOMGR:  HCI deinit started")
TRC_MSG(ME_CHANGE_PACKET_TYPE__xX, "ME: Change Packet Type=0x%x")
TRC_MSG(MUXCHANNELMUXIDNUMTXPACKETSxD, "MUX(Channel->muxId).numTxPackets++:%d, insert on DLCI=0x%02x, pktInTransmit=%d")
TRC_MSG(BOP_DISCOVER_ROLE_IS_REPORTED_AS_ROLExD, "BOP_DISCOVER_ROLE is reported as role=%d")
TRC_MSG(MESEC_ADDING_CANCEL_AUTHORIZE_OPERATION_TO_QUEUE, "MeSec: Adding cancel authorize operation to queue")
TRC_MSG(ME_REMOTE_NAME_REQUEST_OPERATION_ERROR_STATUS__xX, "ME: Remote Name Request operation error. Status=0x%x")
TRC_MSG(MESEC_RECEIVED_ENCRYPTION_CHANGE_EVENT__NO_REMOTE_DEVICE, "MeSec: Received encryption change event - no remote device")
TRC_MSG(RECEIVE_EVENT_FOR_GENERAL_COMMAND_EVENT__0XxX, "Receive event for general command. Event = 0x%x")
TRC_MSG(MECON_WRITE_LINK_POLICY_TO_HCIHANDLE_xX, "MeCon: Write Link policy to hciHandle=0x%x")
TRC_MSG(MECON_QOS_SETUP, "MeHandleQoSSetupOp(): handle=0x%x, flag=%d, type=%d, tr=0x%x, pb=0x%x, lat=0x%x, dv=0x%x")
TRC_MSG(MECON_QOS_SETUP_ERROR_STATUS__xX, "MeHandleQoSSetupOp(): error status=0x%x")
TRC_MSG(RADIOMGR_HCI_INIT_FAILED_RETRYING, "RADIOMGR:  HCI init failed (retrying)")
TRC_MSG(MEACC_WRITE_IAC_LAP_COMPLETE, "MeAcc: Write IAC Lap complete")
TRC_MSG(MESEC_RECEIVED_AUTHENTICATE_COMPLETE_EVENT__NO_REMOTE_DEVICE, "MeSec: Received Authenticate complete event - no remote device")
TRC_MSG(ME_SET_CHANNEL_CLASSIFICATION_OPERATION_COMPLETED_ERROR__0XxX, "ME: Set Channel Classification operation completed error = 0x%x")
TRC_MSG(RADIOMGR_RADIO_SHUTTING_DOWN, "RADIOMGR:  Radio shutting down")
TRC_MSG(MEACC_WRITE_SCAN_ENABLE_COMPLETE, "MeAcc: Write Scan Enable complete")
TRC_MSG(MEGETFREEREMOTEDEVICE, "MeGetFreeRemoteDevice")
TRC_MSG(MEGETFREEREMOTEDEVICENULL, "MeGetFreeRemoteDevice(): No available free entry")
TRC_MSG(RADIO_WAITING_FOR_EVENT_xX, "RADIO: Waiting for event=0x%x")
TRC_MSG(MESEC_CALLING_AUTHORIZATION_HANDLER, "MeSec: Calling authorization handler")
TRC_MSG(MESEC_ACCESS_REQUEST_NEEDS_AUTHORIZATION, "MeSec: Access request needs authorization")
TRC_MSG(MESEC_SECURITY_COMMAND_COMPLETE_EVENT_RECEIVED_ERR__xX, "MeSec: Security Command complete event received. Err=0x%x")
TRC_MSG(MESEC_LINK_KEY_REQ_FOR_INVALID_BD_ADDR__LINK_KEY_NEG_RSP, "MeSec: Link key req for invalid BD_ADDR - link key neg rsp")
TRC_MSG(RADIOMGR_HCI_INIT_ERROR, "RADIOMGR:  HCI init error")
TRC_MSG(MEACC_THE_SETACCESSIBLEMODE_OPERATION_FAILED, "MeAcc: The SetAccessibleMode Operation failed=0x%x")
TRC_MSG(MEHCI_COMMAND_COMPLETE_ERROR, "HCI_Command_Complete(Status) error=%02x")
TRC_MSG(ME_SWITCH_ROLE_OPERATION_ENDED_STATUSxX, "ME: Switch Role operation ended. Status=0x%x")
TRC_MSG(MESEC_NO_LINK_KEY__NEED_A_PIN_CODE, "MeSec: No link key - need a pin code")
TRC_MSG(MESCO_STARTING_SCO_LINK_REJECT_COMMAND, "MeSco: Starting SCO Link Reject command")
TRC_MSG(MECSEC_ERROR_SETTING_ENCRYPTION_MODE_ERR__xD, "MecSec: Error setting encryption mode. Err = %d")
TRC_MSG(MESEC_SECURITY_TOKEN_LIST_IS_NOT_EMPTY, "MeSec: Security token list is not empty")
TRC_MSG(RADIOMGR_SHUTDOWN_INITIATED, "RADIOMGR:  Shutdown initiated")
TRC_MSG(ME_INIT_FAILED, "ME_Init(): failed.")
TRC_MSG(MESCOLINKACCEPTERROR__xX, "MeSco:LinkAcceptError=0x%x")
TRC_MSG(RADIOMGR_HCI_IS_DOWN, "RADIOMGR:  HCI is down")
TRC_MSG(AVCTP_MISSING_PARAMETERS_DISCONNECTING, "AVCTP: Missing parameters, disconnecting")
TRC_MSG(AVCTP_UNABLE_TO_REGISTER_WITH_L2CAP, "AVCTP:  Unable to register with L2CAP.")
TRC_MSG(AVCTP_INVALID_PID_DISCONNECTING, "AVCTP: Invalid PID, disconnecting")
TRC_MSG(AVCTP_ERROR_SENDING_MESSAGE, "AVCTP: Error Sending Message")
TRC_MSG(AVCTP_INVALID_PROFILE_ID, "AVCTP: Invalid Profile ID")
TRC_MSG(RELEASE_THE_SPACE_ALLOCATED_IN_AVDT_WRITE_DATA, "Release the space allocated in AVDT_Write_Data()")
TRC_MSG(AVDTP_AVDT_CONNECTREQ, "AVDTP AVDT_ConnectReq")
TRC_MSG(AVDTP_AVDT_DISCOVER_REQ, "AVDTP AVDT_Discover_Req")
TRC_MSG(AVDTP_AVDT_SET_CONFIGURATION_REQ, "AVDTP AVDT_Set_Configuration_Req")
TRC_MSG(AVDT_CONNECTREQ, "AVDT_ConnectReq")
TRC_MSG(AVDTP_AVDT_GET_CAPABILITIES_REQ, "AVDTP AVDT_Get_Capabilities_Req")
TRC_MSG(AVDTP_INIT, "AVDTP Init")
TRC_MSG(IN_CMGR_SETDEVICEASMASTER_CALL_ME_SWITCHROLE, "In CMGR_SetDeviceAsMaster(): call ME_SwitchRole")
TRC_MSG(CMGR_ATTEMPTING_MS_SWITCH, "CMGR: Attempting M/S switch...")
TRC_MSG(CMGR_ROLE_IS_MASTER, "CMGR: Role is Master")
TRC_MSG(CMGR_ROLE_IS_SLAVE, "CMGR: Role is Slave")
TRC_MSG(CMGR_SETQOS, "CMGR: QoS level=%d")
TRC_MSG(BTBT_DEBUGx02X, "%02x")
TRC_MSG(IN_CMGR_SETDEVICEASMASTER_ALREADY_MASTER, "In CMGR_SetDeviceAsMaster(): already Master!")
TRC_MSG(x1C, "%02x")
TRC_MSG(ACL_LINK_CONNECTION_EXISTS_DO_SERVICE_SEARCH_DIRECTLY, "ACL link connection exists, do service search directly.")
TRC_MSG(ACL_LINK_CONNECTION_EXISTS_DO_SERVICE_SEARCH_ATTRIBUTE_DIRECTLY, "ACL link connection exists, do service search attribute directly.")
TRC_MSG(SPP_RFEVENT_CLOSED, "SPP: RFEVENT_CLOSED")
TRC_MSG(SPP_DEVICE_STATE_CLOSED, "SPP: DEVICE_STATE_CLOSED")
TRC_MSG(ADD_SERVICE_RECORD_FAILED, "Add service record failed")
TRC_MSG(SPP_RFEVENT_CLOSE_IND, "SPP: RFEVENT_CLOSE_IND")
TRC_MSG(SPP_PASSTHRU_EVENT__xD, "SPP: pass-thru event - %d")
TRC_MSG(SPP_RF_ACCEPTCHANNEL_FAILED_xD, "SPP: RF_AcceptChannel failed: %d")
TRC_MSG(RF_xD, "->RF %d/")
TRC_MSG(SENDING_PORT_SETTINGS, "SENDING port settings")
TRC_MSG(TX_RATExD, "Tx rate:%d")
TRC_MSG(SPP_CHANNEL_OPEN, "SPP: channel open.")
TRC_MSG(SPP_RF_SENDDATA_FAILED_xD, "SPP: RF_SendData failed: %d")
TRC_MSG(SPP_SDP_QUERY_FAILED, "SPP: SDP Query Failed")
TRC_MSG(SPP_UNKNOWN_EVENT__xD, "SPP: unknown event - %d")
TRC_MSG(xD, "%d")
TRC_MSG(SPP_SDP_CONNECT_RETURNED_xD, "SPP: SDP_Connect() returned %d")
TRC_MSG(RX_xD_SAVED_xD, "rx %d, saved %d")
TRC_MSG(TX_FINISHED_STARTxD_ENDxD, "Tx finished, start:%d, end:%d")
TRC_MSG(TXSLEEPCOUNT, "> txSleepCount")
TRC_MSG(SPP_OPEN_SERVICE_AVAILABLE_ON_RFCOMM_CHANNEL_xD, "SPP_Open: service available on RFCOMM channel %d")
//#ifdef MULTI_RF_CHANNEL
TRC_MSG(BTLOG_RFCHC_RFCOUNT, "RFCH Rfservice=0x%X RFcount%u")
TRC_MSG(BTLOG_RFCH_GET_SDP_ATTRIBS, "RFCH Get SDP attributes for server%u")
TRC_MSG(BTLOG_RFCH_ASSIGN_SRV_AND_SDP, "RFCH Assign RfService and SDP record for SPP server%u")
//#endif

TRC_MSG(BTBM_ADD_LINK_CALLBACK, "BTBM Add Link Callback")
TRC_MSG(BTBM_REMOVE_LINK_CALLBACK, "BTBM Remove Link Callback.")
TRC_MSG(BTBM_REMOVE_LINK_CALLBACK_LINK_NOT_EXISTED, "BTBM Remove Link Callback: no callback due to link already removed")
TRC_MSG(BTBM_CREATE_CONNECTION, "BTBM create connection:%d.")
TRC_MSG(BTBM_REMOVE_CONNECTION, "BTBM remove connection:%d.")
TRC_MSG(CONNMGR_BTEVENT_READ_RSSI_COMPLETED, "ConnMgr: BTEVENT_READ_RSSI_COMPLETED")
TRC_MSG(ME_START_RSSIOP, "MeHandleReadRSSIOp():hicHandle=%04X")
TRC_MSG(ME_END_RSSIOP, "ERR or END MeHandleReadRSSIOp")
TRC_MSG(BTBM_BONDING_NOT_SEND_AUTH_CMD_AUTHSTATE_ENCRYPTSTATE, "Bonding Procedure: Not send auth cmd and link_authstate=%d,encrypt_state=%d")
TRC_MSG(BT_FATAL, "BT fatal index=%d")

TRC_MSG(BTEVENT_SCO_CONNECT_CNF_ESCO_FAILED, "BTEVENT_SCO_CONNECT_CNF ESCO failed")
TRC_MSG(BT_TRY_TO_OPEN_SCO, "Try to open SCO")
TRC_MSG(SCOCONNECTSCOLINKTYPEx02X, "scoConnect->scoLinkType:%02x")
TRC_MSG(CONNMGRACCEPTAUDIOLINK_SCOCONNECTSCOTXPARMSESCOPKTTYPEx02X, "ConnMgrAcceptAudioLink scoConnect->scoTxParms.eScoPktType:%02x")
TRC_MSG(STARTSCOLINKSETUPTASK, "StartScoLinkSetupTask")
TRC_MSG(STARTSCOLINKACCEPTTASK, "StartScoLinkAcceptTask")
TRC_MSG(BT_TRY_TO_OPEN_ESCO, "Try to open eSCO")
TRC_MSG(BTTRANSMITBANDWIDTHx08X, "transmitBandwidth:%08x")
TRC_MSG(BTRETRANSMISSIONEFFORTx02X, "retransmissionEffort:%02x")
TRC_MSG(BTVOICESETTINGx04X, "voiceSetting:%04x")
TRC_MSG(BTESCOPKTTYPEx04X, "eScoPktType:%04x")
TRC_MSG(BTCURRENT_SCOPARMSx02X, "Current ScoParms:%02x")
TRC_MSG(BTRECEIVEBANDWIDTHx08X, "receiveBandwidth:%08x")
TRC_MSG(BTEVENT_SCO_CONNECT_CNF_SCO_FAILED, "BTEVENT_SCO_CONNECT_CNF SCO failed")
TRC_MSG(BTMAXLATENCYx04X, "maxLatency:%04x")
TRC_MSG(BT_PROFILES_TYPE_FROM_MMIx02X, "BT profiles type from MMI:%02x")
TRC_MSG(SUPPORT_ESCO_STATUSx02X, "Support eSCO status:%02x")
TRC_MSG(BT_PROFILES_ESCO_TYPEx02X, "BT profiles eSCO_type:%02x")
TRC_MSG(WRITE_FLUSHED_TIMEOUT, "write flushed timeout")
TRC_MSG(LINK_FLUSHED_TIMEOUT_DEBUGx02X, "flush timeout hdl:%02x")
TRC_MSG(LINK_FLUSHED_TIMEOUT_ERROR_CODE, "flush timeout error code:%04x")
TRC_MSG(BTLOG_ENHANCED_FLUSHED_COMMAND_COMPLETED_HDL, "BTlog The enhanced flushed command is completed with hdlr:0x%04x, value=0x%04x")
TRC_MSG(BTLOG_SUPERVISION_TIMEOUT_CHANGE_EVENT, "BTlog The link supervision timeout event:%04x")
TRC_MSG(BTLOG_POWERON_SET_EVENT_MASK, "BTlog Set event mask")
TRC_MSG(BTLOG_SET_EVENT_MASK_COMMAND_COMPLETED, "BTlog Set event mask command completed")
TRC_MSG(BTLOG_SET_SNIFF_SUBRATING_OP_IN_QUEUE, "BTlog The sniff subrating operation is in remote queue")
TRC_MSG(LINK_SNIFF_SUBRATING_ERROR_CODE, "sniff subrating command with error code:%04x")
TRC_MSG(BTLOG_WRITE_EIR_RESPONSE, "write extended inquiry response with error code:%04x")
TRC_MSG(BTLOG_WRITE_INQUIRY_MODE_COMPLETED, "write Inquiry mode command completed")
TRC_MSG(BTLOG_WRITE_INQUIRY_MODE_PARM, "write Inquiry mode command :%02x")
TRC_MSG(BTLOG_CREATE_AUDIOLINK_SCO_HANDLER, "ConnMgrCreateAudioLink remDevice->scoHandler:%08x")
TRC_MSG(BTLOG_CREATE_AUDIOLINK_SCO_HANDLER1, "ConnMgrCreateAudioLinkscoConnect:%08x")
TRC_MSG(BTLOG_CREATE_AUDIOLINK_SCO_STATUS, "ConnMgrCreateAudioLinkscoConnect status:%02x")
TRC_MSG(BT_LOG_NOTIFY_MMI_SIMAP_ISSUE_16_DIGITS, "btbmHandlePinReqTimeout(): Notify MMI promots 16digits PIN CODE INPUT due to simap issue")
TRC_MSG(BT_LOG_CHECK_SIMAP_SRV_STATE_PIN_CODE_IND, "btbmHandlePinReqTimeout(): Check SIMAP Srv state=%d")
TRC_MSG(BT_LOG_CHECK_SIMAP_PIN_CODE_LEN_IN_RECV_SABM_CASE, "RFChnl DISC state:Recv SABM to check SIMAP PIN LEN case=%d")
TRC_MSG(BT_LOG_LINK_KEY_RSP_TASK_PAIRED_LEN, "LinkKeyRspTask: Find record, paired_with_simap=%d,pin_code_len=%d")
TRC_MSG(BT_LOG_SEC_PIN_CODE_REQ_ISSUED_BY_SIMAP, "SecHandlePinCodeReq(): This pin code request is issued by our SIMAP server")
TRC_MSG(BT_LOG_SEC_AUTH_COMPLETE_RESET_SIMAP_ISSUE_AUTH_PROCEDURE, "SecHandleAuthComplete(): reset simap_issue_auth_procedure to FALSE")
TRC_MSG(BT_LOG_SEC_LINK_KEY_NOTIFY_RESET_FALGS_CASE, "SecHandleLinkKeyNotify():reset simap_issue_auth_procedure and set record_paired_with_simap TRUE,case=%d")
TRC_MSG(BT_LOG_SEC_LINK_KEY_NOTIFY_PIN_CODE_LEN_CASE, "SecHandleLinkKeyNotify(): store link key with pin code len to database_case=%d,len=%d")
TRC_MSG(BT_LOG_START_PIN_CODE_RSP_TASK_PIN_LEN, "StartPinCodeRspTask():Reply to this exchange with pin_code_len=%d")
TRC_MSG(BT_LOG_START_PIN_CODE_RSP_BY_ADDR_TASK_LEN, "StartPinCodeRspByAddrTask():pin_code_len=%d")
TRC_MSG(BT_LOG_REMDEV_REFCOUNT_DLCCOUNT, "RfDlcDisconnected(): refCount=%d,Muxid=0x%02x,dlcCount=%d for link=%08X")
TRC_MSG(BT_LOG_NEEDS_HIGHER_SECURITY_BUT_EXISTED_ACTIVE_CON_REJECT_THIS_CHNL, "RfDlcDisconnected():Reject this higher security chnl due to existed other active cons: can not reset auth states")
TRC_MSG(BT_LOG_HANDLE_LINK_KEY_NOTIFY_CHECK_PAIRED_SIMAP_FLAG, "BT_SecHandleLinkKeyNotify: case=%d,record paired_with_simap flag=%d")
TRC_MSG(BT_LOG_BTBM_REPORT_LINK_STATE_DEBUG_INFO, "BTBMAdpReportLinkState(): operation_ongoing=%d,src_module=%d,last_cmd=%d")
TRC_MSG(BT_LOG_BTBM_CAN_NOT_RESET_OP_ONGOING_FLAG, "BTBMAdpReportLinkState():Can not reset operation_ongoing")
TRC_MSG(BT_LOG_BM_REJECT_WRITE_SCAN_MODE_SAVE_MODE_AND_STATUS, "bm_reject_hdlr: save write_scan_value: bm_save_mode=%d, status=%d")
TRC_MSG(BT_LOG_SDAP_REJECT_SECOND_A2DP_SDP_DUE_TO_ONE_PENDING, "sdap_search_multiple_ssa():reject 2nd a2dp sdp request")
TRC_MSG(BT_LOG_NAMETOK_CBFUNC, "PinCodeAskNameQueryHandler()")
TRC_MSG(BT_LOG_NAMETOK2_CBFUNC, "btbmHandlerRemoteNameQueryAtNoAuthEnabled()")
TRC_MSG(BT_LOG_NAMETOK3_CBFUNC, "btbmHandlerRemoteNameQueryAtNoAuthEnabled()")
TRC_MSG(BT_LOG_MULTIPLE_NAME_CBFUNC, "btbmHandlerRunMultipleNameQuery")
TRC_MSG(BT_LOG_EXISTING_NAMETOK2_NOT_RESET, "NameTok2 is used, can not ask name in btbmRemoteNameRequestAtNoAuthEnabled")
TRC_MSG(BTLOG_WRITE_SIMPLE_PAIRING_MODE_PARM, "write simple pairing mode command :%02x")
TRC_MSG(BTLOG_WRITE_SIMPLE_PAIRING_MODE_COMPLETED, "write simple pairing mode command completed")
TRC_MSG(MESEC_SENDING_IO_CAPABILITY_NEGATIVE_REPLY_COMMAND, "MeSec: Sending Io Capability Request Negative Reply command")
TRC_MSG(BTLOG_BTBM_BONDING_RX_USER_CONFIRM_REQUEST, "BTBM Bonding received the user confirm request event")
TRC_MSG(BTLOG_BTBM_PAIRING_RX_USER_CONFIRM_REQUEST, "BTBM pairing received the user confirm request event")
TRC_MSG(BTLOG_BTBM_BONDING_RX_PASSKEY_ENTRY_REQUEST, "BTBM Bonding received the passkey entry notification event")
TRC_MSG(BTLOG_BTBM_PAIRING_RX_PASSKEY_ENTRY_REQUEST, "BTBM pairing received the passkey entry notification event")
TRC_MSG(BTLOG_BTBM_READRSSI_STATUS, "BTBMReadRSSI(): returned status=%d from ME_ReadRSSI()")
TRC_MSG(BTLOG_BTBM_READRSSI_NOT_FIND_REMDEV_WITH_ADDR, "BTBMReadRSSI(): Can not find remDev with passed addr")
TRC_MSG(BTLOG_BTBM_REPORT_READRSSI_RESULT, "In btbmReportReadRSSIResult(): rssi_op_ongoing=%d,errCode=%d,rssi_value=%d,lap=%08X,uap=%02X,nap=%04X")
TRC_MSG(BTLOG_CONNMANAGER_RSSI_VAL, "Get RSSI value=%d in ConnManager()")
TRC_MSG(MESEC_SENDING_USER_CONFIRM_COMMAND, "MeSec: Sending User Confirm Reply command")
TRC_MSG(MESEC_SENDING_USER_CONFIRM_NEG_COMMAND, "MeSec: Sending User Confirm Negative Reply command")
TRC_MSG(BTLOG_CMGR_CREATE_LINK_WITH_DIFF_ADDR, "CMGR_CreateDataLink(): ACL connected but different BT addr")
TRC_MSG(BT_LOG_MPR_CANCEL_TIMER_IN_AUTHSTATE_CASE, "BT MPR: Cancel timer in authState=%d and case=%d")
TRC_MSG(BT_LOG_START_MPR_TIMER_CASE, "BT MPR: Start a timer for pair result in case=%d")
TRC_MSG(BT_LOG_MPR_TIMEOUT_LINKSTATE_AUTHSTATE, "BT MPR timeout: linkstate=%d,authState=%d")
TRC_MSG(BT_LOG_MPR_TIMEOUT_LINK_NOT_CONNECTED, "BT MPR timeout: Link is not connected")
TRC_MSG(BT_LOG_AUTHEVENT_ERRCODE_LINKSTATE_ORG_AUTHSTATE, "Auth Event with errCode=%d,linkstate=%d,org_authState=%d")
TRC_MSG(BT_LOG_AUTHEVENT_ERR_DISC_LINK, "Auth event with error: Disc ACL link")
TRC_MSG(BT_LOG_AVDTP_RECV_SIGRSP_CURRENT_STATE, "Recv AVDTP SIG RSP=%d,now_stream_state=%d,state_flag=%d")
TRC_MSG(BT_LOG_AVDTP_RECV_RSP_BUT_STREAM_ALREADY_DISC, "AVDTP stream already disc but recv SIG RSP with type=%d")
TRC_MSG(BT_LOG_AVDTP_CHANGE_TO_STREAMING_STATE, "AVDTP Recv Start Stream Rsp change to STREAMING state")

/*BLE*/
TRC_MSG(BT_LOG_CONNECTED_LE4_0_DEV_NUM, "[BLE]cur connected BLE dev num=%d")

TRC_MSG(BT_LOG_CONNECTED_EDR_DEV_NUM, "[BT]cur connected EDR dev num=%d")


/* [BT21] related new added trace  */
TRC_MSG(BTLOG_BLOCK_LIST_NOxD, "Block list no:%d")
TRC_MSG(BTLOG_BLOCK_LIST_Ix02Xx02Xx02Xx02Xx02Xx02X, "Block List %02d:%02x,%02x,%02x,%02x,%02x,%02x")
TRC_MSG(BTLOG_BLOCK_LIST_7_Ix02Xx02Xx02Xx02Xx02Xx02Xx02X, "Block List %02d:%02x,%02x,%02x,%02x,%02x,%02x")
TRC_MSG(BTLOG_INPUT_ADDRx02Xx02Xx02Xx02Xx02Xx02X,  "input addr    :%02x,%02x,%02x,%02x,%02x,%02x")
TRC_MSG(BTLOG_INPUT_ADDR_7x02Xx02Xx02Xx02Xx02Xx02Xx02X,  "input addr    :%02x,%02x,%02x,%02x,%02x,%02x linktype:0x%02x")
TRC_MSG(BTLOG_SSP_MTKBMCBONDING_STATEx02X, "SSP MTKBMC(bonding_state):%02x")
TRC_MSG(BTLOG_BTBMHANDLEPASSKEYENTRYNOTIFICATIONxD, "btbmHandlePasskeyEntryNotification:%d")
TRC_MSG(BTLOG_MTKBMCPIN_BDCx08X, "MTKBMC(pin_bdc):%08x")
TRC_MSG(BTLOG_SERVICE_LISTx02Xx02Xx02X, "Service list:%02x,%02x,%02x")
TRC_MSG(BTLOG_BTBMHANDLEIOCAPABILITYRESPONSEx02Xx02Xx02Xx02Xx02Xx02X, "btbmHandleIoCapabilityResponse:%02x,%02x,%02x,%02x,%02x,%02x")
TRC_MSG(BTLOG_BTEVENT_IO_CAPABILITY_RESPONSE, "BTEVENT_IO_CAPABILITY_RESPONSE")
TRC_MSG(BTLOG_BTBMHANDLEIOCAPABILITYRESPONSEx02Xx02Xx02X, "btbmHandleIoCapabilityResponse:%02x,%02x,%02x")
TRC_MSG(BTLOG_UUID16x04X, "uuid16:%04x")
TRC_MSG(BTLOG_RSSIx02X, "RSSI:%02x")
TRC_MSG(BTLOG_EVENTERRCODEx02X, "Event->errCode:%02x")
TRC_MSG(BTLOG_EVENTPBTBMHANDLEPASSKEYENTRYNOTIFICATIONREMDEVBDADDRADDRx02Xx02Xx02Xx02Xx02Xx02X, "Event->p.btbmHandlePasskeyEntryNotification.remDev->bdAddr.addr:%02x,%02x,%02x,%02x,%02x,%02x")
TRC_MSG(BTLOG_FIND_DEVICE_NEWx02Xx02Xx02Xx02Xx02Xx02X, "Find device new:%02x,%02x,%02x,%02x,%02x,%02x")
TRC_MSG(BTLOG_PASSKEY_ENTRY_NOTIFICATION_WRONG_STATE_IGNORE_IT, "PASSKEY Entry notification wrong state, ignore it.")
TRC_MSG(BTLOG_EIR_VALUEx02X, "eir_value:%02x")
TRC_MSG(BTLOG_MTKBMCBM_OPACTIVITYx02X, "MTKBMC(bm_opactivity):%02x")
TRC_MSG(BTLOG_REMDEVSTATEx02X, "remDev->state:%02x")
TRC_MSG(BTLOG_BTEVENT_IO_CAPABILITY_RESPONSE_AUTHREQUIREMENTSxD, "BTEVENT_IO_CAPABILITY_RESPONSE authRequirements:%d")
TRC_MSG(BTLOG_EVENTPUSERCONFIRMREQUESTREMDEVBDADDRADDRx02Xx02Xx02Xx02Xx02Xx02X, "Event->p.userConfirmRequest.remDev->bdAddr.addr:%02x,%02x,%02x,%02x,%02x,%02x")
TRC_MSG(BTLOG_BTEVENT_IO_CAPABILITY_RESPONSE_IOCAPABILITYxD, "BTEVENT_IO_CAPABILITY_RESPONSE ioCapability:%d")
TRC_MSG(BTLOG_x02Xx02Xx02Xx02Xx02Xx02Xx02Xx02Xx02Xx02X, "%02x,%02x,%02x,%02x,%02x,%02x,%02x,%02x,%02x,%02x")
TRC_MSG(BTLOG_CURRENT_BM_OPACTIVITY, "Current bm_opactivity %02x")
TRC_MSG(BTLOG_EIR_LENGTHxD, "EIR Length:%d")
TRC_MSG(BTLOG_SIMPLE_PAIRING_PROCEDURE_IS_COMPLETED, "Simple Pairing procedure is completed %08x,%08x,%02x,%02x")
TRC_MSG(BTLOG_EIR_RESPONSE, "EIR Response")
TRC_MSG(BTLOG_BTEVENT_IO_CAPABILITY_REQUEST, "BTEVENT_IO_CAPABILITY_REQUEST")
TRC_MSG(BTLOG_BDCSUPPORT_SERVICE_LISTxD, "bdc->support_service_list:%d")
TRC_MSG(BTLOG_KEYPRESSEVENTREPORTINGxD, "keyPressEventReporting:%d")
TRC_MSG(BTLOG_BTBMHANDLE_CURRENT_KEY_PRESSxD, "btbmHandle Current key press:%d")
TRC_MSG(BTLOG_UUID_OFFSETxD, "uuid_offset:%d")
TRC_MSG(BTLOG_FIND_DEVICE_AGAINx02Xx02Xx02Xx02Xx02Xx02X, "Find device again:%02x,%02x,%02x,%02x,%02x,%02x")
TRC_MSG(BTLOG_IN_BLOCK_LIST_DISCONNECT, "In block list, disconnect")
TRC_MSG(BTLOG_BDCx08X, "bdc:%08x")
TRC_MSG(BTLOG_BTEVENT_IO_CAPABILITY_RESPONSE_OOBDATAPRESENTxD, "BTEVENT_IO_CAPABILITY_RESPONSE OOBDataPresent:%d")
TRC_MSG(BTLOG_BDC_NOT_FIND_RESPONSE_FAILED, "bdc not find, response failed.")
TRC_MSG(BTLOG_MTKBMCSSPDEVICEINFONUMERICVALUExD, "MTKBMC(SSPDeviceInfo).numericValue:%d")
TRC_MSG(BTLOG_BTEVENT_USER_CONFIRM_REQUEST, "BTEVENT_USER_CONFIRM_REQUEST")
TRC_MSG(BTLOG_EIR_THE_LAST_ONE, "EIR The last one")
TRC_MSG(BTLOG_IN_BLOCK_LIST_REJECT, "In Block list, reject")
TRC_MSG(BTLOG_ADDRESS_NOT_MATCHED_RETURN, "Address not matched, return")
TRC_MSG(BTLOG_SSP_KEY_TYPExD, "SSP key type:%d")
TRC_MSG(BTLOG_MTKBMCPIN_REQ_TIMERFUNCx08X, "MTKBMC(pin_req_timer).func:%08x")
TRC_MSG(BTLOG_MTKBMCSSPDEVICEINFOADDR_ADDRx02Xx02Xx02Xx02Xx02Xx02X, "MTKBMC(SSPDeviceInfo).addr addr:%02x,%02x,%02x,%02x,%02x,%02x")
TRC_MSG(BTLOG_BTBMHANDLEUSERCONFIRMREQUESTxD, "btbmHandleUserConfirmRequest:%d")
TRC_MSG(BTLOG_BTBMHANDLEOOBDATAREQUEST, "btbmHandleOobDataRequest")
TRC_MSG(BTLOG_NOT_SUPPORT_SNIFF_SUBRATING_MODE, "Not support Sniff subrating mode")
TRC_MSG(BTLOG_MECTASKSTATEx02X, "MEC(taskState):%02x")
TRC_MSG(BTLOG_MEHANDLEWRITEEIROP, "MeHandleWriteEirOp")
TRC_MSG(BTLOG_WRITE_EIR_DATA, "Write Eir Data")
TRC_MSG(BTLOG_EIRRECORDNUMxD, "eirRecordNum:%d")
TRC_MSG(BTLOG_EIRx02Xx02Xx02Xx02Xx02Xx02Xx02Xx02Xx02Xx02X, "EIR:%02x,%02x,%02x,%02x,%02x,%02x,%02x,%02x,%02x,%02x")
TRC_MSG(BTLOG_OFFSETxD, "offset:%d")
TRC_MSG(BTLOG_MECLOCALNAMELENxD, "MEC(localNameLen):%d")
TRC_MSG(BTLOG_MEHANDLEREADRSSIOPHICHANDLEx04X, "MeHandleReadRSSIOp():hicHandle=%04X")
TRC_MSG(BTLOG_MEDISCONNECTLINKx02Xx02Xx02X, "MeDisconnectLink:%02x,%02x,%02x")
TRC_MSG(BTLOG_MEHANDLEWRITEAUTOMATICALLYFLUSHOP, "MeHandleWriteAutomaticallyFlushOp")
TRC_MSG(BTLOG_CURRENT_KEYxD, "Current key:%d")
TRC_MSG(BTLOG_ACL_DISCONNECTING_CREATING_LINK_PENDING, "ACL Disconnecting, creating link pending")
TRC_MSG(BTLOG_MEHANDLEDISCONNECTACLCHECKCREATEACL, "MeHandleDisconnectACLCheckCreateACL")
TRC_MSG(BTLOG_ERR_OR_END_MEHANDLEREADRSSIOP, "ERR or END MeHandleReadRSSIOp")
TRC_MSG(BTLOG_MEHANDLEWRITESNIFFSUBRATINGOP, "MeHandleWriteSniffSubratingOp")
TRC_MSG(BTLOG_RECORD_INDEXx0D_SERVICE_CLASSx04X, "record index:%0d, service class:%04x")
TRC_MSG(BTLOG_EIR_CHECK_THE_REGISTRATION_IN_RECORD_OR_NOT, "EIR check the registration in record or not")
TRC_MSG(BTLOG_RECORD_EXISTxD, "record_exist:%d")
TRC_MSG(BTLOG_xD_USEDxD_SERVICE_CLASSx04X, "%d: used:%d, service class:%04x")
TRC_MSG(BTLOG_EIR_REGISTRATION_SDP_FOR_UPPER_LAYER_SERVICE_CLASSx04X, "EIR registration sdp for upper layer service class:%04x")
TRC_MSG(BTLOG_CURRENT_IOCAPABILITIYSTATE0Xx02X, "Current ioCapabilitiyState:0x%02x")
TRC_MSG(BTLOG_REMDEVSNIFFSUBRATESTATEx02X, "remDev->sniffSubrateState:%02x")
TRC_MSG(BTLOG_EIROP_IN_OPLIST, "eirOp in opList")
TRC_MSG(BTLOG_NO_EIR_UPDATE_OPERATION, "No Eir Update operation")
TRC_MSG(BTLOG_EIROP_NOT_AVAILABLE, "eirOp not available")
TRC_MSG(BTLOG_WRONG_STATE, "Wrong state")
TRC_MSG(BTLOG_REMDEVDISCONNECTACLCHECKCREATACLTIMERFUNC_0, "remDev->disconnectACLCheckCreatACLTimer.func !=0")
TRC_MSG(BTLOG_REMDEV_0, "Remdev ==0")
TRC_MSG(BTLOG_TOKENREMDEVENCRYPTSTATExD, "token->remDev->encryptState:%d")
TRC_MSG(BTLOG_LINK_KEY_BDCx08X, "link key bdc:%08x")
TRC_MSG(BTLOG_STARTIOCAPABILITYRSPBYADDRTASKx02X, "StartIoCapabilityRspByAddrTask:%02x")
TRC_MSG(BTLOG_REMOTE_DEVICE_PERFORM_SHOW_KEY_REQUEST, "Remote device perform show key request")
TRC_MSG(BTLOG_NOT_SIMPLE_PAIRING_KEY_USE_INTERNAL_VALUE, "Not simple pairing key, use internal value")
TRC_MSG(BTLOG_CURRENT_KEY_TYPExD, "Current key type:%d")
TRC_MSG(BTLOG_STARTUSERCONFIRMRSPBYADDRTASKx02X, "StartUserConfirmRspByAddrTask:%02x")
TRC_MSG(BTLOG_REMOTE_DEVICE_IS_NOT_WAITING_FOR_LINK_KEY, "Remote device is not waiting for Link key")
TRC_MSG(BTLOG_SECHANDLEIOCAPABILITYREQUEST, "SecHandleIoCapabilityRequest")
TRC_MSG(BTLOG_SECHANDLEUSERKEYPRESS, "SecHandleUserKeyPress")
TRC_MSG(BTLOG_RECORDGAPKEYTYPExD, "record.gapKeyType:%d")
TRC_MSG(BTLOG_PASSKEY_PRESS_EVENT_x02X, "Passkey press event :%02x")
TRC_MSG(BTLOG_REMOTE_DEVICE_PERFORM_USER_CONFIRM_REQUEST, "Remote device perform user confirm request")
TRC_MSG(BTLOG_PAIRING_IS_IN_PROGRESS, "Pairing is in progress")
TRC_MSG(BTLOG_REMOVE_DEVICE_IS_EMPTY, "Remove device is empty")
TRC_MSG(BTLOG_USERCONFIRMREQUEST_NUMERICVALUE_x08X, "UserConfirmRequest numericValue :%08x")
TRC_MSG(BTLOG_SECHANDLEDELETESTOREDLINKKEYOP, "SecHandleDeleteStoredLinkKeyOp")
TRC_MSG(BTLOG_SECHANDLESIMPLEPAIRINGCOMPLETE, "SecHandleSimplePairingComplete")
TRC_MSG(BTLOG_SECHANDLEUSERPASSKEYNOTIFICATION, "SecHandleUserPasskeyNotification")
TRC_MSG(BTLOG_BTEVENT_SIMPLE_PAIRING_COMPLTETE, "BTEVENT_SIMPLE_PAIRING_COMPLTETE")
TRC_MSG(BTLOG_SECHANDLEIOCAPABILITYREQUEST_NO_REMDEV, "SecHandleIoCapabilityRequest no remDev")
TRC_MSG(BTLOG_TOKENRECORDLEVEL_TYPExD, "token->record->level_type:%d")
TRC_MSG(BTLOG_NOT_KNOWN_DEVICES, "Not Known devices")
TRC_MSG(BTLOG_CURRENT_ENCRYPTION_STATExD, "Current encryption state:%d")
TRC_MSG(BTLOG_TOKENREMDEVAUTHSTATExD, "token->remDev->authState:%d")
TRC_MSG(BTLOG_SECHANDLEIOCAPABILITYRESPONSE_NO_REMDEV, "SecHandleIoCapabilityResponse no remDev")
TRC_MSG(BTLOG_PASSKEY_ENTRY_NUMERICVALUE_x08X, "Passkey Entry numericValue :%08x")
TRC_MSG(BTLOG_SECHANDLEUSERCONFIRMREQUEST, "SecHandleUserConfirmRequest")
TRC_MSG(BTLOG_SECHANDLEREMOTEOOBDATAREQUEST, "SecHandleRemoteOobDataRequest")
TRC_MSG(BTLOG_SDPUPDATEEIRDATABASEx02X, "SdpUpdateEirDataBase:%02x")
TRC_MSG(BTLOG_RECORDATTRIBSIDxD, "record->attribs->id:%d")
TRC_MSG(BTLOG_PARSE_PTRPARSE_COUNTxX, "parse_ptr[parse_count]:0x%x")
TRC_MSG(BTLOG_INPUT_SERVICE_CLASSx04X, "input service class:%04x")
TRC_MSG(BTLOG_SERVICE_CLASS_SIZExD, "Service class size:%d")
TRC_MSG(BTLOG_RECORDNUMxD, "record->num:%d")
TRC_MSG(BTLOG_THIS_RECORD_IS_ALREADY_IN_SDPS_LIST, "This record is already in SDPS list")
TRC_MSG(BTLOG_EIR_IGNORE_DATA_ELEMENT_SEQUENCE_NOT_2_BYTES, "EIR ignore data element sequence not 2 bytes")
TRC_MSG(BTLOG_PARSE_COUNTxD_SERVICE_CLASS_SIZExD, "parse_count:%d, service_class_size:%d")
TRC_MSG(BTLOG_NUMERIC_VALUE_IxD_TEMP_CHARxD, "Numeric value i:%d, temp_char:%d")
TRC_MSG(BTLOG_TEMP_VALUExD, "temp_value:%d")
TRC_MSG(BTLOG_NUMERICVALUExD, "numericValue:%d")
TRC_MSG(BTLOG_ATTRIBUTELIST_BYTE_COUNTxD, "attributelist byte count=%d")
TRC_MSG(BTLOG_NONDIRECT_RETURN_MESSAGE, "non-direct return message")
TRC_MSG(BTLOG_TEMP_CHARxC_COVERT_TO_STRINGxC, "temp_char:%c covert to string:%c")
TRC_MSG(BTLOG_DIVID_VALUExD, "divid_value%d")
TRC_MSG(BTLOG_ME_CREATELINK_REMOVE_INSERTED_HDLRE_DUE_TO_RETURN_FAILED, "ME_CreateLink():remove inserted handler due to return status with failure")
TRC_MSG(BTLOG_CURRENT_SCO_NOxD_ESCO_NOxD, "current sco_no:%d, esco_no:%d")
TRC_MSG(BTLOG_TRY_TO_MAKE_LINK_POLICY, "try to make link policy")
TRC_MSG(BTLOG_PREVIOUS_ROLE_SWITCH_IS_NOT_COMPLETED, "Previous role switch is not completed")
TRC_MSG(BTLOG_DO_SCO_ROLE_SWITCH, "Do SCO role switch")
TRC_MSG(BTLOG_MASTER_SCOxD, "master sco:%d")
TRC_MSG(BTLOG_CON_HDLx04X_MASTER, "con hdl:%04x, master")
TRC_MSG(BTLOG_LINKROLExD_DISBALEDxD, "link->role:%d, disbaled:%d")
TRC_MSG(BTLOG_ALREADY_MASTER_RETURN, "Already master, return")
TRC_MSG(BTLOG_CON_HDLx04X_SLAVE, "con hdl:%04x, slave")
TRC_MSG(BTLOG_CURRENT_PICONETxD_SCATTERNETxD, "current piconet:%d, scatternet:%d")
TRC_MSG(BTLOG_BTBM_SPP_KEY_PRESS_ABORT, "BTBMSSPKeyPressAbort here,%02x,%02x")
TRC_MSG(BTLOG_BTBM_SPP_AUTHENTICATION_REQUIREMENTS, "localAuthRequirements:%02x")
TRC_MSG(BTLOG_BTBM_SPP_DEVICE_INFO_IO_CAPABILITY, "MTKBMC(SSPDeviceInfo).ioCapability:%d")
TRC_MSG(BTLOG_ME_LINKKEY_NOTIFY_BDC_GAPKEYTYPE, "SecHandleLinkKeyNotify(): bdc_gapKeyType=%d")
TRC_MSG(BTLOG_ME_CHANGELINKPOLICYROLESWITCHxD, "Me_ChangeLinkPolicy: LinkPolicyParms = 0x%X, roleSwitch = % d, sniff = % d,")
TRC_MSG(BTLOG_ME_CANCELGETREMOTEDEVICENAME_START_A_TIMER_FOR_CANCEL_NAME_TOKENxD, "ME_CancelGetRemoteDeviceName(): start a timer for cancel name token=%d")
TRC_MSG(BTLOG_CAN_NOT_PERFORM_LINK_POLICY, "Can not perform link policy")
TRC_MSG(BTLOG_ALLOW_ROLE_CHANGE_PARMxD, "allow role change parm:%d")
TRC_MSG(BTLOG_ME_CANCELGETREMOTEDEVICENAME_CANCEL_ORG_TIMER_OF_TOKENxD, "ME_CancelGetRemoteDeviceName(): cancel org timer of token=%d")
TRC_MSG(BTLOG_CHANGE_ENCRYPTION_MODE_TO_HDLx04X_MODEx02X, "Change Encryption mode to hdl:%04x, mode:%02x")
TRC_MSG(BTLOG_LINK_NOTIFICATIONx02X, "link notification:%02x")
TRC_MSG(BTLOG_ENCRYPTION_HDLx04X_MODEx02X, "Encryption hdl:%04x, mode:%02x")
TRC_MSG(BTLOG_THE_LINK_KEY_x02Xx02Xx02Xx02Xx02Xx02Xx02Xx02X, "The link key %02x,%02x,%02x,%02x,%02x,%02x,%02x,%02x")
TRC_MSG(BTLOG_THE_LINK_KEY_OF_ADDRESS_x02Xx02Xx02Xx02Xx02Xx02X, "The link key of address %02x:%02x:%02x:%02x:%02x:%02x")
TRC_MSG(BTLOG_THE_LINK_KEY_OF_ADDRESS_7_x02Xx02Xx02Xx02Xx02Xx02Xx02X, "The link key of address %02x:%02x:%02x:%02x:%02x:%02x type:%0x02x")
TRC_MSG(BTLOG_REQUEST_DEVICE_NAME_TIMEOUT_OF_TOKENxD, "Request device name timeout of token=%d")
TRC_MSG(BTLOG_LINK_POLICY_IS_DIFFERENTx04Xx04X, "Link policy is different:%04x,%04x")
TRC_MSG(BTLOG_THE_LINK_POLICYx04X, "The link policy:%04x")
TRC_MSG(BTLOG_MEHANDLEREMNAMEREQTIMEOUTNORSPCANCELNAMEREQ_TRY_CANCEL_NAME_REQUEST_OF_TOKENxD, "MeHandleRemNameReqTimeoutNoRspCancelNameReq(): Try cancel name request of token=%d")
TRC_MSG(BTLOG_ME_WRITE_LINK_POLICY_STATUS__xX, "The link policy status:%02x")
TRC_MSG(BTLOG_CMGR_CREATE_LINK_NO_OK, "CMGR_CreateDataLink():Not success or pending  from ME_CreateLink,status=%d")
TRC_MSG(BTLOG_START_MONITOR_NUM_COMPLETED_PKTS_TIMER, "Start a monitor_0X13_Event_Timer inx=%d, hicHandle=%08X,pktsent=%d")
TRC_MSG(BTLOG_STOP_MONITOR_NUM_COMPLETED_PKTS_TIMER, "Stop monitor_0X13_Event_Timer inx=%d, hciHandle=%08X")
TRC_MSG(BTLOG_0X13_EVENT_TIMEOUT, "0X13_Event_Timeout:link=%08X,state=%d,hciHandle=%08X,pktsent=%d")

/* New Modified Traces for LV Parsing and Representation*/
TRC_MSG(BTLOG_BTBM_MASTERNUM_SLAVENUM, "BTLOG:BTBM:NET_INFO:MasterNum=%d,SlaveNum=%d")
TRC_MSG(BTLOG_BTBM_PICONETNUM_SCATTERNETNUM, "BTLOG:BTBM:NET_INFO:PiconetNum=%d,ScatternetNum=%d")
TRC_MSG(BTLOG_BTBM_LINK_NUMBER_NOT_IN_DISCONNECTED_STATEBT, "BTLOG:BTBM:LINK_INFO:LinkNum_Not_In_DISC_State=%d")
TRC_MSG(BTLOG_BTBM_SCONUM_ESCONUM, "BTLOG:BTBM:LINK_INFO:ScoNum=%d,EScoNum=%d")
TRC_MSG(BTLOG_ME_CONNECTION_COMPLETE_EVENT_STATUS, "BTLOG:ME:LINK_INFO:Connection_Complete_Event_Status=0x%02X, Encryption_Enabled=%d")
TRC_MSG(BTLOG_ME_ACL_CONNECT_COMPLETE_EVENT, "BTLOG:ME:LINK_INFO:ACL_Connect_Complete_Event")
TRC_MSG(BTLOG_ME_SCO_CONNECT_COMPLETE_EVENT, "BTLOG:ME:LINK_INFO:SCO_Connect_Complete_Event")
TRC_MSG(BTLOG_ME_ACL_CONNECTION_COMPLETE_EVENT_HCIHANDLE, "BTLOG:ME:LINK_INFO:ACL_Connection_Complete_Event_hciHandle=%04X")
TRC_MSG(BTLOG_ME_SCO_CONNECTION_COMPLETE_RESULT_HCIHANDLE, "BTLOG:ME:LINK_INFO:SCO_Connection_Complete_Event_Result=0x%02X,hciHandle=0x%04X")
TRC_MSG(BTLOG_ME_DISCONNECT_COMPLETE_EVENT_STATUS_REASON, "BTLOG:ME:LINK_INFO:Disconnect_Complete_Event_Status=0x%02X,Reason=0x%02X")
TRC_MSG(BTLOG_ME_ACL_DISCONNECT_COMPLETE_EVENT_HCIHANDLE, "BTLOG:LINK_INFO:ME:ACL_Disconnect_Complete_Event_hciHandle=%04X")
TRC_MSG(BTLOG_ME_SCO_DISCONNECT_COMPLETE_EVENT_HCIHANDLE, "BTLOG:ME:LINK_INFO:SCO_Disconnect_Complete_Event_hciHandle=%04X")
TRC_MSG(BTLOG_BTBM_NEW_ROLE_IS_REPORTED_WITH_OPTYPE, "BTLOG:ME:ROLE_INFO:NewRole=%d,hciHandle=%04X,triggered by opType=%02X")
TRC_MSG(BTLOG_BTBM_HANDLEROLESWITCHCFM_SWITCHSTATE, "BTLOG:BTBM:ROLE_INFO:HandleRoleChange,switchState=%02X,NewRole=%d,hciHandle=%04X")
TRC_MSG(BTLOG_ME_SWITCH_ROLE_OPERATION_ENDED_STATUS, "BTLOG:ME:ROLE_INFO:Switch_Role_Operation_Ended_Status=0x%02X")
TRC_MSG(BTLOG_HCI_INSERT_HCI_COMMAND_TO_LIST, "BTLOG:HCI:HCICMD_INFO:Insert_CmdList_HciCmd=%04X")
TRC_MSG(BTLOG_UART_SEND_HCI_COMMAND, "BTLOG:UART:HCICMD_INFO:Uart_Send_HciCmd_Opcode=%04X")
TRC_MSG(BTLOG_ME_HCIGENCMD_HANDLED, "BTLOG:ME:HCICMD_INFO:HCICmd(Non_HCCcmd)_Sent_and_Handled")
TRC_MSG(BTLOG_ME_RX_EVENT, "BTLOG:ME:HCIEVENT_INFO:ME_RX_Event=%MHciEventType")
TRC_MSG(BTLOG_ME_HANDLE_MOD_CHANGE, "BTLOG:ME:MODE_INFO:Handle_Mode_Change_Event,handle=0x%04X New_Mode=0x%02X")
TRC_MSG(BTLOG_SEND_UART_ACL_DATA, "BTLOG_UART_DUMP:send UART ACL data hcihandle=0x%02x %02x, PB flag=0x%02x, length=%d")  /* UART_DUMP */
TRC_MSG(BTLOG_RECV_UART_ACL_DATA, "BTLOG_UART_DUMP:receive UART ACL data hcihandle=0x%02x %02x, PB flag=0x%02x, length=%d")  /* UART_DUMP */
TRC_MSG(BTLOG_UART_TRANSMIT_DATA, "mtkuartTransmitData: total=0x%x, written=-0x%x")
TRC_MSG(BTLOG_UART_READ, "BTLOG_UART_DUMP:UART_Read() is called, length passed=%d, length returned=%d")  /* UART_DUMP */
TRC_MSG(BTLOG_UART_WRITE, "BTLOG_UART_DUMP:UART_Write() is called, length passed=%d, length returned=%d")  /* UART_DUMP */
TRC_MSG(BTLOG_ME_EVENT_STATUS, "BTLOG:ME:EVENT_STATUS=0x%02X")
TRC_MSG(BTLOG_OPEN_DRIVE_FAILED, "BTLOG:Open drive failed %d")
TRC_MSG(BTLOG_BT_ALREADY_POWERED_ON, "BTLOG:BT already power on")
TRC_MSG(BTLOG_CREATE_CONNECTION_CLOCK_OFFSET_SR_MODE, "BTLOG:Create Connection Clock offset=0x%02x%02x, SR mode=0x%02x")

TRC_MSG(BT_PANIC_MESSAGE1, "BT task rx panic message")
TRC_MSG(BT_PANIC_MESSAGE2, "BT task panic BMA Timeout")
TRC_MSG(BT_PANIC_MESSAGE3, "BT task host wakeup greater then 3")
TRC_MSG(BT_PANIC_MESSAGE4, "BT task rx hardware error, %02x,%02x,%02x,%02x")
TRC_MSG(BT_PANIC_MESSAGE5, "BT task rx buffer overflow, %02x,%02x,%02x,%02x")
TRC_MSG(BT_PANIC_MESSAGE6, "BT task rx flow control failed")
TRC_MSG(BT_PANIC_MESSAGE7, "BT task rx number too much")
TRC_MSG(BT_IN_SCO_CONNECT_REQ_NO_ROLE_SWITCH, "BT is in SCO connect procedure, not to perform role-switch")
TRC_MSG(BT_IN_ROLE_SWITCH_NO_SCO, "CMGR: BT is in role-switch, no SCO link")

TRC_MSG(BTLOG_BTCALL_GAPTESTERCREATECHANNEL, "BTlog BTcall gapTesterCreateChannel")
TRC_MSG(BTLOG_BTCALL_AVDT_RE_CONFIGURATION_RSP, "BTlog BTcall AVDT_Re_Configuration_Rsp")
TRC_MSG(BTLOG_BTROLE_SWITCH_NOT_SUPPORTED, "BTlog BTRole switch not supported")
TRC_MSG(BTLOG_BTROLE_SWITCH_WAIT_AUTHENTICATED, "BTlog BTRole switch can not perform due authentication not completed")
TRC_MSG(BTLOG_BTCALL_AVDT_CLOSE_RSP, "BTlog BTcall AVDT_Close_Rsp")
TRC_MSG(BTLOG_BTBTBMHANDLEENCRYPTIONCFM_SWITCHSTATE_BT_DEBUGx02X, "BTlog BTbtbmHandleEncryptionCfm switchState: %02x")
TRC_MSG(BTLOG_BTBTBMHANDLEENCRYPTIONCFM_SWITCHSTATE_x02X, "BTlog BTbtbmHandleEncryptionCfm switchState: %02x")
TRC_MSG(BTLOG_AVRCP_COULDNT_SEND_COMMAND, "BTlog AVRCP: Couldn't send command.")
TRC_MSG(BTLOG_BTCALL_GAPTESTERGENERALDISCOVERABLEMODE, "BTlog BTcall gapTesterGeneralDiscoverableMode")
TRC_MSG(BTLOG_BTCALL_RFCOMMTESTERINIT, "BTlog BTcall RfcommTesterInit")
TRC_MSG(BTLOG_BTCALL_L2CAPTESTERINIT, "BTlog BTcall l2capTesterInit")
TRC_MSG(BTLOG_BTCALL_AVDT_OPEN_REQ, "BTlog BTcall AVDT_Open_Req")
TRC_MSG(BTLOG_BTCALL_GAPTESTERINIT, "BTlog BTcall gapTesterInit")
TRC_MSG(BTLOG_BTCALL_SDPTESTERINIT, "BTlog BTcall SdpTesterInit")
TRC_MSG(BTLOG_TRY_TO_READ_REMOTE_LMP_FEATURE, "BTlog Try to read remote LMP feature")
TRC_MSG(BTLOG_BTCALL_GAPTESTERLIMITEDDISCOVERABLEMODE, "BTlog BTcall gapTesterLimitedDiscoverableMode")
TRC_MSG(BTLOG_BTBTBM_MODE_AS_MASTER, "BTlog BTBTBM Mode As master")
TRC_MSG(BTLOG_BTLOG_BTWIFICPTA_CMD_WAIT_0, "BTlog BTlog BTWIFIC(pta_cmd_wait) !=0")
TRC_MSG(BTLOG_BTCALL_RFCOMMTESTEROPENCLIENTCHANNEL, "BTlog BTcall RfcommTesterOpenClientChannel")
TRC_MSG(BTLOG_BTCALL_RFCOMMTESTERSENDPN, "BTlog BTcall RfcommTesterSendPN")
TRC_MSG(BTLOG_BTROLE_SWITCH_ON_THE_OPLIST_REUTRN, "BTlog BTRole Switch on the opList, reutrn")
TRC_MSG(BTLOG_BTSTART_SNIFF_REQ_OP_ON_THE_LIST_RETURN, "BTlog BTStart Sniff req, op on the list, return")
TRC_MSG(BTLOG_BTSTART_QOS_OP_ON_THE_LIST_RETURN, "BTlog BT QoS req, op on the list, return")
TRC_MSG(BTLOG_ME_SETUP_QOS, "ME_SetUpQoS(): req role=%d, cur role=%d")
TRC_MSG(BTLOG_ME_SETUP_QOS_AFTER_ROLE_SWITCH, "Re-setup QoS after role switch")
TRC_MSG(BTLOG_BTCALL_GAPTESTERNONPAIRABLE, "BTlog BTcall gapTesterNonPairable")
TRC_MSG(BTLOG_BTCALL_L2CA_DISCONNECTREQ, "BTlog BTcall L2CA_DisconnectReq")
TRC_MSG(BTLOG_BTMTKBMCBM_OPACTIVITYxD_CAN_NOT_CHANGE_TO_NORMAL, "BTlog BTMTKBMC(bm_opactivity):%d, can not change to normal")
TRC_MSG(BTLOG_BTCALL_GAPTESTERSECURITYLEVEL3, "BTlog BTcall gapTesterSecurityLevel3")
TRC_MSG(BTLOG_BTACL_AND_SCO_REMDEV__0, "BTlog BTAcl and SCO remDev == 0")
TRC_MSG(BTLOG_BTCALL_RFCOMMTESTERSENDMSC, "BTlog BTcall RfcommTesterSendMSC")
TRC_MSG(BTLOG_BTSDP_QUERY_QUERY_BT_STATUS_PENDING, "BTlog BTSDP_Query query BT_STATUS_PENDING")
TRC_MSG(BTLOG_BTCALL_AVDT_READ_DATA, "BTlog BTcall AVDT_Read_Data")
TRC_MSG(BTLOG_BTCALL_GAPTESTERNONDISCOVERABLEMODE, "BTlog BTcall gapTesterNonDiscoverableMode")
TRC_MSG(BTLOG_BTBTBM_DO_SEC_SETLINKENCRYPTION_STATUSBT_DEBUGx02X, "BTlog BTBTBM Do SEC_SetLinkEncryption status:%02x")
TRC_MSG(BTLOG_BTCALL_AVDT_CONNECTREQ, "BTlog BTcall AVDT_ConnectReq")
TRC_MSG(BTLOG_BTDEVICE_IS_SLAVE_AND_CONNECTED, "BTlog BTDevice is slave and connected")
TRC_MSG(BTLOG_BTCALL_AVDT_RECONFIGURE_REQ, "BTlog BTcall AVDT_ReConfigure_Req")
TRC_MSG(BTLOG_BTCALL_RFCOMMTESTERDATAREQ, "BTlog BTcall RfcommTesterDataReq")
TRC_MSG(BTLOG_BTCALL_GAPTESTERNONCONNECTABLEMODE, "BTlog BTcall gapTesterNonConnectableMode")
TRC_MSG(BTLOG_BTMT6601_SPECIAL_CONNECTION_PROCEDURE, "BTlog BTMT6601 special connection procedure")
TRC_MSG(BTLOG_BTCALL_GAPTESTERCONNECTABLEMODE, "BTlog BTcall gapTesterConnectableMode")
TRC_MSG(BTLOG_BTVALUE0BT_DEBUGx02XVALUE1BT_DEBUGx02X, "BTlog BTvalue[0]:%02x,value[1]:%02x")
TRC_MSG(BTLOG_RESTART_CONNECTTIMER, "BTlog Restart connectTimer")
TRC_MSG(BTLOG_BTLOG_MAKE_THE_PTA_ON, "BTlog BTlog Make the PTA ON")
TRC_MSG(BTLOG_BTGAPTESTERDELETELINKKEY, "BTlog BTgapTesterDeleteLinkKey")
TRC_MSG(BTLOG_BTCALL_AVDT_SET_CONFIGURATION_REQ, "BTlog BTcall AVDT_Set_Configuration_Req")
TRC_MSG(BTLOG_BTTIMEOUT_TIMERFIRED, "BTlog BTTimeout: TimerFired()")
TRC_MSG(BTLOG_BTWRITESCAN_MODE_OPERATION_FAILEDBT_DEBUGx02X, "BTlog BTWriteScan Mode operation failed:%02x")
TRC_MSG(BTLOG_BTCALL_AVDT_ABORT_REQ, "BTlog BTcall AVDT Abort Req")
TRC_MSG(BTLOG_BTSDP_QUERY_QUERY_BT_STATUS_FAILED_xD, "BTlog BTSDP_Query query BT_STATUS_FAILED %d")
TRC_MSG(BTLOG_BTCALL_RFCOMMTESTERCLOSECHANNEL, "BTlog BTcall RfcommTesterCloseChannel")
TRC_MSG(BTLOG_BTROLE_SWITCH_SUPPORTED, "BTlog BTRole switch supported")
TRC_MSG(BTLOG_BTINQUIRY_CANCEL_BM_OPACTIVITYBT_DEBUGx02X, "BTlog BTInquiry cancel bm_opactivity:%02x")
TRC_MSG(BTLOG_CONNECTION_REJECT_WHEN_WE_CONNECT_TIMER_START_AND_REMOTE_DEVICE_WANTS_TO_CONNECT_US, "BTlog Connection Reject when we connect timer start and remote device wants to connect us")
TRC_MSG(BTLOG_BTCOMMAND_COMPLETE_OF_PCM_LOOPBACK, "BTlog BTcommand complete of PCM Loopback")
TRC_MSG(BTLOG_BTLOG_BTWIFICREF_COUNTxD, "BTlog BTlog BTWIFIC(ref_count):%d")
TRC_MSG(BTLOG_CANCELx08X, "BTlog cancel:%08x")
TRC_MSG(BTLOG_BTINQUIRY_CANCEL_WHEN_NAME_TIMER_RUNNING, "BTlog BTInquiry cancel when name timer running")
TRC_MSG(BTLOG_BTCALL_GAPTESTERPAIRABLE, "BTlog BTcall gapTesterPairable")
TRC_MSG(BTLOG_AVRCP_COULDNT_SEND_RESPONSE, "BTlog AVRCP: Couldn't send response.")
TRC_MSG(BTLOG_BTWE_SHALL_START_PIN_IND_TIMER, "BTlog BTWe shall start PIN Ind timer")
TRC_MSG(BTLOG_BTCALL_L2CAPSENDDATA, "BTlog BTcall L2capSendData")
TRC_MSG(BTLOG_BTCALL_GAPTESTERSECURITYLEVEL1, "BTlog BTcall gapTesterSecurityLevel1")
TRC_MSG(BTLOG_BTCALL_GAPTESTERDEVICEDISCOVERY, "BTlog BTcall gapTesterDeviceDiscovery")
TRC_MSG(BTLOG_TRY_TO_READ_REMOTE_LMP_FEATURE_ERRORBT_DEBUGx02X, "BTlog Try to read remote LMP feature error:%02x")
TRC_MSG(BTLOG_BTDONT_WAIT_MMI_CONNECT_RSP_REJECT_NEW_CONENCTION, "BTlog BTdont wait MMI connect rsp, reject new conenction")
TRC_MSG(BTLOG_SUPPORTED_FEATUREBT_DEBUGx02X_BT_DEBUGx02XBT_DEBUGx02XBT_DEBUGx02XBT_DEBUGx02X_BT_DEBUGx02XBT_DEBUGx02XBT_DEBUGx02X, "BTlog Supported feature:%02x, %02x,%02x,%02x,%02x, %02x,%02x,%02x")
TRC_MSG(BTLOG_BTBTBMHANDLEROLESWITCHCFM_SWITCHSTATE_BT_DEBUGx02X, "BTlog BTbtbmHandleRoleSwitchCfm switchState: %02x")
TRC_MSG(BTLOG_BTCALL_BTTESTER_SENDMSG, "BTlog BTcall btTester_sendMsg")
TRC_MSG(BTLOG_BTCALL_AVDT_GET_CAPABILITIES_RSP, "BTlog BTcall AVDT_Get_Capabilities_Rsp")
TRC_MSG(BTLOG_BTCALL_AVDT_SUSPEND_RSP, "BTlog BTcall AVDT_Suspend_Rsp")
TRC_MSG(BTLOG_BTLOG_BTWIFICAFH_CMD_WAIT_0, "BTlog BTlog BTWIFIC(afh_cmd_wait) !=0")
TRC_MSG(BTLOG_BTLOG_PTA_CHANNEL_IS_CALLED, "BTlog BTlog BtRadio_PTA_ChannelInfo() is called.")
TRC_MSG(BTLOG_BTCONN_STATUSBT_DEBUGx02X, "BTlog BTconn status:%02x")
TRC_MSG(BTLOG_BTDO_SNIFFER_REQUEST, "BTlog BTDo sniffer request")
TRC_MSG(BTLOG_BTCALL_AVDT_CLOSE_REQ, "BTlog BTcall AVDT_Close_Req")
TRC_MSG(BTLOG_BTCALL_L2CA_INFOREQ, "BTlog BTcall L2CA_InfoReq")
TRC_MSG(BTLOG_BTBTBMNAMEPROCEDURETIMEOUT, "BTlog BTbtbmNameProcedureTimeout")
TRC_MSG(BTLOG_BTCALL_L2CA_CONNECTREQ, "BTlog BTcall L2CA_ConnectReq")
TRC_MSG(BTLOG_BTCALL_GAPTESTERBONDING, "BTlog BTcall gapTesterBonding")
TRC_MSG(BTLOG_BTCALL_AVDT_WRITE_DATA, "BTlog BTcall AVDT_Write_Data")
TRC_MSG(BTLOG_BTBTBM_ENCRYPTION_CHANGE_TO_ON, "BTlog BTBTBM encryption change to ON")
TRC_MSG(BTLOG_BTCALL_AVDT_SUSPEND_REQ, "BTlog BTcall AVDT_Suspend_Req")
TRC_MSG(BTLOG_BTSTILL_WAIT_FOR_CONNECTION_COMPLETE_EVENT, "BTlog BTStill wait for connection complete event")
TRC_MSG(BTLOG_BTCALL_L2CA_ECHOREQ, "BTlog BTcall L2CA_EchoReq")
TRC_MSG(BTLOG_AVRCP_INVALID_RESPONSE_CODE_xD_CHANGING_TO_REJECTED, "BTlog AVRCP: Invalid response code %d, changing to REJECTED")
TRC_MSG(BTLOG_BTINQUIRY_CANCEL_WHEN_INQUIRY_PREPROCESS_TIMER_RUNNING, "BTlog BTInquiry cancel when inquiry preprocess timer running")
TRC_MSG(BTLOG_BTCOMMAND_COMPLETE_OF_PTA, "BTlog BTcommand complete of PTA")
TRC_MSG(BTLOG_BTCALL_RFCOMMTESTEROPENSERVER, "BTlog BTcall RfcommTesterOpenServer")
TRC_MSG(BTLOG_BTCALL_AVDT_SET_CONFIGURATION_RSP, "BTlog BTcall AVDT_Set_Configuration_Rsp")
TRC_MSG(BTLOG_BTCALL_AVDT_GET_CAPABILITIES_REQ, "BTlog BTcall AVDT_Get_Capabilities_Req")
TRC_MSG(BTLOG_BTBTBM_DO_ROLE_SWITCH, "BTlog BTBTBM Do role switch")
TRC_MSG(BTLOG_BTBTBM_ENCRYPTION_CHANGE_TO_OFF, "BTlog BTBTBM encryption change to OFF")
TRC_MSG(BTLOG_TRY_TO_READ_REMOTE_LMP_FEATURE_EVENT_COMPLETED, "BTlog Try to read remote LMP feature event completed")
TRC_MSG(BTLOG_BTBTBMSTARTSPECIALSLAVEPROCEDURE, "BTlog BTbtbmStartSpecialSlaveProcedure")
TRC_MSG(BTLOG_BTCALL_RFCOMMTESTERRLS, "BTlog BTcall RfcommTesterRls")
TRC_MSG(BTLOG_BTCALL_AVDT_START_RSP, "BTlog BTcall AVDT_Start_Rsp")
TRC_MSG(BTLOG_BTRETURN_CON_IDxD, "BTlog BTreturn con_id:%d")
TRC_MSG(BTLOG_NOT_READY, "BTlog Not ready")
TRC_MSG(BTLOG_MODE_CHANGE_STATUSBT_DEBUGx02X, "BTlog Mode change status:%02x")
TRC_MSG(BTLOG_BTMTKBMCBM_OPACTIVITYxD, "BTlog BTMTKBMC(bm_opactivity):%d")
TRC_MSG(BTLOG_BTGIVE_CON_IDxD, "BTlog BTgive con_id:%d")
TRC_MSG(BTLOG_BTCALL_AVDT_DISCONNECTSIGNAL_REQ, "BTlog BTcall AVDT_DisconnectSignal_Req")
TRC_MSG(BTLOG_BTDO_ROLE_SWITCH_WITH_FEATUREBT_DEBUGx02X, "BTlog BTDo role switch with feature:%02x")
TRC_MSG(BTLOG_BTMASTER_NUMBERxDSLAVE_NUMBERxD, "BTlog BTMaster number:%d,slave number:%d")
TRC_MSG(BTLOG_REMDEVCONNECTCOUNTERxD, "BTlog remDev->connectCounter:%d")
TRC_MSG(BTLOG_BTSTATUSBT_DEBUGx02X_ENCRPSTATEBT_DEBUGx02XAUTHSTATE_BT_DEBUGx02X, "BTlog BTstatus:%02x, encrpstate:%02x,authState: %02x")
TRC_MSG(BTLOG_BTCOMMAND_COMPLETE_OF_AFH, "BTlog BTCommand Complete of AFH")
TRC_MSG(BTLOG_BTCOMMAND_COMPLETE_OF_PTA_CHANNEL_INFO, "BTlog BTCommand Complete of BtRadio_PTA_ChannelInfo()")
TRC_MSG(BTLOG_BTLINKOLDENCRYPTIONMODE_2BT_DEBUGx02X, "BTlog BTlink->oldEncryptionMode 2:%02x")
TRC_MSG(BTLOG_STARTx08X, "BTlog start:%08x")
TRC_MSG(BTLOG_READ_REMOTE_SUPPORTED_FEATURE_FAILEDBT_DEBUGx02X, "BTlog Read remote supported feature failed:%02x")
TRC_MSG(BTLOG_BTSDAPPROGRESSxD, "BTlog BTSDAP(progress):%d")
TRC_MSG(BTLOG_MAKE_CREATION_CONNECTION, "BTlog Make creation connection")
TRC_MSG(BTLOG_BTCALL_AVDT_GET_CAPABILITIES_LONG_RSP, "BTlog BTcall AVDT_Get_Capabilities_Long_Rsp")
TRC_MSG(BTLOG_BTCALL_GAPTESTERLIMITEDINQUIRY, "BTlog BTcall gapTesterLimitedInquiry")
TRC_MSG(BTLOG_BTBTBMINQUIRYPROCEDURETIMEOUT, "BTlog BTbtbmInquiryProcedureTimeout: bm_opactivity = 0x%x")
TRC_MSG(BTLOG_BTCONNECTION_IS_NOT_EXISTING_OR_BD_ADDR_IS_NOT_THE_SAME, "BTlog BTconnection is not existing or bd_addr is not the same")
TRC_MSG(BTLOG_BTDO_ROLE_SWITCH, "BTlog BTDo role switch")
TRC_MSG(BTLOG_BTCALL_AVDTPTESTERINIT, "BTlog BTcall AvdtpTesterInit()")
TRC_MSG(BTLOG_BTSDAP_STATUSBT_DEBUGx02X, "BTlog BTSDAP status:%02x")
TRC_MSG(BTLOG_BTCALL_GAPTESTERSECURITYLEVEL2, "BTlog BTcall gapTesterSecurityLevel2")
TRC_MSG(BTLOG_BTCALL_GAPTESTERGENERALINQUIRY, "BTlog BTcall gapTesterGeneralInquiry")
TRC_MSG(BTLOG_DEVICE_IN_NOT_DISCONNECT_MODE_IGNORE_IT, "BTlog Device in not disconnect mode, ignore it")
TRC_MSG(BTLOG_BTCALL_AVDT_DISCOVER_RSP, "BTlog BTcall AVDT_Discover_Rsp")
TRC_MSG(BTLOG_BTCALL_AVDT_DISCOVER_REQ, "BTlog BTcall AVDT_Discover_Req")
TRC_MSG(BTLOG_BTBTBM_DO_ROLE_SWITCH_STATUSBT_DEBUGx02X, "BTlog BTBTBM Do role switch status:%02x")
TRC_MSG(BTLOG_BTLINKENCRYPTSTATE_OLD_1BT_DEBUGx02X, "BTlog BTlink->encryptState old 1:%02x")
TRC_MSG(BTLOG_BTBTBMSPECIALSLAVEPROCEDURE, "BTlog BTbtbmSpecialSlaveProcedure")
TRC_MSG(BTLOG_BTCMD_STATUSBT_DEBUGx02X, "BTlog BTcmd status:%02x")
TRC_MSG(BTLOG_BTBTBM_MODE_AS_SLAVE, "BTlog BTBTBM Mode As slave")
TRC_MSG(BTLOG_BTCALL_AVDT_ABORT_RSP, "BTlog BTcall AVDT_Abort_Rsp")
TRC_MSG(BTLOG_BTCALL_AVDT_OPEN_RSP, "BTlog BTcall AVDT_Open_Rsp")
TRC_MSG(BTLOG_BTCALL_AVDT_START_REQ, "BTlog BTcall AVDT_Start_Req")
TRC_MSG(BTLOG_CONNECTCOUNTER_EXCEEDS_THRESHOULD, "BTlog connectCounter exceeds threshould")
TRC_MSG(BTLOG_BTLINKSWITCHSTATEBT_DEBUGx02X, "BTlog BTlink->switchState:%02x")
TRC_MSG(BTLOG_BTWRITESCAN_MODE_OPERATION_IS_NOT_MATCH_REDO_AGAIN, "BTlog BTWriteScan Mode operation is not match, redo again")
TRC_MSG(BTLOG_MECHECKDEVICESTATENOTIDLE_CHECK_CURRENT_MODE, "BTlog MeCheckDeviceStateNotIdle Check current mode")
TRC_MSG(BTLOG_BTBTBMHANDLEPINREQTIMEOUT, "BTlog BTbtbmHandlePinReqTimeout")
TRC_MSG(BTLOG_READ_REMOTE_SUPPORTED_FEATURE_SUCCESSBT_DEBUGx04X, "BTlog Read remote supported feature success:%04x")
TRC_MSG(BTLOG_BTCALL_GAPTESTERCREATEACLLINK, "BTlog BTcall gapTesterCreateAclLink")
TRC_MSG(BTTLOG_DISCONNECT_EVENT, "BTT: disconnect event")
TRC_MSG(BTTLOG_CON_HDL_PACKET_SENT, "BTT: hdl:%02x,HCC(con)[i].packetsSent:%02x")
TRC_MSG(BTTLOG_CON_HDL_TX_LEFT, "BTT: hdl:%02x,HCC(aclTxPacketsLeft):%02x")
TRC_MSG(BTTLOG_CON_HDL_TX_STATUS, "BTT: TX a:%02x,b:%02x,c:%02x")
TRC_MSG(BTTLOG_CON_HDL_COMP_STATUS, "BTT: CMP d:%02x,e:%02x,f:%02x")
TRC_MSG(BTTLOG_CON_HDL_COMP_STATUS1, "BTT: CMP g:%02x")
TRC_MSG(L2CAP_Free_Open_Timer_Case2_org_discLevel_then_Disc_Link, "L2CAP Free Open Timer: org discTimeoutLevel=%d and disc ACL link after 3 sec")
TRC_MSG(L2CAP_Free_Open_Timer_Case2_keep_50S_then_Disc_Link, "L2CAP Free Open Timer: keep 50s timeout then disc ACL")
TRC_MSG(L2CAP_DiscAclLink_with_discFlag, "In L2CAP_DiscAclLink(): discFlag=%d")

TRC_MSG(WRITE_SUPERVISION_TIMEOUT, "write supervision timeout")
TRC_MSG(CHNLTXSTATEBT_DEBUGx02X, "chnl->txState:%02x")
TRC_MSG(WAIT_CONECTION_ACP_RSPBT_DEBUGx02X, "wait_conection_acp_rsp:%02x")
TRC_MSG(DISCONNECT_SCO_WITH_ERROR_NO_CONNECTION, "Disconnect SCO with error No connection")
TRC_MSG(NO_BTACCCTRLCHECKPSMPOLICY, "No BTAccCtrlCheckPSMPolicy")
TRC_MSG(THE_LINK_STATEBT_DEBUGx02X, "The link state:%02x")
TRC_MSG(WHITTEN_COMPLETED_PARM3BT_DEBUGx02X, "Whitten completed, parm[3]:%02x")
TRC_MSG(UATRAN_EVENT_PARAMETER_LENGTH__xD, "UATRAN: Event parameter length = %d")
TRC_MSG(START_SERVICE_DISCOVERY_SSA_COMMAND_BT_DEBUGx02X, "Start service discovery ssa command :%02x")
TRC_MSG(CHANNEL_DISCONNECT_COMPLETED, "Channel disconnect completed")
TRC_MSG(CONNMGR_BTEVENT_MODE_CHANGE, "Connmgr BTEVENT_MODE_CHANGE")
TRC_MSG(MSG_ID_BT_BM_DISCOVERY_CNF_TRC, "MSG_ID_BT_BM_DISCOVERY_CNF")
TRC_MSG(UATRAN_NO_SCO_RECEIVER_BUFFER_AVAILABLE, "UATRAN: No SCO receiver buffer available")
TRC_MSG(FAKESIM_RECEIVES_BT_SIM_RESET_REQ_DUE_TO_POWERON, "FakeSim receives BT_SIM_RESET_REQ due to POWERON")
TRC_MSG(CLEAR_MUX_FLAG_XMIT_FLAG3, "Clear MUX_FLAG_XMIT flag#3")
TRC_MSG(CHECK_FTP_POLICY, "Check FTP policy")
TRC_MSG(USBTRAN_EVENT_BUFFER_NOW_AVAILABLE, "USBTRAN: Event Buffer Now Available")
TRC_MSG(RETURN_STATUSBT_DEBUGx04X, "Return status:%04x")
TRC_MSG(OPCODEBT_DEBUGx04X, "opcode:%04x")
TRC_MSG(SEND_CONTINUE_CHNL_STATE_IS_AVTP_TRANS_STATE_FIRST, "Send Continue, chnl state is AVTP_TRANS_STATE_FIRST")
TRC_MSG(TRANS_NO_EVENT_BUFFERS, "TRANS: no Event buffers")
TRC_MSG(RETURN_STATUSx08X, "Return status:%08x")
TRC_MSG(JSR82_SESSION_TX_1_DATA, "JSR82 session tx 1 data")
TRC_MSG(NO_PREVIOUS_NAME_REQUEST_ON_GOING_JUST_DO_IT, "no previous name request on going, just do it")
TRC_MSG(ITEMBT_DEBUGx02X, "item:%02x")
TRC_MSG(NO_SIGNAL_PKT1, "No signal pkt1")
TRC_MSG(LOOPBACK_MODE_COMPLETED, "Loopback mode completed")
TRC_MSG(WRITE_SUPERVISIONTIMEOUT, "write supervisiontimeout")
TRC_MSG(VERSION_COMPLETEDBT_DEBUGx02X, "version completed:%02x")
TRC_MSG(FIND_JSR82_CHANNEL_BT_DEBUGx02X, "Find jsr82 channel :%02x")
TRC_MSG(START_SERVICE_DISCOVERY_SS_COMMAND_BT_DEBUGx02X, "Start service discovery ss command :%02x")
TRC_MSG(BD_ADDRBT_DEBUGx02XBT_DEBUGx02XBT_DEBUGx02XBT_DEBUGx02XBT_DEBUGx02XBT_DEBUGx02X, "bd_addr:%02x,%02x,%02x,%02x,%02x,%02x")
TRC_MSG(ACL_IN_BONDING, "ACL in bonding")
TRC_MSG(INQUIRY_INTERVAL_TIMEOUT, "Inquiry interval timeout")
TRC_MSG(INQUIRY_DUAL_INTERVAL_TIMEOUT, "Inquiry dual interval timeout: mode=%d")
TRC_MSG(STOPPED_TO_TEST_THE_BTBB_TEST, "Stopped to test the BTBB test")
TRC_MSG(MTKBMCHID_BROADCOM_IOT_ROLE_SWITCHBT_DEBUGx02X, "MTKBMC(hid_broadcom_iot_role_switch):%02x")
TRC_MSG(START_INQUIRY_CANCEL_COMMAND_BT_DEBUGx02X, "Start inquiry cancel command :%02x")
TRC_MSG(ABCSP_PANIC_xD, "ABCSP: panic() %d.")
TRC_MSG(ONE_SCO_IN_CON, "one sco in con")
TRC_MSG(REQUEST_ACTIVE_LINK_NAME_TIMER_TIMEOUT, "Request active link name timer timeout")
TRC_MSG(HID_SET_MODEBT_DEBUGx02X, "HID Set mode:%02x")
TRC_MSG(BT_CHIP_VERSIONBT_DEBUGx02X, "BT chip version:%02x")
TRC_MSG(FAKESIM_RECEIVES_BT_SIM_RESET_REQ, "FakeSim receives BT_SIM_RESET_REQ")
TRC_MSG(NO_MATCH_BLUETOOTH_ADDRESS, "No match bluetooth address")
TRC_MSG(SENDRAWPACKETA, "SendRawPacket:A")
TRC_MSG(CHECK_OPP_POLICY, "Check OPP policy")
TRC_MSG(MSG_ID_BT_BM_SEARCH_RAW_RESULT_TRC, "MSG_ID_BT_BM_SEARCH_RAW_RESULT")
TRC_MSG(BTACCCTRLCHECKSERVICEPOLICY_DENY, "BTAccCtrlCheckServicePolicy Deny")
TRC_MSG(RFMDCMD_HCC_CHANGEBAUDRATE_TO_xD, "RFMDcmd_HCC_ChangeBaudRate to :%d")
TRC_MSG(FAKESIM_RECEIVES_BT_SIM_APDU_REQ, "FakeSim receives BT_SIM_APDU_REQ")
TRC_MSG(BLACKLIST_SEARCHED, "BlackList searched")
TRC_MSG(MTKBMCINQUIRY_TIMERFUNC__0, "MTKBMC(inquiry_preprocess_timer).func != 0")
TRC_MSG(SNIFFER_TIMER_SHALL_REOPEN, "Sniffer timer shall reopen")
TRC_MSG(REMOTE_VERSION, "remote version")
TRC_MSG(INQUIRY_START, "inquiry start")
TRC_MSG(TRY_TO_OPEN_RFCOMM_CHANNEL, "Try to open RFCOMM channel")
TRC_MSG(MSG_ID_BT_JSR82_DISABLE_SERVICE_CNF_TRC, "MSG_ID_BT_JSR82_DISABLE_SERVICE_CNF")
TRC_MSG(UATRAN_UARTSLEEP_CNT_xD, "UATRAN: uartSleep() cnt: %d")
TRC_MSG(INQUIRY_IN_GUIDE_TIME, "Inquiry in guide time")
TRC_MSG(DEVICE_WIREVO, "DEVICE WIREVO")
TRC_MSG(RETURN_FROM_RFSENDDATAINTERNALSTATUSxD_ON_DLCIxD, "Return from RfSendDataInternal(),status=%d, on DLCI=0x%02x")
TRC_MSG(TRANS_NO_ACL_BUFFERS, "TRANS: no ACL buffers")
TRC_MSG(NEW_LINK_AND_STORED_LINK_IS_NOT_THE_SAME, "New link and stored link is not the same")
TRC_MSG(MECBTCHIPVERxD, "MEC(btChipVer):%d")
TRC_MSG(REGISTRATION_STATUSBT_DEBUGx02X, "Registration status:%02x")
TRC_MSG(BT_JSR82_SESSIONAPCONNECTRSP, "bt_jsr82_SessionApConnectRsp")
TRC_MSG(TRANS_SHUTDOWN, "TRANS: Shutdown")
TRC_MSG(COMMAND_STATUS_EVENT_WITH_OPCODE_FCF1, "Command status event with opcode FCF1")
TRC_MSG(AVTP_SENDCONTINUEBT_DEBUGx02X, "AVTP_SendContinue:%02x")
TRC_MSG(MTKACCCTLCACCLINK__0, "MTKACCCTLC(accLink) != 0")
TRC_MSG(AVDTP_HDL_CMDBT_DEBUGx02X, "AVDTP Hdl cmd:%02x")
TRC_MSG(BT_DEBUGx02XBT_DEBUGx02XBT_DEBUGx02XBT_DEBUGx02XBT_DEBUGx02XBT_DEBUGx02XBT_DEBUGx02XBT_DEBUGx02X, "%02x,%02x,%02x,%02x,%02x,%02x,%02x,%02x")
TRC_MSG(NO_BTACCCTRLCHECKCONNECTPOLICY, "No BTAccCtrlCheckConnectPolicy")
TRC_MSG(BTACCCTRLDISALLOWDEVICEALLSERVICE, "BTAccCtrlDisAllowDeviceAllService")
TRC_MSG(REQUEST_ACTIVE_LINK_NAME_TIMER_STOP, "Request active link name timer stop")
TRC_MSG(L2CAP_RX_DATA_IND, "l2cap rx data ind")
TRC_MSG(START_SERVICE_DISCOVERY_SA_COMMAND_BT_DEBUGx02X, "Start service discovery sa command :%02x")
TRC_MSG(NO_SIGNAL_PKT4, "No signal pkt4")
TRC_MSG(BT_JSR82_SESSIONAPCONNECTINDEVENT, "bt_jsr82_SessionApConnectIndEvent")
TRC_MSG(IN_THIS_MODE_TEST_SAP_WITHOUT_SNIFF_MODE_SUPPORT, "In this mode, test SAP without sniff mode support")
TRC_MSG(CURRENT_TX_STREAM_IS_NOT_IDLE, "current Tx Stream is not idle")
TRC_MSG(JSR82_NO_EMPTY_CHANNEL, "jsr82 no empty Channel")
TRC_MSG(BT_JSR82_CONNECT_IND_SIZEBT_DEBUGx02X, "bt_jsr82_connect_ind size:%02x")
TRC_MSG(DISCONNECT_SCO_WITH_ERROR_BEC_INVALID_HCI_PARM, "Disconnect SCO with error BEC_INVALID_HCI_PARM")
TRC_MSG(TRANS_USB_COULD_NOT_WRITE_DATA, "TRANS: USB could not write data")
TRC_MSG(FAKESIM_RECEIVES_BT_SIM_DISCONNECT_REQ, "FakeSim receives BT_SIM_DISCONNECT_REQ")
TRC_MSG(IN_RF_SENDDATA_DATA_SENT_ON_DLCIxD_PKTINTRANSITxD, "In RF_SendData(), data sent on DLCI=0x%02x, pktinTransit=%d")
TRC_MSG(RFCOMM_CLIENT, "RFCOMM Client")
TRC_MSG(MTKBMCNAME_CANCEL_TIMERFUNC__0, "MTKBMC(name_cancel_timer).func != 0")
TRC_MSG(BT_JSR82_ENABLE_SERVICE_REQ_SIZEBT_DEBUGx02X, "bt_jsr82_enable_service_req size:%02x")
TRC_MSG(MEHANDLEACLCONCOMPLETE, "MeHandleAclConComplete")
TRC_MSG(INQUIRY_RETRIEVEDEV, "inquiry retrievedev")
TRC_MSG(ACL_IN_NORMAL, "ACL in normal")
TRC_MSG(OPEN_CHANNEL_FAILED, "Open Channel failed")
TRC_MSG(ALLOWED_SERVICEx08X, "Allowed Service:%08x")
TRC_MSG(MSG_ID_BT_JSR82_CONNECT_REQ_TRC, "MSG_ID_BT_JSR82_CONNECT_REQ")
TRC_MSG(MECBTLMPVERxD, "MEC(btLMPVer):%d")
TRC_MSG(REMOTE_NAME_CANCEL_SUCCESS, "remote name cancel success")
TRC_MSG(REMOTE_NAME_CANCEL_PENDING, "remote name cancel pending")
TRC_MSG(SESSION_CREATE_FAILED, "Session create failed")
TRC_MSG(BDADDRBT_DEBUGx02XBT_DEBUGx02XBT_DEBUGx02XBT_DEBUGx02XBT_DEBUGx02XBT_DEBUGx02X, "bdaddr:%02x,%02x,%02x,%02x,%02x,%02x")
TRC_MSG(CURRENT_LINK_STATEBT_DEBUGx02X, "Current link state:%02x")
TRC_MSG(RFMDCMD_HCC_RESET, "RFMDcmd_HCC_RESET")
TRC_MSG(HANDLE_SCOHANDLELINKCONNECTREQ_ERROR, "Handle ScoHandleLinkConnectReq error")
TRC_MSG(BD_ADDR_BT_DEBUGx02XBT_DEBUGx02XBT_DEBUGx02XBT_DEBUGx02XBT_DEBUGx02XBT_DEBUGx02X, "bd addr %02x:%02x:%02x:%02x:%02x:%02x")
TRC_MSG(SEC_LEVEL_TYPExD_SEC_LEVELxD, "sec level type:%d, sec level:%d")
TRC_MSG(THE_INPUT_ADDRBT_DEBUGx02XBT_DEBUGx02XBT_DEBUGx02XBT_DEBUGx02XBT_DEBUGx02XBT_DEBUGx02X, "The input addr:%02x,%02x,%02x,%02x,%02x,%02x")
TRC_MSG(MSG_ID_BT_BM_SEARCH_RAW_CNF_TRC, "MSG_ID_BT_BM_SEARCH_RAW_CNF")
TRC_MSG(STATUS_APDU_AND_P3_LENBT_DEBUGx02X, "Status APDU and P3 len=%02x")
TRC_MSG(ENTER_SNIFF_MODE, "enter sniff mode")
TRC_MSG(IN_RFAPPCALLBACK_PACKETSINTRANSITxD, "In RfAppCallback(): packetsInTransit=%d")
TRC_MSG(BD_ADDRBT_DEBUGx02XBT_DEBUGx02XBT_DEBUGx02XBT_DEBUGx02XBT_DEBUGx02XBT_DEBUGx02X_IN_STATE, "bd_addr:%02x,%02x,%02x,%02x,%02x,%02x in state:0x%02x")
TRC_MSG(BTACCCTRLALLOWDEVICEALLSERVICE, "BTAccCtrlAllowDeviceAllService")
TRC_MSG(TRAN_INIT_STARTED, "TRAN:  Init started")
TRC_MSG(RFEVENT_CLOSE_IND_TRC, "RFEVENT_CLOSE_IND")
TRC_MSG(CHANNEL_OPENED, "Channel opened")
TRC_MSG(BTBMHANDLERINQUIRYINTERVALPROCEDURE, "btbmHandlerInquiryIntervalProcedure")
TRC_MSG(BTJ82SEAPSESSIONINDEXPS_TYPEBT_DEBUGx02X, "BTJ82SEAP(session)[index].ps_type:%02x")
TRC_MSG(BTBBTESTSPPCALLBACKFUNC_BT_DEBUGx02X, "btBBTestSppCallbackFunc :%02x")
TRC_MSG(AVTP_EVENT_TX_ERROR_TRC, "AVTP_EVENT_TX_ERROR")
TRC_MSG(BTACCCTRLSET_ALLOWEDPSMxDALLOWEDSERVICExD, "BTAccCtrlSet: allowedPSM=%d,allowedService=%d")
TRC_MSG(RESULT_VALUEBT_DEBUGx02X, "result value:%02x")
TRC_MSG(BT_CODx08X, "cod:%08x")
TRC_MSG(IN_RFMUXCHECKTXQUEUESPACKETSINTRANSITxD, "In RfMUXCheckTxQueues():packetsInTransit=%d")
TRC_MSG(AUDIO_LINK_TYPEBT_DEBUGx02X, "Audio link type:%02x")
TRC_MSG(CANCELLING_STATE_IGNORE_THE_RESULT, "Cancelling state, ignore the result")
TRC_MSG(MSG_ID_BT_JSR82_CONNECT_RSP_TRC, "MSG_ID_BT_JSR82_CONNECT_RSP")
TRC_MSG(BTBBTESTITEM_RESULTBT_DEBUGx02X, "BTBBTestItem result:%02x")
TRC_MSG(START_INQUIRY_COMPLETED_COMMAND_BT_DEBUGx02X, "Start inquiry completed command :%02x")
TRC_MSG(GAPTESTER_SET_FILTER_COD_TO_0XFFFFFFFF, "GapTester set filter cod to 0xFFFFFFFF")
TRC_MSG(MSG_ID_BT_JSR82_ENABLE_SERVICE_REQ_TRC, "MSG_ID_BT_JSR82_ENABLE_SERVICE_REQ")
TRC_MSG(USBTRAN_SCO_BUFFER_NOW_AVAILABLE, "USBTRAN: SCO Buffer Now Available")
TRC_MSG(RFMDCMD_HCC_WRITENVRAMDATA, "RFMDcmd_HCC_WriteNvramData")
TRC_MSG(RX_DATA_EXCEED_ACCEPTABLE_VALUEBT_DEBUGx04X, "Rx data exceed acceptable value:%04x")
TRC_MSG(REGISTRATION_SECURITY_RECORD_STATUSBT_DEBUGx02X, "Registration security record status:%02x")
TRC_MSG(NO_A2DP_DATA_STREAMMING, "No A2DP data streamming")
TRC_MSG(REJECT_OP_ENTRY_IS_NOT_AVAILABLEBT_DEBUGx02X, "reject Op Entry is not available:%02x")
TRC_MSG(SET_PIN_CODE_RSP_TIMEOUT_VALUE, "SET PIN CODE RSP TIMEOUT Value")
TRC_MSG(RFAPPCALLBACKPKT_ON_DLCIxD_RETURNED_WITH_STATUSxDCALL_RFMUXCHECKTXQUEUES, "RfAppCallback:Pkt on DLCI=0x%02x returned with status=%d,call RfMUXCheckTxQueues")
TRC_MSG(BROADCOM_CHIP_HID_EXIST_NO_ROLE_SWITCH, "BroadCom chip, hid exist, no role switch")
TRC_MSG(INQUIY_TIME_INTERVALxD, "Inquiy time interval:%d")
TRC_MSG(ONE_SCO_OUT_CON2, "one sco out con2")

TRC_MSG(CHECK_SPPDUNLAN_POLICY, "Check SPP,DUN,LAN policy")
TRC_MSG(BT_JSR82_SESSIONAPCONNECTCFNEVENT, "bt_jsr82_SessionApConnectCfnEvent")
TRC_MSG(IN_MEHANDLELINKREJECTOPMECPENDCONSxD, "In MeHandleLinkRejectOp():MEC(pendCons)=%d")
TRC_MSG(DISCOVERY_DATA_SIZExD_WITH_RESULTBT_DEBUGx02X, "Discovery data size:%d with result:%02x")
TRC_MSG(AVDTP_RX_ABORT_CMD_WITH_NO_VALID_STREAM_IDxD, "AVDTP Rx Abort cmd with no valid stream id:%d")
TRC_MSG(L2CAP_ID_BT_DEBUGx04X, "l2cap_id :%04x")
TRC_MSG(RESULT_BT_DEBUGx02X, "result :%02x")
TRC_MSG(LENGTH_BT_DEBUGx02X, "length :%02x")
TRC_MSG(ALREADY_MASTER, "Already Master")
TRC_MSG(L2CAP_SERVER, "L2CAP SERVER")
TRC_MSG(APDU_TYPEBT_DEBUGx02X, "APDU type=%02x")
TRC_MSG(FIND_MAIN_IDENTIFIER, "find main identifier")
TRC_MSG(CHANNEL_BT_DEBUGx04X, "channel :%04x")
TRC_MSG(UNKNOWN_RESPONSE, "Unknown response")
TRC_MSG(DO_SERVICE_SEARCH, "Do service search")
TRC_MSG(MSG_ID_BT_JSR82_CONNECT_IND_TRC, "MSG_ID_BT_JSR82_CONNECT_IND")
TRC_MSG(L2CAP_CREATE_COMPLETED, "L2CAP create completed")
TRC_MSG(CLEAR_MUX_FLAG_XMIT_FLAG1, "Clear MUX_FLAG_XMIT flag#1")
TRC_MSG(UATRAN_PASSING_UP_xD_BYTES, "UATRAN: Passing up %d bytes")
TRC_MSG(THE_CMP_ADDRBT_DEBUGx02XBT_DEBUGx02XBT_DEBUGx02XBT_DEBUGx02XBT_DEBUGx02XBT_DEBUGx02X, "The cmp addr:%02x,%02x,%02x,%02x,%02x,%02x")
TRC_MSG(GAPTESTER_SET_DISCOVERY_WITHOUT_NAME_MODE, "GapTester set discovery without name mode")
TRC_MSG(CURRENT_DATA_SIZExD, "Current data size:%d")
TRC_MSG(UATRAN_CONTROLLER_MAY_ENTER_SLEEP_MODE, "UATRAN: Controller may enter sleep mode")
TRC_MSG(JSR82_SESSION_ENABLED_SERVICE, "JSR82 session enabled service")
TRC_MSG(RADIO_WAKEUP_COMPLETED, "radio wakeup completed")
TRC_MSG(JSR82_NO_MAIN_CHANNEL, "jsr82 no main Channel")
TRC_MSG(INQUIRY_CANCEL_COMPLETED, "inquiry Cancel Completed")
TRC_MSG(ADDRBT_DEBUGx02XBT_DEBUGx02XBT_DEBUGx02XBT_DEBUGx02XBT_DEBUGx02XBT_DEBUGx02X, "addr:%02x,%02x,%02x,%02x,%02x,%02x")
TRC_MSG(NEXT_START_TIMEx08X, "next_start_time:%08x")
TRC_MSG(BTACCCTRLCHECKPSMPOLICY_SHALL_CHECK_POLICY, "BTAccCtrlCheckPSMPolicy shall check policy.")
TRC_MSG(UATRAN_SCO_DATA_LENGTH__xD, "UATRAN: SCO data length = %d")
TRC_MSG(SDAP_FAILED_REMOVE_LINK, "SDAP failed, remove link")
TRC_MSG(RECV_TXCREDIT_NEW_TXCREDITxD_CALL_RFMUXCHECKTXQUEUES, "Recv txCredit, new txCredit=%d, call RfMUXCheckTxQueues")
TRC_MSG(TRY_TO_OPEN_L2CAP_CHANNEL, "Try to open L2CAP channel")
TRC_MSG(REMOTE_NAME_REQUEST_STATUSBT_DEBUGx02X, "Remote name request status:%02x")
TRC_MSG(REQUEST_ACTIVE_LINK_NAME_TIMER_STARTx08X, "Request active link name timer start:%08x")
TRC_MSG(CONNMGRCHECKSTARTSNIFFTIMER, "ConnMgrCheckStartSniffTimer")
TRC_MSG(MSG_ID_BT_BM_DISCOVERY_RESULT_IND_TRC, "MSG_ID_BT_BM_DISCOVERY_RESULT_IND")
TRC_MSG(INQUIRY_IDLE_TIMER_CALLBACK_FUNCTION_IS_NOT_0, "Inquiry idle timer callback function is not 0")
TRC_MSG(IN_MEHANDLELINKCONNECTOP2ND_MECPENDCONSxD, "In MeHandleLinkConnectOp():2nd MEC(pendCons)=%d")
TRC_MSG(INQUIRY_AFTER_120_SECONDS_NOT_COMPLETED, "Inquiry after 120 seconds, not completed")
TRC_MSG(PTR_LOCAL_CIDBT_DEBUGx04X, "ptr local cid:%04x")
TRC_MSG(LINK_SUPERVISION_TIMEOUTBT_DEBUGx04X, "Link supervision timeout:%04x")
TRC_MSG(ROLE_SWITCH_PERFORM_RETURN_DIRECTLY, "Role switch perform, return directly")
TRC_MSG(STRINGBT_DEBUGx02XBT_DEBUGx02X, "string:%02x,%02x")
TRC_MSG(MSG_ID_BT_JSR82_DISCONNECT_IND_TRC, "MSG_ID_BT_JSR82_DISCONNECT_IND")
TRC_MSG(NO_SIGNAL_PKT2, "No signal pkt2")
TRC_MSG(AVDTP_HDL_REJBT_DEBUGx02X, "AVDTP Hdl Rej:%02x")
TRC_MSG(L2CAP_CLIENT, "L2CAP Client")
TRC_MSG(SET_AS_SLOW_CONNECT_MODE, "Set as SLOW_CONNECT_MODE")
TRC_MSG(IN_MEHANDLELINKACCEPTOPMECPENDCONSxD, "In MeHandleLinkAcceptOp():MEC(pendCons)=%d")
TRC_MSG(SNIFFER_TIMER_RESTART_AGAIN, "Sniffer timer restart again")
TRC_MSG(MTU_BT_DEBUGx04X, "mtu :%04x")
TRC_MSG(TRY_TO_OPEN_SCO_LINK, "Try to open SCO link")
TRC_MSG(SET_AS_FAST_CONNECT_MODE, "Set as FAST_CONNECT_MODE")
TRC_MSG(MAKE_REMOTE_NAME_REQUEST_CANCEL_COMMAND, "Make remote name request cancel command")
TRC_MSG(RX_BUFFER_IS_FULL, "Rx buffer is full")
TRC_MSG(RFMDNTF_HCC_RESET3500, "RFMDntf_HCC_RESET3500")
TRC_MSG(INQUIRY_CANCEL_BUT_THE_NAME_TOKEN_SHALL_REQUEST_AGAIN, "inquiry cancel but the name token shall request again")
TRC_MSG(BT_JSR82_CONNECT_CFN_SIZEBT_DEBUGx02X, "bt_jsr82_connect_cfn size:%02x")
TRC_MSG(DEVICE_WITH_NAME, "Device with name")
TRC_MSG(NO_BTACCCTRLCHECKSERVICEPOLICY, "No BTAccCtrlCheckServicePolicy")
TRC_MSG(RX_DATA_NOT_EQUAL, "Rx data not equal")
TRC_MSG(TIME_INTERVALx08X, "time interval:%08x")
TRC_MSG(TEMP_INQUIRY_LENGTHxD, "temp inquiry length:%d")
TRC_MSG(REJECT_OP_WITH_THE_SAME_ADDR, "Reject Op with the same addr")
TRC_MSG(BT_JSR82_CMGRCLIENTCALLBACK_NOT_THE_CONNECT_BD_ADDR, "bt_jsr82_CmgrClientCallback Not the connect bd_addr")
TRC_MSG(CHANGE_TO_UT_MODE, "Change to UT mode")
TRC_MSG(BT_JSR82_SESSIONAPDISABLERESULTEVENT, "bt_jsr82_SessionApDisableResultEvent")
TRC_MSG(SIMULATE_SIM_CLIENT_SENDS_CONNECT_REQ_AND_TEST_MODExD, "Simulate SIM Client sends connect req, and test_mode=%d")
TRC_MSG(RADIO_WAKEUP_TIMER__3, "Radio Wakeup timer > 3")
TRC_MSG(RFMDEVT_HCC_WRITENVRAMDATA, "RFMDevt_HCC_WriteNvramData")
TRC_MSG(ONE_SCO_IN_CONNECTED, "one sco in connected")
TRC_MSG(CHECK_HS_AG_POLICY, "Check HS_AG policy")
TRC_MSG(JSR82_SESSION_DISCONNECT_SERVICE, "JSR82 session disconnect service")
TRC_MSG(JSR82_EMPTY_CHANNEL_FIND, "jsr82 empty Channel find")
TRC_MSG(NO_NAME_REQUEST_COMPLETE_EVENT_MAKE_NAME_CANCEL_COMMAND, "No name request complete event, make name cancel command")
TRC_MSG(ACL_LINK_EXISTS_MAY_DUE_TO_AFTER_BONDING_PROCEDURE_THEN_CONNECT_SPP_IMMEDIATELY_SET_DISCFLAG_AS_FALSE, "ACL link exists may due to After Bonding Procedure Then connect SPP immediately: set discFlag as FALSE")
TRC_MSG(DEVICE_IN_DATABASE_BT_DEBUGx02X, "Device in Database :%02x")
TRC_MSG(LINK_NO_BT_DEBUGx02X, "link no :%02x,")
TRC_MSG(NAME_CALLBACK_REMOVE_MTKBMCNAME_CANCEL_TIMERFUNC, "name callback, remove MTKBMC(name_cancel_timer).func")
TRC_MSG(NODE_STILL_IN_THE_OPLIST, "Node still in the opList")
TRC_MSG(RECORD_INDEXBT_DEBUGx02XBT_DEBUGx02X, "record index:%02x,:%02x")
TRC_MSG(UATRAN_HCI_COMMAND_WAS_NOT_ACKNOWLEDGED_WITH_AN_EVENT, "UATRAN: HCI Command was not acknowledged with an event")
TRC_MSG(LINK_NUMBER_NOT_IN_DISCONNECTED_STATEBT_DEBUGx02X, "link number not in disconnected state:%02x")
TRC_MSG(THE_INDEXBT_DEBUGx02X, "the index:%02x")
TRC_MSG(POWER_CONTROL_COMPLETED, "Power control completed")
TRC_MSG(UATRAN_ACL_DATA_LENGTH__xD, "UATRAN: ACL data length = %d")
TRC_MSG(SET_MTKACCCTLCACCLINK, "Set MTKACCCTLC(accLink)")
TRC_MSG(CHECK_SIMAP_POLICY, "Check SIMAP policy")
TRC_MSG(START_INQUIRY_COMMAND_BT_DEBUGx02X, "Start inquiry command :%02x")
TRC_MSG(UATRAN_NO_EVENT_RECEIVER_BUFFER_AVAILABLE, "UATRAN: No Event receiver buffer available")
TRC_MSG(RFCOMM_LAYER_FOR_INCOMING_CONNECTION_EXEC_SERVICE_LEVEL_SECURITY, "RFCOMM layer for incoming connection: Exec Service Level security")
TRC_MSG(HOST_WAKEUP_COMPLETED, "Host wakeup completed")
TRC_MSG(WAKUP_OPCODE_BT_DEBUGx04X, "wakup opcode :%04x")
TRC_MSG(BDADDRBT_DEBUGx02XBT_DEBUGx02XBT_DEBUGx02X, "bdaddr:%02x,%02x,%02x")
TRC_MSG(CANCELLING_STATE_SHOW_FAILED, "Cancelling state, show failed.")
TRC_MSG(SESSION_CREATE_COMPLETED, "Session create completed")
TRC_MSG(BTACCCTRLCHECKCONNECTPOLICY_DENY, "BTAccCtrlCheckConnectPolicy Deny")
TRC_MSG(JSR82_SESSION_TX_2_DATA, "JSR82 session tx 2 data")
TRC_MSG(THE_AUTHENTICATION_STATUSBT_DEBUGx02X, "The authentication status:%02x")
TRC_MSG(THE_INPUT_SERV_CHNLBT_DEBUGx02X, "The input serv_chnl:%02x")
TRC_MSG(BTEVENT_AUTHENTICATE_CNF_TRC, "BTEVENT_AUTHENTICATE_CNF")
TRC_MSG(USBTRAN_ACL_BUFFER_NOW_AVAILABLE, "USBTRAN: ACL Buffer Now Available")
TRC_MSG(TRANS_NO_SCO_BUFFERS, "TRANS: no SCO buffers")
TRC_MSG(BT_JSR82_HANDLESESSIONAPENABLESERVICE, "bt_jsr82_HandleSessionApEnableService")
TRC_MSG(SCOCON_IS_ZERO, "SCOCON is zero")
TRC_MSG(BT_JSR82_DISABLE_SERVICE_REQ_SIZEBT_DEBUGx02X, "bt_jsr82_disable_service_req size:%02x")
TRC_MSG(REJECT_OP_IS_NOT_EMPTY, "Reject Op is not empty")
TRC_MSG(IN_MEHANDLELINKACCEPTOP2ND_MECPENDCONSxD, "In MeHandleLinkAcceptOp():2nd MEC(pendCons)=%d")
TRC_MSG(BTBBTESTITEMBT_DEBUGx02X, "BTBBTestItem:%02x")
TRC_MSG(REQ_NAMEBT_DEBUGx02XBT_DEBUGx02XBT_DEBUGx02XBT_DEBUGx02XBT_DEBUGx02XBT_DEBUGx02X, "req name,%02x,%02x,%02x,%02x,%02x,%02x,")
TRC_MSG(MECPENDCONS_0, "MEC(pendCons) !=0")
TRC_MSG(WRITE_MODE_BT_DEBUGx02X, "Write mode :%02x")
TRC_MSG(MTKACCCTLCACCCTRLSETBT_DEBUGx02X, "MTKACCCTLC(accCtrlSet):%02x")
TRC_MSG(CLEAR_MUX_FLAG_XMIT_FLAG2, "Clear MUX_FLAG_XMIT flag#2")
TRC_MSG(RFMDCMD_HCC_RESET3500, "RFMDcmd_HCC_RESET3500")
TRC_MSG(NO_AVAILABLE_REMDEV, "No available remDev")
TRC_MSG(EMPTY_REMDEV, "Empty remDev")
TRC_MSG(FAKESIM_RECEIVES_BT_SIM_CONNECT_REQ, "FakeSim receives BT_SIM_CONNECT_REQ")
TRC_MSG(BDADDRx08Xx08Xx08X, "bdaddr:%08x,%08x,%08x")
TRC_MSG(CURRENT_TX_STREAM_STATEBT_DEBUGx02X, "current Tx Stream state:%02x")
TRC_MSG(CURRENT_MODE_BT_DEBUGx02XERROR_CODEBT_DEBUGx02X, "current mode :%02x,error_code:%02x")
TRC_MSG(IF_RADIO_WAKEUP_NO_RESPONSE_WE_WILL_GEN_A_FAKE_EVENT_AND_TRY_TO_WAKEUP_AGAIN, "If Radio Wakeup no response, we will gen a fake event and, try to wakeup again")
TRC_MSG(RSP_RESULT_BT_DEBUGx02X, "rsp_result :%02x")
TRC_MSG(OPEN_RFCOMM_CHANNEL_FAILED, "open rfcomm channel failed")
TRC_MSG(RFMDEVT_HCC_CHANGEBAUDRATEBT_DEBUGx02X, "RFMDevt_HCC_ChangeBaudRate:%02x")
TRC_MSG(CONNMGRSNIFFTIMEOUTHANDLER, "ConnMgrSniffTimeoutHandler")
TRC_MSG(IN_MEHANDLELINKCONNECTOPMECPENDCONSxD, "In MeHandleLinkConnectOp():MEC(pendCons)=%d")
TRC_MSG(INQUIRY_IDLE_TIMER_TIMEOUT, "inquiry idle timer timeout")
TRC_MSG(BT_JSR82_CMGRSERVERCALLBACK, "bt_jsr82_CmgrServerCallback")
TRC_MSG(CON_HDLBT_DEBUGx02X_RX_DATA_LEN_xD, "con_hdl:%02x, Rx data len :%d")
TRC_MSG(AVDTP_HDL_RSPBT_DEBUGx02X, "AVDTP Hdl Rsp:%02x")
TRC_MSG(IN_RFMUXCHECKNEXTTXQUEUES_PACKETSINTRANSITxD_ON_DLCIxD, "In RfMuxCheckNextTxQueues(), packetsInTransit=%d, on DLCI=0x%02x")
TRC_MSG(RFCOMM_CREATE_COMPLETED, "RFCOMM create completed")
TRC_MSG(IN_MEHANDLELINKREJECTOP2ND_MECPENDCONSxD, "In MeHandleLinkRejectOp():2nd MEC(pendCons)=%d")
TRC_MSG(HFP_AUTO_DISCONNECT_BLACK_LISTxD, "hfp_auto_disconnect_black_list:%d")
TRC_MSG(L2CAP_OPEN_CHANNEL_FAILED, "L2CAP open Channel failed")
TRC_MSG(CON_IDBT_DEBUGx02X, "Con id:%02x")
TRC_MSG(RFCOMM_OPEN_CHANNEL_FAILED, "RFCOMM open Channel failed")
TRC_MSG(NOT_GOOBALHANDLER, "not goobalHandler")
TRC_MSG(NAME_LENx08X, "name_len:%08x")
TRC_MSG(IN_RF_SENDDATA_CALL_RFMUXCHECKTXQUEUES, "In RF_SendData(): call RfMUXCheckTxQueues")
TRC_MSG(NO_SIGNAL_PKT3, "No signal pkt3")
TRC_MSG(HID_ROLE_STATEBT_DEBUGx02X, "HID Role_state:%02x")
TRC_MSG(GAPTESTER_SET_DISCOVERY_WITH_NAME_MODE, "GapTester set discovery with name mode")
TRC_MSG(REJECT_OP_IN_LIST_REMOTE_THE_REJECT_OP_FROM_LIST, "Reject Op in list, remote the reject Op from list")
TRC_MSG(LINK_REJECTBT_DEBUGx02XBT_DEBUGx02XBT_DEBUGx02XBT_DEBUGx02XBT_DEBUGx02XBT_DEBUGx02X, "Link Reject:%02x,%02x,%02x,%02x,%02x,%02x")
TRC_MSG(CHECK_LINKBT_DEBUGx02X, "check link:%02x")
TRC_MSG(STRINGBT_DEBUGx02XBT_DEBUGx02XBT_DEBUGx02XBT_DEBUGx02X, "string:%02x,%02x,%02x,%02x")
TRC_MSG(RECV_SET_PIN_CODE_RSP_TIMEOUT_VALUE_WITH_ERR0, "Recv SET PIN CODE RSP TIMEOUT Value with err=0")
TRC_MSG(BLACKLIST_x0D, "BlackList :%0d")
TRC_MSG(LINK_SUPERVISION_HDLBT_DEBUGx02X, "Link supervision hdl:%02x")
TRC_MSG(UATRAN_HOST_IS_READY_TO_ENTER_SLEEP_MODE, "UATRAN: Host is ready to enter sleep mode")
TRC_MSG(CHECK_RFCOMM_TESTER_POLICY, "Check RFCOMM Tester policy")
TRC_MSG(TX_DATA_COMPLETED, "Tx data Completed")
TRC_MSG(RFCOMM_SERVER, "RFCOMM SERVER")
TRC_MSG(BTACCCTRLUNSET, "BTAccCtrlUnset")
TRC_MSG(PREVIOUS_NAME_REQUEST_ON_GOING_CANCEL_IT, "previous name request on going, cancel it")
TRC_MSG(FAKESIM_RECEIVES_BT_SIM_RESET_REQ_DUE_TO_SET_TRANSPORT_PRO_TYPE, "FakeSim receives BT_SIM_RESET_REQ due to SET_TRANSPORT_PRO_TYPE")
TRC_MSG(SET_SPP_TX_SIZE_xD, "Set SPP Tx size :%d")
TRC_MSG(DURING_PAIRING_NOT_ALLOW_ROLE_SWITCH, "During pairing, not allow role switch")
TRC_MSG(SELECT_APDU_AND_FILE_IDBT_DEBUGx02X_BT_DEBUGx02X, "Select APDU and FILE ID=%02x %02x")
TRC_MSG(RX_DATA_IND, "Rx data ind")
TRC_MSG(PTR1_STATUS_IDLE_RETURN_DIRECTLY, "ptr1 status idle, return directly")
TRC_MSG(BT_JSR82_SESSIONAPDISCONNECTINDEVENT, "bt_jsr82_SessionApDisConnectIndEvent")
TRC_MSG(GET_RESPONSE_APDU_AND_P3_LENBT_DEBUGx02X, "Get Response APDU and P3 len=%02x")
TRC_MSG(CHECK_FAX_POLICY, "Check FAX policy")
TRC_MSG(THE_TIMER_LOOKS_LIKE_SOME_ERRORS, "The timer looks like some errors")
TRC_MSG(UATRAN_NO_ACL_RECEIVER_BUFFER_AVAILABLE, "UATRAN: No ACL receiver buffer available")
TRC_MSG(BTBMCHECKBONDINGSTATEWHENDISCONNECTEDBT_DEBUGx02X, "btbmCheckBondingStateWhenDisconnected,%02x")
TRC_MSG(WRITE_BT_CODx08X, "Write Cod:%08x")
TRC_MSG(GAPTESTER_SET_FILTER_CODBT_DEBUGx04X, "GapTester set filter cod=%04X")
TRC_MSG(SET_SPP_TIMER_xD, "Set SPP Timer :%d")
TRC_MSG(CHARxDBT_DEBUGx02X, "Char[%d]:%02x")
TRC_MSG(CANCEL_REMOTE_NAME_OPERATION, "Cancel Remote Name Operation")
TRC_MSG(R_VERSION_BT_DEBUGx02X, "r version :%02x")
TRC_MSG(L2CAP_ID_BT_DEBUGx02X, "l2cap_id :%02x")
TRC_MSG(INQUIRY_CANCEL, "inquiry cancel")
TRC_MSG(IDENTIFY_BT_DEBUGx02X, "identify :%02x")
TRC_MSG(IN_MEHANDLELINKREJECTOPIN_REJECTMECPENDCONSxD, "In MeHandleLinkRejectOp()#IN_REJECT:MEC(pendCons)=%d")
TRC_MSG(INQUIRY_COMPLETED, "inquiry Completed")
TRC_MSG(THE_INPUT_PSMBT_DEBUGx04X, "The input PSM:%04x")
TRC_MSG(IN_BTBMGAPSETAUTHENTICATION_FORCE_TO_LEVEL_3_WITH_ENCRYPTION_OFF, "In BTBMGapSetAuthentication(): force to Level 3 with encryption off")
TRC_MSG(BUFFER_SIZExD, "Buffer size:%d")
TRC_MSG(JSR82_SESSION_DISABLE_SERVICE, "JSR82 session disable service")
TRC_MSG(SENDRAWPACKETB, "SendRawPacket:B")
TRC_MSG(CHECK_HS_GW_POLICY, "Check HS_GW policy")
TRC_MSG(AVDTP_STREAMSENDRAWPACKETBT_DEBUGx02X, "AVDTP_StreamSendRawPacket:%02x")
TRC_MSG(FAKESIM_RECEIVES_BT_SIM_POWEROFF_REQ, "FakeSim receives BT_SIM_POWEROFF_REQ")
TRC_MSG(PS_TYPE_BT_DEBUGx02X, "ps_type :%02x")
TRC_MSG(RF_TEST_COMMAND_COMPLETED, "RF test command completed")
TRC_MSG(NO_UPF_FILE, "No UPF file")
TRC_MSG(WAIT_FOR_LINK_CONNECT_CNF_OF_THIS_SPP_CLIENT_CREATE_ACL, "Wait for LINK_CONNECT_CNF of this SPP client create ACL")
TRC_MSG(HFG_EVENT_REPORT_MIC_VOLUME_TRC, "HFG_EVENT_REPORT_MIC_VOLUME")
TRC_MSG(PIPE_xD_RESET, "Pipe %d reset.")
TRC_MSG(UART_SETTING_SPEED_TO_xD, "UART:  Setting speed to %d")
TRC_MSG(IN_SPPQUERYCALLBACK_CALL_SPPCONNECT_FAILED_STATUSxD, "In SPPQueryCallback(), call sppConnect() failed. status=%d")
TRC_MSG(RECV_DEACTIVE_REQ_CONNECTING_IS_INCOMING_BUT_NOT_READY_TO_BE_CONNECTED_TO_NOFITY_SIMSERVER, "Recv Deactive_req, Connecting is incoming but not ready to be connected to nofity SimServer")
TRC_MSG(SENDING_HANDSHAKE_PACKET, "Sending  HandShake packet")
TRC_MSG(RFCHANNEL_IS_CLOSED_SO_SIM_SERVERAPDURSP_FAILED_IS_OK, "RFChannel is closed, so SIM_ServerApduRsp() failed is ok")
TRC_MSG(HS_OPEN_SCOL, "HS Open SCOl")
TRC_MSG(GETPRINTERATTR_SOAP_REQUEST__BPP_SOAP_BUFF_SIZE, "GetPrinterAttr SOAP request > BPP_SOAP_BUFF_SIZE)")
TRC_MSG(WE_SHALL_CHECK_THE_PTA_COMMAND, "We shall check the pta command")
TRC_MSG(UART_WROTE_xD_BYTES, "UART: Wrote %d bytes")
TRC_MSG(BT_RFTEST_OP_TXRX_TEST_TRC, "BT_RFTEST_OP_TXRX_TEST")
TRC_MSG(HS_CLOSE_SCOL, "HS Close SCOl")
TRC_MSG(SIMSERVERS_TEST_MODExD, "SimServer's test mode=%d")
TRC_MSG(HFG_EVENT_AUDIO_DISCONNECTED_TRC, "HFG_EVENT_AUDIO_DISCONNECTED")
TRC_MSG(SPPCLIENT_RECV_DISCONNECT_REQ_AND_WAIT_FOR_RF_CLOSED_EVENT, "SPPClient recv DISCONNECT_REQ and wait for RF_CLOSED event")
TRC_MSG(HFG_EVENT_GET_LAST_VOICE_TAG_TRC, "HFG_EVENT_GET_LAST_VOICE_TAG")
TRC_MSG(SIMULATE_APP_WRITE_FIRST_DATA_TO_SPP_SERVER_WRITTEN_LENxD_AND_STRxS_ON_SPPCLIENT_PORTxD, "Simulate APP write first data to SPP Server, written len=%d and str=%s on SPPClient port=%d")
TRC_MSG(HFG_EVENT_GENERATE_DTMF_TRC, "HFG_EVENT_GENERATE_DTMF")
TRC_MSG(BT_EM_STATEBT_DEBUGx02X, "bt_em_state:%02x")
TRC_MSG(DDB_UPFOPEN, "DDB_UPFOpen")
TRC_MSG(IN_BT_SPPCLIENT_CMGR_EVENT_CALLBACK_EVENTxD_IS_FOR_SPPOSDEV_INXxD, "In bt_sppclient_cmgr_event_callback(): event=%d is for sppOsDev inx=%d")
TRC_MSG(PARMLEN_xD, "ParmLen: %d")
TRC_MSG(RFCHANNEL_IS_CLOSED_SO_SIM_SERVERSIMONRSP_FAILED_IS_OK, "RFChannel is closed, so SIM_ServerSimOnRsp() failed is ok")
TRC_MSG(IN_PRIVATE_TEST_MODE_CHECK_THE_SIM_CARD_IS_INSERTED, "In private test mode: Check the sim card is inserted")
TRC_MSG(HSCONN, "hsconn")
TRC_MSG(USB_WAIT_TIMEOUT, "USB: Wait timeout")
TRC_MSG(INJECT_SPP_CONNECT_REQ_WITH_SRV_CHNL_NUM__xD_FOR_SPP_CLIENT_TEST, "Inject SPP_CONNECT_REQ with srv_chnl_num = %d for SPP client test")
TRC_MSG(HFG_EVENT_ENABLE_VOICE_RECOGNITION_TRC, "HFG_EVENT_ENABLE_VOICE_RECOGNITION")
TRC_MSG(DOING_LAST_NUMBER_DIAL, "doing last number dial")
TRC_MSG(USING_SIMSERVERSENDDISCIND_FIRST_TO_DO_DEACTIVE_REQUEST, "Using SimServerSendDiscInd() first to do deactive request")
TRC_MSG(HFG_EVENT_SERVICE_CONNECT_REQ_TRC, "HFG_EVENT_SERVICE_CONNECT_REQ")
TRC_MSG(IN_BT_SIM_OPENSTATE_RESET_CNF_HDLR_RF_CLOSECHANNEL_FAILED_STATUSxD, "In bt_sim_openstate_reset_cnf_hdlr(): RF_CloseChannel failed, status=%d")
TRC_MSG(UART_WRITE_xD_BYTES, "UART: Write() %d bytes.")
TRC_MSG(SDP_QUERY_FOR_SPP_CLIENT_IS_ERROR_WITH_BD_ADDRBT_DEBUGx02XBT_DEBUGx02XBT_DEBUGx02XBT_DEBUGx02XBT_DEBUGx02XBT_DEBUGx02X, "SDP query for SPP client is error with bd_addr=%02x,%02x,%02x,%02x,%02x,%02x")
TRC_MSG(HFG_EVENT_REPORT_SPK_VOLUME_TRC, "HFG_EVENT_REPORT_SPK_VOLUME")
TRC_MSG(IN_SPPA_GETBYTESCASE2_SET_READYTOREAD_TO_FALSE, "In Sppa_GetBytes():case2 Set readyToRead to FALSE")
TRC_MSG(ONLY_ONE_SIM_CARD_IS_SUPPORTED_IN_OUR_CURRENT_DESIGN_SELECT_ID_0, "Only one SIM card is supported in our current design, Select ID_0")
TRC_MSG(SETUP_HID_HANDSHACK_PAYLOAD_PACKET, "[HID ADP] Setup HID Handshack payload packet")
TRC_MSG(MSG_ID_BT_HSG_DEACTIVATE_REQ_TRC, "MSG_ID_BT_HSG_DEACTIVATE_REQ")
TRC_MSG(MSG_ID_BT_HSG_SVOLUMEDOWN_REQ_TRC, "MSG_ID_BT_HSG_SVOLUMEDOWN_REQ")
TRC_MSG(CMEVENT_AUDIO_LINK_DIS_SCO_INIT_COMMANDBT_DEBUGx02XSTATUSBT_DEBUGx02X, "CMEVENT_AUDIO_LINK_DIS SCO init command:%02x,status:%02x")
TRC_MSG(RELEASE_SIM_ACCESS_PROFILE_CONNECT_ID_IN_BT_SIM_DISCONNECT_CNF_02, "Release SIM Access Profile connect_id in bt_sim_disconnect_cnf()_02")
TRC_MSG(USB_BULKREAD_REQ_xD_RET_xD_BYTES, "USB: bulkRead: req %d, ret %d bytes")
TRC_MSG(SENDPUSH_DOCUMENT_STATUS__xD, "Send/Push Document status = %d")
TRC_MSG(SUBUNIT_ID_xD, "Subunit ID: %d")
TRC_MSG(BT_RFTEST_OP_ENABLED_WHITEN_COMPLETED, "BT_RFTEST_OP_ENABLED_WHITEN COMPLETED")
TRC_MSG(AG_CONNECTED_TRC, "AG_CONNECTED")
TRC_MSG(DOCUMENT_FILE_PATH__NULL, "Document File path == NULL")
TRC_MSG(FILE_HANDLEx08X, "file_handle:%08x")
TRC_MSG(SIMSERVERSENDCONNRSPERR_FAILED_STATUSxD, "SimServerSendConnRspErr() failed, status=%d")
TRC_MSG(DOCUMENT_TYPE_ERROR, "Document Type Error")
TRC_MSG(HFG_EVENT_QUERY_NETWORK_OPERATOR_TRC, "HFG_EVENT_QUERY_NETWORK_OPERATOR")
TRC_MSG(IN_SPPA_GETBYTES_DATAREADxDLENGTHxD, "In Sppa_GetBytes(): DataRead=%d,Length=%d")
TRC_MSG(SPP_AUTH_RSP_FROM_MMI_OF_PORTxD_AND_ITS_RESULTxD, "SPP_AUTH_RSP from MMI of port=%d and its result=%d")
TRC_MSG(DISC_CNF_CASE2, "DISC_CNF case2")
TRC_MSG(IN_BT_SPPCLIENT_CMGR_EVENT_CALLBACK_RECV_LINK_CON_CNF_STATUSxD, "In bt_sppclient_cmgr_event_callback(): recv LINK_CON_CNF status=%d")
TRC_MSG(CSRUSB_SENDING_COMMAND_COMPLETE_EVENT_FOR_RESET, "CSRUSB: Sending Command Complete event for reset")
TRC_MSG(UART_DEINITIALIZED, "UART: Deinitialized")
TRC_MSG(USE_MMI_SPP_SCO_SDP_PROCESS_HDLER_SETS_1_FOR_TESTING_MODE, "Use MMI SPP SCO sdp process hdler sets 1: For Testing Mode")
TRC_MSG(TRY_TO_OPEN_SCO_HANDLERBT_DEBUGx02X, "Try to open sco handler:%02x")
TRC_MSG(SIM_ACCESS_PROFILE_IS_ACTIVATED_COMPLETELY, "SIM Access Profile is activated completely")
TRC_MSG(RECEIVE_SENDDOCUMENT_COMPLETE_IN_BT_BPP_STATE_STATUS_DISCONNECTING_STATUS, "Receive SendDocument complete in BT_BPP_STATE_STATUS_DISCONNECTING status.")
TRC_MSG(DATA_FROM_PEER_DEVICE_IS_ALREADY_RECEIVED_NOW_RECV_UART_OWNER_CNF_FOR_SERVER_PORT, "Data from peer device is already received, now: Recv Uart_OWNER_CNF for Server Port")
TRC_MSG(USING_RF_CLOSECHANNEL_FIRST_TO_DO_DEACTIVE_REQUEST, "Using RF_CloseChannel() first to do deactive request")
TRC_MSG(HSINIT, "hsinit")
TRC_MSG(SPPOSDEV_INXxD_AND_STATExD, "sppOsDev inx=%d, and state=%d")
TRC_MSG(POWER_OFF_CNF_HDLR_AND_SET_OFF_CARDSTATUSBT_DEBUGx02X, "power_off_cnf_hdlr() and set off: cardstatus=%02X")
TRC_MSG(THE_SAME_PTA_ACTION, "the same pta action")
TRC_MSG(USB_CTRLWRITE_REQ_xD_RET_xD_BYTES, "USB: ctrlWrite: req %d, ret %d bytes")
TRC_MSG(BDC_IS_NULL_SPP_CLIENT_DOES_NOT_CALL_CMGR_CREATEDATALINK, "BDC is NULL, SPP client does not call CMGR_CreateDataLink()")
TRC_MSG(NEW_STATE_AG_CONNECTED, "new state AG_CONNECTED")
TRC_MSG(MSG_ID_BT_HSG_CONNECT_REQ_TRC, "MSG_ID_BT_HSG_CONNECT_REQ")
TRC_MSG(HFG_EVENT_REDIAL_TRC, "HFG_EVENT_REDIAL")
TRC_MSG(IN_SPPOS_DEVRX_SET_READYTOREAD_FALSE, "In SPPOS_DevRx(): Set readyToRead FALSE")
TRC_MSG(USB_BULKWRITE_REQ_xD_RET_xD_BYTES, "USB: bulkWrite: req %d, ret %d bytes")
TRC_MSG(DISCONNECT_CNF_HDLR_CARDSTATUSBT_DEBUGx02X, "disconnect_cnf_hdlr(): cardstatus=%02X")
TRC_MSG(RFCHANNEL_IS_CLOSED_SO_SIM_SERVERSETTRANSPROTRSP_FAILED_IS_OK, "RFChannel is closed, so SIM_ServerSetTransProtRsp() failed is ok")
TRC_MSG(BPP_ADP_CNTX_DEINIT_FS_DELETE_FAILED, "BPP ADP cntx deinit FS_Delete FAILED")
TRC_MSG(NEW_STATE_AG_DISCONNECTING, "new state AG_DISCONNECTING")
TRC_MSG(MSG_ID_BT_HSG_BUTTONPRESS_REQ_TRC, "MSG_ID_BT_HSG_BUTTONPRESS_REQ")
TRC_MSG(DATA_FROM_PEER_DEVICE_IS_ALREADY_RECEIVED_NOW_RECV_UART_OWNER_CNF_FOR_CLIENT_PORT, "Data from peer device is already received, now: Recv Uart_OWNER_CNF for Client Port")
TRC_MSG(RFCHANNEL_IS_CLOSED_SO_SIM_SERVERRESETSIMRSP_FAILED_IS_OK, "RFChannel is closed, so SIM_ServerResetSimRsp() failed is ok")
TRC_MSG(IN_BT_SIM_RESET_CNF_HDLR_SIM_SERVER_STATE_OPENCOUND_NOT_SEND_SIM_SET_TRANSPORT_PROTOCOL_TYPE_RESPONSE_STATUSxD, "In bt_sim_reset_cnf_hdlr(): SIM_SERVER_STATE_OPEN:Cound not send SIM Set Transport Protocol Type response, status:%d")
TRC_MSG(HFGA_TX_RESPONSE_ADDRxX, "hfga_tx: response addr=%x")
TRC_MSG(HFGA_TX_RESPONSEPDATA_ADDRxX, "hfga_tx: response->p.data addr=%x")
TRC_MSG(HFGA_ESTABLISH_SERVICE_LEVEL_CONNECTION_TIMEOUT_HDLER, "hfga_establish_service_level_connection_timeout_hdler")
TRC_MSG(DISC_CNF_CASE5_NOT_YET_RECEIVE_SIM_CONNECT_CNF_AND_DISC_HAPPENS, "DISC_CNF case5: Not yet receive SIM_CONNECT_CNF and DISC happens")
TRC_MSG(RECEIVE_SENDDOCUMENT_COMPLETE_IN_WRONG_STATE, "Receive SendDocument complete in WRONG state.")
TRC_MSG(UART_READ_xD_BYTES, "UART: Read %d bytes")
TRC_MSG(RECV_SPP_CON_REQ_AND_ACL_LINK_IS_ALREADY_ESTABLISHED_CALL_SPPCONNECT_FAILED_STATUSxD, "Recv SPP_CON_REQ and ACL link is already established, call sppConnect() failed. status=%d")
TRC_MSG(HSBUTTON, "hsbutton")
TRC_MSG(USB_INTREAD_REQ_xD_RET_xD_BYTES, "USB: intRead: req %d, ret %d bytes")
TRC_MSG(BT_SIMAP_AUTH_RSPRESULT_xD, "bt_simap_auth_rsp->result =%d")
TRC_MSG(BT_PARMxD__xD, "Parm[%d] = %d")
TRC_MSG(HFG_EVENT_LIST_CURRENT_CALLS_TRC, "HFG_EVENT_LIST_CURRENT_CALLS")
TRC_MSG(RECEIVED_AVRCP_EVENT_TYPE_xD, "Received AVRCP Event, Type: %d")
TRC_MSG(HFG_EVENT_DIAL_NUMBER_TRC, "HFG_EVENT_DIAL_NUMBER")
TRC_MSG(THE_SAME_FREQ, "the same freq")
TRC_MSG(BT_DEBUGx04X, "%04x")
TRC_MSG(HFG_EVENT_RESPONSE_COMPLETE_TRC, "HFG_EVENT_RESPONSE_COMPLETE")
TRC_MSG(HFG_EVENT_AT_COMMAND_DATA_TRC, "HFG_EVENT_AT_COMMAND_DATA")
TRC_MSG(CREATEJOB_REQUEST_SIDES_FLAG_ERROR, "CreateJob request Sides flag error)")
TRC_MSG(RECV_DEACTIVE_REQ_THE_RFCOMM_AND_SIMSERVER_ARE_ALREADY_IN_CLOSED_STATE, "Recv Deactive_req, the RFCOMM and SimServer are already in CLOSED state")
TRC_MSG(HFG_EVENT_SERVICE_DISCONNECTED_TRC, "HFG_EVENT_SERVICE_DISCONNECTED")
TRC_MSG(ACL_LINK_IS_ALREADY_EXISTED_SET_DISCFLAGTRUE_IN_CMGR_CREATEDATALINK, "ACL Link is already existed, set discFlag=TRUE in CMGR_CreateDataLink()")
TRC_MSG(ORG_CARDSTATUS_IS_ON_SO_POWER_OFF_IS_STILL_SENT_TO_SIM_BUT_ACTUALLY_CARD_IS_OFF_BY_OTHER_MODULE, "Org cardstatus is on, so POWER_OFF is still sent to SIM, but actually card is off by other module")
TRC_MSG(UPF_SETADDR_0, "UPF_SETADDR !=0")
TRC_MSG(IN_BT_SIM_OPENSTATE_POWER_ON_CNF_HDLR_RF_CLOSECHANNEL_FAILED_STATUSxD, "In bt_sim_openstate_power_on_cnf_hdlr(): RF_CloseChannel failed, status=%d")
TRC_MSG(RECV_DISC_REQ_FROM_MMI_ALTHOUGH_SIMSERVER_IS_CLOSED_BUT_IT_WAITS_FOR_SIM_TASKS_DISC_CNF, "Recv Disc_req from MMI, although SimServer is closed, but it waits for SIM task's DISC_CNF")
TRC_MSG(HS_DISCONNECT_CALL, "HS Disconnect Call")
TRC_MSG(IN_BT_SIM_RESET_CNF_HDLR_SIM_SERVER_STATE_OPENCOUND_NOT_SEND_SIM_POWER_ON_RESPONSE_STATUSxD, "In bt_sim_reset_cnf_hdlr(): SIM_SERVER_STATE_OPEN:Cound not send SIM POWER ON response, status:%d")
TRC_MSG(SPP_CLIENT_CMGR_CREATEDATALINK_FAILED_STATUSxD, "SPP client: CMGR_CreateDataLink failed, status=%d")
TRC_MSG(IN_BT_SIMAP_DEACTIVEATE_REQ_HDLR_RF_CLOSECHANNEL_FAILED_STATUSxD, "In bt_simap_deactiveate_req_hdlr(): RF_CloseChannel failed, status=%d")
TRC_MSG(IN_BT_SIM_APDU_CNF_HDLR_RF_CLOSECHANNEL_FAILED_STATUSxD, "In bt_sim_apdu_cnf_hdlr(): RF_CloseChannel failed, status=%d")
TRC_MSG(HFGA_TX_AT_BUFF_BUF_ADDRxX, "hfga_tx: at_buff buf addr=%x")
TRC_MSG(IN_BT_SIM_OPENSTATE_SETT_HDLR_RF_CLOSECHANNEL_FAILED_STATUSxD, "In bt_sim_openstate_setT_hdlr(): RF_CloseChannel failed, status=%d")
TRC_MSG(RELEASE_SIM_ACCESS_PROFILE_CONNECT_ID_IN_BT_SIMAP_DISCONNECT_REQ_HDLR_01, "Release SIM Access Profile connect_id in bt_simap_disconnect_req_hdlr()_01")
TRC_MSG(LINK_CNF_IS_FOR_ANOTHER_PROFILES_REQUEST_NOT_SPP_CLIENT, "LINK_CNF is for another profile's request, not SPP client")
TRC_MSG(IN_BT_SPPCLIENT_CMGR_LINK_CLOSE_TRY_TO_REMOVE_BUT_CMGRHANDLER_IS_NOT_FOUND, "In bt_sppclient_cmgr_link_close(): try to remove: But CMGRHandler is not found")
TRC_MSG(BT_EM_STATE1BT_DEBUGx02X, "bt_em_state1:%02x")
TRC_MSG(IN_BT_SIMAP_DISCONNECT_REQ_HDLRERROR_MMI_HAS_NO_ENTRY_TO_DISCONNECT_THIS_SAP, "In bt_simap_disconnect_req_hdlr():Error! MMI has no entry to disconnect this SAP")
TRC_MSG(HFG_EVENT_DISABLE_NREC_TRC, "HFG_EVENT_DISABLE_NREC")
TRC_MSG(RELEASE_SIM_ACCESS_PROFILE_CONNECT_ID_IN_BT_SIM_DISCONNECT_CNF_01, "Release SIM Access Profile connect_id in bt_sim_disconnect_cnf()_01")
TRC_MSG(RELEASE_SIM_ACCESS_PROFILE_CONNECT_ID_IN_BT_SIM_DISCONNECT_CNF_00, "Release SIM Access Profile connect_id in bt_sim_disconnect_cnf()_00")
TRC_MSG(IN_BT_SPPCLIENT_CMGR_LINK_CLOSE_BDC_IS_ALREADY_NULL, "In bt_sppclient_cmgr_link_close(): bdc is already null")
TRC_MSG(HCI_PROCESS_CALL_RADIO_HOST_WAKEUP_FUNCTION, "HCI_Process: call radio host wakeup function")
TRC_MSG(IN_BT_SIMAP_DISCONNECT_REQ_HDLR_RF_CLOSECHANNEL_FAILED_STATUSxD, "In bt_simap_disconnect_req_hdlr(): RF_CloseChannel failed, status=%d")
TRC_MSG(DISC_CNF_CASE6, "DISC_CNF case6")
TRC_MSG(SUBUNIT_TYPE_xD, "Subunit Type: %d")
TRC_MSG(NEW_STATE_AG_IDLE, "new state AG_IDLE")
TRC_MSG(MMI_SPP_SDP_WITH_ATTRIBUTEID0X0310__SUPPORT_CAPABILITIES, "MMI SPP Sdp with attributeID=0x0310 : Support Capabilities")
TRC_MSG(RELEASE_SIM_ACCESS_PROFILE_CONNECT_ID_IN_BT_SIM_DISCONNECT_CNF_05, "Release SIM Access Profile connect_id in bt_sim_disconnect_cnf()_05")
TRC_MSG(DOCUMENT_FILE_OPEN_FAILED, "Document File OPEN Failed")
TRC_MSG(RECV_DEACTIVE_REQ_ALTHOUGH_SIMSERVER_IS_CLOSED_BUT_IT_WAITS_FOR_SIM_TASKS_DISC_CNF, "Recv Deactive_req, although SimServer is closed, but it waits for SIM task's DISC_CNF")
TRC_MSG(OPCODE_xD, "OpCode: %d")
TRC_MSG(UART_DEINIT_START, "UART: Deinit start")
TRC_MSG(SPPCLIENT_RECV_DEACTIVATE_REQ_AND_WAIT_FOR_RF_CLOSED_EVENT, "SPPClient recv DEACTIVATE_REQ and wait for RF_CLOSED event")
TRC_MSG(COULD_NOT_ALLOCATE_MEMORY_FOR_SOAP_RESPONSE_SIZE__BPP_SOAP_BUFF_SIZE, "Could not allocate memory for SOAP response (size > BPP_SOAP_BUFF_SIZE)")
TRC_MSG(SPPCLIENT_RECV_DEACTIVATE_REQ_CALL_SPP_CLOSE_FAILED, "SPPClient recv DEACTIVATE_REQ, call SPP_Close() failed")
TRC_MSG(INDEXBT_DEBUGx02XBT_DEBUGx02X, "index:%02x,%02x")
TRC_MSG(DISCONNECTING_PLEASE_WAIT, "Disconnecting, please wait....")
TRC_MSG(NO_OS_NOTIFYEVM_CALL_IN_10_SEC_WAITING, "No OS_NotifyEvm() call in 10 sec, waiting...")
TRC_MSG(BT_DEBUGx02X, "%02x")
TRC_MSG(MSG_ID_BT_HSG_MVOLUMEUP_REQ_TRC, "MSG_ID_BT_HSG_MVOLUMEUP_REQ")
TRC_MSG(RESUMPTION_ERROR_xD, "Resumption error: %d")
TRC_MSG(BT_SPP_UART_PLUGOUT_CNF_FROM_MMI_OF_PORTxD, "BT_SPP_UART_PLUGOUT_CNF from MMI of port=%d")
TRC_MSG(HFG_EVENT_AUDIO_CONNECTED_TRC, "HFG_EVENT_AUDIO_CONNECTED")
TRC_MSG(HSMVU, "hsmvu")
TRC_MSG(STATUS_OF_SIMSERVERSENDCONNRSPERR_xD, "Status of SimServerSendConnRspErr =%d")
TRC_MSG(USE_MMI_SPP_SCO_SDP_PROCESS_HDLER_SETS_0_FOR_SPP_CLIENT_APPLICATION, "Use MMI SPP SCO sdp process hdler sets 0: For SPP Client Application")
TRC_MSG(MMI_ACCEPTS_THIS_SAP_CONNECTION_IN_BT_SIMAP_AUTH_RSP_HDLR, "MMI accepts this SAP connection in bt_simap_auth_rsp_hdlr")
TRC_MSG(HFG_EVENT_MEMORY_DIAL_TRC, "HFG_EVENT_MEMORY_DIAL")
TRC_MSG(STRING_INDEXxD_BT_DEBUGx02X, "string index:%d,: %02x")
TRC_MSG(ATR_TIMEOUTSIMSERVERSTATExDFLAGSBT_DEBUGx02X, "atr_timeout,simServerState=%d,flags=%02x")
TRC_MSG(HFGA_TX_RESPONSE_BUF_ADDRxX, "hfga_tx: response buf addr=%x")
TRC_MSG(GETEVENT_SOAP_REQUEST__2K, "GetEvent SOAP request > 2K)")
TRC_MSG(MSG_ID_BT_HSG_MVOLUMEDOWN_REQ_TRC, "MSG_ID_BT_HSG_MVOLUMEDOWN_REQ")
TRC_MSG(DOCUMENT_FILE_LENGTH__0, "Document File Length == 0")
TRC_MSG(HFG_EVENT_ENABLE_CALLER_ID_TRC, "HFG_EVENT_ENABLE_CALLER_ID")
TRC_MSG(DISC_CNF_CASE0, "DISC_CNF case0")
TRC_MSG(SPP_CLIENT_WITH_PORTxD_TRY_TO_DISCONNECT, "SPP client with port=%d, try to disconnect")
TRC_MSG(READ_SIZExD, "read_size:%d")
TRC_MSG(UART_WRITE_EVENT, "UART: Write event")
TRC_MSG(UPF_SETADDRBT_DEBUGx02X, "UPF_SETADDR:%02x")
TRC_MSG(ERROR_SUBSTATExD_OF_CONNECT_PENDING_IN_BT_SIM_RESET_CNF_HDLR, "Error substate=%d of CONNECT_PENDING in bt_sim_reset_cnf_hdlr()")
TRC_MSG(HFG_EVENT_CALL_HOLD_TRC, "HFG_EVENT_CALL_HOLD")
TRC_MSG(PTA_ACTIONxD, "pta_action:%d")
TRC_MSG(DISC_CNF_CASE3_RECEIVE_SIM_CONNECT_CNF_PREVIOUSLY_AND_DISC_HAPPENS, "DISC_CNF case3: Receive SIM_CONNECT_CNF previously and DISC happens")
TRC_MSG(CMEVENT_AUDIO_LINK_CON_SCO_INIT_COMMANDBT_DEBUGx02X, "CMEVENT_AUDIO_LINK_CON SCO init command:%02x")
TRC_MSG(RFCHANNEL_IS_CLOSED_SO_SIM_SERVERSIMOFFRSP_FAILED_IS_OK, "RFChannel is closed, so SIM_ServerSimOffRsp() failed is ok")
TRC_MSG(MSG_ID_BT_HSG_SVOLUMEUP_REQ_TRC, "MSG_ID_BT_HSG_SVOLUMEUP_REQ")
TRC_MSG(IN_SPPA_HANDLERWAIT_FOR_SDP_QUESRY_RSP_TO_QUERYCALLBACK, "In sppa_handler():Wait for SDP quesry rsp to queryCallback")
TRC_MSG(RELEASE_SIM_ACCESS_PROFILE_CONNECT_ID_IN_BT_SIMAP_DEACTIVATE_REQ_HDLR, "Release SIM Access Profile connect_id in bt_simap_deactivate_req_hdlr")
TRC_MSG(BT_SIM_DISCONNECT_CNF_HDLRSIMSERVER_IS_AVALIABLE_AGAIN, "bt_sim_disconnect_cnf_hdlr():SIMServer is avaliable again")
TRC_MSG(IN_GRACEFUL_DISC_TIMEOUTNOT_IN_POWER_ON_STATE, "In graceful_disc_timeout:Not in POWER ON state")
TRC_MSG(PTRAFHxDPTRPTAxD, "ptr->afh:%d,ptr->pta:%d")
TRC_MSG(FS_OPEN_BT_UPF_ADDR, "FS_Open BT_UPF_ADDR")
TRC_MSG(NO_AVAIALBE_SPP_CLIENT_OSDEV_FOR_SPP_CONNECT_REQ, "No avaialbe SPP Client OsDev for SPP_CONNECT_REQ")
TRC_MSG(MMI_SPP_SDP_WITH_ATTRIBUTEID0X0004__PROTOCOLDESCRIPTORLIST, "MMI SPP Sdp with attributeID=0x0004 : ProtocolDescriptorList")
TRC_MSG(HFG_EVENT_HANDSFREE_FEATURES_TRC, "HFG_EVENT_HANDSFREE_FEATURES")
TRC_MSG(STARTING_OUTGOING_CALL, "Starting outgoing call....")
TRC_MSG(IN_BT_SIMAP_WAIT_REQ_IN_GRACEFUL_DISCONNECT_PROCEDURE_TIMEOUT_HANDLERCLOSING_THE_CONNECTION_WITH_IMMD_TYPE, "In bt_simap_wait_req_in_graceful_disconnect_procedure_timeout_handler():Closing the connection with immd type")
TRC_MSG(IN_SPPA_HANDLER_BT_MUST_SEND_UART_READY_TO_READ_TO_MMI, "In sppa_handler(): BT must send UART_READY_TO_READ to MMI")
TRC_MSG(A_BT_JSR82_SESSIONHANDLER, "a bt_jsr82_SessionHandler")
TRC_MSG(SPPOS_FLUSHRX, "SPPOS_FlushRx")
TRC_MSG(UNABLE_TO_BUILD_SOAP_COMMAND, "Unable to build SOAP Command")
TRC_MSG(TRY_TO_DISCONNECT_SCO_HANDLERBT_DEBUGx02X, "Try to disconnect sco handler:%02x")
TRC_MSG(REJECT_THE_WAITING_CALL, "Reject the waiting call")
TRC_MSG(IN_BT_SIMAP_DISCONNECT_REQ_HDLRALREADY_DISC_PENDING_IGNORE_THIS_REQUEST, "In bt_simap_disconnect_req_hdlr():Already disc pending, ignore this request")
TRC_MSG(HFG_EVENT_ENABLE_CALL_WAITING_TRC, "HFG_EVENT_ENABLE_CALL_WAITING")
TRC_MSG(BT_RFTEST_OP_POWER_TEST_TRC, "BT_RFTEST_OP_POWER_TEST")
TRC_MSG(SENDING_HANDSHAKE_PACKET_WIT_ERROR_STATUSxD, "Sending HandShake packet wit error status=%d")
TRC_MSG(ONLY_ONE_SIM_CARD_IS_SUPPORTED_IN_OUR_CURRENT_DESIGN_BUT_DEFINE_MORE_THAN_ONE, "Only one SIM card is supported in our current design, but define more than one!")
TRC_MSG(RELEASE_SIM_ACCESS_PROFILE_CONNECT_ID_IN_BT_SIM_DISCONNECT_CNF_04, "Release SIM Access Profile connect_id in bt_sim_disconnect_cnf()_04")
TRC_MSG(TIMER_IS_STARTED_BY_SOMEONE_DURING_POWER_OFF_PROCEDURE, "Timer is started by someone during power off procedure")
TRC_MSG(SET_SPP_SCO_CON_REQ_BD_ADDR_WITH_LAP_BT_DEBUGx04X_UAPBT_DEBUGx04XNAPBT_DEBUGx04X, "Set SPP SCO CON Req Bd_addr with lap =%04X, uap=%04X,nap=%04X")
TRC_MSG(DISC_SPP_AUDIO_LINK_FIRST_IF_AUDIO_LINK_IS_CONNECTED, "Disc SPP audio link first if audio link is connected")
TRC_MSG(IN_BT_SIM_RESET_CNF_HDLR_SIMSERVERSENDCONNRSPERR_FAILED_STATUSxD, "In bt_sim_reset_cnf_hdlr: SimServerSendConnRspErr failed, status=%d")
TRC_MSG(SPP_UART_OWNER_CNF_FROM_MMI_OF_PORTxD, "SPP_UART_OWNER_CNF from MMI of port=%d")
TRC_MSG(IN_BT_SIM_POWER_OFF_CNF_HDLR_RF_CLOSECHANNEL_FAILED_STATUSxD, "In bt_sim_power_off_cnf_hdlr(): RF_CloseChannel failed, status=%d")
TRC_MSG(RECEIVED_AVRCP_OPERANDS_TYPE_xD, "Received AVRCP Operands, Type: %d")
TRC_MSG(CMGR_CREATEDATALINK_STATUSBT_DEBUGx02X, "CMGR_CreateDataLink status:%02x")
TRC_MSG(DEVICE_IDLE_PRESS_BUTTON_TO_INITIATE_OUTGOING_CALL, "Device Idle.  Press BUTTON to initiate outgoing call")
TRC_MSG(BT_DISC_CNF_CASE1, "DISC_CNF case1")
TRC_MSG(REGISTER_SPP_SCO_CLIENT_NUM_OF_ENTRIES_xD, "Register SPP SCO Client num of entries =%d")
TRC_MSG(RECV_SIMAP_DISC_REQ_USING_IMMDEDIAYE_DISC_TYPE, "Recv SIMAP_DISC_REQ, using Immdediaye Disc Type")
TRC_MSG(ADDRESSBT_DEBUGx02XBT_DEBUGx02XBT_DEBUGx02XBT_DEBUGx02XBT_DEBUGx02XBT_DEBUGx02X, "Address:%02x,%02x,%02x,%02x,%02x,%02x")
TRC_MSG(FIND_THE_SQT_OWNER_OF_THIS_QUERYCALLBACK_ITS_INDEXxD, "Find the sqt owner of this querycallback, its index=%d")
TRC_MSG(GET_THE_RETURNED_HID_TRANSACTION_HANDSHAKE_PACKET, "[HID ADP] Get the returned HID Transaction HandShake packet")
TRC_MSG(HFG_EVENT_HANGUP_TRC, "HFG_EVENT_HANGUP")
TRC_MSG(BT_DISC_CNF_CASE4, "DISC_CNF case4")
TRC_MSG(APDU_RESP_FROM_SIM_TASK_IS_NOT_ACCESSIBLE_PHYSICAL_ERROR, "APDU resp from SIM task is not accessible (physical error)")
TRC_MSG(HFG_EVENT_ANSWER_CALL_TRC, "HFG_EVENT_ANSWER_CALL")
TRC_MSG(IN_BT_SIM_RESET_CNF_HDLR_CTxD, "In bt_sim_reset_cnf_hdlr(), CT=%d")
TRC_MSG(GRACEFUL_DISC_TIMEOUTSIMSERVERSTATExDSUBSTATEBT_DEBUGx02X, "graceful_disc_timeout,simServerState=%d,substate=%02x")
TRC_MSG(IN_ATR_TIMEOUTNOT_IN_POWER_ON_STATE, "In atr_timeout:Not in POWER ON state")
TRC_MSG(NUM_SPP_DEVSxD, "NUM_SPP_DEVS=%d")
TRC_MSG(SPPOS_FLUSHTX, "SPPOS_FlushTx")
TRC_MSG(RECV_DEACTIVATE_REQ_CHECK_DISC_WITH_GRACEFUL_TIMER_IS_RUNNING_OR_NOT, "Recv Deactivate Req, check disc with graceful timer is running or not!")
TRC_MSG(IN_SPPA_GETBYTESCASE1_SET_READYTOREAD_TO_TRUE_AND_READMORExD, "In Sppa_GetBytes():case1 Set readyToRead to TRUE and ReadMore=%d")
TRC_MSG(BT_FS_CREATEDIR, "FS_CreateDir")
TRC_MSG(IN_BT_SPPCLIENT_CMGR_EVENT_CALLBACK_RECV_EVENT_TYPExD, "In bt_sppclient_cmgr_event_callback(): recv event type=%d")
TRC_MSG(UART_READ_EVENT, "UART: Read event")
TRC_MSG(HFG_EVENT_SERVICE_CONNECTED_TRC, "HFG_EVENT_SERVICE_CONNECTED")
TRC_MSG(DISC_SPP_CHNL_FIRST_EVEN_THE_AUDIO_LINK_IS_CONNECTED, "Disc SPP chnl first even the audio link is connected")
TRC_MSG(RELEASE_SIM_ACCESS_PROFILE_CONNECT_ID_IN_BT_SIM_DISCONNECT_CNF_03, "Release SIM Access Profile connect_id in bt_sim_disconnect_cnf()_03")
TRC_MSG(EM_OPERATIONBT_DEBUGx02XBT_DEBUGx02X, "EM operation:%02x,%02x")
TRC_MSG(TRY_TO_DISCONNECT_SCO_HANDLER, "Try to disconnect sco handler")
TRC_MSG(IN_BT_SIM_CONNECT_CNF_HDLRNOT_EXPECT_TO_RECEIVE_BT_SIM_CONNECT_CNF, "In bt_sim_connect_cnf_hdlr():Not Expect to receive BT_SIM_CONNECT_CNF")
TRC_MSG(WAIT_FOR_SDP_QUESRY_RSP_TO_QUERYCALLBACK, "Wait for SDP quesry rsp to queryCallback")
TRC_MSG(POWER_OFF_CNF_HDLR_CARDSTATUSBT_DEBUGx02X, "power_off_cnf_hdlr(): cardstatus=%02X")
TRC_MSG(IN_BT_SIMAP_WAIT_REQ_IN_GRACEFUL_DISC_PROCEDURE_TIMEOUT_HDLR_RF_CLOSECHANNEL_FAILED_STATUSxD, "In bt_simap_wait_req_in_graceful_disc_procedure_timeout_hdlr(): RF_CloseChannel failed, status=%d")
TRC_MSG(HFG_EVENT_ENABLE_EXTENDED_ERRORS_TRC, "HFG_EVENT_ENABLE_EXTENDED_ERRORS")
TRC_MSG(NEW_STATE_AG_OUTGOING, "new state AG_OUTGOING")
TRC_MSG(IN_BT_SIMAP_WAIT_ATR_CONNECT_PROCEDURE_TIMEOUT_HDLR_RF_CLOSECHANNEL_FAILED_STATUSxD, "In bt_simap_wait_atr_connect_procedure_timeout_hdlr(): RF_CloseChannel failed, status=%d")
TRC_MSG(MMI_REJECTS_THIS_SAP_CONNECTION_IN_BT_SIMAP_AUTH_RSP_HDLR, "MMI rejects this SAP connection in bt_simap_auth_rsp_hdlr")
TRC_MSG(UART_SEND_HCI_COMMAND_x02X, "Uart send Hci cmd with opcode=%02X")
/* framework */
TRC_MSG(BT_FRM_PANIC, "=====[BT][PANIC %d]=====")
TRC_MSG(BT_SEND_MSG_TO_UPPER_LAYER, "BT_BT_send_msg_to_upper_layer dest_mod=%d, sap_id=%d")


/* AVDTP TRACE START */
TRC_MSG(BT_AVDTP_DISCOVERY_REQ, "BT_AVDTP_DISCOVERY_REQ")
TRC_MSG(BT_AVDTP_DISCOVERY_IND, "BT_AVDTP_DISCOVERY_IND")
TRC_MSG(BT_AVDTP_DISCOVERY_RSP, "BT_AVDTP_DISCOVERY_RSP")
TRC_MSG(BT_AVDTP_DISCOVERY_CFM, "BT_AVDTP_DISCOVERY_CFM")
TRC_MSG(BT_AVDTP_GET_CAP_REQ, "BT_AVDTP_GET_CAP_REQ")
TRC_MSG(BT_AVDTP_GET_CAP_IND, "BT_AVDTP_GET_CAP_IND")
TRC_MSG(BT_AVDTP_GET_CAP_RSP, "BT_AVDTP_GET_CAP_RSP")
TRC_MSG(BT_AVDTP_GET_CAP_CFM, "BT_AVDTP_GET_CAP_CFM")
TRC_MSG(BT_AVDTP_SET_CONFIG_REQ, "BT_AVDTP_SET_CONFIG_REQ")
TRC_MSG(BT_AVDTP_SET_CONFIG_IND, "BT_AVDTP_SET_CONFIG_IND")
TRC_MSG(BT_AVDTP_SET_CONFIG_RSP, "BT_AVDTP_SET_CONFIG_RSP")
TRC_MSG(BT_AVDTP_SET_CONFIG_CFM, "BT_AVDTP_SET_CONFIG_CFM")
TRC_MSG(BT_AVDTP_GET_CONFIG_REQ, "BT_AVDTP_GET_CONFIG_REQ")
TRC_MSG(BT_AVDTP_GET_CONFIG_IND, "BT_AVDTP_GET_CONFIG_IND")
TRC_MSG(BT_AVDTP_GET_CONFIG_RSP, "BT_AVDTP_GET_CONFIG_RSP")
TRC_MSG(BT_AVDTP_GET_CONFIG_CFM, "BT_AVDTP_GET_CONFIG_CFM")
TRC_MSG(BT_AVDTP_RECONFIG_REQ, "BT_AVDTP_RECONFIG_REQ")
TRC_MSG(BT_AVDTP_RECONFIG_IND, "BT_AVDTP_RECONFIG_IND")
TRC_MSG(BT_AVDTP_RECONFIG_RSP, "BT_AVDTP_RECONFIG_RSP")
TRC_MSG(BT_AVDTP_RECONFIG_CFM, "BT_AVDTP_RECONFIG_CFM")
TRC_MSG(BT_AVDTP_OPEN_REQ, "BT_AVDTP_OPEN_REQ")
TRC_MSG(BT_AVDTP_OPEN_IND, "BT_AVDTP_OPEN_IND")
TRC_MSG(BT_AVDTP_OPEN_RSP, "BT_AVDTP_OPEN_RSP")
TRC_MSG(BT_AVDTP_OPEN_CFM, "BT_AVDTP_OPEN_CFM")
TRC_MSG(BT_AVDTP_START_REQ, "BT_AVDTP_START_REQ")
TRC_MSG(BT_AVDTP_START_IND, "BT_AVDTP_START_IND")
TRC_MSG(BT_AVDTP_START_RSP, "BT_AVDTP_START_RSP")
TRC_MSG(BT_AVDTP_START_CFM, "BT_AVDTP_START_CFM")
TRC_MSG(BT_AVDTP_CLOSE_REQ, "BT_AVDTP_CLOSE_REQ")
TRC_MSG(BT_AVDTP_CLOSE_IND, "BT_AVDTP_CLOSE_IND")
TRC_MSG(BT_AVDTP_CLOSE_RSP, "BT_AVDTP_CLOSE_RSP")
TRC_MSG(BT_AVDTP_CLOSE_CFM, "BT_AVDTP_CLOSE_CFM")
TRC_MSG(BT_AVDTP_ABORT_REQ, "BT_AVDTP_ABORT_REQ")
TRC_MSG(BT_AVDTP_ABORT_IND, "BT_AVDTP_ABORT_IND")
TRC_MSG(BT_AVDTP_ABORT_RSP, "BT_AVDTP_ABORT_RSP")
TRC_MSG(BT_AVDTP_ABORT_CFM, "BT_AVDTP_ABORT_CFM")
TRC_MSG(BT_AVDTP_SUSPEND_REQ, "BT_AVDTP_SUSPEND_REQ")
TRC_MSG(BT_AVDTP_SUSPEND_IND, "BT_AVDTP_SUSPEND_IND")
TRC_MSG(BT_AVDTP_SUSPEND_RSP, "BT_AVDTP_SUSPEND_RSP")
TRC_MSG(BT_AVDTP_SUSPEND_CFM, "BT_AVDTP_SUSPEND_CFM")
TRC_MSG(BT_AVDTP_NO_RESOURCE, "BT_AVDTP NO Resource available")
TRC_MSG(BT_AVDTP_CHANNEL_IS_ZERO, "AVDTP chnl = 0")
TRC_MSG(BT_AVDTP_REG_L2CAP_FAILED, "AVDTP reg l2cap failed")
TRC_MSG(BT_AVDTP_NO_RESOURCE_AVAILABLE, "AVDTP: No resource available in AvdtpSigHandleCommand")
TRC_MSG(BT_AVDTP_REMOVE_INUSE_LIST, "Remove the stream from the in-use list")
TRC_MSG(BT_AVDTP_SIGNAL_OPEN, "AVDTP_SIG_OPEN")
TRC_MSG(BT_AVDTP_SIGNAL_TX_DONE,  "AVDTP: Signal TX Done")
TRC_MSG(BT_AVDTP_SIGNAL_TX_ERROR,  "AVDTP: Signal TX Error or Timeout")
TRC_MSG(BT_AVDTP_SIGNAL_CMD_RECV,  "AVDTP: Signal Command Received :%02x")
TRC_MSG(BT_AVDTP_SIGNAL_RSP_RECV,  "AVDTP: Signal Response Received")
TRC_MSG(BT_AVDTP_SIGNAL_REJ_RECV,  "AVDTP: Signal Reject Received")
TRC_MSG(BT_AVDTP_SIGNAL_CMD_LENGTH_ERROR,  "AVDTP: Invalid Signal Command Length")
TRC_MSG(BT_AVDTP_SIGNAL_RSP_LENGTH_ERROR,  "AVDTP: Invalid Signal Response Length")
TRC_MSG(BT_AVDTP_SIGNAL_CONNECTED,  "AVDTP: Signal Channel Connectedn")
TRC_MSG(BT_AVDTP_SIGNAL_DISCONNECTED,  "AVDTP: Signal Channel Disconnected")
TRC_MSG(BT_AVDTP_STREAM_CONNECTED,  "AVDTP: Stream Connected")
TRC_MSG(BT_AVDTP_STREAM_DISCONNECTED,  "AVDTP: Stream Disconnect")
TRC_MSG(BT_AVDTP_DATA_RECEIVED,  "AVDTP: Stream Data Received = %02x")
/* AVDTP TESTER*/
TRC_MSG(BT_AVDTPTS_EVENT, "AVDTP TESTER callback event :%02x")
TRC_MSG(BT_AVDTPTS_CONNECT_REQ, "AVDT_ConnectReq")
TRC_MSG(BT_AVDTPTS_CREATE_CONN, "try to create AVDTP connection")
TRC_MSG(BT_AVDTPTS_FAILED_CONN, "failed to create connection")
TRC_MSG(BT_AVDTPTS_RECONFIG_ERR_HDL, "AVDT_ReConfigure_Req Invalid Stream Handler")
TRC_MSG(BT_AVDTPTS_CLOSE_ERR_HDL, "AVDT_Close_Req Invalid Stream Handler")
TRC_MSG(BT_AVDTPTS_START_ERR_HDL, "AVDT_Start_Req Invalid Stream Handler")
TRC_MSG(BT_AVDTPTS_SUSPEND_ERR_HDL, "AVDT_Suspend_Req Invalid Stream Handler")
TRC_MSG(BT_AVDTPTS_ABORT_ERR_HDL, "AVDT_Abort_Req Invalid Stream Handler")
TRC_MSG(BT_AVDTPTS_EVENT_CONNECT, "MTK AVDTP_EVENT_CONNECT")
TRC_MSG(BT_AVDTPTS_EVENT_CONNECTED, "MTK AVDTP_EVENT_CONNECT Be connected")
TRC_MSG(BT_AVDTPTS_SEID_INFO, "seid :%02x, inUse:%02x")
TRC_MSG(BT_AVDTPTS_MEDIA_INFO, "mediaType :%02x, streamType :%02x")
TRC_MSG(BT_AVDTPTS_EVENT_DISCOVERY_CNF, "MTK AVDTP_EVENT_DISCOVER_CNF error code:%02x")
TRC_MSG(BT_AVDTPTS_CODEC_TYPE, "Parms->p.capability->type  AVDTP_SRV_CAT_MEDIA_CODEC.")
TRC_MSG(BT_AVDTPTS_EVENT_CAP_CNF, "MTK AVDTP_EVENT_GET_CAP_CNF Error:%02x")
TRC_MSG(BT_AVDTPTS_EVENT_SET_CFG_CNF, "MTK AVDTP_EVENT_SET_CFG_CNF error code:%02x")
TRC_MSG(BT_AVDTPTS_EVENT_GET_CFG_CNF, "MTK AVDTP_EVENT_GET_CFG_CNF error code:%02x")
TRC_MSG(BT_AVDTPTS_EVENT_STREAM_RECONFIG_CNF, "MTK AVDTP_EVENT_STREAM_RECONFIG_CNF error code:%02x")
TRC_MSG(BT_AVDTPTS_EVENT_STREAM_OPEN, "MTK AVDTP_EVENT_STREAM_OPEN error code:%02x")
TRC_MSG(BT_AVDTPTS_EVENT_SECURITY_CNF, "MTK AVDTP_EVENT_STREAM_SECURITY_CNF error code:%02x")
TRC_MSG(BT_AVDTPTS_NO_FREE_STREAM, "No available freeStreamInfoList")
TRC_MSG(BT_AVDTPTS_EVENT_STREAM_STARTED, "MTK AVDTP_EVENT_STREAM_STARTED error code:%02x")
TRC_MSG(BT_AVDTPTS_EVENT_STREAM_SUSPENDED, "MTK AVDTP_EVENT_STREAM_SUSPENDED error code:%02x")
/* AVDTP TRACE END */

/* HCI TRACE START */
TRC_MSG(BT_HCI_TRACE_START, "BT_HCI_TRACE_START") /* MBT LOG FILTER. DO NOT MODIFY */

TRC_MSG(FUNC_UARTTRAN_SENDDATA, "UARTTRAN_SendData()")
TRC_MSG(FUNC_MTKUART_TRANSMIT_DATA, "mtkuartTransmitData()")
TRC_MSG(FUNC_UART_WRITE, "UART_Write(), buffer=0x%x, length=%d")
TRC_MSG(FUNC_HCI_PACKET_SENT, "HciPacketSent()")
TRC_MSG(FUNC_HCI_PROCESS, "HCI_Process()")
TRC_MSG(FUNC_HCI_PROCESS_SENT_PACKETS, "HciProcessSentPackets()")
TRC_MSG(FUNC_HCI_REGISTER_RADIO_HANDLER, "HCI_RegisterRadioHandler()")
TRC_MSG(FUNC_HCI_CHECK_FOR_TX_DATA_SEND, "HciCheckForTxDataSend()")
TRC_MSG(FUNC_SEND_HCI_PACKETS, "SendHciPackets()")
TRC_MSG(FUNC_L2CAP_HCI_TX_DONE, "L2CAP_HciTxDone()")
TRC_MSG(BTLOG_HCI_COMMAND_COMPLETE_EVENT_OPCODE, "BTLOG:HCI:HCIEVENT_INFO:HciProcessEvent_CmdComplete_opCode=%MHciCommandType")
TRC_MSG(BTLOG_HCI_HARDWARE_ERROR_EVENT_ERRCODE, "BTLOG:HCI:HCIEVENT_INFO:HciProcessEvent_Hardware_Error_errcode=0x%02X")
TRC_MSG(BTLOG_HCI_HCIINIT_HANDLE_COMMAND_COMPLETE_EVENT, "BTLOG:HCI:HCIEVENT_INFO:HCC_Init_HandleCommandComplete")
TRC_MSG(BTLOG_HCI_HCIINIT_HANDLE_COMMAND_COMPLETE_EVENT_HCC_RESET, "BTLOG:HCI:HCIEVENT_INFO:HCC_Init_CommandComplet_HCC_RESET")
TRC_MSG(BTLOG_HCI_HCIINIT_HANDLE_COMMAND_COMPLETE_EVENT_HCC_READ_BUFFER_SIZE, "BTLOG:HCI:HCIEVENT_INFO:HCC_Init_CommandComplet_HCC_READ_BUFFER_SIZE")
TRC_MSG(BTLOG_HCI_HCIINIT_HANDLE_COMMAND_COMPLETE_EVENT_HCC_SET_CTRLR_TO_HOST_FLOW_CTRL, "BTLOG:HCI:HCIEVENT_INFO:HCC_Init_CommandComplet_HCC_SET_CTRLR_TO_HOST_FLOW_CTRL")
TRC_MSG(BTLOG_HCI_HCIINIT_HANDLE_COMMAND_COMPLETE_EVENT_HCC_HOST_BUFFER_SIZE, "BTLOG:HCI:HCIEVENT_INFO:HCC_Init_CommandComplet_HCC_HOST_BUFFER_SIZE")
TRC_MSG(BTLOG_HCI_HCIINIT_HANDLE_COMMAND_COMPLETE_EVENT_HCC_WRITE_SCO_FC_ENABLE, "BTLOG:HCI:HCIEVENT_INFO:HCC_Init_CommandComplet_HCC_WRITE_SCO_FC_ENABLE")
TRC_MSG(BTLOG_HCI_CMD_STATUS_EVENT_PARMS_STATUS_NUM_HCICMD_PKTS_OPCODE, "Recv HCI CMD Status Event: P1_Status=%02X,P2_NUM_HCICMD_PKT=%02X,P3_OpCode=%04X")
TRC_MSG(BTLOG_HCI_HOST_NUM_COMPLETED_PACKETS_HANDLE_PACKETS, "BTLOG_UART_DUMP:HCC_HOST_NUM_COMPLETED_PACKETS handle=0x%02x, packets=%d")  /* UART_DUMP */
TRC_MSG(HCI_INVALID_HCI_HANDLE_IN_SENT_PACKET_LIST, "HCI:  Invalid HCI handle in sent packet list")
TRC_MSG(HCI_EVNT_HCIHANDLECOMMANDCOMPLETE_HCC_HOST_BUFFER_SIZE, "HCI_EVNT:  HciHandleCommandComplete: HCC_HOST_BUFFER_SIZE")
TRC_MSG(HCI_EVNT_HCIHANDLECOMMANDCOMPLETE_HCC_SET_CTRLR_TO_HOST_FLOW_CTRL, "HCI_EVNT:  HciHandleCommandComplete: HCC_SET_CTRLR_TO_HOST_FLOW_CTRL")
TRC_MSG(HCI_EVNT_HCIHANDLECOMMANDCOMPLETE_HCC_RESET, "HCI_EVNT:  HciHandleCommandComplete: HCC_RESET")
TRC_MSG(HCI_EVNT_HCIHANDLECOMMANDCOMPLETE_HCC_READ_BUFFER_SIZE, "HCI_EVNT:  HciHandleCommandComplete: HCC_READ_BUFFER_SIZE")
TRC_MSG(HCI_EVNT_HCIHANDLECOMMANDCOMPLETE, "HCI_EVNT:  HciHandleCommandComplete")
TRC_MSG(HCI_EVNT_HCIHANDLECOMMANDCOMPLETE_HCC_WRITE_SCO_FC_ENABLE, "HCI_EVNT:  HciHandleCommandComplete: HCC_WRITE_SCO_FC_ENABLE")
TRC_MSG(HCI_SEND_HCI_COMMAND_BT_DEBUGx02X, "hci: send hci command %04x")
TRC_MSG(HCIPROCESSEVENT_HCE_COMMAND_COMPLETE, "HciProcessEvent: HCE_COMMAND_COMPLETE")
TRC_MSG(UART_SEND_HCI_COMMAND_BT_DEBUGx02X, "hci: uart send hci command %04x")
TRC_MSG(HCI_RECEIVED_DATA_FOR_AN_INVALID_HCI_HANDLE_IGNORED, "HCI: Received data for an invalid HCI handle (ignored)")
TRC_MSG(HCI_SET_BUFFER_SIZE_COMPLETE, "HCI: Set Buffer Size Complete")
TRC_MSG(HCI_WRITE_SCO_FLOW_CONTROL_ENABLE_COMPLETE, "HCI: Write SCO Flow Control Enable Complete")
TRC_MSG(HCI_READ_BUFFER_COMPLETE_ACLTXPKTLENxD, "HCI: Read Buffer Complete: aclTxPktLen=%d,")
TRC_MSG(HCI_SET_FLOW_CONTROL_COMPLETE, "HCI: Set Flow Control Complete")
TRC_MSG(HCI_SENDING_HCC_RESET, "HCI:  Sending HCC_RESET")
TRC_MSG(HCI_PROCESS_FALURE, "HCI_Process: falure")
TRC_MSG(HCI_PROCESS_CALL_RADIO_WAKE_UP_FUNCTION, "HCI_Process: call radio wake up function")
TRC_MSG(HCI_PROCESS_HCICHECKFORTXCMD, "HCI_Process: HciCheckForTxCmd")
TRC_MSG(HCI_HCI_USB_TX_BUFFER_SIZExD_MAY_NOT_BE, "HCI: HCI_USB_TX_BUFFER_SIZE(%d) may not be")
TRC_MSG(HCI_PACKET_HANDLED_TRC, "HCI_PACKET_HANDLED")
TRC_MSG(WRONG_LINK_TYPE, "Wrong link type")
TRC_MSG(WIFI_SETTING_IS_MADE, "Wifi setting is made")
TRC_MSG(IF_HOST_WAKEUP_NO_RESPONSE_WE_WILL_GEN_A_FAKE_EVENT_AND_TRY_TO_WAKEUP_AGAIN, "If Host Wakeup no response, we will gen a fake event and, try to wakeup again")

TRC_MSG(BT_HCI_TRACE_END, "BT_HCI_TRACE_END") /* MBT LOG FILTER. DO NOT MODIFY */
/* HCI TRACE END */

/* L2CAP TRACE START */
TRC_MSG(BT_L2CAP_TRACE_START, "BT_L2CAP_TRACE_START") /* MBT LOG FILTER. DO NOT MODIFY */

TRC_MSG(FUNC_L2CAP_PROCESS_REQ_OP, "L2Cap_ProcessReq() op=0x%x")
TRC_MSG(FUNC_L2CAP_STATE_MACHINE_CID_EVENT, "L2Cap_StateMachine() Cid=0x%x, event=0x%x, state=0x%x")
TRC_MSG(FUNC_L2CAP_STATE_CONFIG_CID_EVENT, "L2CapState_CONFIG() Cid=0x%x, event=0x%x")
TRC_MSG(FUNC_L2CAP_STATE_OPEN_CID_EVENT, "L2CapState_OPEN() Cid=0x%x, event=0x%x")
TRC_MSG(FUNC_L2CAP_HANDLE_CONFIG_REQ_CID, "L2Cap_HandleConfigReq() Cid=0x%x")
TRC_MSG(FUNC_L2CAP_SEND_AUTO_CONFIG_RSP_CID, "L2CAP SendAutoConfigRsp() cid=0x%x")
TRC_MSG(FUNC_L2CAP_INIT, "L2CAP_Init")
TRC_MSG(FUNC_L2CAP_DEINIT, "L2CAP_Deinit")
TRC_MSG(FUNC_L2CAP_NOTIFY_USER_AND_CLOSE_CHANNEL, "L2Cap_NotifyUserAndCloseChannel: Status=0x%X, inUse=%d, flags=0x%X, state=0x%X")
TRC_MSG(FUNC_L2CAP_GETSYSPKT, "L2Cap_GetSysPkt: priority=%d")
TRC_MSG(FUNC_L2CAP_BUILDSFRAME, "L2Cap_BuildSFrame: remoteCid=0x%X, flags2=0x%X")
TRC_MSG(FUNC_L2CAP_SENDSFRAME, "L2Cap_SendSFrame: remoteCid=0x%X, flags=0x%X")
TRC_MSG(FUNC_L2CAP_SECACCESSRSP, "L2Cap_SecAccessRsp: event=%d, flags=0x%X, state=%d")
TRC_MSG(L2CAP_FREECHANNEL_LINK_REFCOUNT_DISCFLAG, "L2Cap_FreeChannel: link refcount=%d, discFlags=%d")
TRC_MSG(L2CAP_BUILDSFRAME_INUSE, "L2Cap_BuildSFrame: N(R) in I frame, Channel->inUse=%d")
TRC_MSG(L2CAP_BUILDSFRAME_FCS, "L2Cap_BuildSFrame: S frame fcs=0x%04X")
TRC_MSG(L2CAP_SENDSFRAME_STATUS, "L2Cap_SendSFrame: status=0x%X")
TRC_MSG(L2CAP_SENDSFRAME_NO_PACKET, "L2Cap_SendSFrame: No S frame system packet")

TRC_MSG(BTLOG_L2CAP_DISC_PENDING_PKT_HANDLED, "L2CapState_W4_DISC_CNF(): LLC_TX_DONE")
TRC_MSG(BTLOG_L2CAP_CON_PENDING_PKT_HANDLED, "L2CapState_W4_CON_CNF(): LLC_TX_DONE")
TRC_MSG(BTLOG_L2CAP_CONFIG_PKT_HANDLED, "L2CapState_CONFIG(): LLC_TX_DONE")
TRC_MSG(L2CAP_L2CAP_FREECHANNELx04X_PSM_x04X_FLAGS_x04X, "L2CAP: L2Cap_FreeChannel(0x%04x), PSM 0x%04x, Flags 0x%04x")
TRC_MSG(L2CAP_FREE_OPEN_TIMER, "l2cap free open timer")
TRC_MSG(L2CAP_TESTER_DISCONN_REQ, "l2cap tester disconn req")
TRC_MSG(L2CAP_GROUP_DATA_REQUEST, "L2CAP Group Data Request")
TRC_MSG(L2CAP_VALIDATEOPTIONS_OPTION_xD_LEN_xD, "L2CAP: ValidateOptions() Option %d, Len %d")
TRC_MSG(L2CAP_SENDDISCONNECTREQBT_DEBUGx04X_SENT_PACKET, "L2CAP: SendDisconnectReq(%04x) Sent Packet.")
TRC_MSG(L2CAP_NOTIFYPSM_CONSUMED_NOTIFICATION_EVENT_xX, "L2CAP: NotifyPsm() Consumed notification event=0x%x.")
TRC_MSG(L2CAP_INITIALIZING_FOR_xD_PROTOCOLS_FOR_xD_GROUPS_FOR_xD_DEVICES_WITH_xD_CHANNELS, "L2CAP: Initializing for %d protocols, for %d groups, for %d devices, with %d channels.")
TRC_MSG(L2CAP_PSM_REGISTERED_BT_DEBUGx04X, "L2CAP: PSM Registered %04x.")
TRC_MSG(L2CAP_TIMER_HALTED_BY_DISCONNECTREQ_STATE_xD, "L2CAP: Timer Halted by DisconnectReq, state %d")
TRC_MSG(L2CAP_UPDATERXWINDOW_EXISTING_xD_AVAIL_xD, "L2CAP: UpdateRxWindow() existing %d, avail %d.")
TRC_MSG(L2CAP_RECEIVED_xD_BYTES, "L2CAP: Received %d bytes.")
TRC_MSG(L2CAP_PROCESSRSP_RECEIVED_RESPONSE_TO_UNKNOWN_REQUEST_IDENT_BT_DEBUGx02X, "L2CAP: ProcessRsp() Received Response to unknown request (Ident %02x)")
TRC_MSG(L2CAP_UPDATERXWINDOW_MPU_xD_SEGLENGTH_xD_BUFFERED_xD, "L2CAP: UpdateRxWindow() MPU %d, segLength %d, buffered %d.")
TRC_MSG(L2CAP_PROCESSRSPBT_DEBUGx04X_RESPONSE_CID_DID_NOT_MATCH_EXPECTED_CID_OPCODE_xD, "L2CAP: ProcessRsp(%04x) Response CID did not match expected CID (Opcode %d).")
TRC_MSG(L2CAP_DISCARDING_DATA_FROM_UNKNOWN_HCIHANDLE, "L2CAP: Discarding data from unknown HciHandle.")
TRC_MSG(L2CAP_SENDCONFIGREQBT_DEBUGx04X_SENT_PACKET, "L2CAP: SendConfigReq(%04x) Sent Packet.")
TRC_MSG(L2CAP_SENDCONNECTREQBT_DEBUGx04X_SENT_PACKET, "L2CAP: SendConnectReq(%04x) Sent Packet.")
TRC_MSG(L2CAP_SENDDISCONNECTRSPBT_DEBUGx04X_SENT_PACKET, "L2CAP: SendDisconnectRsp(%04x) Sent Packet.")
TRC_MSG(L2CAP_STATE_MACHINEBT_DEBUGx04X_EVENT_LLC_DISC_REQ, "L2CAP: State Machine(%04x) Event LLC_DISC_REQ.")
TRC_MSG(L2CAP_PROCESSNRBT_DEBUGx02X_ACKNUM__xD_UNACKED__xD, "L2CAP: ProcessNr(%02x) acknum = %d, unacked = %d.")
TRC_MSG(L2CAP_PROCESSGROUPDATABT_DEBUGx04X_DATALEN_xD, "L2CAP: ProcessGroupData(%04x) DataLen %d")
TRC_MSG(L2CAP_CHANNELRXBT_DEBUGx04X__DROPPED_DATA__NO_CHANNEL, "L2CAP: ChannelRx(%04x) ** DROPPED Data ** No Channel!")
TRC_MSG(L2CAP_RECEIVED_CONFIGRSPNEG_DISCONNECTING, "L2CAP: Received ConfigRspNeg, Disconnecting....")
TRC_MSG(L2CAP_GETNEXTSEGMENTBT_DEBUGx02X_SDU_xX_SEGMENT_xD_OF_xD_NS__xD, "L2CAP: GetNextSegment(%02x) SDU=0x%x. Segment %d of %d: N(S) = %d.")
TRC_MSG(L2CAP_SENDFEATURESREQBT_DEBUGx04X_SENT_PACKET, "L2CAP: SendFeaturesReq(%04x) Sent Packet.")
TRC_MSG(L2CAP_INDICATING_xD_BYTE_PACKET_TO_UPPER_LAYER, "L2CAP: Indicating %d byte packet to upper layer.")
TRC_MSG(L2CAP_GETINFOBT_DEBUGx04X_SENT_PACKET_IDENT_xD, "L2CAP: GetInfo(%04x) Sent Packet, Ident %d.")
TRC_MSG(L2CAP_CONFIGBT_DEBUGx04X_STATE_ADVANCED_TO_OPEN, "L2CAP: CONFIG(%04x) State advanced to OPEN")
TRC_MSG(L2CAP_HANDLERXERRORxX_HCIHANDLE_BT_DEBUGx04X, "L2CAP: HandleRxError(0x%x) hciHandle %04x")
TRC_MSG(L2CAP_RECEIVED_UNSOLICITED_CONFIGURATION_RESPONSE, "L2CAP: Received unsolicited Configuration Response.")
TRC_MSG(L2CAP_DUPLICATE_REQUEST_IGNORED_CID_BT_DEBUGx04X_OPCODE_BT_DEBUGx02X_IDENT_BT_DEBUGx02XxS, "L2CAP: Duplicate Request ignored, Cid %04x, Opcode %02x, Ident %02x")
TRC_MSG(L2CAP_ACCEPTSDUDATA_ACCEPTED_xD_OF_xD_BYTES, "L2CAP: AcceptSduData() Accepted %d of %d bytes.")
TRC_MSG(L2CAP_RECEIVED_CONFIGRSPNEG_FOR_FLOW_CONTROL_OPTION, "L2CAP: Received ConfigRspNeg for Flow Control Option.")
TRC_MSG(L2CAP_PROCESSCHANNELDATABT_DEBUGx04X_DATALEN_xD, "L2CAP: ProcessChannelData(%04x) DataLen %d.")
TRC_MSG(L2CAP_DISCACLLINK, "L2CAP_DiscAclLink")
TRC_MSG(L2CAP_ISSUEHCIREQUESTTOSEND_HCI_REQUEST_TO_SEND_CALLED, "L2Cap_IssueHciRequestToSend() HCI_Request to send called!")
TRC_MSG(L2CAP_PINGBT_DEBUGx04X_SENT_PACKET_IDENT_xD, "L2CAP: Ping(%04x) Sent Packet, Ident %d.")
TRC_MSG(L2CAP_SENDING_LONE_CONFIGREQ_TO_SOLICIT_MORE_RESPONSES, "L2CAP: Sending Lone ConfigReq to solicit more responses.")
TRC_MSG(L2CAP_SEND_CONFIG_REQUEST, "L2CAP: Sent config request")
TRC_MSG(L2CAP_START_A_DISC_TIMER_BT_L2CAP_DISCONNECT_TIMEOUT_500MS, "L2CAP start a disc timer BT_L2CAP_DISCONNECT_TIMEOUT_500MS")
TRC_MSG(L2CAP_START_A_DISC_TIMER_BT_L2CAP_DISCONNECT_TIMEOUT_50S, "L2CAP start a disc timer BT_L2CAP_DISCONNECT_TIMEOUT_50S")
TRC_MSG(STATUSBT_DEBUGx02X, "status:%02x")
TRC_MSG(RTX_SECONDS, "Rtx seconds")
TRC_MSG(ERTX_20_SECONDS, "ERTX 20 seconds")
TRC_MSG(ERTX_60_SECONDS, "ERTX 60 seconds")
TRC_MSG(PSM_ALLOW, "PSM allow")
TRC_MSG(RTX_TIMEOUT_IN_SNIFF_MODE, "RTX timeout in sniff mode")
TRC_MSG(PSM_NO_ALLOW, "PSM No allow")
/* L2CAP TESTER*/
TRC_MSG(BT_L2CAPTS_INIT, "L2CAP Testing:  Enter Init function")
TRC_MSG(BT_L2CAPTS_UNABLEREG, "L2CAP Testing:  Unable to register with L2CAP")
TRC_MSG(BT_L2CAPTS_DISCONNECTREQ, "L2CA_DisconnectReq")
TRC_MSG(BT_L2CAPTS_INFOREQ, "L2CA_InfoReq")
TRC_MSG(BT_L2CAPTS_ECHOREQ, "L2CA_EchoReq")
TRC_MSG(BT_L2CAPTS_SENDDATAREQ, "L2CA SendData")
TRC_MSG(BT_L2CAPTS_CONNECTREQ, "L2CAP connect Req cid :%02x")
TRC_MSG(BT_L2CAPTS_EVENT, "L2CAP l2capTesterL2Callback event :%02x")
TRC_MSG(GROUP_REMOVE_REQUEST, "Group remove request")
TRC_MSG(ACL_LINK_CREATE_SUCCESSFULLY, "ACL link create successfully")
TRC_MSG(STR_DATA_LENxD, "str data len=%d")
TRC_MSG(CALL_BTTESTER_SENDMSG, "call btTester_sendMsg")
TRC_MSG(GROUP_ADD_REQUEST, "Group add request")

TRC_MSG(BT_L2CAP_TRACE_END, "BT_L2CAP_TRACE_END") /* MBT LOG FILTER. DO NOT MODIFY */
/* L2CAP TRACE END */

/* RFCOMM TRACE START */
TRC_MSG(BT_RFCOMM_TRACE_START, "BT_RFCOMM_TRACE_START")  /* MBT LOG FILTER. DO NOT MODIFY */

TRC_MSG(BT_RFCOMMM_RECV_SABM, "RFCOMM:  SABM received at DLCI=0x%02x of Mux=0x%02x")
TRC_MSG(BT_RFCOMMM_RECV_DISC, "RFCOMM:  DISC received at DLCI=0x%02x of Mux=0x%02x")
TRC_MSG(BT_RFCOMMM_RECV_INVALID_LENGTH, "RFCOMM:  Invalid receive length, disconnecting...")
TRC_MSG(BT_RFCOMMM_DM_REPORT, "RFCOMM:  DM is received at DLCI %d of mux %d")
TRC_MSG(BT_RFCOMMM_INVALID_EVENT, "RFCOMM:  Invalid event for DLCI=0x%02x Mux=0x%02x")
TRC_MSG(BT_RFCOMMM_DLC_UP, "RFCOMM: UA is received at DLCI=0x%02x of Mux=0x%02x, sending MSC")
TRC_MSG(BT_RFCOMMM_DLC_REJECT, "RFCOMM: DM is received at DLCI=0x%02x of Mux=0x%02x")
TRC_MSG(BT_RFCOMMM_INVALID_EVENT_FOR_DLC, "RFCOMM:  Invalid event for DLCI=0x%02x Mux=0x%02x")
TRC_MSG(BT_RFCOMMM_UA_SEND, "RFCOMM:  UA_F sent successfully to DLCI=0x%02x on Mux=0x%02x, now sending MSC")
TRC_MSG(BT_RFCOMMM_SEND_MSC, "RFCOMM:  Sending MSC")
TRC_MSG(BT_RFCOMMM_MSC_CAN_NOT_SEND, "RFCOMM:  L2CAP did not allow MSC to be sent")
TRC_MSG(BT_RFCOMMM_RECV_DISC_FOR_DLC, "RFCOMM:  DISC received at DLCI=0x%02x of Mux=0x%02x")
TRC_MSG(BT_RFCOMMM_DLCI_DISCONNECT, "RFCOMM:  DLCI=0x%02x on Mux=0x%02x disconnected")
TRC_MSG(BT_RFCOMMM_SABM_SEND, "RFCOMM:  SABM sent successfully to DLCI=0x%02x on Mux=0x%02x")
TRC_MSG(BT_RFCOMMM_NEGO_FAILED, "RFCOMM:  Negotiation failed")
TRC_MSG(BT_RFCOMMM_OUT_OF_RESOURCE, "RFCOMM:  Out of resources on connect request for Mux=0x%02x")
TRC_MSG(BT_RFCOMMM_ALLOCATED_DLCI, "RFCOMM:  Allocated incoming DLCI=0x%02x on Mux=0x%02x")
TRC_MSG(BT_RFCOMMM_MUX_NOT_REGJSTERED, "RFCOMM:  Service %d not registered on connect request for Mux=0x%02x")
TRC_MSG(BT_RFCOMMM_CMD_UNALLOCATED_MUX, "RFCOMM:  Command for unallocated channel on Mux=%d")
TRC_MSG(BT_RFCOMMM_SABM_SENT, "RFCOMM:  Sending SABM to DLCI=0 for Mux=0x%02x")
TRC_MSG(BT_RFCOMMM_MUX_UP, "RFCOMM:  Mux=0x%02x up")
TRC_MSG(BT_RFCOMMM_CANNT_SEND_NEGO, "RFCOMM:  Could not send negotiation to DLCI=0x%02x on Mux=0x%02x ")
TRC_MSG(BT_RFCOMMM_NOGO_SEND_SUCCESS, "RFCOMM:  Negotiation sent successfully to DLCI=0x%02x on Mux=0x%02x")
TRC_MSG(BT_RFCOMMM_CONN_DLCI_REJECT, "RFCOMM:  Connection to DLCI=0 on Mux=0x%02x rejected (or invalid event)")
TRC_MSG(BT_RFCOMMM_SEND_UA, "RFCOMM:  Sending UA_F to DLCI=0 on Mux=0x%02x")
TRC_MSG(BT_RFCOMMM_INVALUD_UNINIT_MUX, "RFCOMM:  Invalid event for uninitialized Mux=0x%02x")
TRC_MSG(BT_RFCOMMM_L2CAP_DISCONNECT, "RFCOMM:  L2CAP disconnect, shutting down mux")
TRC_MSG(BT_RFCOMMM_DISC_MUX, "RFCOMM:  DISC (shutdown) for Mux=0x%02x")
TRC_MSG(BT_RFCOMMM_RECV_SABMDM, "RFCOMM:  Received SABM or DM for channel 0 on connected session")
TRC_MSG(BT_RFCOMMM_INVALID_EVENT_OF_MUX, "RFCOMM:  Invalid event for uninitialized Mux=0x%02x")
TRC_MSG(BT_RFCOMMM_SEND_CONNECT_REJECT, "RFCOMM:  Sending connect reject on Mux=0x%02x")
TRC_MSG(BT_RFCOMMM_INCOMING_CONN, "RFCOMM:  Incoming connection, initializing Mux=0x%02x")
TRC_MSG(BT_RFCOMMM_L2CAP_DISCONNECT_EVENT, "RFCOMM:  L2CAP Disconnected Event ")
TRC_MSG(BT_RFCOMMM_INVALID_FCS, "RFCOMM:  Invalid FCS, shutting down Mux=0x%02x ")
TRC_MSG(BT_RFCOMMM_INVALUD_RX_LENGTH, "RFCOMM:  Invalid length in RX data, shutting down Mux=0x%02x ")
TRC_MSG(BT_RFCOMMM_SEND_DM_F, "RFCOMM:  Sending DM_F to DLCI=0x%02x on Mux=0x%02x")
TRC_MSG(BT_RFCOMMM_RE_FLOWCTL_DISC, "RFCOMM:  Remote tried to renegotiate flow control, disconnecting L2CAP")
TRC_MSG(BT_RFCOMMM_RX_MSC, "Rx MSC, DLC Flag=0x%04X")
TRC_MSG(BT_RFCOMMM_INVALID_FLOWCTRL, "RFCOMM:  Invalid flow control command received")
TRC_MSG(BT_RFCOMMM_INVALID_LENGTH, "RFCOMM:  Invalid length, disconnecting L2CAP")
TRC_MSG(BT_RFCOMMM_INVALUD_PARM_LENGTH, "RFCOMM:  Invalid parm length, disconnecting L2CAP")
TRC_MSG(BT_RFCOMMM_UNABLE_REG_L2CAP, "RFCOMM:  Unable to register with L2CAP.")
TRC_MSG(BT_RFCOMMM_INITIZED, "RFCOMM:  Initialized.")
TRC_MSG(BT_RFCOMMM_DEINITED, "RFCOMM:  Deinitialized.")
TRC_MSG(BT_RFCOMMM_CHNL_REGED_NOT_USED, "RFCOMM:  A channel was requested, but not used")
TRC_MSG(BT_RFCOMMM_REG_CHNL_SERV, "RFCOMM:  Registered channel on service %d")
TRC_MSG(BT_RFCOMMM_FAILED_REG_CHNL, "RFCOMM:  Failed to registered channel on service %d")
TRC_MSG(BT_RFCOMMM_DE_REG_CHNL, "RFCOMM:  Deregistered channel from service %d")
TRC_MSG(BT_RFCOMMM_DE_REG_ALL_CHNL, "RFCOMM:  Deregistered all channels from service %d")
TRC_MSG(BT_RFCOMMM_CHNL_REQ_PREVIOUS, "RFCOMM:  Service channel requested previously")
TRC_MSG(BT_RFCOMMM_CHNL_REQ_FIRST, "RFCOMM:  Service channel requested for the first time")
TRC_MSG(BT_RFCOMMM_MUX_FREEED, "RFCOMM:  Mux=0x%02x freed")
TRC_MSG(BT_RFCOMMM_ALLOCATED_DLCI_ON_MUX, "RFCOMM: Allocated DLCI=0x%02x on Mux=0x%02x")
TRC_MSG(BT_RFCOMMM_COULD_NOT_L2CAP_SHUTDOWN, "RFCOMM:  Could not disconnect from L2CAP, shutting down mux")
TRC_MSG(BT_RFCOMMM_NO_RSP, "RFCOMM:  No response at DLCI=0x%02x of Mux=0x%02x [State=0x%02x][dlcCount=0x%02x]")
TRC_MSG(BT_RFCOMMM_LINK_LOSS, "RFCOMM:  Link loss timer fired, shutting down mux: aclTxPacketsLeft=%d")
TRC_MSG(BT_RFCOMMM_TX_CREDIT_OVERFLOW, "RFCOMM:  txCredit overflow")
TRC_MSG(BT_RFCOMMM_DATA_RECV_NO_CREDIT, "RFCOMM:  Data received from device with no credit")
TRC_MSG(BT_RFCOMMM_STOP3, "stop 3")
TRC_MSG(BT_RFCOMMM_NO_MSC, "no MSC")
TRC_MSG(BT_RFCOMMM_TX_NUMBER_MINUS, "MUX(MuxId).numTxPackets-- = :%d")
TRC_MSG(BT_RFCOMMM_CLEAR_MUX_FLAG_XMIT1, "Clear MUX_FLAG_XMIT_01")
TRC_MSG(BT_RFCOMMM_CLEAR_MUX_FLAG_XMIT2, "Clear MUX_FLAG_XMIT_02, with status=%d , on DLCI=0x%02x")
TRC_MSG(BT_RFCOMMM_CLEAR_MUX_FLAG_XMIT3, "Clear MUX_FLAG_XMIT_03")
TRC_MSG(BT_RFCOMMM_SPP_SENDTORFCOMM_DATA, "In sendToRfComm, data ready to send=%d")
TRC_MSG(BT_RFCOMMM_SPPOS_TX_EMPTY, "In sendToRfComm(): call SPPOS_DevTxEmpty")
TRC_MSG(BT_RFCOMM_MUX_NON_USER_NON_CREDIT_PKT_HANDLED, "RfMuxStateMachine(): RFCOMM Non-User and Non-Credit Pkt Handled")
TRC_MSG(BT_RFCOMM_DISC_PENDING_PKT_HANDLED, "RfDlcStateDiscPending(): Pkt Handled with cmdrsp=0x%02X")
TRC_MSG(BT_RFCOMM_RECV_MSC_REQ_RSP_REPORT_RFEVENT_OPEN, "RFCOMM DLC: Recv MSC Req and Rsp, report RFEVENT_OPEN at inx=%d")
TRC_MSG(BT_RFCOMM_RECV_MSC_CNF_DLC_FLAG, "RfCtlHandleCnf: Recv MSC Rsp, DLC Flag=0x%04X")
TRC_MSG(BT_RFCOMM_RECV_MSC_REQ_DLC_FLAG, "RfCtlHandleMSCReq: Recv MSC Req, DLC Flag=0x%04X")
TRC_MSG(BT_RFCOMM_DISC_PENDING_RECV_EVENT, "RfDlcStateDiscPending: DLCI=0x%02x, MuxId=0x%02x,Recv Event=0x%02x, MUX flags=0x%x")
TRC_MSG(BT_RFCOMM_DISC_PENDING_NOT_CHANGE_STATE, "Not Change DLC Disc Penging to Disconnected inx=0x%x")
TRC_MSG(BT_RFCOMM_CHECK_UNRETURNED_DISC_PKT, "RfDlcStateDiscPending: Check if Disc Pkt on L2CaptxQuest or btPacketList, inx=%d")
TRC_MSG(BT_RFCOMM_DISC_PENDING_NOT_CHANGE_RESULT, "Find a non returned DISC Req: hciHandle=%08X,aclTxPacketsLeft=%d")
TRC_MSG(BT_RFCOMM_START_TIMER_SEND_CMD_ON_DLCI_OF_MUX_TIME, "RFCOMM: start timer, send cmd=0x%02x on DLCI=0x%02x of Mux=0x%02x time=%dsec")
TRC_MSG(BT_RFCOMM_RESTART_TIMER, "RFCOMM: restart")
TRC_MSG(BT_RFCOMM_DISCARD_DISC_ON_DLCI_OF_MUX, "RFCOMM: discard DISC on DLCI=0x%02x of Mux=0x%02x and clear CHNL_FLAG_DISC_QUEUED")
TRC_MSG(BT_RFCOMM_DISC_IS_QUEUED_ON_DLCI_OF_MUX, "RFCOMM DISC is queued on dlci=0x%02x of MUX=0x%02x and set CHNL_FLAG_DISC_QUEUED")
TRC_MSG(BT_RFCOMM_CHNL_FLAG_DISC_QUEUED_IS_CLEARED, "RFCOMM CHNL_FLAG_DISC_QUEUED is cleared")
/* Add by stanley: 2007-02-16 */
TRC_MSG(BT_RFCOMMM_NEW_TXCREDIT, "Recv txCredit, new txCredit=%d, call RfMUXCheckTxQueues")
TRC_MSG(BT_RFCOMMM_PKT_RETURNED, "RfAppCallback:Pkt on DLCI=0x%02x returned with status=0x%x,len=%d,call RfMUXCheckTxQueues")
TRC_MSG(BT_RFCOMMM_SPP_PKT_RETURNED, "In defaultEventHandler():PKT_RETURNED,sentdata=%d on DLCI=0x%02x")
TRC_MSG(BT_RFCOMMM_CHECKTXQUEUE, "In RfMUXCheckTxQueues():packetsInTransit=%d")
TRC_MSG(BT_RFCOMMM_CHECK_NEXT_TXQUEUE_EMPTY_DLCI, "In RfMUXCheckNextTxQueue() on DLCI=0x%02x ,is Empty")
TRC_MSG(BT_RFCOMMM_CHECK_NEXT_TXQUEUE_FLOWOFF_DLCI, "In RfMUXCheckNextTxQueue() on DLCI=0x%02x, is FlowOff")
TRC_MSG(BT_RFCOMMM_PKT_INTRANSMIT_DLCI, "In RfMuxCheckNextTxQueues(), packetsInTransit=%d, on DLCI=0x%02x")
TRC_MSG(BT_RFCOMMM_RF_SENDDATA_CHECK_TXQUEUE, "In RF_SendData(): DLCI=0x%02x,len=%d,call RfMUXCheckTxQueues")
TRC_MSG(BT_RFCOMMM_SENDDATA_INTERNAL_DLCI_TXCREDIT, "In RfMUXCheckNextTxQueue(): on DLCI=0x%02x, left txCredit=%d")
TRC_MSG(BT_RFCOMMM_SPPA_GETBYTES_DATAREAD_LEN, "In Sppa_GetBytes(): DataRead=%d,Length=%d")
TRC_MSG(BT_RFCOMMM_SPPA_GETBYTES_CASE1, "In Sppa_GetBytes():case1 Set readyToRead to TRUE and ReadMore=%d")
TRC_MSG(BT_RFCOMMM_SPPA_GETBYTES_CASE2, "In Sppa_GetBytes():case2 Set readyToRead to FALSE")
TRC_MSG(BT_RFCOMMM_SET_READYTOREAD_FALSE, "In SPPOS_DevRx(): Set readyToRead FALSE")
TRC_MSG(BT_RFCOMMM_SPPOS_FLUSHRX, "SPPOS_FlushRX")
TRC_MSG(BT_RFCOMMM_SPPOS_FLUSHTX, "SPPOS_FlushTX")
TRC_MSG(BT_RFCOMM_OPENCLI_FUNC_ENTRY, "In RF_OpenClientChannel() with entry=%d")
TRC_MSG(BT_RFCOMM_DISC_L2CAP_REJECT_SABM_DLC_COUNT_ZERO, "Disc L2CAP at MuxID=0x%02x,due to reject SABM and dlcCout is 0")
TRC_MSG(BT_RFCOMM_CREDIT_PKT_SENT_DONE, "BT_LOG_RFCOMM_CREDIT_PKT_SENT_DONE")

TRC_MSG(RFCOMM_IN_COMING_CONNECTION_AUTHENTICATED_HAS_ALREADY_COMPLETED, "RFCOMM in coming connection, Authenticated has already completed")
TRC_MSG(RFCOMM_SEND_ACK_RESPONSE, "RFCOMM Send ACK response:0x%02x")
TRC_MSG(SERVER_CHANNEL_IS_NOT_ALLOWED, "Server channel is not allowed.")
TRC_MSG(RFISDLCFLOWONTXCREIDT0_ON_DLCIxD, "RfIsDlcFlowOn(),txCreidt=0 on DLCI=0x%02x")
TRC_MSG(RF01084421, "RF Deregister Security Record")
TRC_MSG(CLIENT_REGISTRATION_SECURITY_RECORDBT_DEBUGx02X, "Client Registration security record:%02x")
TRC_MSG(CLIENT_DEREGISTRATION_SECURITY_RECORDBT_DEBUGx02X, "Client DeRegistration security record:%02x")
TRC_MSG(DEREGISTRATION_SECURITY_RECORD_STATUSBT_DEBUGx02X, "DeRegistration security record status:%02x")
TRC_MSG(RFL2CALLBACKL2EVENT_CLOSED_FOR_SECURITY_SERVICE_LEVEL2_TO_CHECK_PARING_STATE, "RfL2Callback(L2EVENT_DISCONNECTED)")
/* RFCOMM TESTER*/
TRC_MSG(BT_RFCOMMTS_INIT, "RFCOMM TESTER INIT")
TRC_MSG(BT_RFCOMMTS_OPENCLIENT, "RFCOMM TESTER Open RFCOMM Channel")
TRC_MSG(BT_RFCOMMTS_REGSERVER, "RFCOMM TESTER Regsiter RFCOMM server")
TRC_MSG(BT_RFCOMMTS_ERROR_STRING, "RFCOMM TESTER unknown string")
TRC_MSG(BT_RFCOMMTS_EVENT, "RFCOMM TESTER callback event :%02x")
TRC_MSG(BT_RFCOMMTS_PKT_SENT, "RFCOMM TESTER PACKET SENT")
TRC_MSG(BT_RFCOMMTS_CLOSE, "RFCOMM TESTER CLOSE CHANNEL")
TRC_MSG(BT_RFCOMMTS_RLS, "RFCOMM TESTER Send RLS")
TRC_MSG(BT_RFCOMMTS_SENDDATA, "RFCOMM TESTER Send data")
TRC_MSG(BT_RFCOMMTS_NO_BUFFER, "RFCOMM TESTER no buffer to send data")
TRC_MSG(BT_RFCOMMTS_MSC, "RFCOMM TESTER Send msc:%02x")
TRC_MSG(BT_RFCOMMTS_SENDPN, "RFCOMM TESTER Send PN")
TRC_MSG(IN_RFCOMM_INJECT_STR_CHANGEPKTTYPE, "In RFCOMM inject str: changepkttype")

TRC_MSG(BT_RFCOMM_TRACE_END, "BT_RFCOMM_TRACE_END")  /* MBT LOG FILTER. DO NOT MODIFY */
/* RFCOMM TRACE END */

/* SDP TRACE START */
TRC_MSG(BT_SDP_TRACE_START, "BT_SDP_TRACE_START") /* MBT LOG FILTER. DO NOT MODIFY */

TRC_MSG(BT_SDAP_REMOVE_LINK_HDLER, "BT_LOG_Try to RemoveEntryList sdapMeHandler")
TRC_MSG(BT_SDP_QUERY_FAILED_CASE, "BT_LOG_SDP_QUERY_FAILED_CASE=%d")
TRC_MSG(BT_SDP_REMOVE_RECORD_NOT_IN_LIST, "BT_LOG_Record is not in the SDPS records List")
TRC_MSG(BT_LOG_SDAP_SSA_RAW_RETRY_COUNT, "SDAP_SSA_Raw():Wait for Link disconnected,count=%d")
TRC_MSG(BT_LOG_QUERY_SA_RAW_CB_RECORD_COUNT, "query_sa_raw_cb:currentServiceRecordCount=%d")
TRC_MSG(BT_LOG_QUERY_SA_RAW_CB_CONT_STATE_LEN, "query_sa_raw_cb:ContStateLen from ss rsp =%d")
TRC_MSG(BT_LOG_QUERY_SA_RAW_CB_ATTRLIST_COUNT_CONTSTATE_LEN_CASE, "query_sa_raw_cb:attributelist count=%d,contStateLen=%d,case=%d")
TRC_MSG(BT_LOG_QUERY_SA_RAW_CB_CONSTATE_LEN_FROM_SA_RSP_CASE, "query_sa_raw_cb:ContStateLen from sa rsp =%d,case=%d")
TRC_MSG(BT_LOG_QUERY_SA_RAW_CB_CONTINUE_SDP_FAILED_STATUS, "query_sa_raw_cb:Continue sdp query failed, stauts=%d")
TRC_MSG(BT_LOG_QUERY_SA_RAW_CB_LINK_CON_CNF_FAILED, "query_ssa_raw_cb:Link connect cnf with error")
TRC_MSG(BT_LOG_SDP_CLIENT_QUERY_DATALEN_PTR, "SendSdpClientQuery():Dump Data: data len=%d and ptr=%08X")
TRC_MSG(SDP_CLIENT_PACKET_RETURNED, "SDP Client: Packet returned")
TRC_MSG(SDP_CLIENT_DEINITIALIZED, "SDP Client:  Deinitialized.")
TRC_MSG(SDP_CLIENT_SUCCESSFULLY_STARTED_L2CAP, "SDP Client: Successfully started L2CAP")
TRC_MSG(SDP_CLIENT_QUERY_FAILED_TO_START_NO_CONNECTION, "SDP Client: Query failed to start no connection")
TRC_MSG(SDP_CLIENT_CONNECTION_DISCONNECTED, "SDP Client: Connection disconnected")
TRC_MSG(SDP_CLIENT_NO_MORE_TOKENS_SO_DISCONNECTING_L2CAP, "SDP Client: No more tokens so disconnecting L2CAP")
TRC_MSG(SDP_CLIENT_RECEIVED_RESPONSE, "SDP Client: received response")
TRC_MSG(SDP_CLIENT_L2CAP_CONNECTION_HAS_COME_UP, "SDP Client: L2CAP connection has come up")
TRC_MSG(SDP_CLIENT_FAILED_TO_START_L2CAP_STATUS__xD, "SDP Client: Failed to start L2CAP status = %d")
TRC_MSG(SDP_CLIENT_SENDING_QUERY_PACKET, "SDP Client: Sending query packet")
TRC_MSG(SDP_SERVER_ATTRIB_SEARCH_RCV_BAD_CONTINUATION_STATE, "SDP Server: Attrib search rcv bad continuation state")
TRC_MSG(SDP_SERVER_ATTRIB_SEARCH_STORING_HEADER_INTO_SCRATCH, "SDP Server: Attrib Search storing header into scratch")
TRC_MSG(SDP_SERVER_SENDING_AN_ERROR_ERROR__xX, "SDP Server: Sending an error. error=0x%x")
TRC_MSG(SDP_SERVER_HANDLESERVSEARCHATTRIB__RCV_BAD_CONTINUATION_STATE, "SDP Server: HandleServSearchAttrib - rcv bad continuation state")
TRC_MSG(SDP_SERVER_SERSEARATTRREQ__QUERY_PARAMETERS_ARE_NOT_VALID, "SDP Server: SerSearAttrReq - query parameters are not valid")
TRC_MSG(SDP_SERVER_SENDING_CONT_STATE_0, "SDP Server: Sending cont state 0")
TRC_MSG(SDP_SERVER_SERVICE_SEARCH_RCV_CONT_STATE_SIZE__xD_VAL__xD, "SDP Server: Service Search rcv cont state size = %d val = %d")
TRC_MSG(SDP_SERVER_SERVICE_SEARCH_RCV_CONINUATION_STATE__0, "SDP Server: Service Search rcv coninuation state = 0")
TRC_MSG(SDP_SERVER_B_SCRATCH__xD, "SDP Server: B scratch = %d")
TRC_MSG(SDP_SERVER_HANDLESERVATTRIB__BAD_PARAMETER_LEN, "SDP Server: HandleServAttrib - bad parameter len")
TRC_MSG(SDP_SERVER_SENDING_CONT_STATE__xD, "SDP Server: Sending cont state = %d")
TRC_MSG(SDP_SERVER_DEINITIALIZED, "SDP Server:  Deinitialized.")
TRC_MSG(SDP_SERVER_HANDLESERVSEARCHATTRIB__BAD_PARAMETER_LEN, "SDP Server: HandleServSearchAttrib - bad parameter len")
TRC_MSG(SDP_SERVER_QUERY_LEN_IS_SHORT, "SDP Server: query len is short")
TRC_MSG(SDP_SERVER_STOREATTRIB__STORING_ID_0_INTO_SCRATCH, "SDP Server: StoreAttrib - storing ID 0 into scratch")
TRC_MSG(SDP_SERVER_INCOMING_L2CAP_CONNECTION_REJECTED, "SDP Server: Incoming L2CAP connection rejected")
TRC_MSG(SDP_SERVER_L2CAP_SENDDATA_CALL_FAILED_ERROR__xX, "SDP Server: L2CAP_SendData call failed. error=0x%x")
TRC_MSG(SDP_SERVER_CONNECTION_COMPLETE, "SDP Server: Connection complete")
TRC_MSG(SDP_SERVER_CONNECTION_DISCONNECTED, "SDP Server: Connection disconnected")
TRC_MSG(SDP_SERVER_ATTRIB_SEARCH_RCV_CONTINUATION_STATE__0, "SDP Server: Attrib Search rcv continuation state = 0")
TRC_MSG(SDP_SERVER_INVALID_RECORD_HANDLE, "SDP Server: Invalid record handle")
TRC_MSG(SDP_SERVER_COPYING_THE_SCRATCH_INTO_A_PACKET_LENxD, "SDP Server: Copying the scratch into a packet len:%d")
TRC_MSG(SDP_SERVER_INCOMING_L2CAP_CONNECTION_ACCEPTED, "SDP Server: Incoming L2CAP connection accepted")
TRC_MSG(SDP_SERVER_REMDEVSDPSERVINFOTOTALATTRIBSIZE__xD, "SDP Server: remDev->sdpServInfo->totalAttribSize = %d")
TRC_MSG(SDP_SERVER_MATCH_FOUND, "SDP Server: Match found")
TRC_MSG(SDP_SERVER_QUERY_PARAMETERS_ARE_NOT_VALID, "SDP Server: query parameters are not valid")
TRC_MSG(SDP_SERVER_HANDLESERVSEARCHATTRIB__RCV_CONT_STATE_SIZE__xD_VAL__xD, "SDP Server: HandleServSearchAttrib - rcv cont state size = %d val = %d")
TRC_MSG(SDP_SERVER_HANDLESERVSEARCH__BAD_PARAMETER_LEN, "SDP Server: HandleServSearch - bad parameter len")
TRC_MSG(SDP_SERVER_ATTRIBUTE_ID__xD_MARKED, "SDP Server: Attribute ID = %d marked")
TRC_MSG(SDP_SERVER_ATTRIBUTE_ID__2_MARKED, "SDP Server: Attribute ID = 2 marked")
TRC_MSG(SDP_SERVER_A_SCRATCH__xD, "SDP Server: A scratch = %d")
TRC_MSG(SDP_SERVER_SERVICE_SEARCH_RCV_BAD_CONTINUATION_STATE, "SDP Server: service search rcv bad continuation state")
TRC_MSG(SDP_SERVER_MATCH_NOT_FOUND, "SDP Server: Match not found")
TRC_MSG(SDP_SERVER_STOREATTRIB__STORING_ID_2_INTO_SCRATCH, "SDP Server: StoreAttrib - storing ID 2 into scratch")
TRC_MSG(SDP_SERVER_ATTRIB_SEARCH_RCV_CONT_STATE_SIZE__xD_VAL__xD, "SDP Server: Attrib Search rcv cont state size = %d val = %d")
TRC_MSG(SDP_SERVER_PACKET_RETURNED, "SDP Server: packet returned")
TRC_MSG(SDP_SERVER_RECEIVED_DATA, "SDP Server: received data")
TRC_MSG(SDP_SERVER_ATTRIBUTE_ID__0_MARKED, "SDP Server: Attribute ID = 0 marked")
TRC_MSG(SDP_SERVER_SERVICE_SEARCH_RCV_CONTINUATION_STATE__0, "SDP Server: Service Search rcv continuation state = 0")
TRC_MSG(SDP_SERVER_QUERY_PARMETERS_LEN_IS_BAD, "SDP Server: query parmeters len is bad")
TRC_MSG(SDP_SERVER_STOREATTRIB__STORING_ID_1_INTO_SCRATCH, "SDP Server: StoreAttrib - storing ID 1 into scratch")
TRC_MSG(A_SDP_SERVER_REMDEVSDPSERVINFOTOTALATTRIBSIZE__xD, "A SDP Server: remDev->sdpServInfo->totalAttribSize = %d")
TRC_MSG(B_SDP_SERVER_SCRATCH__xD, "B SDP Server: scratch = %d")
TRC_MSG(C_SDP_SERVER_SCRATCH__xD, "C SDP Server: scratch = %d")
TRC_MSG(RECORD_HANDLERBT_DEBUGx04X, "record handler:%04x")
TRC_MSG(OFFSETxD_FINALxDSTATExD, "offset:%d, final:%d,state:%d")
TRC_MSG(SERVICE_REG_RECORD_HANDLERBT_DEBUGx04X, "service reg record handler:%04x")
TRC_MSG(SERVICE_ATTRIBUTE_IDBT_DEBUGx04X, "Service attribute id:%04X")
TRC_MSG(SERVICE_SEARCH_FAILED, "Service search Failed")
TRC_MSG(SERVICE_SEARCH_COMPLETEBT_DEBUGx02X_TOTAL_VALUE_LENBT_DEBUGx02X, "Service search complete:%02X, total value len:%02X")
TRC_MSG(SERVICE_SEARCH_FAILED_NO_SERVICES, "Service search Failed, no services")
TRC_MSG(PARSE_NEXT, "PARSE  NEXT")
TRC_MSG(FOUND_SERVICE_RECORD_OF_BT_DEBUGx04X, "Found service record of %04X")
TRC_MSG(PSI_INFORMATION_STORED_IN_DB_NOW, "PSI information stored in DB now")
TRC_MSG(RESULTBT_DEBUGx02XBT_DEBUGx02XBT_DEBUGx02XBT_DEBUGx02XBT_DEBUGx02XBT_DEBUGx02X, "Result:%02X,%02X,%02X,%02X,%02X,%02X")
TRC_MSG(PARSE_COMPLETE_WITH_ERROR, "PARSE COMPLETE with error")
TRC_MSG(DO_SDAP_SERVICE, "Do SDAP service")
TRC_MSG(SERVICE_SEARCH_COMPLETE_STATUS__BT_DEBUGx02X_TOKEN_VALUE_LENBT_DEBUGx02X, "Service search complete status = %02X, token value len:%02X")
TRC_MSG(PARSE_COMPLETE, "PARSE COMPLETE")
TRC_MSG(SDPSERVER_REMOVED_RECORD_IS_MARKED_SETTING_CONT_STATE_TO_0_FOR_REMDEV_xD, "SdpServer: Removed record is marked setting cont state to 0 for remdev %d")
TRC_MSG(SDPFINDUUIDINATTRIB_MAX_RECURSION_LEVEL_EXCEEDED, "SdpFindUUidInAttrib: max recursion level exceeded")
TRC_MSG(SDP_QUERY_NO_SERVICES, "SDP Query No services")
TRC_MSG(FTP_SERV_CHANNELx02X, "FTP serv channel:%02x")
TRC_MSG(REGFTP, "regftp")
TRC_MSG(SDP_REG_RESULTx02X, "SDP reg result:%02x")
TRC_MSG(OPP_SERV_CHANNELx02X, "OPP serv channel:%02x")
TRC_MSG(DEREGISTRATION_RESULTx02X, "DeRegistration result:%02x")
TRC_MSG(UNKNOWN_MESSAGE, "Unknown message")
TRC_MSG(DEREGFTP, "deregftp")
TRC_MSG(DEREGOPP, "deregopp")
TRC_MSG(SDPDBA_RX_CMD_STRING, "sdpdba  rx cmd string")
TRC_MSG(REGISTRATION_RESULTx02X, "Registration result:%02x")
TRC_MSG(REGOPP, "regopp")
TRC_MSG(SDAP_MULTIPLE_REQUEST_TIMEOUT_C, "sdap multiple request timeout C")
TRC_MSG(IN_SDAP_SERVICESEARCHSINGLEATTRIBUTE_SET_DISCFLAG_AS_FALSE, "In SDAP_ServiceSearchSingleAttribute(): set discFlag as FALSE")
TRC_MSG(RESTART_SDAP_MULTIPLE_REQ_TIMER_D, "restart sdap multiple req timer D")
TRC_MSG(FOR_A2DP_AGAIN_UUIDx4X, "for A2DP again, uuid=%4x")
TRC_MSG(IN_QUERY_SDAP_SERVICE_SEARCH_ALL_CALLBACK_SET_DISCLEVEL_BT_L2CAP_DISCONNECT_TIMEOUT_50S, "In query_sdap_service_search_all_callback(): set discLevel BT_L2CAP_DISCONNECT_TIMEOUT_50S")
TRC_MSG(CONTINUE_TO_PARSING_SDP_RSP_RESULT, "Continue to parsing SDP Rsp result")
TRC_MSG(SDAP_NOT_FINSIHED_REJECT_THE_OPEATION, "SDAP not finsihed, reject the opeation.")
TRC_MSG(SDPCLIENTQUERYTIMEOUT_TIMEOUTBT_DEBUGx02X, "SdpClientQueryTimeout timeout:%02x")
TRC_MSG(SDAP_MULTIPLE_REQUEST_TIMEOUT_F, "sdap multiple request timeout F")
TRC_MSG(FOR_A2DP_AGAIN_RSP_BACKUUIDBT_DEBUGx04X, "for A2DP again, rsp back,uuid=%04x")
TRC_MSG(IN_QUERY_SDAP_SEARCH_ATTRIBUTE_CALLBACK_RECV_SPP_QUERY_RSP, "In query_sdap_search_attribute_callback(): Recv SPP Query RSP")
TRC_MSG(SDAP_MULTIPLE_REQUEST_TIMEOUT_A, "sdap multiple request timeout A")
TRC_MSG(RESTART_SDAP_MULTIPLE_REQ_TIMER_B, "restart sdap multiple req timer B")
TRC_MSG(CBT_DEBUGx02XDBT_DEBUGx02X, "c:%02x,d:%02x")
TRC_MSG(RESTART_SDAP_MULTIPLE_REQ_TIMER_E, "restart sdap multiple req timer E")
TRC_MSG(RESET_SDAP_MULTI_REQ_INDEX_FOR_A2DP_SDP_QUERY_AGAIN, "Reset sdap_multi_req_index for A2DP sdp query again")
TRC_MSG(CONTINUATION_STATE, "continuation state")
TRC_MSG(NOT_IN_MULTIPLE_SDAP_REQUEST, "Not in multiple SDAP request")
TRC_MSG(ABT_DEBUGx02XBBT_DEBUGx02X, "a:%02x,b:%02x")
TRC_MSG(RESTART_SDAP_MULTIPLE_REQ_TIMER_F, "restart sdap multiple req timer F")
TRC_MSG(SDAP_REMOVE_LINKCALLBACK_SDAPMEHANDLER, "Sdap remove linkcallback: sdapMeHandler")

TRC_MSG(BT_SDP_TRACE_END, "BT_SDP_TRACE_END") /* MBT LOG FILTER. DO NOT MODIFY */
/* SDP TRACE END */
/* STACK TRACE END */

/* BPP TRACE START */
/* BPP EXT. ADP */
TRC_MSG(BT_BPP_EXT_ENABLE, "[BPP_EXT] btmtk_bpp_enable: original bpp_state(%d)")
TRC_MSG(BT_BPP_EXT_DISABLE, "[BPP_EXT] btmtk_bpp_disable: original bpp_state(%d)")
TRC_MSG(BT_BPP_EXT_AUTH_RSP, "[BPP_EXT] btmtk_bpp_auth_response: current bpp_state(%d), get_auth_ind(%d), hprinter(%d)")
TRC_MSG(BT_BPP_EXT_GET_ATT, "[BPP_EXT] btmtk_bpp_getprinterattribute: current bpp_state(%d)), addr(%02x:%02x:%02x:%02x:%02x:%02x), attMask(%02x), ReqBefore(%d))")
TRC_MSG(BT_BPP_EXT_PRINT, "[BPP_EXT] btmtk_bpp_print: current bpp_state(%d)), addr(%02x:%02x:%02x:%02x:%02x:%02x), ReqBefore(%d))")
TRC_MSG(BT_BPP_EXT_SEND_PRINT_REQ, "[BPP_EXT] BPP send print req: PrintModel(%d), MIME type(%d), ObjSize(%d)")
TRC_MSG(BT_BPP_EXT_DISC, "[BPP_EXT] btmtk_bpp_disconnect: current bpp_state(%d)")
TRC_MSG(BT_BPP_EXT_CONN_CNF, "[BPP_EXT] bt_bpp_connect_cnf: current bpp_state(%d), Result(%d)")
TRC_MSG(BT_BPP_EXT_GET_ATT_CNF, "[BPP_EXT] bt_bpp_getprinterattribute_cnf: current bpp_state(%d), Result(%d)")
TRC_MSG(BT_BPP_EXT_PRINT_CNF, "[BPP_EXT] bt_bpp_print_cnf: current bpp_state(%d), Result(%d)")
TRC_MSG(BT_BPP_EXT_DISC_CNF, "[BPP_EXT] bt_bpp_disconnect_cnf: current bpp_state(%d), Result(%d)")
TRC_MSG(BT_BPP_EXT_DISC_IND, "[BPP_EXT] bt_bpp_disconnect_ind: current bpp_state(%d)")
TRC_MSG(BT_BPP_EXT_AUTH_IND, "[BPP_EXT] btmtk_bpp_handle_auth_ind: hprinter(%d)")
TRC_MSG(BT_BPP_EXT_PROGRESS_IND, "[BPP_EXT] btmtk_bpp_handle_progress_ind: hprinter(%d), TxProgress(%d),total(%d)")
TRC_MSG(BT_BPP_EXT_JOB_STATUS_IND, "[BPP_EXT] btmtk_bpp_handle_job_status_ind: hprinter(%d), PrintJobState(%d), PrinterState(%d), PrinterStateReasons(%d)")
TRC_MSG(BT_BPP_EXT_PRINTER_SUPPORT_MIMETYPE, "[BPP_EXT] printer SUPPORT doctype:(%d)")
TRC_MSG(BT_BPP_EXT_PRINTER_NOT_SUPPORT_MIMETYPE, "[BPP_EXT] printer NOT SUPPORT doctype:(%d)")
TRC_MSG(BT_BPP_EXT_COMPOSE_IMAGE, "[BPP_EXT]bpp_compose_image_to_xhtml_file...")
TRC_MSG(BT_BPP_EXT_COMPOSE_OBJECT, "[BPP_EXT]bpp_compose_object_to_xhtml_file...")
TRC_MSG(BT_BPP_EXT_COMPOSING_RETURN, "[BPP_EXT]bpp compose xhtml return (%d)")
TRC_MSG(BT_BPP_EXT_DOCTYPE_CHECK_NOT_SAME_PRINTER, "[BPP_EXT]bt_bpp_printer_support_doctype: not the SAME printer!, return FALSE")
TRC_MSG(BT_BPP_EXT_CAPABILITY_GOTTEN_RETURN, "[BPP EXT]bt_bpp_printer_capability_gotten return(%d)")
TRC_MSG(BT_BPP_EXT_HDLE_MSG, "[BPP_EXT]btmtk_bpp_handle_message(%d)...")
TRC_MSG(BT_BPP_EXT_CONNECT_CNF, "[BPP EXT]BPP Connect CNF for hprinter:%d result:%d")
TRC_MSG(BT_BPP_EXT_DISCONNECT_CNF, "[BPP EXT]BPP DISConnect CNF for hprinter:%d result:%d")
TRC_MSG(BT_BPP_EXT_DISCONNECT_IND, "[BPP EXT]BPP DISConnect IND for hprinter(%d) !")
TRC_MSG(BT_BPP_EXT_ENABLE_CB, "[BPP EXT]bt_bpp_enable_req_cb,cnf_code=%d,cntx_state=%d,sdc_state=%d")
TRC_MSG(BT_BPP_EXT_DISABLE_CB, "[BPP EXT]bt_bpp_disable_req_cb,cnf_code=%d,cntx_state=%d,sdc_state=%d")
TRC_MSG(BT_BPP_EXT_GETATTR_CB, "[BPP EXT]bt_bpp_getprinterattr_req_cb,cnf_code=%d,cntx_state=%d,sdc_state=%d")
TRC_MSG(BT_BPP_EXT_PRINT_CB, "[BPP EXT]bt_bpp_print_req_cb,cnf_code=%d,cntx_state=%d,sdc_state=%d")
TRC_MSG(BT_BPP_EXT_DISCONNECT_CB, "[BPP EXT]bt_bpp_disconnect_req_cb,cnf_code=%d,cntx_state=%d,sdc_state=%d")
TRC_MSG(BT_BPP_EXT_CANCEL_CB, "[BPP EXT]bt_bpp_cancel_req_cb,cnf_code=%d,cntx_state=%d,sdc_state=%d")
TRC_MSG(BT_BPP_EXT_IS_DEV_CONNECTED, "[BPP EXT]btmtk_bpp_is_dev_connected, cntx_state=%d")
TRC_MSG(BT_BPP_EXT_IS_CONNECTED, "[BPP EXT]btmtk_bpp_is_connected, cntx_state=%d")


/* BPP INT. ADP */
TRC_MSG(BPP_ADP_ENTRY_MSG_HDLR, "[BPP ADP]bpp_adp_msg_hdlr, cur_oper=%d, cur hprinter=0x%x")
TRC_MSG(BPP_ADP_ENTRY_EVENT_CALLBACK, "[BPP ADP]bpp_adp_event_callback:ParmHPrint=0x%x,ParmEvent=%d,ParmOper=%d,CntxHPrinter=0x%x,CntxOper=%x")
TRC_MSG(BPP_ADP_CONNECT_CONFIRM, "[BPP ADP]bpp_adp_connect_confirm,cnf_code=(%d)")
TRC_MSG(BPP_ADP_GET_ATTR_CONFIRM, "[BPP ADP]bpp_adp_get_attr_confirm(),cnf_code=(%d)")
TRC_MSG(BPP_ADP_STATUS_IND, "[BPP ADP]bpp_adp_status_ind")
TRC_MSG(BPP_ADP_PRINT_DOC_CONFIRM, "[BPP ADP]bpp_adp_print_doc_confirm,cnf_code=(%d)")
TRC_MSG(BPP_ADP_DISC_CONFIRM, "[BPP ADP]bpp_adp_disconnect_confirm,cnf_code=%d")
TRC_MSG(BPP_ADP_DISC_IND, "[BPP ADP]bpp_adp_disconnect_ind")
TRC_MSG(BPP_ADP_ALLOC_CM_CONNID, "[BPP ADP]BTBMProfileAllocateConnIndex return (%d)")
TRC_MSG(BPP_ADP_RELEASE_CM_CONNID, "[BPP ADP]BTBMProfileReleaseConnIndex :(%d)")
TRC_MSG(BPP_ADP_ENTRY_INIT, "[BPP ADP] bpp_adp_init...")
TRC_MSG(BPP_ADP_SEND_MSG2APP, "[BPP ADP]BPP_ADP_SEND_MSG2APP,msg_id:%d")
TRC_MSG(BPP_ADP_CANCEL_CONFIRM, "[BPP ADP]bpp_adp_cancel_confirm,cnf_code=%d")

/* BPP profile */
TRC_MSG(BPP_CONNECT_ENTRY_PRINTER, "[BPP]bpp_connect_printer,printer_handler=0x%x")
TRC_MSG(BPP_MAX_PRINTER_NUM_REACHED, "[BPP]existed printer num=(%d), max_num=(%d)")
TRC_MSG(BPP_GOEP_REGISTERCLIENT_RETURN, "[BPP]GOEP_RegisterClient return (%d)")
TRC_MSG(BPP_GOEP_TPCONNECT_RETURN, "[BPP]GOEP_TpConnect return (%d)")
TRC_MSG(BPP_GOEP_CONNECT_RETURN, "[BPP]GOEP_Connect return (%d)")
TRC_MSG(BPP_GET_PRINTER_ATTR, "[BPP]bpp_get_printer_attribute(), attr_bitmask=(0x%x),prt_handle=0x%x, printer=0x%x, printer->state=(%d)")
TRC_MSG(BPP_GOEP_PULL_RETURN, "[BPP] GOEP_Pull return (%d)")
TRC_MSG(BPP_ENTRY_PRINT_OBJECT, "[BPP]bpp_print_object():model=%d,mime=%d,objsize=%d,prt_handle=0x%x,printer=0x%x,state=%d")
TRC_MSG(BPP_SIMPLEPUSH_PRINT, "[BPP]bpp_simple_push_print...")
TRC_MSG(BPP_GOEP_PUSH_RETURN, "[BPP]GOEP_Push() objectLen=(%d), return (%d)")
TRC_MSG(BPP_ENTRY_CREATE_JOB, "[BPP]bpp_create_job...")
TRC_MSG(BPP_PROGRESS_RSP_RECEIVED, "[BPP]bpp_progress_rsp_received:prt_handle=0x%x,printer=0x%x,state=%d")
TRC_MSG(BPP_CANCEL, "[BPP]bpp_cancel:prt_handle=0x%x,printer=0x%x,state=%d")
TRC_MSG(BPP_DISCONNECT_PRINTER, "[BPP]bpp_disconnect_printer:prt_handle=0x%x,printer=0x%x,state=%d")
TRC_MSG(BPP_ACCEPT_AUTHCHAL, "[BPP]bpp_accept_authentication:prt_handle=0x%x,printer=0x%x,state=%d")
TRC_MSG(BPP_REJECT_AUTHCHAL, "[BPP]bpp_reject_authentication:prt_handle=0x%x,printer=0x%x,state=%d")
TRC_MSG(BPP_JOBCHNL_CALLBACK, "[BPP]bpp_job_channel_callback,event->handler:0x%x,event:(%d),printer:0x%x,state=(%d),stschnl=0x%x,sts_state=(%d)")
TRC_MSG(BPP_STATUSCHNL_CALLBACK, "[BPP]bpp_status_channel_callback,event->handler:0x%x,event:(%d),printer:0x%x,job_state=(%d),sts_state=(%d)")
TRC_MSG(BPP_ENTRY_OBEX_CONNECT, "[BPP]bpp_obex_connect: channel=%d, pauth=0x%x")
TRC_MSG(BPP_DISC_STATUS_CHANNEL, "[BPP]bpp_disc_status_channel, status_channel=0x%x, state=(%d)")
TRC_MSG(BPP_DISC_JOG_CHANNEL, "[BPP]bpp_disc_job_channel, disc_type=%d, printer->state=(%d)")
TRC_MSG(BPP_DISC_JOBCHNL_RETURN, "[BPP]bpp_disc_job_channel return (%d)")
TRC_MSG(BPP_ENTRY_PULL, "[BPP]bpp_pull....")
TRC_MSG(BPP_DEINIT_PRINTER, "[BPP]bpp_deinit_printer (0x%x) ")
TRC_MSG(BPP_GETEVENT_RESP, "[BPP]bpp_parse_get_event_rsp_soap() ret:%d, printer_state:%d, job_state:%d, state_reason:%d")
TRC_MSG(BPP_ENTRY_SEND_DOC, "[BPP]bpp_send_doc...")
TRC_MSG(BPP_DESTORY_STATUSCHNL, "[BPP]bpp_destory_status_channel...")
TRC_MSG(BPP_FS_OPEN_HANDLE_INLINE_ITEM, "[BPP]bpp_get_inline_item(), pfile_obj->fh:%d")
TRC_MSG(BPP_CREATEJOB_SOAPRSP_JOB_ID, "[BPP]create_job_rsp_soap, job_id:%d")
TRC_MSG(BPP_CREATE_JOB_INFO_OPERATION_STATUS, "[BPP]create_job_rsp_soap, value:%d, ret:%d")
TRC_MSG(BPP_READ_XHTML_MEET_INVLID_IMAGE_FILE_HANDLER, "[BPP]bpp_read_xhtml() invlid image file handler, pdu_out:%d")
TRC_MSG(BPP_RESULT_OF_READ_DATA, "[BPP]bpp_compose_multiplexed_data(), pdu_out:%d, psend_obj->total_size_send:%d")
TRC_MSG(BPP_CREATE_JOB_END, "[BPP]bpp_create_job_end")
TRC_MSG(BPP_CREATE_JOB_INFO, "[BPP]bpp_create_job info, job_id:%d, ret:%d")
TRC_MSG(BPP_OBS_WRITE_SOAPRSP, "[BPP]bpp_obs_write_soaprsp,recv_soap_len::%d,current_req:%d")
TRC_MSG(BPP_WRITE_SOAPRSP_FAILED, "[BPP]bpp_obs_write_soaprsp return failed; try_again=%d,fh=%d; fs_write=%d")
TRC_MSG(BPP_PARSE_SOAPRSP_RETURN, "[BPP] bpp_parse_rsp_soap: xml_parse return: (%d)")
TRC_MSG(BPP_LOADDATA_FROMFILE_FAILED, "[BPP]bpp_load_data_from_file read file error(%d),Sfile remain size %d")
TRC_MSG(BPP_IS_SOAP_COMPLETE_INFO1, "[BPP]bpp_is_soap_complete() content_header_len %d,body_len %d,buf_len %d")
TRC_MSG(BPP_IS_SOAP_COMPLETE_INFO2, "[BPP]bpp_is_soap_complete() soap_rsp_len %d,buf_len %d")
TRC_MSG(BPP_DEINIT_PRINTER_WITH_STSCHNL, "[BPP]bpp_destory_printer error, sts channel exist, state: %d")
TRC_MSG(BPP_TPDISCONNECT_STSCHNL_RETURN, "[BPP]GOEP_TpDisconnect status channel return(%d)")
TRC_MSG(BPP_TPDISCONNECT_JOBCHNL_RETURN, "[BPP]GOEP_TpDisconnect job channel return(%d)")
TRC_MSG(BPP_DISCONNECT_PRINTER_RETURN, "[BPP] bpp_disconnect_printer return(%d)")
TRC_MSG(BPP_CONNECT_STATUS_CHANNEL, "[BPP]bpp_connect_status_channel...")
TRC_MSG(BPP_WAIT_FOR_STSCHNL_DISCONNECTED, "[BPP] WAIT for status channel disconnected!")
TRC_MSG(BPP_STSCHNL_GETEVENT_FINISH, "[BPP]status channel: job status: completed or aborted, call GOEP_ClientAbort(). evt=%d,sts_state=%d")
TRC_MSG(BPP_CREATEJOBEND_STATE_ERROR, "[BPP]!!!bpp_create_job_end: but status_channel->state =(%d)")
TRC_MSG(BPP_START_GET_EVENT, "[BPP]bpp_get_event...")
TRC_MSG(BPP_EMBED_OBJECT_INTO_XHTML, "[BPP]bpp_embed_object_into_xhtml, raw type=(%d)")
TRC_MSG(BPP_COMPOSE_XHTML_FAILED, "[BPP]bpp_compose_object_into_xhtml FAILED, ret=%d")
TRC_MSG(BPP_EXEC_GET_PRINTER_ATTR, "[BPP]bpp_exec_get_printer_attributes: attr_bitmask=0x%x, printer=0x%x, printer state=(%d)")
TRC_MSG(BPP_ENTRY_EXEC_PRINT_OBJECT, "[BPP]bpp_exec_print_object:model=%d,mime=%d,objsize=%d,printer state=(%d)")
TRC_MSG(BPP_PRINTER_CAPA_GOTTEN_RETURN, "[BPP]bpp_printer_capability_gotten return:%d")
TRC_MSG(BPP_PRINTER_SUPPORT_MIMETYPE, "[BPP]printer SUPPORT doc type:(%d)")
TRC_MSG(BPP_PRINTER_NOT_SUPPORT_MIMETYPE, "[BPP]printer does NOT SUPPORT doc type:(%d)!")
TRC_MSG(BPP_GET_PRINTER_ATTR_END, "[BPP]bpp_get_printer_attr_end!")
TRC_MSG(BPP_PRE_PROCESS_OBJECT_DATA, "[BPP]bpp_pre_process_object_data...")
TRC_MSG(BPP_PRE_PROCESS_OBJECT_DATA_RETURN, "[BPP]bpp_pre_process_object_data return(%d)")
TRC_MSG(BPP_COMPOSE_VCARD2XHTML, "[BPP]bpp_compose_vcard_to_xhtml...")
TRC_MSG(BPP_PARSE_VCARD_FILE2STRUCT_RETURN, "[BPP]btmtk_vcard_parse_file_to_struct return (%d)")
TRC_MSG(BPP_IS_UTF8_TEXT_RETURN, "[BPP]bpp_is_file_utf8_encoding return (%d)")
TRC_MSG(BPP_GET_FILE_CHARSET_RETURN, "[BPP]btmtk_chset_get_file_encoding return(%d)")
TRC_MSG(BPP_CONVERT_FILE_TO_UTF8, "[BPP]bpp_convert_filecontent_to_utf8...")
TRC_MSG(BPP_CONVERT_TO_UTF8_RETURN, "[BPP]btmtk_chset_set_file_encoding return(%d)")
TRC_MSG(BPP_PRE_PRECESS_OBJECTDATA_FAILED, "[BPP]bpp_pre_process_object_data FAILED(%d)!")

/* BPP TRACE END */

/* HFG & HSG TRACE START */
TRC_MSG(BT_HFG_API_INIT, "[HFG][API] hfg_init")
TRC_MSG(BT_HFG_API_REGISTER, "[HFG][API] hfg_register(0x%X, 0x%X, %d)")
TRC_MSG(BT_HFG_API_DEREGISTER, "[HFG][API] hfg_deregister(0x%X)")
TRC_MSG(BT_HFG_API_CREATE_SERVICE_LINK, "[HFG][API] hfg_create_service_link(0x%X, 0x%02X%02X%02X%02X%02X%02X)")
TRC_MSG(BT_HFG_API_DISCONNECT_SERVICE_LINK, "[HFG][API] hfg_disconnect_service_link(0x%X) : state=%MHfgSubStateType")
TRC_MSG(BT_HFG_API_CREATE_AUDIO_LINK, "[HFG][API] hfg_create_audio_link(0x%X) : state=%MHfgSubStateType, IsAudioUp=%d")
TRC_MSG(BT_HFG_API_DISCONNECT_AUDIO_LINK, "[HFG][API] hfg_disconnect_audio_link(0x%X) : state=%MHfgSubStateType, IsAudioUp=%d")
TRC_MSG(BT_HFG_API_ACCEPT_CONNECT, "[HFG][API] hfg_accept_connect(0x%X)")
TRC_MSG(BT_HFG_API_REJECT_CONNECT, "[HFG][API] hfg_reject_connect(0x%X)")
TRC_MSG(BT_HFG_API_SET_INDICATOR, "[HFG][API] hfg_set_indicator_value(0x%X, %d, %d, 0x%X) : bHeadset=%d")
TRC_MSG(BT_HFG_API_SEND_RESULT, "[HFG][API] hfg_send_hf_results(0x%X, %d, %d, %d, 0x%X, %d)")
TRC_MSG(BT_HFG_API_ENABLE_SNIFF_MODE, "[HFG][API] hfg_enable_sniff_mode(0x%X, %d)")
TRC_MSG(BT_HFG_CBK_SDP_QUERY, "[HFG][CBK] hfgQueryCallback(0x%X, %d, %d, 0x%X)")
TRC_MSG(BT_HFG_CBK_CMGR_CALLBACK, "[HFG][CBK] HfgServiceConnectionCallback : Channel=0x%X, event=%d, status=%d")
TRC_MSG(BT_HFG_CBK_RF_CALLBACK, "[HFG][CBK] HfgRfCallback : Channel=0x%X, event=%d, status=%d")
TRC_MSG(BT_HFG_INFO_SDP_QUERY_COMPLETE, "[HFG][INFO] SDP query complete. Channel no=%d")
TRC_MSG(BT_HFG_REGISTER_HFG_SUCCESS, "[HFG][INFO] hfg_register success : Channel=0x%X")
TRC_MSG(BT_HFG_INFO_REGISTER_SDP, "[HFG][INFO] HfgRegisterSdpServices(%d)")
TRC_MSG(BT_HFG_INFO_DEREGISTER_SDP, "[HFG][INFO] HfgDeregisterSdpServices(%d)")
TRC_MSG(BT_HFG_INFO_REGISTER_SERVER_CHANNEL, "[HFG][INFO] HfgRegisterServerChannel(0x%X)")
TRC_MSG(BT_HFG_INFO_DEREGISTER_SERVER_CHANNEL, "[HFG][INFO] HfgDeregisterServerChannel(0x%X)")
TRC_MSG(BT_HFG_INFO_OPEN_ACL_CHANNEL, "[HFG][INFO] HfgOpenChannel(0x%X, 0x%02X%02X%02X%02X%02X%02X)")
TRC_MSG(BT_HFG_INFO_OPEN_ACL_CHANNEL_SUCCESS, "[HFG][INFO] CMGR_CreateDataLink return SUCCESS (ACL is already created in stack)")
TRC_MSG(BT_HFG_INFO_CLOSE_ACL_CHANNEL, "[HFG][INFO] HfgCloseChannel(0x%X)")
TRC_MSG(BT_HFG_INFO_START_SERVICE_QUERY, "[HFG][INFO] HfgStartServiceQuery(0x%X, %d) : bHeadset=%d")
TRC_MSG(BT_HFG_INFO_AUDIO_EXIST, "[HFG][INFO] Audio connection already exists")
TRC_MSG(BT_HFG_INFO_NO_AUDIO_CONNECTION, "[HFG][INFO] No audio connection exist")
TRC_MSG(BT_HFG_INFO_AUDIO_CONENCTING, "[HFG][INFO] Connecting audio is on going")
TRC_MSG(BT_HFG_INFO_AUDIO_DISCONENCTING, "[HFG][INFO] Disconnecting audio is on going")
TRC_MSG(BT_HFG_INFO_CALLBACK_TO_ADP, "[HFG][INFO] HfgAppCallback(0x%X, %d, %d, %d)")
TRC_MSG(BT_HFG_INFO_CHANGE_STATE, "[HFG][INFO] Change state from %MHfgSubStateType to %MHfgSubStateType")
TRC_MSG(BT_HFG_INFO_SEND_RESULT, "[HFG][INFO] sendResults(0x%X, 0x%X) : CMD=0x%X")
TRC_MSG(BT_HFG_INFO_AT_SEND_RESULT, "[HFG][INFO] AtSendResults(0x%X, 0x%X, %d) : CMD=0x%X")
TRC_MSG(BT_HFG_INFO_AT_SEND_COMPLETE, "[HFG][INFO] AtSendComplete(0x%X, 0x%X)")
TRC_MSG(BT_HFG_INFO_AT_SEND_REMAIN_DATA, "[HFG][INFO] Send remain data : remain=%d")
TRC_MSG(BT_HFG_INFO_RESPONSE_QUEUE_EMPTY, "[HFG][INFO] Response queue is empty")
TRC_MSG(BT_HFG_INFO_RESPONSE_QUEUE_NOT_EMPTY, "[HFG][INFO] Response queue is not empty")
TRC_MSG(BT_HFG_INFO_SEND_RF_PACKET, "[HFG][INFO] AtSendRfPacket(0x%X, 0x%X)")
TRC_MSG(BT_HFG_INFO_PARSE_COMMAND, "[HFG][INFO] AtParseCommand(0x%X, 0x%X, %d, 0x%X)")
TRC_MSG(BT_HFG_INFO_AT_DECODE_CONTINUE, "[HFG][INFO] AT ecode state is set to continue")
TRC_MSG(BT_HFG_INFO_RF_PACKET, "[HFG][INFO] Rf Packet : len=%d, data=%s")
TRC_MSG(BT_HFG_INFO_FLUSH_RESPONSE, "[HFG][INFO] HfgHfgFlushRespQueue(0x%X)")
TRC_MSG(BT_HFG_INFO_DISCONNECTING, "[HFG][INFO] HfgDisconnecting(0x%X) : state=0x%X")
TRC_MSG(BT_HFG_INFO_DISCONNECTING_SDP, "[HFG][INFO] SDP query ongoing")
TRC_MSG(BT_HFG_INFO_DISCONNECTING_SCO_CONNECT, "[HFG][INFO] SCO connecting ongoing")
TRC_MSG(BT_HFG_INFO_DISCONNECTING_SCO_DISCONNECT, "[HFG][INFO] SCO disconnecting ongoing")
TRC_MSG(BT_HFG_INFO_DISCONNECTING_RFCOMM_CONFIRM, "[HFG][INFO] Waiting RFCOMM confirm")
TRC_MSG(BT_HFG_INFO_DISCONNECTING_CMGR_CONFIRM, "[HFG][INFO] Waiting CMGR data link confirm")
TRC_MSG(BT_HFG_INFO_DISCONNECTING_REMOVE_AUDIO, "[HFG][INFO] Remove audio link : %d")
TRC_MSG(BT_HFG_INFO_DISCONNECTING_DEREGISTER_SCO, "[HFG][INFO] Deregister SCO handler")
TRC_MSG(BT_HFG_INFO_DISCONNECTING_CLOSE_RF, "[HFG][INFO] Close RFCOMM channel : %d")
TRC_MSG(BT_HFG_INFO_ALLOC_RF_CHANNEL, "[HFG][INFO] HfgAllocRfChannel()")
TRC_MSG(BT_HFG_INFO_FREE_RF_CHANNEL, "[HFG][INFO] HfgFreeRfChannel(0x%X)")
TRC_MSG(BT_HFG_INFO_CHANNEL_STATE, "[HFG][INFO] state=%MHfgSubStateType, linkFlags=0x%X, flags=0x%X, queryFlags=0x%X")
TRC_MSG(BT_HFG_INFO_CONNECT_TIMER_CANCELED, "[HFG][INFO] HFG connection timer canceled")
TRC_MSG(BT_HFG_INFO_CREATE_AUDIO_CHANNEL, "[HFG][INFO] Create Audio channel : %d, codec : %MHfgCodec")
TRC_MSG(BT_HFG_INFO_CODEC_USED, "[HFG][INFO] codecUsed=%MHfgCodec")
TRC_MSG(BT_HFG_INFO_CODEC_STATE, "[HFG][INFO] codecState=%MHfgCodecStateType, codecSelected=%MHfgCodec, targetCodec=%MHfgCodec")
TRC_MSG(BT_HFG_INFO_SET_CODECSELECTED, "[HFG][INFO] set codecSelected to %MHfgCodec")
TRC_MSG(BT_HFG_INFO_SET_TARGETCODEC, "[HFG][INFO] set targetCodec to %MHfgCodec")
TRC_MSG(BT_HFG_INFO_ADD_AVAILCODEC, "[HFG][INFO] Add AvailCodec %MHfgCodec")
TRC_MSG(BT_HFG_WARN_WRONG_CLASS_ID, "[HFG][WARN] Wrong class id : correct=0x%X, wrong=0x%X")
TRC_MSG(BT_HFG_WARN, "[HFG][WARN] file=%d, line=%d")
TRC_MSG(BT_HFG_WARN_1, "[HFG][WARN] file=%d, line=%d, p1=%d")
TRC_MSG(BT_HFG_WARN_CHANNEL_NOT_REGISTERED, "[HFG][WARN] Channel not registered : Channel=0x%X")
TRC_MSG(BT_HFG_WARN_CHANNEL_ALREADY_REGISTERED, "[HFG][WARN] Channel already registered : Channel=0x%X")
TRC_MSG(BT_HFG_WARN_NO_CONNECTION, "[HFG][WARN] No connection : Channel=0x%X")
TRC_MSG(BT_HFG_WARN_REJECT_CHANNEL_FAIL, "[HFG][WARN] RF_RejectChannel failed : status=%d")
TRC_MSG(BT_HFG_WARN_ACCEPT_CHANNEL_FAIL, "[HFG][WARN] RF_AcceptChannel failed : status=%d")
TRC_MSG(BT_HFG_WARN_OPEN_CHANNEL_FAIL, "[HFG][WARN] RF_OpenClientChannel failed : status=%d")
TRC_MSG(BT_HFG_WARN_INVALID_INDICATOR_VAL, "[HFG][WARN] Invalid indicator value : ind=%d, min=%d, max=%d, value=%d")
TRC_MSG(BT_HFG_WARN_INDICATOR_REPORT_DISABLED, "[HFG][WARN] Indicator report is disabled")
TRC_MSG(BT_HFG_WARN_INVALID_INDICATOR, "[HFG][WARN] Invalid indicator : %d")
TRC_MSG(BT_HFG_WARN_RESPONSE_ALREADY_QUEUED, "[HFG][WARN] Response already queued : response=0x%X")
TRC_MSG(BT_HFG_WARN_SEND_RF_PACKET_FAILED, "[HFG][WARN] RF_SendData failed : status=%d")
TRC_MSG(BT_HFG_WARN_ME_ENCODE_FAIL, "[HFG][WARN] ME_Encode failed : status=%d")
TRC_MSG(BT_HFG_WARN_ME_DECODE_FAIL, "[HFG][WARN] ME_Decode failed : status=%d")
TRC_MSG(BT_HFG_WARN_UNRECOGNIZED_SDP_ATTR, "[HFG][WARN] Unrecognized SDP attribute : %d")
TRC_MSG(BT_HFG_ERROR_UNEXPECTED_STATE, "[HFG][ERR] Unexpected state : file=%d, line=%d, Channel=0x%X, state=0x%X")
TRC_MSG(BT_HFG_ERROR, "[HFG][ERR] file=%d, line=%d")
TRC_MSG(BT_HFG_ERROR_1, "[HFG][ERR] file=%d, line=%d, p1=%d")
TRC_MSG(BT_HFG_ERROR_NO_FREE_RESPONSE, "[HFG][ERR] HfgAllocResponse : Run out of free response slot")
TRC_MSG(BT_HFG_ERROR_INSERT_FREE_RESPONSE, "[HFG][ERR] HfgAllocResponse : Insert response already in the free response queue")
TRC_MSG(BT_HFG_CIEV_REQ, "=====[BTAP][BT_HFG_CIEV_REQ]===== indication: %d, value: %d, cid: %d")
TRC_MSG(BT_HFG_RING_REQ, "=====[BTAP][BT_HFG_RING_REQ]===== aNoLen: %d")
TRC_MSG(BT_HFG_REJECT_IND, "=====[BTAP][BT_HFG_REJECT_IND]=====")
TRC_MSG(BT_HFG_ANSWER_IND, "=====[BTAP][BT_HFG_ANSWER_IND]=====")
TRC_MSG(BT_HFG_AT_CMD_IND, "=====[BTAP][BT_HFG_AT_CMD_IND]=====")
TRC_MSG(BT_HFG_CHLD_IND, "=====[BTAP][BT_HFG_CHLD_IND]=====")
/* HFG ADP */
TRC_MSG(BT_HFG_ADP_STATUS, "[HFP_ADP] hfg status: hfg_state=%d, hsg_state=%d, hfg_active=%d, hsg_active=%d, sco_exist=%d")
TRC_MSG(BT_HFG_ADP_STATE_CHANGE_IND, "[HFP_ADP] hfg state change: %d --> %d")
TRC_MSG(BT_HFG_ADP_ACTIVATE_TIMEOUT_HDLER, "[HFP_ADP] hfg activate_timeout_hdler")
TRC_MSG(BT_HFG_ADP_DEACTIVATE_TIMEOUT_HDLER, "[HFP_ADP] hfg deactivate_timeout_hdler")
TRC_MSG(BT_HFG_ADP_CONNECT_TIMEOUT_HDLER, "[HFP_ADP] hfg connect_timeout_hdler")
TRC_MSG(BT_HFG_ADP_DISCONNECT_TIMEOUT_HDLER, "[HFP_ADP] hfg disconnect_timeout_hdler")
TRC_MSG(BT_HFG_ADP_SCO_CONNECT_TIMEOUT_HDLER, "[HFP_ADP] sco_connect_timeout_hdler")
TRC_MSG(BT_HFG_ADP_SCO_DISCONNECT_TIMEOUT_HDLER, "[HFP_ADP] sco_disconnect_timeout_hdler")
TRC_MSG(BT_HFG_ADP_START_TIMER, "[HFP_ADP] start timer, timer_id=%d, timer_duration=%d")
TRC_MSG(BT_HFG_ADP_STOP_TIMER, "[HFP_ADP] stop timer, timer_id=%d")
TRC_MSG(BT_HFG_ADP_HFP_VERSION, "[HFP_ADP] hfg version: hfp version=0x%04x")
TRC_MSG(BT_HFG_ADP_HFP_CONNECT_CNF_ACCEPT, "[HFP_ADP] hfga_connect_accept_confirmation_accept: hfp channel=0x%x, rfc channel=0x%x")
TRC_MSG(BT_HFG_ADP_HFP_CONNECT_CNF_REJECT, "[HFP_ADP] hfga_connect_accept_confirmation_reject: rfc channel=0x%x")
TRC_MSG(BT_HFG_ADP_HFP_REJECT_RFC_ALC_FAILED, "[HFP_ADP] Reject RFCOMM open indication: rfc channel=0x%x, create data link failed")
TRC_MSG(BT_HFG_ADP_HFP_REJECT_RFC_GET_HFG_CH_FAILED, "[HFP_ADP] Reject RFCOMM open indication: rfc channel=0x%x, get closed hfp channel failed")
TRC_MSG(BT_HFG_ADP_HFP_REJECT_RFC_SCO_REG_FAILED, "[HFP_ADP] Reject RFCOMM open indication: rfc channel=0x%x, register sco handler failed")
TRC_MSG(BT_HFG_ADP_HFP_CHANNEL_STATE, "[HFP_ADP] HFP channel state: hfp channel=0x%x, state=%d")
TRC_MSG(BT_HFG_ADP_HFP_STORE_REMOTE_DEV, "[HFP_ADP] Store remote device: remote device, nap=0x%04x, uap=0x%02x, lap=0x%06x,")
TRC_MSG(BT_HFG_ADP_HFP_RESET_REMOTE_DEV, "[HFP_ADP] Reset remote device")
TRC_MSG(BT_HFG_ADP_HFP_REACH_MAX_QUEUED_BUFFER_SIZE, "[HFP_ADP] Reach max queued buffer size, disconnect HFP")
TRC_MSG(BT_HFG_ADP_HFP_FREE_QUEUED_BUFFER, "[HFP_ADP] free queued buffer, buffer=%x")
TRC_MSG(BT_HFG_ADP_HFP_FREE_ALL_QUEUED_BUFFER, "[HFP_ADP] free all queue buffer, queued buffer size=%d")
TRC_MSG(BT_HFG_ADP_HFP_RESET_QUEUED_BUFFER, "[HFP_ADP] reset queue buffer, reset buffer=%x, queued buffer size=%d")
TRC_MSG(BT_HFG_ADP_HFP_STORE_RFCOMM_CHANNEL, "[HFP_ADP] hfga_store_rf_channel, rfChannel=%x")
TRC_MSG(BT_HFG_ADP_HFP_CLOSE_CHANNEL, "[HFP_ADP] HfgCloseChannel Channel=%x, Channel->state=%x")
TRC_MSG(BT_HFG_ADP_HFP_FIND_CHANNEL, "[HFP_ADP] HfgFindChannel hfgChannel=%x")
TRC_MSG(BT_HFG_ADP_HFP_GET_CLOSED_CHANNEL, "[HFP_ADP] HfgGetClosedChannel hfgChannel=%x")
TRC_MSG(BT_HFG_ADP_HFP_ALLOC_RF_CHANNEL, "[HFP_ADP] HfgAllocRfChannel rfChannel=%x")
TRC_MSG(BT_HFG_ADP_HFP_FREE_RF_CHANNEL, "[HFP_ADP] HfgFreeRfChannel rfChannel=%x")
TRC_MSG(BT_HFG_ADP_HFP_RF_ACCEPT_CHANNEL, "[HFP_ADP] RF_AcceptChannel status=%x")
TRC_MSG(BT_HFG_ADP_HFP_REGISTER_RF_SER_CHANNEL, "[HFP_ADP] RF_RegisterServerChannel, rfChannel=%x")
TRC_MSG(BT_HFG_ADP_HFP_DEREGISTER_RF_SER_CHANNEL, "[HFP_ADP] RF_DeregisterServerChannel, rfChannel=%x")
TRC_MSG(BT_HFG_ADP_HFP_RF_CALLBACK, "[HFP_ADP] HfgRfCallback, event=%d, rfChannel=%x")
TRC_MSG(BT_HFG_ADP_HFP_SEQ1, "[HFP_ADP] Seq1 =0x%02x, 0x%02x, 0x%02x, 0x%02x, 0x%02x, 0x%02x, 0x%02x, 0x%02x, 0x%02x, 0x%02x, 0x%02x, 0x%02x, 0x%02x, 0x%02x, 0x%02x, 0x%02x")
TRC_MSG(BT_HFG_ADP_HFP_SEQ2, "[HFP_ADP] Seq2 =0x%02x, 0x%02x, 0x%02x, 0x%02x, 0x%02x, 0x%02x, 0x%02x, 0x%02x, 0x%02x, 0x%02x, 0x%02x, 0x%02x, 0x%02x, 0x%02x, 0x%02x, 0x%02x")
TRC_MSG(BT_HFG_ADP_HFP_VERNO, "[HFP_ADP] verno, verno=%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c")
TRC_MSG(BT_HFG_ADP_HFP_RAND_NUM, "[HFP_ADP] rand number, rand=0x%08x")
TRC_MSG(BT_HFG_ADP_HFP_CONNECT_SCO, "[HFP_ADP] HFG_CreateAudioLink, status=%d")
TRC_MSG(BT_HFG_ADP_HFP_DISCONNECT_SCO, "[HFP_ADP] HFG_DisconnectAudioLink, status=%d")
TRC_MSG(BT_HFG_ADP_HFP_SPK_REQ, "[HFP_ADP] : hfga speaker volume req, result=%d, cnf result=%d, gain=%d")
TRC_MSG(BT_HFG_ADP_HFP_SPK_SENT, "hfga_tx: +VGS:%d")
TRC_MSG(BT_HFG_ADP_HFP_SPK_RCV, "hfga_rx: AT+VGS=%d")
TRC_MSG(BT_HFG_ADP_HFP_OK_SENT, "hfga_tx: OK")
TRC_MSG(BT_HFG_ADP_HFP_MIC_REQ, "[HFP_ADP] : hfga mic volume req, result=%d, cnf result=%d, gain=%d")
TRC_MSG(BT_HFG_ADP_HFP_MIC_SENT, "hfga_tx: +VGM:%d")
TRC_MSG(BT_HFG_ADP_HFP_MIC_RCV, "hfga_rx: AT+VGM=%d")
TRC_MSG(BT_HFG_ADP_SPK_GAIN_REQ, "[HFP_ADP]HFG speaker_gain_req_hdler: msg_p->gain=%d, hfga_cntx_p->spk_gain=%d ")
TRC_MSG(BT_HFG_ADP_HFP_RX, "[HFP_ADP]hfga_rx: %s")
TRC_MSG(BT_HFG_ADP_HFP_TX, "[HFP_ADP]hfga_tx: %s")
TRC_MSG(BT_HFG_SDPCALLBACK_ALLOC_CHANNEL, "hfgQueryCallback Channel->hfgChannel=%x")
TRC_MSG(BT_HFG_CMGR_CALLBACK, "[HFG] HfgServiceConnectionCallback, event = %d, status=%d")
TRC_MSG(BT_HFG_SDPQUERY_CALLBACK, "[HFG] SDP query callback, result=%d")
TRC_MSG(BT_HFG_START_SDPQUERY, "[HFG] Start SDP query...")
TRC_MSG(BT_HFG_CREATE_ACL_LINK, "[HFG] HfgCreateAclLink...")
TRC_MSG(BT_HFG_CREATE_SERVICE_LINK, "[HFG] HFG_CreateServiceLink...")
TRC_MSG(BT_HFG_CREATE_AUDIO_LINK, "[HFG] HFG_CreateAudioLink...")
TRC_MSG(BT_HFG_DISCONNECT_AUDIO_LINK, "[HFG] HFG_DisconnectAudioLink...")
TRC_MSG(BT_HFG_DISCONNECT_SERVICE_LINK, "[HFG] HFG_DisconnectServiceLink...state=%d,linkFlags=%d")
TRC_MSG(BT_HFG_SUPPORT_ESCO_RETURN, "[HFG]hfga_is_profile_support_esco return (%d)")
TRC_MSG(BT_HFG_CALL_CMGR_CREATEAUDIOLINK, "[HFG] call CMGR_CreateAudioLink...")
TRC_MSG(BT_HFG_WAITFOR_SCO_CON_TO_CLOSE_DATALINK, "[HFG]SCO is CONNECTING, set flag,wait for AUDIO_LINK_CON to close data link")
TRC_MSG(BT_HFG_SCO_CON_COME_SO_CLOSE_DATALINK, "[HFG]AUDIO_LINK_CON(which is being waiting) comes, so close data link.")
TRC_MSG(BT_HFG_CLOSE_DATALINK, "[HFG]HfgCloseDataLink...")
TRC_MSG(BT_HFG_DEFERED_DEREGISTERATION, "[HFG][ADP] Defered deregistration channel=0x%x")
TRC_MSG(BT_HFG_DEFER_DEREGISTERATION, "[HFG] State is not closed, defer deregisteration : channel=0x%x, state=%x")
TRC_MSG(BT_HFG_SDPQUERY_PRECALLBACK, "[HFG] SDP query precallback : attrib_index=%d, result=%d")
TRC_MSG(BT_HFG_SDPQUERY_HF_RECORD_FOUND, "[HFG] SDP query : HF record found, idx=%d result=%d")
TRC_MSG(BT_HFG_SDPQUERY_HF_ATTRIB_FOUND, "[HFG] SDP query : attrib found status=%d, result=%d")

/* HSG ADP */
TRC_MSG(BT_HSG_ADP_STATE_CHANGE_IND, "[HSP_ADP] hsg state change: %d --> %d")
TRC_MSG(BT_HSG_ADP_ACTIVATE_TIMEOUT_HDLER, "[HSP_ADP] hsg activate_timeout_hdler")
TRC_MSG(BT_HSG_ADP_DEACTIVATE_TIMEOUT_HDLER, "[HSP_ADP] hsg deactivate_timeout_hdler")
TRC_MSG(BT_HSG_ADP_CONNECT_TIMEOUT_HDLER, "[HSP_ADP] hsg connect_timeout_hdler")
TRC_MSG(BT_HSG_ADP_DISCONNECT_TIMEOUT_HDLER, "[HSP_ADP] hsg disconnect_timeout_hdler")
TRC_MSG(BT_HSG_ADP_START_TIMER, "[HSP_ADP] start timer, timer_id=%d, timer_duration=%d")
TRC_MSG(BT_HSG_ADP_STOP_TIMER, "[HSP_ADP] stop timer, timer_id=%d")
TRC_MSG(BT_HSG_ADP_HSP_STORE_REMOTE_DEV, "[HSP_ADP] Store remote device: remote device, nap=0x%04x, uap=0x%02x, lap=0x%06x,")
TRC_MSG(BT_HSG_ADP_HSP_RESET_REMOTE_DEV, "[HSP_ADP] Reset remote device")
TRC_MSG(BT_HSG_ADP_HSP_SPK_REQ, "[HSP_ADP] : hsga speaker volume req, result=%d, cnf result=%d, gain=%d")
TRC_MSG(BT_HSG_ADP_HSP_SPK_SENT, "hsga_tx: +VGS:%d")
TRC_MSG(BT_HSG_ADP_HSP_SPK_RCV, "hsga_rx: AT+VGS=%d")
TRC_MSG(BT_HSG_ADP_HSP_OK_SENT, "hsga_tx: OK")
TRC_MSG(BT_HSG_ADP_HSP_MIC_REQ, "[HSP_ADP] : hsga mic volume req, result=%d, cnf result=%d, gain=%d")
TRC_MSG(BT_HSG_ADP_HSP_MIC_SENT, "hsga_tx: +VGM:%d")
TRC_MSG(BT_HSG_ADP_HSP_MIC_RCV, "hsga_rx: AT+VGM=%d")
TRC_MSG(BT_HSG_ADP_HSP_TX, "[HSG]hsga_tx: %s")
TRC_MSG(BT_HSG_SET_CONNECTLEVEL, "[HSG]AG: ConnectLevel %d to %d")
TRC_MSG(BT_HSG_RECEIVE_INVALID_DATA, "[HSG]AG: invalid data (%s) received (len: %d)")
TRC_MSG(BT_HSG_CMGR_CALLBACK, "[HSG]AG: AgServiceConnectionCallback, event=%d, status=%d")
TRC_MSG(BT_HSG_SDPQUERY_CALLBACK, "[HSG] SDP query callback, result=%d")
TRC_MSG(BT_HSG_START_SDPQUERY, "[HSG] Start SDP query...")
TRC_MSG(BT_HSG_RFCOMM_CALLBACK, "[HSG] RFCOMM callback, event=%d, Channel=%x")
TRC_MSG(BT_HSG_SEND_DATA, "[HSG]Send Data: len=%d, data=%s")
TRC_MSG(BT_HSG_DO_CONNECT, "[HSG] AG_DoConnect...state=%d, ConnectLevel=%d")
TRC_MSG(BT_HSG_DO_DISCONNECT, "[HSG] AG_DoDisconnect...state=%d, ConnectLevel=%d")

TRC_MSG(HFG_RFCOMM_INCOMING_HANDSFREE_CONNECTION, "HFG: RFCOMM incoming hands-free connection")
TRC_MSG(HF_RFCOMM_HANDSFREE_CONNECTION_CLOSED, "HF: RFCOMM hands-free connection closed")
TRC_MSG(HF_UNABLE_TO_SEND_RFCOMM_PACKET, "HF: Unable to send RFCOMM packet")
TRC_MSG(HFG_UNABLE_TO_SEND_RFCOMM_PACKET, "HFG: Unable to send RFCOMM packet")
TRC_MSG(HFG_RFCOMM_HANDSFREE_CONNECTION_ESTABLISHED, "HFG: RFCOMM hands-free connection established")
TRC_MSG(HFG_RFCOMM_HANDSFREE_CONNECTION_CLOSED, "HFG: RFCOMM hands-free connection closed")
TRC_MSG(HFG_SDP_QUERY_FAILED, "HFG: SDP Query failed")
TRC_MSG(HF_RFCOMM_HANDSFREE_CONNECTION_ESTABLISHED, "HF: RFCOMM hands-free connection established")
TRC_MSG(HF_RFCOMM_INCOMING_HANDSFREE_CONNECTION, "HF: RFCOMM incoming hands-free connection")
TRC_MSG(HF_RFCOMM_HANDSFREE_DATA_RECEIVED, "HF: RFCOMM hands-free data received")
TRC_MSG(HFG_RFCOMM_HANDSFREE_DATA_RECEIVED, "HFG: RFCOMM hands-free data received")
TRC_MSG(HFG_COULD_NOT_OPEN_RFCOMM_CHANNEL, "HFG: Could not open RFCOMM channel")
TRC_MSG(AG_BTEVENT_SCO_DISCONNECT_RECEIVED, "AG: BTEVENT_SCO_DISCONNECT received")
TRC_MSG(AGCREATEACLLINK_CMGR_CREATEDATALINK, "AgCreateAclLink CMGR_CreateDataLink")
TRC_MSG(AG_RFC_UNKNOWN_EVENT_xI, "AG: RFC Unknown event: %i")
TRC_MSG(HS_COULD_NOT_BRING_DEVICE_OUT_OF_PARK_MODE, "HS: Could not bring device out of Park Mode.")
TRC_MSG(HS_SECURITY_MODE_3_COMPLETE, "HS: Security Mode 3 Complete.")
TRC_MSG(AG_CONNECTLEVEL_AG_RFCOMMOPEN_DISCONNECTING, "AG: ConnectLevel: AG_RFCOMMOPEN (disconnecting)")
TRC_MSG(AG_RF_OPENCLIENTCHANNEL_FAILED, "AG: RF_OpenClientChannel failed!!")
TRC_MSG(HS_PAIRING_FAILED, "HS: Pairing failed")
TRC_MSG(AG_RADIO_IS_DOWN, "AG: Radio is down")
TRC_MSG(HS_ERROR_MESSAGE_RECEIVED, "HS: ERROR message received")
TRC_MSG(AG_AUDIO_SCO_DISONNECT_REQUEST_FAILED_xD, "AG: Audio: SCO disonnect request failed. %d")
TRC_MSG(AG_RFEVENT_CLOSED_RECEIVED, "AG: RFEVENT_CLOSED received")
TRC_MSG(AG_CLOSING_RFCOMM, "AG: Closing RFCOMM")
TRC_MSG(HS_RFCOMM_CHANNEL_FAILED_TO_OPEN_ABORTING_CONNECTION, "HS: RFCOMM Channel failed to open, aborting connection")
TRC_MSG(AG_CLOSING_ACL, "AG: Closing ACL")
TRC_MSG(AG_SCO_CONNECT_HAD_AN_ERROR, "AG: SCO connect had an error!!")
TRC_MSG(AG_SCO_CONNECT_PENDING, "AG: SCO connect pending.")
TRC_MSG(AG_LINK_DISCONNECT_FAILED_ERROR__xI, "AG: Link Disconnect failed. Error = %i")
TRC_MSG(HS_LINK_DISCONNECT_FAILED_ERROR__xI, "HS: Link Disconnect failed. Error = %i")
TRC_MSG(AG_CLOSING_SCO, "AG: closing sco")
TRC_MSG(HS_ACL_LINK_DISCONNECTED, "HS: ACL link Disconnected.")
TRC_MSG(HS_SCO_DISCONNECTED, "HS: SCO Disconnected.")
TRC_MSG(ATCKPD200_RECEIVED, "AT+CKPD=200 received")
TRC_MSG(HS_HCI_INITIALIZATION_FAILED, "HS: HCI Initialization FAILED")
TRC_MSG(HSP_TO_HEADSET_SUCCESS, "HSP to headset success")
TRC_MSG(HS_PIN_REQUEST_RECEIVED, "HS: PIN Request Received.")
TRC_MSG(ERROR_DELETING_RECORD, "Error deleting record")
TRC_MSG(HSP_SDP_QUERY_FAILED, "HSP: SDP Query Failed")
TRC_MSG(AG_AGCONNECTLEVEL__AG_ACLOPEN, "AG: AG(ConnectLevel) = AG_ACLOPEN")
TRC_MSG(HS_SCO_CONNECT_ERROR_IND_xD, "HS: SCO connect error (ind) %d")
TRC_MSG(HS_SDP_QUERY_FAILED_TO_START_ABORTING_CONNECTION, "HS: SDP query failed to start, aborting connection")
TRC_MSG(HS_SDP_PARSEATTRIBUTES_SUCCEEDED_RFCOMM_CHANNEL__xDUPDATED_BUFF_LEN__xD, "HS: SDP_ParseAttributes succeeded! RFCOMM Channel = %d,Updated Buff Len = %d")
TRC_MSG(AG_ACL_LINK_CONNECT_FAILED, "AG: ACL link connect failed!")
TRC_MSG(HS_SDP_PARSEATTRIBUTES__FAILURE, "HS: SDP_ParseAttributes - Failure!")
TRC_MSG(AG_AUDIO_SCO_CONNECT_REQUEST_FAILED_xD, "AG: Audio: SCO connect request failed. %d")
TRC_MSG(HS_INCOMING_CALL, "HS: Incoming Call...")
TRC_MSG(AG_ACLOPEN__FALSE, "AG: AclOpen == FALSE")
TRC_MSG(HS_HEADSET_DEINITIALIZED, "HS: Headset Deinitialized")
TRC_MSG(AG_DEINITIALIZED, "AG: Deinitialized")
TRC_MSG(HS_SDP_PARSEATTRIBUTES__CONTINUATION_STATE_QUERY_AGAIN, "HS: SDP_ParseAttributes - Continuation State. Query Again!")
TRC_MSG(AG_COULD_NOT_BRING_DEVICE_OUT_OF_PARK_MODE, "AG: Could not bring device out of Park Mode.")
TRC_MSG(HS_SETTING_GENERAL_ACCESSIBLE_MODE, "HS: Setting General Accessible mode.")
TRC_MSG(HS_HEADSET_OUTBOUND_LINK_FAILED, "HS: Headset: Outbound Link Failed.")
TRC_MSG(DELETING_OLD_DEVICE_RECORD, "Deleting old device record")
TRC_MSG(AG_CONNECTLEVEL_AG_SCOOPEN, "AG: ConnectLevel: AG_SCOOPEN")
TRC_MSG(HS_HEADSET_SDP_QUERY_FAILED, "HS: Headset: SDP Query Failed")
TRC_MSG(HS_UNKNOWN_RFCOMM_EVENT_xI, "HS: Unknown RFCOMM event: %i")
TRC_MSG(AG_RFCOMM_COMMAND_RECEIVED_BEFORE_A_HEADSET_HAS_BEEN_REGISTERED, "AG: RFCOMM command received before a headset has been registered")
TRC_MSG(AG_AG_BUTTONPRESSED_STARTING_MTKAGCLOSELINK, "AG: AG_ButtonPressed starting MTKAgCloseLink()")
TRC_MSG(INVALID_VOLUME_GAIN_LEVEL, "Invalid volume gain level")
TRC_MSG(AG_THE_AUDIO_GATEWAY_HAS_NOT_BEEN_INITIALIZED, "AG: The Audio Gateway has not been initialized.")
TRC_MSG(BT_HSP_FINDDEVICE_FAIL, "[HSP] DS_FindDevice return NULL! Call RF_CloseChannel...")

TRC_MSG(HFG_SERVICE_CONNECT_REQ, "HFG_EVENT_SERVICE_CONNECT_REQ")
TRC_MSG(HFG_MEMORY_DIAL, "HFG_EVENT_MEMORY_DIAL")
TRC_MSG(HFG_REPORT_MIC_VOLUME, "HFG_EVENT_REPORT_MIC_VOLUME")
TRC_MSG(HFG_LIST_CURRENT_CALLS, "HFG_EVENT_LIST_CURRENT_CALLS")
TRC_MSG(HFG_REPORT_SPK_VOLUME, "HFG_EVENT_REPORT_SPK_VOLUME")
TRC_MSG(HFG_DIAL_NUMBER, "HFG_EVENT_DIAL_NUMBER")
//TRC_MSG(GET_THE_RETURNED_HID_TRANSACTION_HANDSHAKE_PACKET,"Get the returned HID Transaction HandShake packet")
//TRC_MSG(HSINIT,"hsinit")
//TRC_MSG(NEW_STATE_AG_IDLE,"new state AG_IDLE")
TRC_MSG(HFG_HANGUP, "HFG_EVENT_HANGUP")
//TRC_MSG(SENDING_HANDSHAKE_PACKET,"Sending  HandShake packet")
//TRC_MSG(HFGA_TX_RESPONSE_BUF_ADDRxX,"hfga_tx: response buf addr=%x")
TRC_MSG(HFG_ANSWER_CALL, "HFG_EVENT_ANSWER_CALL")
//TRC_MSG(HS_OPEN_SCOL,"HS Open SCOl")
TRC_MSG(HFG_RESPONSE_COMPLETE, "HFG_EVENT_RESPONSE_COMPLETE")
TRC_MSG(HSG_MVOLUMEDOWN_REQ, "HSG_MVOLUMEDOWN_REQ")
//TRC_MSG(SETUP_HID_HANDSHACK_PAYLOAD_PACKET,"Setup HID Handshack payload packet")
TRC_MSG(HFG_AT_COMMAND_DATA, "HFG_EVENT_AT_COMMAND_DATA")
//TRC_MSG(STARTING_OUTGOING_CALL,"Starting outgoing call....")
TRC_MSG(HFG_HANDSFREE_FEATURES, "HFG_EVENT_HANDSFREE_FEATURES features=%s")
//TRC_MSG(HS_CLOSE_SCOL,"HS Close SCOl")
//TRC_MSG(NEW_STATE_AG_CONNECTED,"new state AG_CONNECTED")
TRC_MSG(HSG_CONNECT_REQ, "HSG_CONNECT_REQ")
TRC_MSG(HFG_REDIAL, "HFG_EVENT_REDIAL")
TRC_MSG(HFG_ENABLE_CALLER_ID, "HFG_EVENT_ENABLE_CALLER_ID")
TRC_MSG(HSG_DEACTIVATE_REQ, "HSG_DEACTIVATE_REQ")
TRC_MSG(HFG_SERVICE_DISCONNECTED, "HFG_EVENT_SERVICE_DISCONNECTED")
//TRC_MSG(HSMVD,"hsmvd")
TRC_MSG(HSG_SVOLUMEDOWN_REQ, "HSG_SVOLUMEDOWN_REQ")
TRC_MSG(HFG_AUDIO_DISCONNECTED, "HFG_EVENT_AUDIO_DISCONNECTED")
//TRC_MSG(REJECT_THE_WAITING_CALL,"Reject the waiting call")
TRC_MSG(HFG_QUERY_SUBSCRIBER_NUMBER, "HFG_EVENT_QUERY_SUBSCRIBER_NUMBER")
//TRC_MSG(HS_DISCONNECT_CALL,"HS Disconnect Call")
//TRC_MSG(HSSVU,"hssvu")
//TRC_MSG(HS_ANSWER_CALL,"HS Answer Call")
TRC_MSG(HFG_GET_LAST_VOICE_TAG, "HFG_EVENT_GET_LAST_VOICE_TAG")
//TRC_MSG(NEW_STATE_AG_DISCONNECTING,"new state AG_DISCONNECTING")
//TRC_MSG(DISCONNECTING_PLEASE_WAIT,"Disconnecting, please wait....")
TRC_MSG(BT_HSG_BUTTONPRESS_REQ, "BT_HSG_BUTTONPRESS_REQ")
TRC_MSG(HFG_ENABLE_CALL_WAITING, "HFG_EVENT_ENABLE_CALL_WAITING")
TRC_MSG(HFG_GENERATE_DTMF, "HFG_EVENT_GENERATE_DTMF")
TRC_MSG(HSG_AG_CONNECTED, "AG_CONNECTED")
//TRC_MSG(HFGA_TX_AT_BUFF_BUF_ADDRxX,"hfga_tx: at_buff buf addr=%x")
TRC_MSG(HSG_MVOLUMEUP_REQ, "HSG_MVOLUMEUP_REQ")
//TRC_MSG(SENDING_HANDSHAKE_PACKET_WIT_ERROR_STATUSxD,"Sending HandShake packet wit error status=%d")
TRC_MSG(HFG_SERVICE_CONNECTED, "HFG_EVENT_SERVICE_CONNECTED")
//TRC_MSG(HFGA_TX_RESPONSE_ADDRxX,"hfga_tx: response addr=%x")
//TRC_MSG(HFGA_TX_RESPONSEPDATA_ADDRxX,"hfga_tx: response->p.data addr=%x")
//TRC_MSG(HFGA_ESTABLISH_SERVICE_LEVEL_CONNECTION_TIMEOUT_HDLER,"hfga_establish_service_level_connection_timeout_hdler")
TRC_MSG(HFG_CALL_HOLD, "HFG_EVENT_CALL_HOLD")
TRC_MSG(HFG_QUERY_NETWORK_OPERATOR, "HFG_EVENT_QUERY_NETWORK_OPERATOR")
TRC_MSG(HFG_AUDIO_CONNECTED, "HFG_EVENT_AUDIO_CONNECTED")
//TRC_MSG(HSCONN,"hsconn")
//TRC_MSG(NEW_STATE_AG_OUTGOING,"new state AG_OUTGOING")
TRC_MSG(HFG_ENABLE_EXTENDED_ERRORS, "HFG_EVENT_ENABLE_EXTENDED_ERRORS")
TRC_MSG(HFG_DISABLE_NREC, "HFG_EVENT_DISABLE_NREC")
TRC_MSG(HFG_ENABLE_VOICE_RECOGNITION, "HFG_EVENT_ENABLE_VOICE_RECOGNITION")
//TRC_MSG(HSMVU,"hsmvu")
//TRC_MSG(DOING_LAST_NUMBER_DIAL,"doing last number dial")
//TRC_MSG(HSBUTTON,"hsbutton")
//TRC_MSG(DEVICE_IDLE_PRESS_BUTTON_TO_INITIATE_OUTGOING_CALL,"Device Idle.  Press BUTTON to initiate outgoing call")
TRC_MSG(HSG_SVOLUMEUP_REQ, "HSG_SVOLUMEUP_REQ")
TRC_MSG(HS_SCO_CONNECT_ACCEPT_STATUS_STATUS_xD, "HS: SCO Connect Accept Status, status =%d")
TRC_MSG(AG_CONNECT_LINK_FAILED_TO_START_STATUS__xD, "AG: Connect Link failed to start. status = %d")
TRC_MSG(HS_ACCESSIBILITY_OPERATION_FAILED_STATUS__xD, "HS: Accessibility operation failed. status = %d.")
TRC_MSG(HS_CONNECT_LINK_FAILED_TO_START_STATUS__xD, "HS: Connect Link failed to start. status = %d")
TRC_MSG(HS_SCO_CONNECT_REJECT_STATUS_STATUS_xD, "HS: SCO Connect Reject Status, status =%d")
TRC_MSG(HFG_EVENT_QUERY_SUBSCRIBER_NUMBER_TRC, "HFG_EVENT_QUERY_SUBSCRIBER_NUMBER")
TRC_MSG(HS_ANSWER_CALL, "HS Answer Call")
TRC_MSG(HSSVU, "hssvu")
TRC_MSG(HSMVD, "hsmvd")

/* Handsfree Role */
TRC_MSG(BT_HFX_HFADP_CONTEXT_INIT, "HFX hfadp_init")
TRC_MSG(BT_HFX_UNKONW_HFADP_HANDLER_MSG, "HFX hfadp_handler: unknown message id")
TRC_MSG(BT_HFX_SKIP_DISC_EVENT, "HFX hfadp_disconnected: HF_ADP_FLAG_SKIP_DISC_EVENT")
TRC_MSG(BT_HFX_DISC_SKIP_STATE, "HFX hfadp_disconnected: skip state %d")
TRC_MSG(BT_HFX_SCOC_SKIP_STATE, "HFX hfadp_sco_connected: skip state %d")
TRC_MSG(BT_HFX_SCOD_SKIP_STATE, "HFX hfadp_sco_disconnected: skip state %d")
TRC_MSG(BT_HFX_CONN_UNLOCKED, "HFX index: hfadp_unlock_conn_info index %d")
TRC_MSG(BT_HFX_CONN_LOCKED, "HFX index connecttion locked cntx index %d, chnl_index %d")
TRC_MSG(BT_HFX_NOT_IN_ACTIVATED_STATE, "HFX not in hf_activated state %d")
TRC_MSG(BT_HFX_CONN_ACCEPT, "HFX hfadp_connect_ind_res: accept %d")
TRC_MSG(BT_HFX_CONN_NOT_ACCEPTED, "HFX not accepted: state%d locked%d remdev%d rfchannel%d")
TRC_MSG(BT_HFX_SCOC_NO_SLC, "HFX hfadp_sco_connect_req: no SLC exist")
TRC_MSG(BT_HFX_SCO_REQ_SKIP_STATE, "HFX hfadp_sco_connect_req: skip state %d")
TRC_MSG(BT_HFX_REQ_TIMER_START, "HFX start req timer: %d")
TRC_MSG(BT_HFX_CONN_TIMEOUT, "HFX hfadp_connect_timeout, cntx_index %d, chnl_index %d")
TRC_MSG(BT_HFX_DEACTIVATE_CNF, "HFX hfadp_deactivate_cnf, cntx_index %d, state %d")
TRC_MSG(BT_HFX_CONN_TIMEOUT_SKIP_STATE, "HFX hfadp_connect_timeout: skip state %d")
TRC_MSG(BT_HFX_DISC_TIMEOUT, "HFX hfadp_disconnect_timeout index %d, state %d")
TRC_MSG(BT_HFX_DISC_TIMEOUT_SKIP_STATE, "HFX hfadp_disconnect_timeout: skip state %d")
TRC_MSG(BT_HFX_SCOC_TIMEOUT, "HFX hfadp_sco_connect_timeout index %d")
TRC_MSG(BT_HFX_SCOC_TIMEOUT_SKIP_STATE, "HFX hfadp_sco_connect_timeout: skip state %d")
TRC_MSG(BT_HFX_SCOD_TIMEOUT, "HFX hfadp_sco_disconnect_timeout index %d, state %d")
TRC_MSG(BT_HFX_SCOD_TIMEOUT_SKIP_STATE, "HFX hfadp_sco_disconnect_timeout: skip state %d")
TRC_MSG(BT_HFX_STATE_CHANGE, "HFX state change from %d to %d")
TRC_MSG(BT_HFX_LOCK, "HFX Lock: hs%d id%d nulap(%d %d %d) remDev%d rfChannel%d")
TRC_MSG(BT_HFX_TIMEOUT_TEST_ON, "HFX timeout value set to %d")
TRC_MSG(BT_HFX_TIMEOUT_TEST_OFF, "HFX timeout value set to NORMAL")
TRC_MSG(BT_HFX_UNKNOWN_INJECT_MSG, "HFX hfadp_handler_inject_msg: unknown inject string")
TRC_MSG(BT_HFX_INVALID_INJECT_MSG, "HFX hfadp_handler_inject_msg: invalid inject string")
TRC_MSG(BT_HFX_ACTI_HFCHANNEL_ALREADY_REGISTERED, "HFX HF_Activate: hfChannel already registered")
TRC_MSG(BT_HFX_DACT_HFCHANNEL_ALREADY_DEREGISTERED, "HFX HF_Deactivate: hfChannel already deregistered index %d")
TRC_MSG(BT_HFX_SDP_REGISTER_STATUS, "HFX HF_RegisterSdpServices: status %d")
TRC_MSG(BT_HFX_SDP_DEREGISTER_STATUS, "HFX HF_DeregisterSdpServices: status %d")
TRC_MSG(BT_HFX_SEC_REGISTER_STATUS, "HFX SEC_Register: status %d")
TRC_MSG(BT_HFX_SEC_DEREGISTER_STATUS, "HFX SEC_Unregister: status %d")
TRC_MSG(BT_HFX_CMGR_REGISTER_STATUS, "HFX CMGR_RegisterHandler: status %d")
TRC_MSG(BT_HFX_CMGR_DEREGISTER_STATUS, "HFX CMGR_DeregisterHandler: status %d")
TRC_MSG(BT_HFX_DACT_HFC_RFSRVCHANNEL, "HFX HF_Deactivate: HFC(rfSrvChannel) %d")
TRC_MSG(BT_HFX_RFC_DEREGISTER_STATUS, "HFX RF_DeregisterServerChannel: status %d")
TRC_MSG(BT_HFX_CONN_HFCHANNEL_NOT_REGISTERED, "HFX HF_CreateServiceLink: HandsfreeChannel is not registered")
TRC_MSG(BT_HFX_CONN_WRONG_CONNLEVEL, "HFX HF_CreateServiceLink: Wrong connection level")
TRC_MSG(BT_HFX_CREATE_SERVICE_LINK, "HFX HF_CreateServiceLink: hfChannel %d")
TRC_MSG(BT_HFX_CREATE_DATA_LINK_STATUS, "HFX CMGR_CreateDataLink: status %d")
TRC_MSG(BT_HFX_REMOVE_DATA_LINK_STATUS, "HFX CMGR_RemoveDataLink: status %d")
TRC_MSG(BT_HFX_CREATE_AUDIO_LINK_STATUS, "HFX CMGR_CreateAudioLink: status %d")
TRC_MSG(BT_HFX_REMOVE_AUDIO_LINK_STATUS, "HFX CMGR_RemoveAudioLink: status %d")
TRC_MSG(BT_HFX_OUTGOING_CONN_SDP_STATUS, "HFX Outgoing CONN SDP: status %d")
TRC_MSG(BT_HFX_DISC_HFCHANNEL_NOT_REGISTERED, "HFX HF_DisconnectServiceLink: HandsfreeChannel is not registered")
TRC_MSG(BT_HFX_DISC_WRONG_CONNLEVEL, "HFX HF_DisconnectServiceLink: Wrong connection level")
TRC_MSG(BT_HFX_RF_REJECT_CHANNEL_STATUS, "HFX HF_RejectConnect: status %d")
TRC_MSG(BT_HFX_HFCHANNEL_ALREADY_LINKUP, "HFX HF_AcceptConnect: Link is alrady up on hfChannel")
TRC_MSG(BT_HFX_GET_CLOSED_HFCHANNEL_FAILED, "HFX HF_AcceptConnect: HF_GetClosedHfChannel failed")
TRC_MSG(BT_HFX_ACCEPT_CONNECTION, "HFX HF_AcceptConnect: hfChannel %d")
TRC_MSG(BT_HFX_REGISTER_SCO_HANDLER_STATUS, "HFX CMGR_RegisterScoHandler: status %d")
TRC_MSG(BT_HFX_RF_ACCEPT_CHANNEL_STATUS, "HFX RF_AcceptChannel: status %d")

TRC_MSG(BT_HFX_RF_ACCEPT_CHANNEL_SDP_INDEX, "HFX RF_AcceptChannel: Sdp index %d")
TRC_MSG(BT_HFX_SCOC_HFCHANNEL_NOT_REGISTERED, "HFX HF_CreateAudioLink: hfChannel is not registered")
TRC_MSG(BT_HFX_SCOC_NO_RFC_EXIST, "HFX HF_CreateAudioLink: RFC channel is not exist")
TRC_MSG(BT_HFX_CREATE_AUDIO_LINK, "HFX HF_CreateAudioLink: hfChannel %d")
TRC_MSG(BT_HFX_DISC_AUDIO_LINK, "HFX HF_DisconnectAudioLink")
TRC_MSG(BT_HFX_DISC_AUDIO_HFCHANNEL_NOT_REGISTERED, "HFX HF_DisconnectAudioLink: hfChannel is not registered")
TRC_MSG(BT_HFX_INIT_HFCONTEXT, "HFX HF_InitContext")
TRC_MSG(BT_HFX_TXQUEUE_IS_FULL, "HFX AT: txQueue is full (size %d)")
TRC_MSG(BT_HFX_TXQUEUE_STATUS, "HFX AT: txQueue capacity %d, curSize %d, front %d, tail %d")
TRC_MSG(BT_HFX_TX_IN_PROGRESS, "HFX AT: HF_SendAtCommand TX in progress")
TRC_MSG(BT_HFX_UNKONWN_AT_COMMAND, "HFX AT: HF_SendAtCommand unknown AT Command")
TRC_MSG(BT_HFX_AT_TIMER_START, "HFX AT: Start AT timer %d")
TRC_MSG(BT_HFX_SEND_RFPKT_NO_RFC, "HFX AT: HF_SendRfPacket no RFC channel")
TRC_MSG(BT_HFX_RF_SENDDATA_STATUS, "HFX AT: txBuffer(%d) alreadySent(%d) curSent(%d), status(%d)")
TRC_MSG(BT_HFX_AT_COMMAND_TIMEOUT, "HFX AT: HF_AtCommandTimeout")
TRC_MSG(BT_HFX_REGISTER_SDP_SERVICES, "HFX HF_RegisterSdpServices: #%d, numAttributes %d")
TRC_MSG(BT_HFX_START_SERVICE_QUERY, "HFX HF_StartServiceQuery")
TRC_MSG(BT_HFX_SERVICE_QUERY_STATUS, "HFX HF_StartServiceQuery: status %d")
TRC_MSG(BT_HFX_ALLOC_RFCHANNEL, "HFX HF_AllocRfChannel: rfChannel %d")
TRC_MSG(BT_HFX_FREE_RFCHANNEL, "HFX HF_FreeRfChannel: rfChannel %d")
TRC_MSG(BT_HFX_RFSRVCHANNEL_ALREADY_REGISTERED, "HFX HF_RegisterServerChannel: rfSrvChannel is already registered")
TRC_MSG(BT_HFX_REGISTER_RFSRVCHANNEL_ALLOC_FAILED, "HFX HF_RegisterServerChannel: allocation failed")
TRC_MSG(BT_HFX_REGISTER_RFSRVCHANNEL_STATUS, "HFX HF_RegisterServerChannel: status %d")
TRC_MSG(BT_HFX_REGISTERED_RFSRVCHANNEL, "HFX HF_RegisterServerChannel: rfChannel %d")
TRC_MSG(BT_HFX_GET_CLOSED_HFCHANNEL, "HFX HF_GetClosedHfChannel: %d")
TRC_MSG(BT_HFX_FIND_LINKUP_HFCHANNEL, "HFX HF_FindLinkupHfChannel: %d")
TRC_MSG(BT_HFX_REMOVE_ACL_LINK, "HFX HF_RemoveAclLink")
TRC_MSG(BT_HFX_CLEAR_SNIFF_TIMER_STATUS, "HFX CMGR_ClearSniffTimer: status %d")
TRC_MSG(BT_HFX_DEREGISTER_SCO_HANDLER_STATUS, "HFX CMGR_DeregisterScoHandler: status %d")
TRC_MSG(BT_HFX_CANCEL_AT_TIMER, "HFX Cancel AT Timer")
TRC_MSG(BT_HFX_REMOVE_RFC_LINK, "HFX HF_RemoveRfcLink")
TRC_MSG(BT_HFX_REMOVE_RFC_LINK_STATUS, "HFX HF_RemoveRfcLink: status %d")
TRC_MSG(BT_HFX_SLC_CONNECTED, "HFX HF_ServiceLinkConnected")
TRC_MSG(BT_HFX_SDP_PRE_CALLBACK, "HFX HF_SdpQueryPreCallback: aid %d result %d")
TRC_MSG(BT_HFX_AG_RECORD_FOUND, "HFX HF_SDPQUERY_AG_RECORD_FOUND: agIndex%d result%d")
TRC_MSG(BT_HFX_AG_ATTRIB_FOUND, "HFX AG attribute found: status %d result %d")
TRC_MSG(BT_HFX_SDP_CALLBACK, "HFX HF_SdpQueryCallback: hfChannel %d, index %d, aid %d, result %d")
TRC_MSG(BT_HFX_OUTGOING_CONN_SDP_RESPONSE_FAILED, "HFX HF_SdpQueryCallback: Outgoing CONN SDP response failed")
TRC_MSG(BT_HFX_SDP_AG_SERVER, "HFX AG server: #%d")
TRC_MSG(BT_HFX_ALLOC_CLIENT_RFCHANNEL_FAILED, "HFX: allocate client rfChannel failed")
TRC_MSG(BT_HFX_OPEN_CLIENT_RFCHANNEL_STATUS, "HFX RF_OpenClientChannel: rfChannel %d status %d")
TRC_MSG(BT_HFX_SDP_AG_VERSION, "HFX AG version: %#x")
TRC_MSG(BT_HFX_SDP_AG_NETWORK, "HFX AG network: can reject a call %d")
TRC_MSG(BT_HFX_SDP_AG_FEATURES, "HFX AG features: %#x")
TRC_MSG(BT_HFX_CMGR_CALLBACK, "HFX HF_CmgrCallback: hfChannel %d, event %d, status %d")
TRC_MSG(BT_HFX_DATA_CON, "HFX DATA_CON: hfChannel %d, status %d")
TRC_MSG(BT_HFX_DATA_DIS, "HFX DATA_DIS: hfChannel %d, status %d")
TRC_MSG(BT_HFX_AUDIO_CON, "HFX AUDIO_CON: hfChannel %d, status %d")
TRC_MSG(BT_HFX_SCO_CON_TO_DISC_REMOVE_AUDIO_LINK_STATUS, "HFX SCO CON to DISC: CMGR_RemoveAudioLink status %d")
TRC_MSG(BT_HFX_AUDIO_DIS, "HFX AUDIO_DIS: hfChannel %d, status %d")
TRC_MSG(BT_HFX_SKIP_AUDIO_DISCONNECT_REPORT, "HFX: Skip SCO disconnected report")
TRC_MSG(BT_HFX_SCO_DISCONNECTED_AND_REMOVE_RFC, "HFX: SCO disconnected and remove RFC")
TRC_MSG(BT_HFX_RFC_CALLBACK, "HFX HF_RfCallback: rfChannel %d, event %d, status %d")
TRC_MSG(BT_HFX_OPEN_IND, "HFX OPEN_IND: rfChannel %d, status %d")
TRC_MSG(BT_HFX_CONNECTION_ALREADY_LOCKED, "HFX: connection is already locked")
TRC_MSG(BT_HFX_SDP_INDEX_ERROR, "HFX: sdp index error %d")
TRC_MSG(BT_HFX_RFC_OPEN_WITH_NULL_HFCHANNEL, "HFX: RFC_OPEN with NULL hfChannel, Sdp_index %d")
TRC_MSG(BT_HFX_RFC_OPEN, "HFX RFC_OPEN: rfChannel %d, status %d")
TRC_MSG(BT_HFX_START_INCOMING_CONN_SDP, "HFX start incoming CONN SDP: status %d")
TRC_MSG(BT_HFX_QUEUE_BRSF_FAILED, "HFX AT: Queue AT+BRSF:<n> failed")
TRC_MSG(BT_HFX_RFC_CLOSED, "HFX RFC_CLOSED: rfChannel %d, status %d")
TRC_MSG(BT_HFX_CONFLICT_RFC_CONNECTION_CLOSED, "HFX: conflict RFC connection closed")
TRC_MSG(BT_HFX_CLOSE_SERVER_RFCHANNEL, "HFX: Close server rfChannel")
TRC_MSG(BT_HFX_RFC_CLOSED_WITH_NO_LINKUP_HFCHANNEL, "HFX RFC_CLOSED: with no link up hfChannel %d")
TRC_MSG(BT_HFX_CLOSE_CLIENT_RFCHANNEL, "HFX: Close client rfChannel")
TRC_MSG(BT_HFX_RFC_CLOSED_BUT_SCO_CONNECTING_WAIT_SCO_CON_TO_DISC, "HFX RFC_CLOSED: but SCO CONNECTING wait SCO CON to DISC")
TRC_MSG(BT_HFX_DATA_IND, "HFX DATA_IND: rfChannel %d, status %d, dataLen %d")
TRC_MSG(BT_HFX_DATA_IND_INVALID_PARAMETERS, "HFX DATA_IND: invalid parameters")
TRC_MSG(BT_HFX_RXQUEUE_IS_FULL, "HFX HF_QueueRfcommRxPacket: rxQueue is full")
TRC_MSG(BT_HFX_PKT_HANDLED, "HFX PKT_HANDLED: rfChannel %d, status %d")
TRC_MSG(BT_HFX_CURITEM_STATUS, "HFX RC: curItem size %d, totalCredit %d, curCredit %d, validStartIndex %d")
TRC_MSG(BT_HFX_APPEND_TO_CURITEM, "HFX RC: append to curItem")
TRC_MSG(BT_HFX_CURITEM_FULL_AND_RXQUEUE_STATUS, "HFX RC: curItem full, rxQueue size %d, front %d, tail %d")
TRC_MSG(BT_HFX_RECEIVE_RESULT_CODE, "HFX RC: HF_ReceiveResultCode")
TRC_MSG(BT_HFX_RXQUEUE_IS_EMPTY_OR_RXBUFFER_LOCKED, "HFX RC: rxQueue is empty or rxBufferLocked")
TRC_MSG(BT_HFX_FRONT_ITEM_HAS_NO_DATA, "HFX RC: frontItem has no data")
TRC_MSG(BT_HFX_FRONT_ITEM_HAS_NO_CRLF, "HFX RC: frontItem has no crlf")
TRC_MSG(BT_HFX_RESULT_CODE_COVER_TWO_ITEMS, "HFX RC: Result code cover two items")
TRC_MSG(BT_HFX_TOO_LONG_RESULT_CODE_TRUNCATED, "HFX RC: Too long result code (size%d) truncated")
TRC_MSG(BT_HFX_FREE_RFCOMM_CREDITS, "HFX RC: HF_FreeRfcommCredits frontEnd %d")
TRC_MSG(BT_HFX_RXQUEUE_AND_FRONTITEM_STATUS, "HFX RC: rxQueue size%d front%d tail%d (front size%d full%d totalCredit%d curCredit%d validStart%d)")
TRC_MSG(BT_HFX_VALIDSTARTINDEX_IS_IN_ERROR_RANGE, "HFX RC: validStartIndex is in error range, curCredit[%d, %d)")
TRC_MSG(BT_HFX_FRONTEND_PARAMETER_INVALID, "HFX RC: frontEnd parameter is invalid")
TRC_MSG(BT_HFX_FREE_FRONT_BUFFERS, "HFX RC: HF_FreeFrontBuffers frontEnd%d secondEnd%d")
TRC_MSG(BT_HFX_CHANNELERROR, "HFX RC: hfchannel error %d")
TRC_MSG(BT_HFX_FREED_CREDITS, "HFX RC: freed credits %d")
TRC_MSG(BT_HFX_BRSF_AG_FEATURES, "HFX RC: +BRSF:%d")
TRC_MSG(BT_HFX_SERVICE_INDEX, "HFX RC: service index %d")
TRC_MSG(BT_HFX_CALL_INDEX, "HFX RC: call index %d")
TRC_MSG(BT_HFX_CALLSETUP_INDEX, "HFX RC: callsetup index %d")
TRC_MSG(BT_HFX_CALLHELD_INDEX, "HFX RC: callheld index %d")
TRC_MSG(BT_HFX_SIGNAL_INDEX, "HFX RC: signal index %d")
TRC_MSG(BT_HFX_ROAM_INDEX, "HFX RC: roam index %d")
TRC_MSG(BT_HFX_BATTCHG_INDEX, "HFX RC: battchg index %d")
TRC_MSG(BT_HFX_UNKNOWN_RESULT_CODE, "HFX RC: unknown result code")
TRC_MSG(BT_HFX_AT_COMPLETE_SEND_OR_PKT_HDL_FAILED, "HFX AT Complete: send or pakcet handled failed")
TRC_MSG(BT_HFX_AT_COMPLETE_FINAL_RESULT_CODE, "HFX AT Complete: final result code")
TRC_MSG(BT_HFX_AT_COMPLETE_TIMEOUT, "HFX AT Complete: timeout")
TRC_MSG(BT_HFX_SEND_BRSF_FAILED, "HFX AT: Send AT+BRSF=<n> failed")
TRC_MSG(BT_HFX_QUEUE_CIND_TEST_FAILED, "HFX AT: Queue AT+CIND=? failed")
TRC_MSG(BT_HFX_COMMAND_CIND_TEST_FAILED, "HFX AT: Command AT+CIND=? failed")
TRC_MSG(BT_HFX_CIND_TEST_RESPONSE_ERROR, "HFX AT: AT+CIND=? response error")
TRC_MSG(BT_HFX_QUEUE_CIND_READ_FAILED, "HFX AT: Queue AT+CIND? failed")
TRC_MSG(BT_HFX_COMMAND_CIND_READ_FAILED, "HFX AT: Command AT+CIND? failed")
TRC_MSG(BT_HFX_QUEUE_CMER_FAILED, "HFX AT: Queue AT+CMER=3,0,0,1 failed")
TRC_MSG(BT_HFX_COMMAND_CMER_FAILED, "HFX AT: Command AT+CMER=3,0,0,1 failed")
TRC_MSG(BT_HFX_QUEUE_CHLD_TEST_FAILED, "HFX AT: Queue AT+CHLD=? failed")
TRC_MSG(BT_HFX_COMMAND_CHLD_TEST_FAILED, "HFX AT: Command AT+CHLD=? failed")
TRC_MSG(BT_HFX_IS_HF_AUDIO_LINK, "HFX: is HF audio link %d")
TRC_MSG(BT_HFX_IS_ESCO_SUPPORT, "HFX: esco support %d")
TRC_MSG(BT_HFX_RFPKT_BIGGER_THAN_ITEM_BUFFER, "HFX RC: RF packet is bigger than item buffer size")
TRC_MSG(BT_HFX_AG_CHLD_SUPPORT_0, "HFX AG CHLD:0")
TRC_MSG(BT_HFX_AG_CHLD_SUPPORT_1, "HFX AG CHLD:1")
TRC_MSG(BT_HFX_AG_CHLD_SUPPORT_1x, "HFX AG CHLD:1x")
TRC_MSG(BT_HFX_AG_CHLD_SUPPORT_2, "HFX AG CHLD:2")
TRC_MSG(BT_HFX_AG_CHLD_SUPPORT_2x, "HFX AG CHLD:2x")
TRC_MSG(BT_HFX_AG_CHLD_SUPPORT_3, "HFX AG CHLD:3")
TRC_MSG(BT_HFX_AG_CHLD_SUPPORT_4, "HFX AG CHLD:4")
TRC_MSG(BT_HFX_GENERIC_TRC1, "HFX1: %d")
TRC_MSG(BT_HFX_GENERIC_TRC2, "HFX2: %d, %d")
TRC_MSG(BT_HFX_GENERIC_TRC3, "HFX3: %d, %d, %d")
TRC_MSG(BT_HFX_GENERIC_TRC4, "HFX4: %d, %d, %d, %d")
TRC_MSG(BT_HFX_GENERIC_TRC5, "HFX5: %d, %d, %d, %d, %d")
TRC_MSG(BT_HFX_GENERIC_TRC6, "HFX6: %d, %d, %d, %d, %d, %d")
TRC_MSG(BT_HFX_GENERIC_TRC7, "HFX7: %d, %d, %d, %d, %d, %d, %d")
TRC_MSG(BT_HFX_GENERIC_TRC8, "HFX8: %d, %d, %d, %d, %d, %d, %d, %d")
TRC_MSG(BT_HFX_HFADP_FIND_HFCHNL, "HFX INDEX: HF channel index %d")
TRC_MSG(BT_HFX_HFADP_FIND_HFADPCNTX, "HFX INDEX: HF adp context index %d")
TRC_MSG(BT_HFX_HFADP_FIND_FREEHFADPCNTX, "HFX INDEX: HF free adp context index %d")
TRC_MSG(BT_HFX_HFADP_FIND_FREEHFCHNL, "HFX INDEX: HF free Channel index %d")

/* HFG & HSG TRACE END */

/* SPP TRACE START */
TRC_MSG(BT_SPP_ACITVATE_REQ, "=====[BTAP][BT_SPP_ACITVATE_REQ]=====")
TRC_MSG(BT_SPP_ACITVATE_CFM, "=====[BTAP][BT_SPP_ACITVATE_CFM]=====")
TRC_MSG(BT_SPP_DEACITVATE_REQ, "=====[BTAP][BT_SPP_DEACITVATE_REQ]=====")
TRC_MSG(BT_SPP_DEACITVATE_CFM, "=====[BTAP][BT_SPP_DEACITVATE_CFM]=====")
TRC_MSG(BT_SPP_CONNECT_REQ, "=====[BTAP][BT_SPP_CONNECT_REQ]=====")
TRC_MSG(BT_SPP_CONNECT_IND, "=====[BTAP][BT_SPP_CONNECT_IND]=====")
TRC_MSG(BT_SPP_DATA_REQ, "=====[BTAP][BT_SPP_DATA_REQ]===== payload: %d")
TRC_MSG(BT_SPP_DATA_CFM, "=====[BTAP][BT_SPP_DATA_CFM]=====")
TRC_MSG(BT_SPP_DATA_IND, "=====[BTAP][BT_SPP_DATA_IND]===== payload: %d")
TRC_MSG(BT_SPP_DATA_RES, "=====[BTAP][BT_SPP_DATA_RES]=====")
TRC_MSG(BT_SPP_CONTROL_REQ, "=====[BTAP][BT_SPP_CONTROL_REQ]=====")
TRC_MSG(BT_SPP_CONTROL_IND, "=====[BTAP][BT_SPP_CONTROL_IND]===== modemStatus=0x%x")
TRC_MSG(BT_SPP_PORTNEG_IND, "=====[BTAP][BT_SPP_PORTNEG_IND]=====")
TRC_MSG(BT_SPP_PORTNEG_RES, "=====[BTAP][BT_SPP_PORTNEG_RES]=====")
TRC_MSG(BT_SPP_DISCONNECT_REQ, "=====[BTAP][BT_SPP_DISCONNECT_REQ]=====")
TRC_MSG(BT_SPP_DISCONNECT_IND, "=====[BTAP][BT_SPP_DISCONNECT_IND]=====")
TRC_MSG(BT_SPPA_PUTBYTES, "=====[Func][Sppa_PutBytes]===== Len: %d, retLen: %d, on Port=%d")
TRC_MSG(BT_SPPA_ReturnBuf, "====[Func][SPPOS_ReturnBuf]==== txBufLen: %d, retBuf: %d")
TRC_MSG(SPPA_SENDDATA, "=====[Func][sppa_sendData]=====")
TRC_MSG(SPPA_CLRTX, "=====[Func][Sppa_ClrTxBuffer]=====")
TRC_MSG(SPPA_CLRRX, "=====[Func][Sppa_ClrRxBuffer]=====hf_port:%d, this_port:%d,module_id:%d")
TRC_MSG(BT_SPPC_WITH_PORT_TRY_TO_DISC, "SPP client with port=%d, try to disconnect")
TRC_MSG(BT_SPPC_CMGRHDLR_NOT_FOUND, "In bt_sppclient_cmgr_link_close(): try to remove: But CMGRHandler is not found")
TRC_MSG(BT_SPPC_CMGR_BDC_ALREADY_NULL, "In bt_sppclient_cmgr_link_close(): bdc is already null")
TRC_MSG(BT_SPPC_CMGR_EVENT_CALLBACK_EVENT_WITH_DEV_INX, "In bt_sppclient_cmgr_event_callback(): event=%d is for sppOsDev inx=%d")
TRC_MSG(BT_SPPC_CMGR_EVENT_CALLBACK_EVENT_STATUS, "In bt_sppclient_cmgr_event_callback(): event=%d and status=%d")
TRC_MSG(BT_SPPC_LINK_CNF_NOT_FOR_IT, "LINK_CNF is for another profile request, not SPP client")
TRC_MSG(BT_SPPC_NOT_CALL_CMGRCREATELINK, "BDC is NULL, SPP client does not call CMGR_CreateDataLink()")
TRC_MSG(BT_SPPC_SPPCONNECT_FAILED_01, "In SPPQueryCallback()01, call sppConnect() failed. status=%d")
TRC_MSG(BT_SPPC_WIAT_SDP_RSP_01, "Wait for SDP quesry rsp to queryCallback 01")
TRC_MSG(BT_SPP_AUTH_RSP_WITH_RESULT, "SPP_AUTH_RSP from MMI of port=%d and its result=%d")
TRC_MSG(BT_SPPC_SEND_UART_READY_TO_READ_TO_MMI, "In sppa_handler(): BT must send UART_READY_TO_READ to MMI")
TRC_MSG(BT_SPPC_NO_AVAILABLE_DEVS, "No avaialbe SPP Client OsDev for SPP_CONNECT_REQ")
TRC_MSG(BT_SPPC_SPPCONNECT_FAILED_02, "Recv SPP_CON_REQ and ACL link is already established, call sppConnect() failed. status=%d")
TRC_MSG(BT_SPPC_WIAT_SDP_RSP_02, "Wait for SDP quesry rsp to queryCallback 02")
TRC_MSG(BT_SPPC_WAIT_LINK_CNF, "Wait for LINK_CONNECT_CNF of this SPP client create ACL")
TRC_MSG(BT_SPP_CMGR_CREATE_LINK_FAILED, "SPP client: CMGR_CreateDataLink failed, status=%d")
TRC_MSG(BT_SPPC_RECV_DEACTIVATE_REQ_WAIT_CLOSED, "SPPClient recv DEACTIVATE_REQ and wait for RF_CLOSED event")
TRC_MSG(BT_SPPC_RECV_DEACTIVATE_REQ_BUT_SPPCLOSE_FAILED, "SPPClient recv DEACTIVATE_REQ, call SPP_Close() failed")
TRC_MSG(BT_SPPC_RECV_DISC_REQ_WAIT_CLOSED, "SPPClient recv DISCONNECT_REQ and wait for RF_CLOSED event")
TRC_MSG(BT_SPPC_SPPSTARTSERVICEQUERY_STATUS, "Return status=%d of SPPStartServiceQuery")
TRC_MSG(BT_SPPC_SDP_QUERY_NOT_FOR_IT, "In SPPQueryCallback(): This SPP query rsp is not for SPP client")
TRC_MSG(BT_SPPC_RECV_CLOSED_DUE_TO_DEACTIVATE_REQ, "Recv CLOSED event due to DEACTIVATE_REQ")
TRC_MSG(BT_SPPC_RECV_CLOSED_DUE_TO_DISC_REQ, "Recv CLOSED event due to DISC_REQ")
TRC_MSG(BT_SPPC_SPPCONNECT_FAILED_03, "In SPPQueryCallback()03, call sppConnect() failed. status=%d")
TRC_MSG(BT_SPPC_GET_SRV_CHNL, "In SPPQueryCallback(), get server_channel_num=%d")
TRC_MSG(BT_SPPC_RECV_CLOSED_DUE_TO_DEACTIVATE_REQ_02, "defaultEventHandler():Recv CLOSED event due to DEACTIVATE_REQ")
TRC_MSG(BT_SPPC_RECV_CLOSED_DUE_TO_DISC_REQ_02, "defaultEventHandler():Recv CLOSED event due to DISC_REQ")
TRC_MSG(BT_SPPC_CONNECTED_RECV_CLOSE_NOT_IT_ISSUED, "SPPClient is already connected,WE Now: Recv CLOSED event not issued by itself")
//TRC_MSG(BT_SPPC_FIRST_DATA,"Recv SPP Client first data=%s") No %s is permitted in TRC_MSG,can use this
TRC_MSG(BT_SPPC_NO_UART_OWNER_CNF_NO_READY_TO_READ, "Store data to RingBuf first, but before recv UART_OWNER_CNF,not send UART_READY_TO_READY")
TRC_MSG(BT_SPPC_CALL_SPPDISC, "Call SPP_Disconnect():Waiting to receive RF_CLOSED event")
TRC_MSG(BT_SPP_HIGHWATER_RXBUTES_RFFRAMESIZE, "highWater=%d, SPPOS_RxBytes=%d, RF_FrameSize=%d")
TRC_MSG(BT_SPP_CMEVENT_AUDIO_LINK_CON_SCO_INIT_CMD, "CMEVENT_AUDIO_LINK_CON SCO init command:%02x")
TRC_MSG(BT_SPP_CMEVENT_AUDIO_LINK_DIS_SCO_INIT_CMD_STATUS, "CMEVENT_AUDIO_LINK_DIS SCO init command:%02x,status:%02x")
TRC_MSG(BT_SPP_SCO_READ_RSSI_COMPLETED, "SPP_SCO_Read_RSSI with errCode=%d,rssi_value=%02x")
TRC_MSG(BT_SPP_STOP_RSSI_TIMER, "RSSI timer still running, cancel it due to RFEVENT_CLOSED")
TRC_MSG(BT_SPP_RSSI_TIMEOUT_DEV_STATE, "SPP_RetrieveRSSI_Timeout, dev_state=%d")
TRC_MSG(BT_SPP_REMDEV_NOT_IN_CONNECTED_RSSI_TIMEOUT, "RemDev is not in BDS_CONNECTED state, not to start rssi_timer")
TRC_MSG(BT_SPP_FIND_SQT_OWNER_INX, "Find the sqt owner of this querycallback, its index=%d")
TRC_MSG(BT_SPP_SEARCH_SPPCLI_BY_DEV_INX, "In SearchSppClientOsDevBySPPDev(), find sppClient at inx=%d")
TRC_MSG(BT_SPP_REG_GENERAL_SRV_NUM, "Register General SPP Server (Non-SPP-SCO-Server), num of entries=%d")
TRC_MSG(BT_SPP_REG_SCO_SRV_NUM, "Register SPP SCO Server num of entries =%d")
TRC_MSG(BT_SPP_REG_GENERAL_CLI_NUM, "Register General SPP Client (Non-SPP-SCO Client) num of entries =%d")
TRC_MSG(BT_SPP_REG_SCO_CLI_NUM, "Register SPP SCO Client num of entries =%d")
TRC_MSG(BT_SPP_NUM_DEV, "NUM_SPP_DEVS=%d")
TRC_MSG(BT_SPPC_DISC_TIMER_500MS, "In openClientPort(): Spp sets current disc Timer:BT_L2CAP_DISCONNECT_TIMEOUT_500MS")
TRC_MSG(BT_SPPC_DISC_TIMER_50S, "In openClientPort(): Spp sets current disc Timer:BT_L2CAP_DISCONNECT_TIMEOUT_50S")
TRC_MSG(BT_SPPS_RECV_FIRST_DATA, "Recv SPP Client first data=%s")
TRC_MSG(BT_SPP_SDP_QUERY_FAILED_ADDR, "SDP query for SPP client is error with bd_addr=%02x,%02x,%02x,%02x,%02x,%02x")
TRC_MSG(BT_SPP_CMGR_CREATELINK_STATUS, "SPP CMGR_CreateDataLink status:%02x")
TRC_MSG(BT_SPP_ACLLINK_EXISTED_SET_DISCFLAG_TRUE, "ACL Link is already existed, set discFlag=TRUE in CMGR_CreateDataLink()")
TRC_MSG(BT_SPP_OPEN_SCO_HDLR, "Try to open sco handler:%02x")
TRC_MSG(BT_SPP_DISC_SCO_HDLR, "Try to disconnect sco handler:%02x")
TRC_MSG(BT_SPP_SCO_ACTIVATE_SNIFF_TIMER_IN_RFEVENT_OPEN_CLIENT, "RFEVENT_OPEN client side: CMGR_ActivateSniffTimer()")
TRC_MSG(BT_SPP_SCO_ACTIVATE_SNIFF_TIMER_IN_RFEVENT_OPEN_SERVER, "RFEVENT_OPEN server side: CMGR_ActivateSniffTimer()")
TRC_MSG(BT_SPP_SCO_RSSI_TIMER_PERIOD_LINK_MODE, "Report_RSSI_Timer_Period=%d, current link mode=%d")
TRC_MSG(BT_SPP_SCO_ASK_RSSI_IN_ACTIVE_MODE, "Ask RSSI value in Active mode")
TRC_MSG(BT_SPP_NOT_ASK_RSSI_IN_SNIFF_MODE, "Not ask RSSI value in Sniff mode,link state=%d")
TRC_MSG(BT_SPP_ASK_RSSI_IN_SNIFF_MODE, "Still ask RSSI value in Sniff mode")
TRC_MSG(BT_SPP_RECV_OPEN_IND_SET_AUTH_MODE_WAIT_PLUGOUT_CNF_FLAG, "RFEVENT_OPEN_IND:set_auth_req_mode=%d,wait_plugout_cnf_msg=%d")
TRC_MSG(BT_SPP_RECV_OPEN_IND_BUT_REJECT_DUE_TO_WAIT_PLUGOUT_CNF, "defaultEventHandler():Recv RF_OPEN_IND_rejected_due_to_wait_plugout_cnf")
TRC_MSG(BT_SPPOS_DISCONNECT_IND_WAIT_PLUGOUT_FLAG, "SPPOS_DisConnected(): wait_for_plugout_cnf_msg=%d")
TRC_MSG(BT_SPPA_NOT_SEND_PLUGOUT_IND, "NOT Send UART_PLUGOUT_IND due to DISC_IND is triggered by wait_plugout_cnf_msg")
TRC_MSG(BT_SPP_SET_WAIT_PLUGOUT_CNF_FLAG_INX, "BT SPP Set Wait Plugout Cnf Flag inx=%d")
TRC_MSG(BT_SPP_RECV_PLUGOUT_CNF_PORT, "BT SPP Recv PlugoutCnf with matched port=%d,reset to default port owner")
TRC_MSG(BT_SPP_Check_FLOW_CTRL_SETTING_CASE, "BT_SPP_Check_FlowCtrl_case=%d")
TRC_MSG(REGISTER_SPP_SCO_SERVER_NUM_OF_ENTRIES_xD, "Register SPP SCO Server num of entries =%d")
TRC_MSG(IN_SEARCHSPPCLIENTOSDEVBYSPPDEV_FIND_SPPCLIENT_AT_INXxD, "In SearchSppClientOsDevBySPPDev(), find sppClient at inx=%d")
TRC_MSG(REGISTER_GENERAL_SPP_SERVER_NONSPPSCOSERVER_NUM_OF_ENTRIESxD, "Register General SPP Server (Non-SPP-SCO-Server), num of entries=%d")
TRC_MSG(REGISTER_GENERAL_SPP_CLIENT_NONSPPSCO_CLIENT_NUM_OF_ENTRIES_xD, "Register General SPP Client (Non-SPP-SCO Client) num of entries =%d")
TRC_MSG(TRY_TO_OPEN_SCO_HANDLER, "Try to open sco handler")
TRC_MSG(REGISTER_SECURITY_RECORD, "Register security level [%x]")
TRC_MSG(REGISTER_SECURITY_RECORD_FAILED, "Register security level failed")

/* SPP Inject Message */
TRC_MSG(BT_SPP_INJECT_ENABLE, "[BT_SPP_INJECT] sppenable: string=%s")
TRC_MSG(BT_SPP_INJECT_DISABLE, "[BT_SPP_INJECT] sppdisable: string=%s")
TRC_MSG(BT_SPP_INJECT_ACTIVATE, "[BT_SPP_INJECT] sppactivate: string=%s")
TRC_MSG(BT_SPP_INJECT_DEACTIVATE, "[BT_SPP_INJECT] sppdeactivate: string=%s")
TRC_MSG(BT_SPP_INJECT_DISCONNECT, "[BT_SPP_INJECT] sppdisconn: string=%s")
TRC_MSG(BT_SPP_INJECT_CONNECT, "[BT_SPP_INJECT] sppcon: string=%s")
TRC_MSG(BT_SPP_INJECT_SEND_DATA, "[BT_SPP_INJECT] sppdata: string=%s")

TRC_MSG(CREDIT_xD_DEVCREDIT_xD, "credit %d, dev->credit %d")
TRC_MSG(SPP_SPPSLEEPHANDLER, "SPP: sppSleepHandler")
TRC_MSG(IDBT_DEBUGx04X_LENxD, "id=%04x, len=%d")
TRC_MSG(SPP_SDP_QUERY_RETURNED_xD, "SPP: SDP_Query() returned %d")
/* SPP TRACE END */

/* SIMAP TRACE START */
TRC_MSG(BT_SIMAP_LACK_EXPECTED_PARM, "BTSIM:Message lacks expected input parms")
TRC_MSG(BT_SIMAP_CONTAIN_INVALID_PARM, "BTSIM:Message contained an invalid parameter")
TRC_MSG(BT_SIMAP_DISCONNECT_REQ_IN_OPEN, "SIM_DISCONNECT_REQ in SIM_DISCONNECT_REQ in SimServerStateOpen()")
TRC_MSG(BT_SIMAP_GET_DISC_REQ_BEFORE_GRACEFUL_DISC_TIMER_TIMEOUT, "In open state, receiving DISC_REQ cmd before timeout of Graceful Disconnect")
TRC_MSG(BT_SIMAP_GET_APDU_CMD_BEFORE_GRACEFUL_DISC_TIMER_TIMEOUT, "BT_SIMAP_GET_APDU_CMD_BEFORE_GRACEFUL_DISC_TIMER_TIMEOUT")
TRC_MSG(BT_SIMAP_APDU_REQ_IN_OPEN, "Received a SIM_TRANSFER_APDU_REQ in SimServerStateOpen()")
TRC_MSG(BT_SIMAP_ATR_REQ_IN_OPEN, "Received a SIM_TRANSFER_ATR_REQ in SimServerStateOpen()")
TRC_MSG(BT_SIMAP_POWER_ON_REQ_IN_OPEN, "Received a SIM_POWER_ON_REQ in SimServerStateOpen()")
TRC_MSG(BT_SIMAP_CARD_RDR_STATUS_REQ_IN_OPEN, "Received a SIM_CARD_RDR_STATUS_REQ in SimServerStateOpen()")
TRC_MSG(BT_SIMAP_TRANSPORT_PROTOCOL_REQ_IN_OPEN, "Received a SIM_SET_TRANS_PROT_REQ in SimServerStateOpen()")
TRC_MSG(BT_SIMAP_POWER_OFF_REQ_IN_OPEN, "Received a SIM_POWER_OFF_REQ in SimServerStateOpen()")
TRC_MSG(BT_SIMAP_RESET_REQ_IN_OPEN, "Received a SIM_RESET_REQ in SimServerStateOpen()")
TRC_MSG(BT_SIMAP_ERROR_IND_IN_OPEN, "An error was detected in the client request in SimServerStateOpen()")
TRC_MSG(BT_SIMAP_GET_DISCGRACE_PACKET_HANDLED_WITH_SUBSTATE, "In SimServerStateOpen() discGracePacket SIM_PACKET_HANDLED, substate=%02x")
TRC_MSG(BT_SIMAP_SEGMENTS_OF_DISCGRACE_PACKET_CAN_NOT_SEND_IN_OPEN, "Left segments of discGracePacket could not be sent in SimServerStateOpen()")
TRC_MSG(BT_SIMAP_GET_SIM_PACKET_HANDLED_WITH_SUBSTATE, "In SimServerStateOpen() simPacket SIM_PACKET_HANDLED, substate=%02x")
TRC_MSG(BT_SIMAP_STATUS_IN_SEND_DUE_TO_SET_T, "In SimServerStateOpen():SIM_Status_IND is sent to sim client")
TRC_MSG(BT_SIMAP_SIM_PACKET_HANDLED_DUE_TO_SIMSERVER_RSP, "In SimServerOpen(), SIM_PACKET_HANDLED is returned due to invoke SIM_XXX() directly in simServer not in bt_adp_simap.c!")
TRC_MSG(BT_SIMAP_SEGMENTS_OF_SIM_PACKET_FOR_STATUS_IND_CAN_NOT_SEND_IN_OPEN, "Left segments of simPacket payloaded the msg Status_IND could not be sent in SimServerStateOpen()")
TRC_MSG(BT_SIMAP_GET_UNHANDLED_EVENT_IN_OPEN, "Received unhandled event: %02X in SimServerStateOpen() and now close RFChannel")
TRC_MSG(BT_SIMAP_GET_ALREADY_PROCESSED_CMD_IN_OPEN, "Received a command when already processing in SimServerStateOpen()")
TRC_MSG(BT_SIMAP_CARD_STATUS_SENT_IN_CONPENDING, "SIM:Card Status sent in ConPending")
TRC_MSG(BT_SIMAP_ATR_SENT_CON_IS_UP, "SIM:ATR Sent, connection is up")
TRC_MSG(BT_SIM_SEND_FAILED_IN_CONNECT_PROCESS, "SIM:Send failed during connect process")
TRC_MSG(BT_SIMAP_GET_ATR_REQ_IN_CONPENDING, "SIM: Received an ATR request in SimServerStateConnPending()")
TRC_MSG(BT_SIMAP_CMD_ALREADY_PROCESSED_IN_CONPENDING, "SIM: Received a command when already processing in SimServerStateConnPending()")
TRC_MSG(BT_SIMAP_NO_EXPECT_REC_ATR_REQ_IN_CONPENDING, "No Expect to receive ATR_REQ in SimServerStateConnPending")
TRC_MSG(BT_SIMAP_RCV_UNHANDLED_EVENT_IN_CONPENDING, "SIM:Server CONN_PENDING state received an unhandled event: %02X")
TRC_MSG(BT_SIMAP_PACKET_HANDLED_IN_DISCPENDING, "In SimServerStateDiscPending(): DISC_RSP/DISC_IND with immd type packet is already handled")
TRC_MSG(BT_SIMAP_SEGMENTS_CAN_NOT_SEND_IN_DISCPENDING, "SIM: Server connection closed due to not send left segments of discPacket in SimServerStateDiscPending()")
TRC_MSG(BT_SIMAP_RCV_UNHANDLED_EVENT_IN_DISCPENDING, "SIM:  Server DISC_PENDING state received an unexpected event: %02X")
TRC_MSG(BT_SIMAP_RCV_CON_REQ_IN_CLOSE, "In SimServerStateClosed():  MMI accepts and receiving SIM_CONNECT_REQ, MaxMsgSize = %d")
TRC_MSG(BT_SIMAP_SEND_CON_RSP_WITH_REJ_MSGSIZE, "SIM:Server sending connect response, rejecting message size")
TRC_MSG(BT_SIMAP_SIMSERVER_BUSY_FOR_ONE_CLIENT, "SimServer is already serving one client,so reject another client at this time")
TRC_MSG(BT_SIMAP_RCV_UNEXPECTED_EVENT_IN_CLOSED, "SIM:  Server CLOSED state received an unexpected event: %02X")
TRC_MSG(BT_SIMAP_UNKNOWN_MSGID, "SIM: Unrecognized Message ID %02X")
TRC_MSG(BT_SIMAP_CON_NOT_ACCEPTED_IN_SRVCALLBACK, "Incoming connection could not be accepted in SimSrvCallback(), status: %d")
TRC_MSG(BT_SIMAP_CON_ACCEPTED_IN_SRVCALLBACK, "Incoming connection is accepted in SimSrvCallback()")
TRC_MSG(BT_SIMAP_CON_OPEN_IN_SRVCALLBACK, "Connection open is reported with status=%d in SimSrvCallback()")
TRC_MSG(BT_SIMAP_CON_CLOSED_IND_IN_SRVCALLBACK, "Connection disconnecting is reported with status=%d in SimSrvCallback()")
TRC_MSG(BT_SIMAP_CLOSED_IN_SRVCALLBACK, "Connection closed is reported with status=%d in SimSrvCallback()")
TRC_MSG(BT_SIMAP_CLOSED_NOTIFY_SIM_TASK_IN_SRVCALLBACK, "SAP connection is closed, notify SIM task to recovery SIM card!")
TRC_MSG(BT_SIMAP_SIMSERVER_AVAILABLE_IN_SRVCALLBACK, "No CON_REQ to SIM Task,now SAP Closed,SimServer is available again,oldstate=%d")
TRC_MSG(BT_SIMAP_FAILED_SEND_STATUS_IND_IN_SRVCALLBACK, "Cound not send STATUS_IND to client in SimSrvCallback(), reason:%d")
TRC_MSG(BT_SIMAP_SEND_STATUS_IND_IN_SRVCALLBACK, "Sending STATUS_IND to client in SimSrvCallback()")
TRC_MSG(BT_SIMAP_FAILED_SEND_ATR_RSP_IN_SRVCALLBACK, "Send ATR in SimSrvCallback(): result=%d,reason=%d")
TRC_MSG(BT_SIMAP_SEND_ATR_RSP_IN_SRVCALLBACK, "ATR response sent in SimSrvCallback()")
TRC_MSG(BT_SIMAP_SEND_APDU_TO_SIM_IN_SRVCALLBACK, "Send APDU_REQ to SIM task in SimSrvCallback()")
TRC_MSG(BT_SIM_SEND_POWER_OFF_TO_SIM_IN_SRVCALLBACK, "Send POWER_OFF_REQ to SIM task in SimSrvCallback()")
TRC_MSG(BT_SIMAP_NO_RULES_PROCESS_SIM_ON_REQ_IN_SRVCALLBACK, "Not matched any rules in SimSrvCallback() when receiving SAEVENT_SERVER_SIM_ON_REQ")
TRC_MSG(BT_SIMAP_POWER_OFF_RSP_TO_CLIENT, "Send SIM_POWER_OFF_RSP to client with result=%d, reason: %d in SimSrvCallback()")
TRC_MSG(BT_SIMAP_SEND_POWER_ON_RSP_TO_CLIENT_IN_SRVCALLBACK, "Send SIM_POWER_ON_RSP with result=%d and reason: %d in SimSrvCallback()")
TRC_MSG(BT_SIMAP_SEND_SET_T_RSP_TO_CLIENT_IN_SRVCALLBACK, "Send SIM_SET_TRANSPORT_PROTOCOL_TYPE_RSP with result=%d and response reason: %d")
TRC_MSG(BT_SIMAP_NO_RULES_PROCESS_RESET_REQ_IN_SRVCALLBACK, "Not matched any rules in SimSrvCallback() when receiving SAEVENT_SERVER_SIM_RESET_REQ")
TRC_MSG(BT_SIMAP_SEND_RESET_RSP_TO_CLIENT_IN_SRVCALLBACK, "Send SIM_RESET_RSP with result=%d and response reason: %d")
TRC_MSG(BT_SIMAP_SEND_CARD_RDS_RSP_TO_CLIENT_IN_SRVCALLBACK, "Send CARD_READER_STATUS response in SimSrvCallback(), reason: %d")
TRC_MSG(BT_SIMAP_STATUS_IND_SENT_IN_SRVCALLBACK, "STATUS_IND is sent with status=%d, in SimSrvCallback()")
TRC_MSG(BT_SIMAP_ADD_SDPRECORD_OK, "SEC_Register() is successful,but SDP_AddRecord() is failed  in SIM_RegisterServer()")
TRC_MSG(BT_SIMAP_REMOVE_SECREC_REG, "Call SEC_Unregister() to remove SIM(secRec) registration")
TRC_MSG(BT_SIMAP_SEC_REG_FAILED, "SEC_Register() failed in SIM_RegisterServer()")
TRC_MSG(DEREGISTER_SRV_CHANNEL, "Degister Server Channel due to SEC_Register() failed or SDP_AddRecord() failed")
TRC_MSG(BT_SIMAP_FAILED_CALL_RFREGSRVCHNL, "Failed to invoke RF_RegisterServerChannel() in SIM_RegisterServer()")
TRC_MSG(BT_SIMAP_FAILED_CLOSE_CON_IMMD, "In bt_simap_deactivate_req_hdlr(): fail to close connection with immediate type, status=0x%x")
TRC_MSG(BT_SIMAP_SRVSTATE_RCV_DEACTIVATE, "In bt_simap_deactivate_req_hdlr(): simServer state=%d, substate=%d")
TRC_MSG(BT_SIMAP_FAILED_CLOSE_CON_DEACTIVATE, "In bt_simap_deactivate_req_hdlr(): fail to close connection by RF_CloseChannel, status=0x%x")
TRC_MSG(BT_SIMAP_FAILED_CLOSE_CON_WITH_TYPE, "In bt_simap_disconnect_req_hdlr():Cannot close the connection, reason: %d, type=%d")
TRC_MSG(BT_SIMAP_CLOSE_CON_WITH_GRACEFUL, "In bt_simap_disconnect_req_hdlr():Closing the connection with graceful type")
TRC_MSG(BT_SIMAP_SIMSERVER_STATE, "In bt_simap_disconnect_req_hdlr(): SimServerState=%d")
TRC_MSG(BT_SIMAP_CON_CNF_ERROR_FROM_SIM, "In bt_sim_connect_cnf_hdlr(): receiving BT_SIM_CONNECT_CNF with Error!")
TRC_MSG(BT_SIMAP_SIMSERVER_STATE_SUBSTATE, "SimServer state=%d, substate=%d")
TRC_MSG(BT_SIMAP_RESET_CNF_ERROR_FROM_SIM, "SIM_SERVER_STATE_OPEN receiving BT_SIM_RESET_CNF with error=%d")
TRC_MSG(BT_SIMAP_RESET_RSP_TO_CLIENT, "Send SIM RESET response, result:%d, status=%d")
TRC_MSG(BT_SIMAP_POWER_ON_ERROR_FROM_SIM, "SIM_SERVER_STATE_OPEN receiving BT_SIM_RESET_REQ_SENT_POWER_ON with error=%d")
TRC_MSG(BT_SIMAP_SEND_POWER_ON_RSP_TO_CLIENT, "In bt_sim_reset_cnf_hdlr(): call SIM_ServerSimOnRsp() with result=%d successfully")
TRC_MSG(BT_SIMAP_SET_T_ERROR_FROM_SIM, "SIM_SERVER_STATE_OPEN receiving BT_SIM_RESET_REQ_SENT_SET_T with error=%d")
TRC_MSG(BT_SIMAP_SEND_SET_T_RSP_TO_CLIENT, "In bt_sim_reset_cnf_hdlr(): call SIM_ServerSetTransProtRsp() with result=%d successfully")
TRC_MSG(BT_SIMAP_RESET_CNF_ERR_RFOM_SIM_IN_CONPENDING, "In bt_sim_reset_cnf_hdlr(): SIM_SERVER_STATE_CONNECT_PENDING  receiving BT_SIM_RESET_CNF with error=%d")
TRC_MSG(BT_SIMAP_RESET_RSP_NOT_EXPECTED_IN_OPEN, "Not request RESET/POWE_ON/SET_TRANSPORT_PROTOCOL, the RESET_RSP is not expected, Ignore it!")
TRC_MSG(BT_SIMAP_GET_RESET_RSP_NOT_IN_CONPENDING_OR_OPEN, "In bt_sim_reset_cnf_hdlr(): Not in CONNECT_PENDING/Open state, should not receive BT_SIM_RESET_CNF from SIM Task")
TRC_MSG(BT_SIMAP_RCV_APDU_RSP_FROM_SIM, "In bt_sim_apdu_cnf_hdlr(): Receiving APDU_RSP from SIM task with result=%d")
TRC_MSG(BT_SIMAP_SEND_APDU_RSP_TO_CLIENT, "Apdu response sent with result=%d,status=%d,func=%d")
TRC_MSG(BT_SIMAP_NOT_EXPECTED_RCV_APDU_RSP_FROM_SIM, "In bt_sim_apdu_cnf_hdlr():Not Expect to receive APDU_RSP from SIM task, no request for this")
TRC_MSG(BT_SIMAP_RCV_GRACEFUL_DISC_PREVIOUSLY, "After completing connection procedure, MMI requested to graceful disconnection")
TRC_MSG(BT_SIMAP_ERROR_AND_NOTIFY_SIM_TO_RECOVERY, "Some Error happens and state=%d, notify SIM task to recovery successfully!")
TRC_MSG(BT_SIMAP_ERR_NO_CON_REQ_SENT_TO_SIM, "No connect_req has been sent to SIM task, receiving this disconnect_cnf in bt_sim_disconnect_cnf_hdlr() is error!")
TRC_MSG(BT_SIMAP_ERR_NO_DISC_REQ_SENT_TO_SIM, "No disconnect_req has been sent to SIM task, receiving this disconnect_cnf in bt_sim_disconnect_cnf_hdlr() is error!")
TRC_MSG(BT_SIMAP_RCV_POWER_OFF_CNF_FROM_SIM, "In bt_sim_power_off_cnf_hdlr(): Receiving POWER_OFF_CNF from SIM task with result=%d")
TRC_MSG(BT_SIMAP_SEND_POWER_OFF_RSP_TO_CLIENT, "In bt_sim_power_off_cnf_hdlr():Cound not send SIM_POWER_OFF_RSP to client with result=%d, status: %d")
TRC_MSG(BT_SIMAP_NOT_EXPECTED_RCV_POWER_OFF_RSP_FROM_SIM, "In bt_sim_power_off_cnf_hdlr(): Not Expect to receive POWER_OFF_RSP from SIM task, no request for this")
TRC_MSG(BT_SIMAP_SIM_REGSERVER, "In bt_simap_init():SIM Server cannot be registered, status=%d")
TRC_MSG(BT_SIMAP_ATR_TIMEOUT_HDLR, "Timeout callbacked in bt_simap_wait_atr_in_connect_procedure_timeout_handler()")
TRC_MSG(BT_SIMAP_GRACEFUL_TIMEOUT_HDLR, "Timeout callbacked in bt_simap_wait_req_in_graceful_disconnect_procedure_timeout_handler()")
TRC_MSG(BT_SIMAP_GRACEFUL_TIMEOUT_HDLR_CAN_NOT_CLOSE, "In bt_simap_wait_req_in_graceful_disconnect_procedure_timeout_handler():Cannot close the connection with immediate type, status: %d")
TRC_MSG(BT_SIMAP_START_TIMER, "In bt_simap_start_timer():msec=%d")
TRC_MSG(BT_SIMAP_STOP_TIMER, "In bt_simap_stop_timer()")
TRC_MSG(BT_SIMAP_NO_DEFINED_MSG_ID, "Not defined MSG_ID for SIM Access Profile,Assert it!")
TRC_MSG(BT_SIMAP_SRV_CLOSESTATE_DISC_SENT, "Recv Deactive_req, although SimServer is closed, but it waits for SIM task's DISC_CNF")
TRC_MSG(BT_SIMAP_RFCOMM_SIMSRV_BOTHCLOSED_RECV_DEACTIVE_REQ, "Recv Deactive_req, the RFCOMM and SimServer are already in CLOSED state")
TRC_MSG(BT_SIMAP_RELEASE_CONID_IN_DEACTIVE_REQ_HDLR, "Release SIM Access Profile connect_id in bt_simap_deactivate_req_hdlr")
TRC_MSG(BT_SIMAP_RECV_DEACTIVE_CHECK_DISCGRACE_TIMER, "Recv Deactivate Req, check disc with graceful timer is running or not!")
TRC_MSG(BT_SIMAP_DO_NOTHING_IN_DISC_PENDING_STATE_IN_DEACTIVE_REQ, "In DEACTIVATE_REQ, do not close RFCOMM channel again in SIM_SERVER_STATE_DISC_PENDING state")
TRC_MSG(BT_SIMAP_CLOSE_RFCOMM_IN_CONN_PENDING_STATE_IN_DEACTIVE_REQ, "In DEACTIVATE_REQ, close RFCOMM channel in SIM_SERVER_STATE_CONN_PENDING state")
TRC_MSG(BT_SIMAP_USE_DISCIND_FOR_DEACTIVE_REQ, "Using SimServerSendDiscInd() first to do deactive request")
TRC_MSG(BT_SIMAP_USE_RFCLOSECHNL_FOR_DEACTIVE_REQ, "Using RF_CloseChannel() first to do deactive request")
//TRC_MSG(BT_SIMAP_DEACTIVE_REQ_HDLR_RFCLOSECHNL_FAILED,"In bt_simap_deactiveate_req_hdlr(): RF_CloseChannel failed, status=%d")
TRC_MSG(BT_SIMAP_MMI_REJECT_SAP_CON_IN_AUTH_RSP_HDLR, "MMI rejects this SAP connection in bt_simap_auth_rsp_hdlr")
//TRC_MSG(BT_SIMAP_CONRSPERR_STATUS,"Status of SimServerSendConnRspErr =%d")
//TRC_MSG(BT_SIMAP_DISC_REQ_HDLR_RFCLOSECHNL_FAILED_STATUS,"In bt_simap_disconnect_req_hdlr(): RF_CloseChannel failed, status=%d")
TRC_MSG(BT_SIMAP_DISC_REQ_HDLR_NO_ENTRY_TO_DISC, "In bt_simap_disconnect_req_hdlr():Error! MMI has no entry to disconnect this SAP")
TRC_MSG(BT_SIMAP_DISC_REQ_HDLR_ALREADY_DISC_PENDING, "In bt_simap_disconnect_req_hdlr():Already disc pending, ignore this request")
TRC_MSG(BT_SIMAP_RECV_DISC_REQ_SIMSRV_CLOSED_WAIT_DISCCNF, "Recv Disc_req from MMI, although SimServer is closed, but it waits for SIM task's DISC_CNF")
TRC_MSG(BT_SIMAP_SIMSRV_MODE, "SimServer's test mode=%d")
TRC_MSG(BT_SIMAP_CON_CNF_HDLR_NOT_EXPECT_SIM_CON_CNF, "In bt_sim_connect_cnf_hdlr():Not Expect to receive BT_SIM_CONNECT_CNF")
//TRC_MSG(BT_SIMAP_RFCHNL_CLOSED_RESET_SIM_RSP_FAILED_OK,"RFChannel is closed, so SIM_ServerResetSimRsp() failed is ok")
//TRC_MSG(BT_SIMAP_OPENSTATE_RESET_CNF_HDLR_RFCLOSECHNL_FAILED_STATUS,"In bt_sim_openstate_reset_cnf_hdlr(): RF_CloseChannel failed, status=%d")
TRC_MSG(BT_SIMAP_OPENSTATE_SEND_POWERON_RSP_FAILED_STATUS, "In bt_sim_reset_cnf_hdlr(): SIM_SERVER_STATE_OPEN:Cound not send SIM POWER ON response, status:%d")
//TRC_MSG(BT_SIMAP_RFCHNLCLOSED_SEND_SIMONRSP_FAILED_OK,"RFChannel is closed, so SIM_ServerSimOnRsp() failed is ok")
TRC_MSG(BT_SIMAP_FAILED_STATUS, "failed with status=%d")
TRC_MSG(BT_SIMAP_OPENSTATE_SETT_CNF_HDLR_STATUS, "In bt_sim_openstate_set_transport_protocol_cnf_hdlr(): SIM_SERVER_STATE_OPEN:Cound not send SIM Set Transport Protocol Type response, status:%d")
//TRC_MSG(BT_SIMAP_RFCHNLCLOSED_SEND_SETT_RSP_FAILED_OK,"RFChannel is closed, so SIM_ServerSetTransProtRsp() failed is ok")
TRC_MSG(BT_SIMAP_RESET_CNF_HDLR_CT, "In bt_sim_reset_cnf_hdlr(), CT=%d")
TRC_MSG(BT_SIMAP_APDU_RSP_FROM_SIM_NOT_ACCESSIBLE, "APDU resp from SIM task is not accessible:physical error")
TRC_MSG(BT_SIMAP_RFCHNLCLOSED_SEND_RSP_FAILED_OK, "RFChannel is clodes, send rsp failed in bt_adp_simap is ok")
TRC_MSG(BT_SIMAP_DISC_CNF_HDLR_CARDSTATUS, "disconnect_cnf_hdlr(): cardstatus=%02X")
TRC_MSG(BT_SIMAP_RELEASE_CONID_DISC_CNF_HDLR00, "Release SIM Access Profile connect_id in bt_sim_disconnect_cnf()_00")
TRC_MSG(BT_SIMAP_DISC_CNF_CASE0, "DISC_CNF case0")
TRC_MSG(BT_SIMAP_RELEASE_CONID_DISC_CNF_HDLR01, "Release SIM Access Profile connect_id in bt_sim_disconnect_cnf()_01")
TRC_MSG(BT_SIMAP_DISC_CNF_CASE1, "DISC_CNF case1")
TRC_MSG(BT_SIMAP_RELEASE_CONID_DISC_CNF_HDLR02, "Release SIM Access Profile connect_id in bt_sim_disconnect_cnf()_02")
TRC_MSG(BT_SIMAP_DISC_CNF_CASE2, "DISC_CNF case2")
TRC_MSG(BT_SIMAP_RELEASE_CONID_DISC_CNF_HDLR03, "Release SIM Access Profile connect_id in bt_sim_disconnect_cnf()_03")
TRC_MSG(BT_SIMAP_DISC_CNF_CASE3, "DISC_CNF case3")
TRC_MSG(BT_SIMAP_RELEASE_CONID_DISC_CNF_HDLR04, "Release SIM Access Profile connect_id in bt_sim_disconnect_cnf()_04")
TRC_MSG(BT_SIMAP_DISC_CNF_CASE4, "DISC_CNF case4")
TRC_MSG(BT_SIMAP_RELEASE_CONID_DISC_CNF_HDLR05, "Release SIM Access Profile connect_id in bt_sim_disconnect_cnf()_05")
TRC_MSG(BT_SIMAP_DISC_CNF_CASE5, "DISC_CNF case5")
TRC_MSG(BT_SIMAP_RELEASE_CONID_DISC_CNF_HDLR06, "Release SIM Access Profile connect_id in bt_sim_disconnect_cnf()_06")
TRC_MSG(BT_SIMAP_DISC_CNF_CASE6, "DISC_CNF case6")
TRC_MSG(BT_SIMAP_SHOW_APDUREQCONTENT, "ShowAPDUReqContent():")
TRC_MSG(BT_SIMAP_SHOW_ONE_BYTE, "This byte=%02X")
TRC_MSG(BT_SIMAP_CHECK_PACKET_IS_GOT_FROM_LIST, "In CheckPacketIsFromList(): find returned packet in inx=%d")
TRC_MSG(BT_SIMAP_OPEN_STATE_MSGTYPE_CARDSTATUS_SUBSTATE, "In simserver open state, msgType=%02x,cardstatus=%02x,substate=%04x")
TRC_MSG(BT_SIMAP_OPENSTATE_SEND_DISCRSP_FAILED, "In SimServerStateOpen() status of SendDiscRsp=%d")
TRC_MSG(BT_SIMAP_SET_T_PACKET_HANDLED_WITH_PARMTYPE, "SET_T PACKET HANDLED with ParamType=%d")
TRC_MSG(BT_SIMAP_ALREADY_SENT_APDU_RSP_RECV_DISC_REQ, "Send APDU_RSP and its packet handled, start timer again for DISC with Graceful type")
TRC_MSG(BT_SIMAP_NOT_CORRECT_PKT_RECV_IN_OPEN_STATE, "\nIn Open State, not simPacket or discGracePacket handled received")
TRC_MSG(BT_SIMAP_IN_OPEN_STATE_CHECK_SRVFLAGS, "Open state,flags=%02x")
TRC_MSG(BT_SIMAP_CLOSE_RFCOMM_FAILED, "In Sim_Sm.c: status of RF_CloseChannel=%d")
TRC_MSG(BT_SIMAP_NO_CONRSP_WITH_OK_RETURNED, "Not CONN_RSP with ConStatus OK packet returned, No Status_IND to Client")
TRC_MSG(BT_SIMAP_RESENT_MTU_ACCEPTED, "Wait retry SAP MTU and this MTU is acceptable")
TRC_MSG(BT_SIMAP_SEND_CONRSPERR_FAILED, "Status from SendConnRspErr() =%d")
TRC_MSG(BT_SIMAP_CLOSED_EVENT_DUE_TO_REJECT_SECOND_CLIENT, "This closed event is due to SimServer is serving one client now, so reject another seesion")
TRC_MSG(BT_SIMAP_SRVCALLBACK_CASE0, "Case0:In SimSrvCallback():SimServer is available again!")
TRC_MSG(BT_SIMAP_SRVCALLBACK_RECV_CLOSED_CHECK_TIMER, "In SimSrvCallback() recv CLOSED, check timer for DISC_Graceful type")
TRC_MSG(BT_SIMAP_SET_T0_T1_NOT_SUPPORT_T1_T0, "SET T=0/T=1 but only support T=1/T=0, Send SET_T_RSP first then STATUS_IND with card not accessible later")
TRC_MSG(BT_SIMAP_CLIENT_REQ_T_TYPE, "In SimSrvCallback(): client requested T type=%d")
TRC_MSG(BT_SIMAP_RELEASE_SAP_CONID_CASE1, "Release SIM Acces Profile connect_id in Case 1")
TRC_MSG(BT_SIMAP_SIMSRV_CLOSED_RFCOMM_CLOSED_DUE_TO_DEACTIVATE_REQ, "This case is SimServer closed then RFCOMM closed due to MMI Deactivate Req, return Deactivate_CNF with ok")
TRC_MSG(BT_SIMAP_SIMSRVSENDSTATUS, "status of SimServerSendStatsu()=%02x")
TRC_MSG(BT_SIMAP_STATUS_IND_NOT_ACCESSIBLE_IN_SLOW_CON_MODE, "STATUS_IND with CARD_NOT_ACCESSIBLE will be sent in SLOW_CONNECT_MODE")
TRC_MSG(BT_SIMAP_SIMSRVRSP_NO_PKT, "In Sim.c SIM_ServerRsp(): no packets, clear server flags, case=%d")
TRC_MSG(BT_SIMAP_SLOW_CON_MODE_NOT_EXPECT_RECV_ATR_REQ, "In slow connect mode, not expect to recv ATR Req")
TRC_MSG(BT_SIMAP_PKT_INUSE, "In SimSendPacket(): its flags is BTP_FLAG_INUSE")
TRC_MSG(BT_SIMAP_FIND_FREE_PKT_INX, "In SimFindFreeAndSendPacket():Find Free packet in inx=%d")
TRC_MSG(BT_SIMAP_ALLPKT_USED, "In SimFindFreeAndSendPacket(): All packets of SimServer are bust ans used")
TRC_MSG(BT_SIMAP_SIMSRV_AVAILABLE_AGAIN, "bt_sim_disconnect_cnf_hdlr():SIMServer is avaliable again")
TRC_MSG(BT_SIMAP_CARDSTATUS_IN_POWER_OFF_HDLER, "power_off_cnf_hdlr(): cardstatus=%02X")
TRC_MSG(BT_SIMAP_ATR_TIMEOUT_NOT_IN_POWERON_STATE, "In atr_timeout:Not in POWER ON state")
TRC_MSG(BT_SIMAP_ATRTIMEOUT_SRVSTATE_AND_FLAG, "atr_timeout,simServerState=%d,flags=%02x")
TRC_MSG(BT_SIMAP_GRACEFUL_TIMEOUT_NOT_IN_POWEROFF_STATE, "In graceful_disc_timeout:Not in POWER ON state")
TRC_MSG(BT_SIMAP_GRACEFUL_DISC_TIMEOUT_SRVSTATE_AND_SUBSTATE, "graceful_disc_timeout,simServerState=%d,substate=%02x")
TRC_MSG(BT_SIMAP_GRACEFUL_DISC_TIMEOUT_CLOSE_CON_WITH_IMMED_TYPE, "In bt_simap_wait_req_in_graceful_disconnect_procedure_timeout_handler():Closing the connection with immd type")
TRC_MSG(BT_SIMAP_SEND_IMMED_DISC_IND_FAILED_STATUS, "Send DISC_IND case1 failed, status=%d")
TRC_MSG(BT_SIMAP_SEND_GRACEFUL_DISC_IND_FAILED_STATUS, "Graceful DISC ind failed, status=%d")
TRC_MSG(BT_SIMAP_CURRENT_DISC_TYPE, "BT SIMAP current disc_type=%d")
TRC_MSG(BT_SIMAP_MAKE_SIMCARD_UNAVAILABLE_THEN_SEND_STATUS_IND, "BT SIMAP PTS PRS Test Case: Send STATUS IND with unavailable")
//TRC_MSG(BT_SIMAP_SIMSRVATRRSP_NO_PKT,"In SIM_ServerAtrRsp(): no packets, clear server flags")
//TRC_MSG(BT_SIMAP_SIMSRVAPDURSP_NO_PKT,"In SIM_ServerApduRsp(): no packtes, clear server flags")
//TRC_MSG(BT_SIMAP_SIMSRVSIMONRSP_NO_PKT,"In SIM_ServerSimOnRsp(): no packets, clear server flags")
//TRC_MSG(BT_SIMAP_SIMSRVSIMOFFRSP_NO_PKT,"In SIM_ServerSimOffRsp(): no packets, clear server flags")
TRC_MSG(SIMULATE_MMI_TO_SEND_DEACTIVATE_MSG_TO_SIMAP, "Simulate MMI to send DeActivate Msg to SIMAP")
TRC_MSG(NEW_CURRENT_T_TYPExD, "New current T type=%d")
TRC_MSG(CHANGE_TO_IT_MODE, "Change to IT mode")
TRC_MSG(NEW_SUPPORTED_T_TYPExD, "New supported T type=%d")
TRC_MSG(EXIT_SNIFF_MODE_FOR_SAP_CONNECTION, "Exit Sniff mode for SAP connection")
TRC_MSG(NEW_SIMCARDSTATUSxXxXxX, "New simcardstatus=0x%x,%x,%x")
TRC_MSG(SIMULATE_MMI_TO_SEND_ACTIVATE_MSG_TO_SIMAP, "Simulate MMI to send Activate Msg to SIMAP")
TRC_MSG(SIMULATE_MMI_SEND_DISC_REQ_WITH_GRACEFUL_TYPE_TO_BT, "Simulate MMI: send DISC_REQ with Graceful type to BT")
TRC_MSG(SIMULATE_MMI_SEND_DISC_REQ_WITH_IMMEDIATE_TYPE_TO_BT, "Simulate MMI: send DISC_REQ with Immediate type to BT")
TRC_MSG(SIMULATE_MMI_TO_SEND_AUTHORIZATION_RESPONSE_MSG_TO_SIMAP, "Simulate MMI to send AUTH_RSP Msg to SIMAP, result=%d")
TRC_MSG(SIMULATE_SIM_CARD_NOT_ACCESSIBLE_FOR_PTS_TESTING, "Simulate SIM card is not accessible and send STATUS_IND for PTS testing")

TRC_MSG(BT_SIMAP_SIMCARDREADER_STATUS, "[BT SIMAP]current_simcardreader_status=0x%x")
TRC_MSG(BT_SIMAP_SEND_PACKET, "[BT SIMAP]SimFindFreeAndSendPacket:MsgType=%d, Parm1Type=%d, parm1=%d, Parm2Type=%d, parm2=%d")
TRC_MSG(BT_SIMAP_SEND_ATRRSP_ERR, "[BT SIMAP]SimServerSendAtrRspErr: Result=%d")
TRC_MSG(BT_SIMAP_SEND_ATRRSP, "[BT SIMAP]SimServerSendAtrRspNoErr: Result=%d, Atr=%s")
TRC_MSG(BT_SIMAP_RFSEND_RETURN, "[BT SIMAP]RF_SendData return: %d")
TRC_MSG(BT_SIMAP_CLOSE_RFCOMM_CHNL, "[BT SIMAP]RF_CloseChannel... ")
TRC_MSG(BT_SIMAP_RESET_IND, "[simap]bt_simap_reset: SIM(simServer)[0].state=%d")
TRC_MSG(BT_SIMAP_NOTIFY_APP_RESET_IND, "[simap]notify app: SIMAP_EVENT_BT_RESET_IND")

TRC_MSG(BT_SIMAP_ADP_INIT, "[simap_adp]simap_adp_init")
TRC_MSG(BT_SIMAP_ADP_DEINIT, "[simap_adp]simap_adp_deinit")
TRC_MSG(BT_SIMAP_ADP_RESET, "[simap_adp]simap_adp_reset...")
TRC_MSG(BT_SIMAP_ADP_HDL_MSG, "[simap_adp]btmtk_adp_simap_handle_message: %d")


/* SIMAP TRACE END */

/* DUN TRACE START */
TRC_MSG(BT_DG_ACITVATE_REQ, "=====[BTAP][BT_DG_ACITVATE_REQ]=====")
TRC_MSG(BT_DG_DEACITVATE_REQ, "=====[BTAP][BT_DG_DEACITVATE_REQ]=====")
TRC_MSG(BT_DG_DEACITVATE_CFM, "=====[BTAP][BT_DG_DEACITVATE_CFM]=====")
TRC_MSG(BT_DG_CONNECT_IND, "=====[BTAP][BT_DG_CONNECT_IND]=====")
TRC_MSG(BT_DG_DATA_REQ, "=====[BTAP][BT_DG_DATA_REQ]===== payload: %d")
TRC_MSG(BT_DG_DATA_CFM, "=====[BTAP][BT_DG_DATA_CFM]=====")
TRC_MSG(BT_DG_DATA_IND, "=====[BTAP][BT_DG_DATA_IND]===== payload: %d")
TRC_MSG(BT_DG_DATA_RES, "=====[BTAP][BT_DG_DATA_RES]=====")
TRC_MSG(BT_DG_CONTROL_REQ, "=====[BTAP][BT_DG_CONTROL_REQ]=====")
TRC_MSG(BT_DG_CONTROL_IND, "=====[BTAP][BT_DG_CONTROL_IND]===== modemStatus=0x%x")
TRC_MSG(BT_DG_PORTNEG_IND, "=====[BTAP][BT_DG_PORTNEG_IND]=====")
TRC_MSG(BT_DG_PORTNEG_RES, "=====[BTAP][BT_DG_PORTNEG_RES]=====")
TRC_MSG(BT_DG_DISCONNECT_REQ, "=====[BTAP][BT_DG_DISCONNECT_REQ]=====")
TRC_MSG(BT_DG_DISCONNECT_IND, "=====[BTAP][BT_DG_DISCONNECT_IND]=====")
/* DUN TRACE END */


/* AVRCP TRACE START */
TRC_MSG(BT_AVRCP_VERSION, "[AVRCP][AVRCP_Init]AVRCP_V%d")
TRC_MSG(BT_AVRCP_AVCTP_CBK, "[AVRCP][AvrcpAvctpCallback]AVCTP_EVENT:%d")
TRC_MSG(BT_AVRCP_ROMOVE_DATALINK, "[AVRCP]removeDataLink")
TRC_MSG(BT_AVRCP_ROMOTE_DEVNAME, "[AVRCP] Remote dev 0x%x 0x%x 0x%x 0x%x")
TRC_MSG(BT_AVRCP_ROMOTE_DEVNAME1, "[AVRCP] Remote is (%s) len:%d a2dpState:%d")
TRC_MSG(BT_AVRCP_ROMOTE_DEVNAME2, "[AVRCP] Remote name is not ready. skip reject-check")
TRC_MSG(BT_AVRCP_ROMOTE_DEVNAME3, "[AVRCP] Remote is PTS. skip reject-check")
TRC_MSG(BT_AVRCP_ROMOTE_DEVNAME4, "[AVRCP] warning no remote dev_name")
TRC_MSG(BT_AVRCP_REJECT_CONNID_A2DP, "[AVRCP]reject connect ind due to a2dp disconnected")
TRC_MSG(BT_AVRCP_SAVE_REMOTE_ADDR, "[AVRCP]save connected addr 0x%x 0x%x 0x%x 0x%x 0x%x 0x%x")
TRC_MSG(BT_AVRCP_REG_VER, "[AVRCP][AVRCP_Register] activeVersion:%d")
TRC_MSG(BT_AVRCP_CONNECT_ADDR, "[AVRCP][AVRCP_Connect]connect to latest addr 0x%x 0x%x 0x%x 0x%x 0x%x 0x%x")
TRC_MSG(BT_AVRCP_CONNECT_RETRY, "[AVRCP][AVRCP_ConnectRetry]status:%d remDev:0x%x")
TRC_MSG(BT_AVRCP_CURTX_SBUNIT, "[AVRCP][AVRCP_SendQueuePacket]sbunit type:%d id%d")
TRC_MSG(BT_AVRCP_CONNECT_FAIL_REPORT, "[AVRCP][AvrcpReportFailedConnect]remove link handler")
TRC_MSG(BT_AVRCP_CMGR_CBK_STATUS, "[AVRCP][AvrcpCmgrCallback]status:%d")
TRC_MSG(BT_AVRCP_FFTIMER, "[AVRCP][AvrcpFFTimerSendRelease]fftimer check ffKey:%d ffPressed:%d")
TRC_MSG(BT_AVRCP_FFTIMER_EXPIRE_TO_UPPER, "[AVRCP][AvrcpFFTimerSendRelease]fftimer expire to upper layer")
TRC_MSG(BT_AVRCP_FFCMD_KEYCODE, "[AVRCP][AvrcpHandleFFCmd]fftimer keyCode:0x%x")
TRC_MSG(BT_AVRCP_SDP_REG_MUCH, "[AVRCP][AvrcpRegisterSdp]role:%d register too much:%d")
TRC_MSG(BT_AVRCP_SDP_REG_STATUS, "[AVRCP][AvrcpRegisterSdp]role:%d status:%d")
TRC_MSG(BT_AVRCP_SDP_DEREG_STATUS, "[AVRCP][AvrcpDeregisterSdp]status:%d")
TRC_MSG(BT_AVRCP_PARSER_VERSION, "[AVRCP][parseAvrcpVersion]type: %d, len: %d")
TRC_MSG(BT_AVRCP_PARSER_VERSION_UUID16, "[AVRCP][parseAvrcpVersion]UUID16: 0x%04x")
TRC_MSG(BT_AVRCP_PARSER_VERSION_UUID32, "[AVRCP][parseAvrcpVersion]UUID32: 0x%08x")
TRC_MSG(BT_AVRCP_PARSER_VERSION_UUID128, "[AVRCP][parseAvrcpVersion]UUID128: %02x%02x-%02x%02x-%02x%02x-%02x%02x-%02x%02x-%02x%02x-%02x%02x-%02x%02x")
TRC_MSG(BT_AVRCP_PARSER_VERSION_INVALID_LEN, "[AVRCP][parseAvrcpVersion]Invalide uuid_len: %d")
TRC_MSG(BT_AVRCP_PARSER_VERSION_INVALID_TYPE, "[AVRCP][parseAvrcpVersion]Invalid type: %d when parsing uuid")
TRC_MSG(BT_AVRCP_PARSER_VERSION_NO, "[AVRCP][parseAvrcpVersion]version:0x%x")
TRC_MSG(BT_AVRCP_SDP_CTCB_ATTR , "[AVRCP][avrcpQueryCTCallback]SDP attr_value[0]:0x%x attr_value[1]:0x%x attr_value[2]:0x%x attr_value[3]:0x%x")
TRC_MSG(BT_AVRCP_SDP_CTCB_FEATURE , "[AVRCP][avrcpQueryCTCallback]SDP chnl->remoteCTSdp.ctFeatureFlag:%d")
TRC_MSG(BT_AVRCP_SDP_CTCB_ERR , "[AVRCP][avrcpQueryCTCallback]SDP error status:%d")
TRC_MSG(BT_AVRCP_SDP_CTCB_VER , "[AVRCP][avrcpQueryCTCallback]SDP ctVersion:%d")
TRC_MSG(BT_AVRCP_SDP_CONNECT_TIMEOUT_STATUS, "[AVRCP][AVRCP_Connect_Timeout]status:%d")
TRC_MSG(BT_AVRCP_SDPDB_VER_10, "[AVRCP][AvrcpSdpDB_GetAttribute]waring should use 0x10 BCD as version. change 10 to 0x10")
TRC_MSG(BT_AVRCP_SDPDB_VER_13, "[AVRCP][AvrcpSdpDB_GetAttribute]waring should use 0x13 BCD as version. change 13 to 0x13")
TRC_MSG(BT_AVRCP_SDPDB_TG, "[AVRCP][AvrcpSdpDB_GetAttribute]sdp %d TG role")
TRC_MSG(BT_AVRCP_SDPDB_CT, "[AVRCP][AvrcpSdpDB_GetAttribute]sdp %d CT role")
TRC_MSG(BT_AVRCP_UTIL_ACTIVATE_VER, "[AVRCP][AVRCP_UitlActivateReq]ver:%d sdpefature:%d")
TRC_MSG(BT_AVRCP_UTIL_ACTIVATE_DONE, "[AVRCP][AVRCP_UitlActivateReq]V%d compiled")
TRC_MSG(BT_AVRCP_UTIL_CONNECT_RETRY_FLAG, "[AVRCP][AVRCP_UitlConnectReq]retry:%d Flag:%d")
TRC_MSG(BT_AVRCP_UTIL_CONNECT_WRONG_CHL, "[AVRCP]wrong chnl_num:%d")
TRC_MSG(BT_AVRCP_UTIL_CMD_FRAME_TRANSID, "[AVRCP][AVRCP_UitlCmdFrameRspInd]transId:%d")
TRC_MSG(BT_AVRCP_UTIL_CMD_FRAME_KEY, "[AVRCP][AVRCP_UitlCmdFrameRspInd]release key:0x%x")
TRC_MSG(BT_AVRCP_UTIL_CMD_FRAME_IGNORE_FAIL, "[AVRCP][AVRCP_UitlCmdFrameRspInd]WRN! AVRCP ignore the fail to send frame_ind_rsp")
TRC_MSG(BT_AVRCP_UTIL_BWS_DISCONNECT_STATUS, "[AVRCP][AVRCP_UitlInternalBrowseDisconnectReq]DisconnectBrowse status:%d")
TRC_MSG(BT_AVRCP_UTIL_GET_ATTR_RSP_MANY_DATA, "[AVRCP][AVRCP_UtilAVRCPCmdGetElementAttributesRsp]too many data buffer_len:%d next-attrib:%d max:%d")
TRC_MSG(BT_AVRCP_UTIL_GET_ATTR_RSP_LEN0, "[AVRCP][AVRCP_UtilAVRCPCmdGetElementAttributesRsp]warning attribute-element is 0 length ")
TRC_MSG(BT_AVRCP_UTIL_GET_ATTR_CHANGE_COUNT, "[AVRCP][AVRCP_UtilAVRCPCmdGetElementAttributesRsp]change count:%d to i:%d buffer_len:%d")
TRC_MSG(BT_AVRCP_UTIL_GET_ATTR_NO_ELEM, "[AVRCP][AVRCP_UtilAVRCPCmdGetElementAttributesRsp]no element ! regarding to spec. append a 1-length empty space song title return ")
TRC_MSG(BT_AVRCP_SDP_QUERY_REQ_INFO, "[AVRCP][AVRCP_UtilAVRCPSDP_Query_Req]chnl:%d role:%d state:%d")
TRC_MSG(BT_AVRCP_SDP_QUERY_REQ_STATUS, "[AVRCP][AVRCP_UtilAVRCPSDP_Query_Req]multi status:%d")
TRC_MSG(BT_AVRCP_UTIL_INIT_INFO, "[AVRCP][AVRCP_UtilInit]AVRCP_NUM_TX_PACKETS:%d AVRCP_MAX_PACKET_LEN:%d")
TRC_MSG(BT_AVRCP_CMD_IND_DISPATCHER_INVALID_EVENT, "[AVRCP][AvrcpHandleCBAVRCPCmdInd_Dispatcher]Invalide event_id:%d reject it !")
TRC_MSG(BT_AVRCP_AVC_RES_REJECT, "[AVRCP][AvrcpHandleCBAVCResponse]warning ! Reject the invalid cmd")
TRC_MSG(BT_AVRCP_SEND_CMD_FRAME_DATA_LOST, "[AVRCP][bt_avrcp_send_cmd_frame_ind][WRN] AVRCP receive too many data. Throw it!")
TRC_MSG(BT_AVRCP_APP_CALLBACK_IGNORE, "[AVRCP][avrcp_app_callback]warning ignore the event:%d")
TRC_MSG(BT_AVRCP_MSG_HANDLE_ACTIVE_SIZE, "[AVRCP][avrcp_adp_message_handler]bt_avrcp_activate_req_structsize is:%d")
TRC_MSG(BT_AVRCP_SDP_QUERY_IND, "[AVRCP][bt_avrcp_send_sdp_query_ind] sdp query ind status:%d tg:0x%x tgfeature:0x%x,ct:0x%x ctfeature:0x%x")
TRC_MSG(BT_AVRCP_MSG_HANDLE_TEST, "[AVRCP][avrcp_adp_message_handler]forward cmd")
    
TRC_MSG(BT_AVRCP_ROLE_STATE	, "=====[AVRCP][ AVRCP Role = [%d], State = [%d] ]=====")
TRC_MSG(BT_AVRCP_AVTIVATE_DEREGISTER_RESULT	, "=====[AVRCP][ACTIVATE][ AVRCP_Deregister() Result ==> Result = [%d] ]=====")
TRC_MSG(BT_AVRCP_AVTIVATE_REGISTER_RESULT	, "=====[AVRCP][ACTIVATE][ AVRCP_Register() Result ==> Chnl = [%d], Result = [%d] ]=====")
TRC_MSG(BT_AVRCP_DEAVTIVATE_DEREGISTER_RESULT	, "=====[AVRCP][DEACTIVATE][ AVRCP_Deregister() Result ==> Chnl = [%d], Result = [%d] ]=====")
TRC_MSG(BT_AVRCP_CONNECT_RESULT	, "=====[AVRCP][CONNECT][ AVRCP_Connect() Result ==> Chnl = [%d], Result = [%d] ]=====")
TRC_MSG(BT_AVRCP_CONNECT_IND_RES_RESULT	, "=====[AVRCP][CONNECT_IND_RES][ AVRCP_ConnectRsp() Result ==> Chnl = [%d], Result = [%d] ]=====")
TRC_MSG(BT_AVRCP_DISCONNECT_RESULT	, "=====[AVRCP][DISCONNECT][ AVRCP_Disconnect() Result ==> Chnl = [%d], Result = [%d] ]=====")
TRC_MSG(BT_AVRCP_CMD_REQ_RESULT	, "=====[AVRCP][CMD_REQ][ AVRCP_SendCommand() Result ==> Chnl = [%d], Result = [%d] ]=====")
TRC_MSG(BT_AVRCP_CMD_RSP_IND_RESULT	, "=====[AVRCP][CMD_RSP_IND][ AVRCP_SendResponse() Result ==> Chnl = [%d], Result = [%d] ]=====")
TRC_MSG(BT_AVRCP_CALLBACK	, "=====[AVRCP][CALLBACK][ avrcp_app_callback() ==> Events = [%d] ]=====")
TRC_MSG(AVC_SENDCONTINUEBT_DEBUGx02X, "AVC_SendContinue:%02x")
TRC_MSG(SEND_CONTINUE_CHNL_STATE_IS_AVC_TRANS_STATE_FIRST, "Send Continue, chnl state is AVC_TRANS_STATE_FIRST")
TRC_MSG(BT_AVC_TX_TIMEOUT, "AVC:  TX Timeout and aclTxPacketsLeft=%d")
TRC_MSG(BT_AVCRCP_DISCONNECT_IN_FRAGEMENT, "[AVRCP] disconnect within a fragmented packet:0x%x")
TRC_MSG(AVRCP_CALLBACK_EVENT_CONNECT	, "=====[AVRCP][CALLBACK][ avrcp_adp_callback_connect() ==> Role = [%d], State = [%d] ]=====")
TRC_MSG(AVRCP_CALLBACK_EVENT_CONNECT_IND	, "=====[AVRCP][CALLBACK][ avrcp_adp_callback_connect_ind() ==> Role = [%d], State = [%d] ]=====")
TRC_MSG(AVRCP_CALLBACK_EVENT_CONNECT_IND_RSP	, "=====[AVRCP][CALLBACK][ avrcp_adp_callback_connect_ind Result ==> Result = [%d] ]=====")
TRC_MSG(AVRCP_CALLBACK_EVENT_DISCONNECT	, "=====[AVRCP][CALLBACK][ AvrcpUtilCallbackDisconnect() ==> Role = [%d], State = [%d] ]=====")
TRC_MSG(AVRCP_CALLBACK_EVENT_CMD_RSP	, "=====[AVRCP][CALLBACK][ AvrcpUtilCallbackCmdCnf() ==> Role = [%d], State = [%d], Event = [%d] ]=====")
TRC_MSG(AVRCP_CALLBACK_EVENT_CMD_IND	, "=====[AVRCP][CALLBACK][ AvrcpUtilCallbackCmdInd() ==> Role = [%d], State = [%d] ]=====")
TRC_MSG(AVRCP_CALLBACK_EVENT_CMD_MORE_DATA	, "=====[AVRCP][CALLBACK][ avrcp_adp_callback_more_data() ==> Role = [%d], State = [%d] ]=====")
TRC_MSG(AVRCP_CALLBACK_EVENT_CMD_TX_DONE	, "=====[AVRCP][CALLBACK][ avrcp_adp_callback_tx_done() ==> Role = [%d], State = [%d], ctype = [%d]]=====")
TRC_MSG(BT_AVRCP_UTIL_REGISTERCB , "[AVRCP] UTIL_REGISTERCB")
TRC_MSG(BT_AVRCP_UTIL_INIT , "[AVRCP] UTIL_INIT")
TRC_MSG(BT_AVRCP_UTIL_ACTIVATE_REQ , "[AVRCP] UTIL_ACTIVATE_REQ num:%d role:%d")
TRC_MSG(BT_AVRCP_UTIL_DEACTIVATE_REQ , "[AVRCP] UTIL_DEACTIVATE_REQ num:%d")
TRC_MSG(BT_AVRCP_UTIL_CONNECT_REQ , "[AVRCP] UTIL_CONNECT_REQ num:%d role:%d")
TRC_MSG(BT_AVRCP_UTIL_CONNECT_IND_RES , "[AVRCP] UTIL_CONNECT_IND_RES num:%d accept:%d")
TRC_MSG(BT_AVRCP_UTIL_DISCONNECT_REQ , "[AVRCP] UTIL_DISCONNECT_REQ num:%d ")
TRC_MSG(BT_AVRCP_UTIL_CMD_FRAME_REQ , "[AVRCP] UTIL_CMD_FRAME_REQ num:%d ctype:%d")
TRC_MSG(BT_AVRCP_UTIL_CMD_FRAME_RSP_IND ,   "[AVRCP] UTIL_CMD_FRAME_RSP_IND num:%d ctype:%d")
TRC_MSG(BT_AVRCP_UTIL_APP_CALLBACK ,   "[AVRCP] AvrcpUtilCallback event:%d")
TRC_MSG(BT_AVRCP_SDP_REGISTER ,   "[AVRCP] SDP_REGISTER role:%d")
TRC_MSG(BT_AVRCP_SDP_DEREGISTER ,   "[AVRCP] SDP_DEREGISTER role:%d")
TRC_MSG(BT_AVRCP_SDP_CREATEACL ,   "[AVRCP] CREATE_ACL status:%d")
TRC_MSG(BT_AVRCP_SDP_START_QUERY ,   "[AVRCP] START_QUERY role:0x%x")
TRC_MSG(BT_AVRCP_SDP_QUERY_CB ,   "[AVRCP] QUERY_CB result:%d")
TRC_MSG(BT_AVRCP_SDP_CONNECT_TIMEOUT ,   "[AVRCP] CONNECT_TIMEOUT try to connect psmtype:0x%x")
TRC_MSG(BT_AVRCP_BROWSE_CALLBACK , "=====[AVRCP][BWS][CALLBACK][ avrcp_browse_callback() ==> Events = [%d] ]=====")
TRC_MSG(BT_AVRCP_BROWSE_CALLBACK_CONNECT	, "=====[AVRCP][BWS][CALLBACK][ avrcp_adp_callback_connect() ==> Role = [%d], mtu = [%d] ]=====")
TRC_MSG(BT_AVRCP_BROWSE_CALLBACK_CONNECT_IND	, "=====[AVRCP][BWS][CALLBACK][ avrcp_adp_callback_connect_ind() ==> Role = [%d], mtu = [%d] ]=====")
TRC_MSG(BT_AVRCP_BROWSE_CALLBACK_CONNECT_IND_RSP	, "=====[AVRCP][BWS][CALLBACK][ avrcp_adp_callback_connect_ind Result ==> Result = [%d] ]=====")
TRC_MSG(BT_AVRCP_BROWSE_CALLBACK_DISCONNECT	, "=====[AVRCP][BWS][CALLBACK][ avrcp_adp_callback_disconnect() ==> Role = [%d], State = [%d] ]=====")
TRC_MSG(BT_AVRCP_CONTINUE_TIMEOUT , "[AVRCP][WRN] AvctpContinueTimeout chnl:0x%x packet:0x%x")
TRC_MSG(BT_AVRCP_CONTINUE_SEND_FAIL , "[AVRCP] Fail to send continue packet status:%d")
TRC_MSG(BT_AVRCP_CONNECT_CHECK , "[AVRCP][WRN] CONNECTED Error. Has queued packets in txPacketList packet:0x%x")
TRC_MSG(BT_AVRCP_DISCONNECT_CHECK , "[AVRCP][WRN] Has queued packets in txPacketList packet:0x%x")
TRC_MSG(BT_AVRCP_TX_FINISH , "[AVRCP][UTIL] AVRCP_EVENT_TX  finish curQueueFrame:0x%x")
TRC_MSG(BT_AVRCP_UPDATE_TXSTATE , "[AVRCP] Update curTxState:%d")
TRC_MSG(BT_AVRCP_BWS_UPDATE_TXSTATE , "[AVRCP][BWS] Update curBrowseTxState:%d")
TRC_MSG(BT_AVRCP_BWS_NO_CLEANUP_PACKET , "[AVRCP][BWS] Not empty! chnl->curBrowseQueueFrame:0x%x")
TRC_MSG(BT_AVRCP_SEND_NEXT_PACKET , "[AVRCP][UTIL] Send Next queued packet:0x%x status:%d")
TRC_MSG(BT_AVRCP_FAIL_NEXT_PACKET , "[AVRCP][UTIL] Fail Send next browse packet:0x%x")
TRC_MSG(BT_AVRCP_TX_FINISH_NOT_EMPTY , "[AVRCP] Tx-Finish but QueueFrame Not Empty. parms.event:%d curQueueFrame:0x%x")
TRC_MSG(BT_AVRCP_BWS_AVCTP_CALLBACK , "[AVRCP][BWS][CB] AvrcpBrowseAvctpCallback event:%d")
TRC_MSG(BT_AVRCP_BWS_CONNECT_CHECK , "[AVRCP][WRN] Has queued browse packets in txBrowsePacketList packet:0x%x")
TRC_MSG(BT_AVRCP_BWS_WRONG_CHANNEL , "[AVRCP][BWS] Receive browse packet in AVRCP channel. pdu-id:%d")
TRC_MSG(BT_AVRCP_DISC_FLAG_IS , "[AVRCP][BWS] discFlag is True. Disconnect the channel")
TRC_MSG(BT_AVRCP_BWS_DISC_CHECK , "[AVRCP][WRN] Has queued browse packets in txBrowse PacketList packet:0x%x")
TRC_MSG(BT_AVRCP_BWS_AUTO_ACCEPT , "[AVRCP][BWS] Auto accept the browse channel !")
TRC_MSG(BT_AVRCP_BWS_REJECT_CONNECTION , "[AVRCP][BWS] Reject the browse channel signal-state:%d !")
TRC_MSG(BT_AVRCP_BWS_FRAGMENT_PACKET_WRN , "[AVRCP][BWS][WRN] A fragmented browse packet !")
TRC_MSG(BT_AVRCP_BWS_IGNORE_FRAGMENT , "[AVRCP][BWS][WRN] Ignore a fragmented browsed packet !")
TRC_MSG(BT_AVRCP_BWS_TX_FINISH , "[AVRCP][UTIL][BWS] AvrcpBrowseAvctpCallback AVRCP_EVENT_TX_DONE release:0x%x!")
TRC_MSG(BT_AVRCP_BWS_NEXT_PACKET , "[AVRCP][UTIL][BWS] Tx_done send next browse queued packet:%x status:%d")
TRC_MSG(BT_AVRCP_BWS_FAIL_NEXT , "[AVRCP][UTIL][WRN] Fail to send next browse packet:0x%x")
TRC_MSG(BT_AVRCP_BWS_REGISTER_FAIL , "[AVRCP][BWS] Register Browse callback fail BtStatus:%d")
TRC_MSG(BT_AVRCP_COMPOSE_SINGLE_CMD , "[AVRCP] ComposeSingleAVCTP cmd ctype:%d u2DataOffset:%d ctype:%d")
TRC_MSG(BT_AVRCP_WRONG_PASSTHRU_SIZE , "[AVRCP][ERR] Wrong Pass packet size! Offset:%d operandLen:%d maxMtu:%d")
TRC_MSG(BT_AVRCP_WRONG_QUEUE_PACKET_TYPE , "[AVRCP][ERR] Wrong packet type ! %d")
TRC_MSG(BT_AVRCP_COMPOSE_SINGLE_RSP , "[AVRCP] ComposeSingleAVCTP RSP ctype:%d u2DataOffset:%d ctype:%d")
TRC_MSG(BT_AVRCP_SEND_QUEUE_PACKET , "[AVRCP] AVRCP_SendQueuePacket state:%d data_len:%d")
TRC_MSG(BT_AVRCP_CMD_TYPE_NOT_SINGLE , "[AVRCP] Cmd Packet type is not single type:%d !")
TRC_MSG(BT_AVRCP_PUT_PACKET_TO_QUEUELIST , "[AVRCP][UTIL] Queue a packet:0x%x ")
TRC_MSG(BT_AVRCP_CONTINUE_QUEUE_PACKET , "[AVRCP] AVRCP_ContinueQueuePacket state:%d")
TRC_MSG(BT_AVRCP_CONTINUE_QUEUE_FAIL , "[AVRCP][UTIL] Fail to continue packet TxState:%d")
TRC_MSG(BT_AVRCP_BWS_SEND_QUEUE_PACKET , "[AVRCP][BWS] SendBrowseQueuePacket curBrowseTxState:%d")
TRC_MSG(BT_AVRCP_BWS_PACKET_TOO_LARGE , "[AVRCP][UTIL][BWS] Packet size is too larget mtu:%d data_len:%d")
TRC_MSG(BT_AVRCP_BWS_PUT_PACKET_TO_QUEUELIST , "[AVRCP][UTIL][BWS] Queue a packet:0x%x")
TRC_MSG(BT_AVRCP_GET_SINGLE_AVRCP_MTU , "[AVRCP] GetSinglePacketMtu u2Max:%d bBrowse:%d")
TRC_MSG(BT_AVRCP_CMGR_CALLBACK , "[AVRCP][CB] AvrcpCmgrCallback event:%d")
TRC_MSG(BT_AVRCP_SDP_TG_CALLBACK , "[AVRCP][CB] avrcpQueryTGCallback sdp search result:%d attr-indx:%d")
TRC_MSG(BT_AVRCP_SDP_TG_INFO, "[AVRCP] SDP TG INFO avail:%d ver:0x%x featuer:0x%x bws:0x%x")
TRC_MSG(BT_AVRCP_SDP_CT_CALLBACK , "[AVRCP][CB] avrcpQueryCTCallback sdp search result:%d attr-indx:%d")
TRC_MSG(BT_AVRCP_SDP_CT_INFO, "[AVRCP] SDP CT INFO avail:%d ver:0x%x featuer:0x%x bws:0x%x")
TRC_MSG(BT_AVRCP_PARSE_RSP_FAIL , "[AVRCP] Fail to parse the response packet pdu_id:%d")
TRC_MSG(BT_AVRCP_DISC_BWS_CHANNEL , "[AVRCP][WRN] Browse channal is existed. Disconnect it! cntx:0x%x")
TRC_MSG(BT_AVRCP_UTIL_PICK_PACKET , "[AVRCP][UTIL] AVRCP_UitlCmdFrame select a packet:0x%x")
TRC_MSG(BT_AVRCP_UTIL_INSERT_PACKET , "[AVRCP][UTIL] Insert freePacketList:0x%x packet:0x%x packet->data:0x%x")
TRC_MSG(BT_AVRCP_UTIL_RSP_PICK_PACKET , "[AVRCP][UTIL] AVRCP_UitlCmdFrameRspInd select a packet:%x")
TRC_MSG(BT_AVRCP_UTIL_REJECT_PICK_PACKET , "[AVRCP][UTIL] AVRCP_UtilSendAVRCPReject select a packet:%x")
TRC_MSG(BT_AVRCP_UTIL_BWS_PICK_PACKET , "[AVRCP][UTIL][BWS] AVRCP_UitlCmdFrame select a packet:%x")
TRC_MSG(BT_AVRCP_UTIL_BWS_INSERT_PACKET , "[AVRCP][UTIL][BWS] Insert freePacketList:0x%x packet:0x%x packet->data:0x%x")
TRC_MSG(BT_AVRCP_UTIL_BWS_REJECT , "[AVRCP][UTIL][BWS] AVRCP_UtilSendAVRCPBrowseReject select a packet:%x")
TRC_MSG(BT_AVRCP_UTIL_NO_AVAILABLE , "[AVRCP][WRN] No available packet for c_type:%d!")
TRC_MSG(BT_AVRCP_SEND_CMD_PDU_FAIL , "[AVRCP] Send cmd fail pdu_id:%d")
TRC_MSG(BT_AVRCP_BWS_SEND_CMD_PDU_FAIL , "[AVRCP][BWS] send cmd fail pdu_id:%d")
TRC_MSG(BT_AVRCP_PARSE_AV13_PDU_FAIL , "[AVRCP] Fail to parse avrcp specific cmd:%d param_len:%d")
TRC_MSG(BT_AVRCP_CB_TX_ERROR , "[AVRCP][WRN] AVRCP_EVENT_TX_ERROR chnl->curQueueFrame:0x%x Parms->p.queueFrame:%x")
TRC_MSG(BT_AVRCP_NOT_SIG_COMPANY_ID , "[AVRCP][WRN] opcode:0 but company id is %x%x%x")
TRC_MSG(BT_AVRCP_UNKNOW_AV_TYPE , "[AVRCP] Uknow packet type. Unable to parse it opcode:%d")
TRC_MSG(BT_AVRCP_PDUID_NOT_MATCH , "[AVRCP] Not match start_pdu_id:%d pdu_id:%d")
TRC_MSG(BT_AVRCP_ABORT_CONTINUE , "[AVRCP][UTIL] Abort continue packet:%x")
TRC_MSG(BT_AVRCP_REJECT_BWS_PACKET , "[AVRCP][WRN] Receive browse pdu-id in AVCTP channel ! reject it")
TRC_MSG(BT_AVRCP_CONTI_NO_DATA , "[AVRCP] No data to send !")
TRC_MSG(BT_AVRCP_TOO_MANY_ITEM , "[AVRCP][WRN] Too many item num:%d max:%d")
TRC_MSG(BT_AVRCP_ENCODE_FOLDER_ITEM , "[AVRCP] Encode tyep:%d len:%d offset:%d")
TRC_MSG(BT_AVRCP_TOO_LARGE_LENGTH , "[AVRCP] Too large name_length:%d max:%d")
TRC_MSG(BT_AVRCP_WRONG_DATA_OFFSET , "[AVRCP] Wrong name_offset:%d")
TRC_MSG(BT_AVRCP_ENCODE_FOLDER_ITEM_FAIL , "[AVRCP][WRN] Fail to encode the folder item type:%d")
TRC_MSG(BT_AVRCP_NO_MORE_DATA_SPACE , "[AVRCP] No space for more text data")
TRC_MSG(BT_AVRCP_INIT_PICK_PACKET , "[AVRCP][UTIL] Init insert free packet:0x%x data:0x%x")
TRC_MSG(BT_AVRCP_SEND_REJECT_PACKET , "[AVRCP] AVRCP_UtilSendAVRCPReject chnl_num:%d status:%d")
TRC_MSG(BT_AVRCP_BWS_SEND_REJECT_PACKET , "[AVRCP][BWS] AVRCP_UtilSendAVRCPBrowseReject chnl_num:%d status:%d")
TRC_MSG(BT_AVRCP_EMPTY_PACKET_LIST , "[AVRCP][WRN] Packet list is empty !")
TRC_MSG(BT_AVRCP_MARSHAL_BUFFER_WRN , "[AVRCP][WRN] Marshaling buffer is small. buffer_len:%d max:%d")
TRC_MSG(BT_AVRCP_CONTINUE_NO_BUFFER , "[AVRCP][WRN] Too much data Abort the transmission parm_len:%d cur_data_offset:%d")
TRC_MSG(BT_AVRCP_NOT_IN_MORE_STATE , "[AVRCP][WRN] Receive more data but AVRCP don't need more data !")
TRC_MSG(BT_AVRCP_THROW_MORE_DATA , "[AVRCP][WRN] Current Data:%d operandLen:%d MaxSize:%d")
TRC_MSG(BT_AVRCP_AVCTP_AVC_RESPONSE , "[AVRCP] AvrcpHandleCBAVCResponse opcode:%d operandLen:%d")
TRC_MSG(BT_AVRCP_PDU_LENGTH_NOT_MATCH , "[AVRCP][WRN] pdu_parm_len:%d parm_len:%d")
TRC_MSG(BT_AVRCP_CB_CMD_IND , "[AVRCP] AvrcpHandleCBAVCCommandInd opcode:0x%x operandLen:%d")
TRC_MSG(BT_AVRCP_RECEIVE_CONTINUE_PACKET , "[AVRCP] Receives OPCODE_REQUEST_CONTINUING pdu-id parm_len:%d")
TRC_MSG(BT_AVRCP_UNKNOW_FOLDER_ITEM , "[AVRCP][WRN] Unable to parse the unkown item type:%d !")
TRC_MSG(BT_AVRCP_PARSE_REG_EVENT_FAIL , "[AVRCP] Unable parse register-noti response packet event_id:%d len:%d")
TRC_MSG(BT_AVRCP_SMALL_PACKET_SIZE_FAIL , "[AVRCP] AVRCP Packet size too small size:%d")
TRC_MSG(BT_AVRCP_BWS_CMD_RSP , "[AVRCP][BWS] AVRCP_UtilAVRCPBrowseCmdBufferRsp")
TRC_MSG(BT_AVRCP_RECEIVE_RSP , "[AVRCP] AVRCP_UtilAVRCPCmdBufferRsp chnl_num:%d c_type:%d pdu_id:%d ")
TRC_MSG(BT_AVRCP_SEND_RSP , "[AVRCP] AVRCP_UtilCmdBufferRsp chnl_num:%d c_type:%d pdu_id:%d ")
TRC_MSG(BT_AVRCP_SEND_GENERIC_RSP , "[AVRCP] AVRCP_UtilAVRCPCmdBufferRsp chnl_num:%d c_type:%d pdu_id:0x%x ")
TRC_MSG(BT_AVRCP_STATUS_REPORT_FAIL , "[AVRCP] Not expect status:%d")
TRC_MSG(BT_AVRCP_RSP_PACKET_INFO , "[AVRCP] Recevie format:%d response:%d parm_len:%d more:%d")
TRC_MSG(BT_AVRCP_STATUS_REPORT , "[AVRCP] Return status:%d")
TRC_MSG(BT_AVRCP_REDUCE_ITEM_LENGTH , "[AVRCP] Element %d value_len is %d. reduce it to %d")
TRC_MSG(BT_AVRCP_WRONG_ITEM_DATA_OFFSET , "[AVRCP] Element %d value_offset is %d. reduce it to 1")
TRC_MSG(BT_AVRCP_PACKET_START_TIMER , "[AVRCP][CTIMER] StartTimer")
TRC_MSG(BT_AVRCP_PACKET_CANCEL_TIMER , "[AVRCP][CTIMER] CancelTimer startTimer:%d CmdTimeout:%d")
TRC_MSG(BT_AVRCP_PACKET_TIMER_TIMEOUT , "[AVRCP] Element %d value_offset is %d. reduce it to 1")
TRC_MSG(BT_AVRCP_IGNORE_CONTINUE_EVENT , "[AVRCP][WRN] Ignore BTAVRCP_EVENT_REQUEST_CONTINUING_CNF")
TRC_MSG(BT_AVRCP_CMD_IND_RECEIVER , "[AVRCP] Receive cmd packet chnl_num:%d type:%d size:%d")
TRC_MSG(BT_AVRCP_AVC_HEADER_NOT_MATCH , "[AVRCP][WRN] AV Header UNIT not match ")
TRC_MSG(BT_AVRCP_CMD_IND_DISPATCHER , "[AVRCP] CBAVRCPCmdInd_Dispatcher chnl_num:%d pdu:%d parm_len:%d")
    TRC_MSG(BT_AVRCP_AVCTP_CBK_RMT_NAME , "[AVRCP] Remote is (%s) len:%d a2dpState:%d")

/* AVRCP TRACE END */

/* AVCTP TRACE START */
TRC_MSG(BT_AVCTP_INIT_LOG ,   "[AVCTP] AVCTP_Init")
TRC_MSG(BT_AVCTP_DEINIT_LOG ,   "[AVCTP] AVCTP_Deinit")
TRC_MSG(BT_AVCTP_REGISTER_LOG ,   "[AVCTP] Register chnl:%d callaback:0x%x")
TRC_MSG(BT_AVCTP_DEREGISTER_LOG ,   "[AVCTP] Deregister chnl:%d")
TRC_MSG(BT_AVCTP_DEREGISTER_ALL_LOG ,   "[AVCTP] Deregister all")
TRC_MSG(BT_AVCTP_CONNECT_API_LOG ,   "[AVCTP] Connect API psmtype:%d")
TRC_MSG(BT_AVCTP_CONNECT_RSP_API_LOG ,   "[AVCTP] Connect response API")
TRC_MSG(BT_AVCTP_DISCONNECT_API_LOG ,   "[AVCTP] Disconnect API")
TRC_MSG(BT_AVCTP_SEND_COMMAND_API_LOG ,   "[AVCTP] SEND_COMMAND_API")
TRC_MSG(BT_AVCTP_SEND_RESPONSE_LOG ,   "[AVCTP] SEND_RESPONSE")
TRC_MSG(BT_AVCTP_SEND_RAWMESSAGE_LOG ,   "[AVCTP] SEND_RAWMESSAGE")
TRC_MSG(BT_AVCTP_STATE_DISCONNECTED_LOG ,   "[AVCTP] StateMachine Dsiconnected chid:0x%x event:%d")
TRC_MSG(BT_AVCTP_STATE_CONN_PENDING_LOG ,   "[AVCTP] StateMachine CONN_PENDING chid:0x%x event:%d")
TRC_MSG(BT_AVCTP_STATE_DISCON_PENDING_LOG ,   "[AVCTP] StateMachine DISCON_PENDING chid:0x%x event:%d")
TRC_MSG(BT_AVCTP_STATE_CONN_DISCONNECTED_LOG ,   "[AVCTP] StateMachine CONN_DISCONNTED chid:0x%x event:%d")
TRC_MSG(BT_AVCTP_STATE_CONN_INCOMING_LOG ,   "[AVCTP] StateMachine CONN_INCOMING chid:0x%x event:%d")
TRC_MSG(BT_AVCTP_STATE_DISC_PENDING_LOG ,   "[AVCTP] StateMachine DISC_PENDING chid:0x%x event:%d")
TRC_MSG(BT_AVCTP_STATE_DISC_INCOMING_LOG ,   "[AVCTP] StateMachine DISC_INCOMING chid:0x%x event:%d")
TRC_MSG(BT_AVCTP_STATE_CONNECTED_LOG ,   "[AVCTP] StateMachine CONNECTED chid:0x%x event:%d")
TRC_MSG(BT_AVCTP_STATE_INIT_MACHINE_LOG ,   "[AVCTP] STATE_INIT_MACHINE ")
TRC_MSG(BT_AVCTP_CONN_FIND_CHANNEL_LOG ,   "[AVCTP] Find a avctp Channel for address avctp_chnl:%x psm:0x%x")
TRC_MSG(BT_AVCTP_CONN_FIND_FREECHANNEL_LOG ,   "[AVCTP] Find a free avctp Channel at avctp_chnl:%x psm:0x%x")
TRC_MSG(BT_AVCTP_CONN_ASSIGN_CHANNEL_LOG ,   "[AVCTP] Assign AVCTP Channel to l2Channel psm:0x%x chid:0x%x")
TRC_MSG(BT_AVCTP_L2CALLBACK_LOG ,   "[AVCTP] AVCTP_L2Callback l2event:%d")
TRC_MSG(BT_AVCTP_L2CALLBACK_REJECT_LOG ,   "[AVCTP] AVCTP_L2Callback Reject psm:0x%x")
TRC_MSG(BT_AVCTP_L2CALLBACK_NEW_CONNECTE_LOG ,   "[AVCTP] AVCTP_L2Callback handle new connect chid:0x%x avctp_chnl:%x")
TRC_MSG(BT_AVCTP_CONN_FREE_CHANNEL_LOG ,   "[AVCTP] Free AVCTP channel chid:0x%x ")
TRC_MSG(BT_AVCTP_CONNECT_REQ_LOG ,   "[AVCTP] AVCTP connect req num:%d")
TRC_MSG(BT_AVCTP_DISCONNECT_REQ_LOG ,   "[AVCTP] AVCTP disconnect req chid:%x")
TRC_MSG(BT_AVCTP_CONNECT_RSP_LOG ,   "[AVCTP] AVCTP connect response accept:%d chid:0x%x")
TRC_MSG(BT_AVCTP_CONN_CB ,   "[AVCTP] AVCTP signal Callback avctpevent:%d")
TRC_MSG(BT_AVCTP_MSG_CB ,   "[AVCTP] AVCTP data Callback avevent:%d")
TRC_MSG(BT_AVCTP_MSG_CB_IGNORE_EVENT ,   "[AVCTP] AVCTP data Callback ignore txState:%d")
TRC_MSG(BT_AVCTP_MSG_HANDLE_COMMAND ,   "[AVCTP] AVCTP Msg Handle command pktype:%d rxId:%d")
TRC_MSG(BT_AVCTP_MSG_HANDLE_REJECT ,   "[AVCTP] AVCTP Msg Handle reject rsp pktype:%d")
TRC_MSG(BT_AVCTP_MSG_HANDLE_RESPONSE ,   "[AVCTP] AVCTP Msg Handle response pktype:%d")
TRC_MSG(BT_AVCTP_MSG_SEND_COMMAND ,   "[AVCTP] AVCTP Msg Send command txState:%d")
TRC_MSG(BT_AVCTP_MSG_INIT, "[AVCTP] AvtpMsgInit")
/* AVCTP TRACE END */



/* GAVDP TRACE START */
TRC_MSG(BT_GAVDP_FIND_FREE_RMTINFONODE, "[GavdpFindFreeRmtInfoNode]local role:%x")
    TRC_MSG(BT_GAVDP_FIND_FREE_RMTINFONODE_ROLE_ERR, "[GavdpFindFreeRmtInfoNode][Error]Bad local role:%x")
    TRC_MSG(BT_GAVDP_FIND_FREE_RMTINFONODE_NODE_INFO, "[GavdpFindFreeRmtInfoNode]Node:%x isUsed:%x,role:%x")
    TRC_MSG(BT_GAVDP_FIND_FREE_RMTINFONODE_RMTINFO, "[GavdpFindFreeRmtInfoNode]info:%x role:%x")
    TRC_MSG(BT_GAVDP_FIND_FREE_RMTINFONODE_ERR, "[GavdpFindFreeRmtInfoNode][Error]Find no remoteInfoNode")
    TRC_MSG(BT_GAVDP_FIND_RMTINFONODE, "[GavdpFindRmtInfoNode]info:%x")
    TRC_MSG(BT_GAVDP_FIND_RMTINFONODE_ERR, "[GavdpFindRmtInfoNode][Error]Find no remoteInfoNode")
    TRC_MSG(BT_GAVDP_FIND_RMTINFONODE_BYADDR_ERR, "[GavdpFindRmtInfoByBDaddr][Error]Find no remoteInfoNode")
    TRC_MSG(BT_GAVDP_FIND_RMTINFONODE_BYCHNL, "[GavdpFindRmtInfoByChannel]remoteInfo=%x")
    TRC_MSG(BT_GAVDP_FIND_RMTINFONODE_BYCHNLERR, "[GavdpFindRmtInfoByChannel][Error]Find no remoteInfoNode")
    TRC_MSG(BT_GAVDP_FIND_RMTINFONODE_BYSEP_ERR, "[GavdpFindRmtInfoBySep][Error]Find no remoteInfoNode")
    TRC_MSG(BT_GAVDP_FIND_SEP_BYCODEC_ERR, "[GavdpFindRmtInfoBySep][Error]Find no remoteInfoNode")
    TRC_MSG(BT_GAVDP_FIND_SEP_BYCODEC_INFO, "[GavdpFindSepByCodecType][Info]localStrmType:%d,strmType:%d,codecType:%d,VScodecType:%d")
    TRC_MSG(BT_GAVDP_FIND_SEP_BYCODEC_FOUND, "[GAVDP][GavdpFindSepByCodecType] SEP is found")
    TRC_MSG(BT_GAVDP_FIND_SEP_BYCODEC_NOT_FOUND, "[GAVDP][GavdpFindSepByCodecType][ERR] SEP is not found")
    TRC_MSG(BT_GAVDP_FIND_CODEC_INFO, "[GavdpFindCodec][Info]codecType:%d")
    TRC_MSG(BT_GAVDP_FIND_CODEC_INFO_DONE, "[GavdpFindCodec]SEP found:%x")
    TRC_MSG(BT_GAVDP_FIND_CODEC_INFO_ERR, "[GavdpFindCodec]SEP not found!")
    
    TRC_MSG(BT_GAVDP_CLEAR_RMTINFO, "[GavdpClearRemoteInfo]")
    TRC_MSG(BT_GAVDP_PRINT_CODEC_INFO_ERR, "[GavdpPrintCodecInfo][Error]Codec is NULL")
    TRC_MSG(BT_GAVDP_PRINT_CODEC_INFO, "[GavdpPrintCodecInfo]Type:%d,Len:%d")
    TRC_MSG(BT_GAVDP_PRINT_CODEC_INFO_DATA, "[GavdpPrintCodecInfo]data:0x%02x")
    TRC_MSG(BT_GAVDP_PRINT_BDADDR_ERR, "[GavdpPrintBDaddr][Error]addr is NULL")
    TRC_MSG(BT_GAVDP_PRINT_BDADDR_INFO, "[GavdpPrintBDaddr][Info]addr:%02x %02x %02x %02x %02x %02x")
    TRC_MSG(BT_GAVDP_CFGSBC_ERR, "[GavdpConfigSBC][Error]codec is NULL config:%x,loca:%x,remote:%x")
    TRC_MSG(BT_GAVDP_CFG_SBC_BYTE, "[GAVDP][GavdpConfigSBC] config_codec info:0x%02x 0x%02x 0x%02x 0x%02x")
    TRC_MSG(BT_GAVDP_CFG_MP3_ERR, "[GavdpConfigMP3][Error]codec is NULL config:%x,loca:%x,remote:%x")
    TRC_MSG(BT_GAVDP_CFG_MP3_ERR_LAYER, "[GavdpConfigMP3][Error]Invalid Layer")
    TRC_MSG(BT_GAVDP_CFG_MP3_ERR_CRC, "[GavdpConfigMP3][Info]No CRC")
    TRC_MSG(BT_GAVDP_CFG_MP3_ERR_CHNL_MODE, "[GavdpConfigMP3][Error]Invalid Channel Mode")
    TRC_MSG(BT_GAVDP_CFG_MP3_ERR_MPF, "[GavdpConfigMP3][Info]No MPF")
    TRC_MSG(BT_GAVDP_CFG_MP3_ERR_SR, "[GavdpConfigMP3][Error]Invalid Sampling Frequency")
    TRC_MSG(BT_GAVDP_CFG_MP3_ERR_VBR, "[GavdpConfigMP3][Info]No VBR")
    TRC_MSG(BT_GAVDP_CFG_MP3_ERR_BR, "[GavdpConfigMP3][Error]Invalid Bit Rate Index")
    TRC_MSG(BT_GAVDP_CFG_AAC_ERR, "[GavdpConfigAAC][Error]codec is NULL config:%x,loca:%x,remote:%x")
    TRC_MSG(BT_GAVDP_CFG_AAC_ERR_OBJ, "[GavdpConfigAAC][Error]Invalid Object Type")
    TRC_MSG(BT_GAVDP_CFG_AAC_ERR_SR, "[GavdpConfigAAC][Error]Invalid Sampling Frequency")
    TRC_MSG(BT_GAVDP_CFG_AAC_ERR_CHNL, "[GavdpConfigAAC][Error]Invalid Channel")
    TRC_MSG(BT_GAVDP_CFG_AAC_ERR_VBR, "[GavdpConfigAAC][Info]No VBR")
    TRC_MSG(BT_GAVDP_CFG_ATRAC_ERR, "[GavdpConfigATRAC][Error]codec is NULL config:%x,loca:%x,remote:%x")
    TRC_MSG(BT_GAVDP_CFG_APTX_ERR, "[GavdpConfigVendorCSRatpX][Error]codec is NULL config:%x,loca:%x,remote:%x")
    TRC_MSG(BT_GAVDP_CFG_APTX_ERR_CAP, "[GavdpConfigVendorCSRatpX][Error]Invalid cap;Local :%x, Remote :%x")
    TRC_MSG(BT_GAVDP_CFG_CSR_ERR, "[GavdpConfigVendorCSR][Error]codec is NULL config:%x,loca:%x,remote:%x")
    TRC_MSG(BT_GAVDP_CFG_CSR_ERR_ID, "[GavdpConfigVendorCSR][Error]Note a same Vendor CODEC ID:local :%x remote %x")
    TRC_MSG(BT_GAVDP_CFG_CSR_ERR_CODECID, "[GavdpConfigVendorCSR][Error]Invalid Vendor CODEC ID:%x")
    TRC_MSG(BT_GAVDP_CFG_NOA2DP_ERR, "[GavdpConfigNonA2DP][Error]codec is NULL config:%x,loca:%x,remote:%x")
    TRC_MSG(BT_GAVDP_CFG_NOA2DP_ERR_SAMEID, "[GavdpConfigNonA2DP][Error]Not a same Vendor ID:local :%x,remote %x")
    TRC_MSG(BT_GAVDP_CFG_NOA2DP_ERR_VENDOR, "[GavdpConfigNonA2DP][Error]Not Supported Vendor")

    TRC_MSG(BT_GAVDP_DECIDECFG_ERR, "[GavdpDecideConfig][Error]codec is NULL config:%x,loca:%x,remote:%x")
    TRC_MSG(BT_GAVDP_DECIDECFG_ERR_SAMECODEC, "[GavdpDecideConfig][Error]Not same CODEC type:local:%x,remote:%x")
    TRC_MSG(BT_GAVDP_DECIDECFG_PRINT_LOCAL, "[GavdpDecideConfig]local Codec:")
    TRC_MSG(BT_GAVDP_DECIDECFG_PRINT_RMT, "[GavdpDecideConfig]remote Codec:")
    TRC_MSG(BT_GAVDP_DECIDECFG_ERR_CODEC, "[GavdpDecideConfig][Error]Invalid CODEC type")
    TRC_MSG(BT_GAVDP_LOCAL_SBC_BYTE0, "[GAVDP][GavdpDecideConfig] local codec info:0x%x")
    TRC_MSG(BT_GAVDP_LOCAL_SBC_BYTE1, "[GAVDP][GavdpDecideConfig] local codec info:0x%x")
    TRC_MSG(BT_GAVDP_LOCAL_SBC_BYTE2, "[GAVDP][GavdpDecideConfig] local codec info:0x%x")
    TRC_MSG(BT_GAVDP_LOCAL_SBC_BYTE3, "[GAVDP][GavdpDecideConfig] local codec info:0x%x")
    TRC_MSG(BT_GAVDP_REMOTE_SBC_BYTE0, "[GAVDP][GavdpDecideConfig] remote codec info:0x%x")
    TRC_MSG(BT_GAVDP_REMOTE_SBC_BYTE1, "[GAVDP][GavdpDecideConfig] remote codec info:0x%x")
    TRC_MSG(BT_GAVDP_REMOTE_SBC_BYTE2, "[GAVDP][GavdpDecideConfig] remote codec info:0x%x")
    TRC_MSG(BT_GAVDP_REMOTE_SBC_BYTE3, "[GAVDP][GavdpDecideConfig] remote codec info:0x%x")
    TRC_MSG(BT_GAVDP_NO_MATCHED_SMAPLING_FREQ, "[GAVDP][GavdpDecideConfig]no matched sampling frequency---")
    TRC_MSG(BT_GAVDP_NO_MATCHED_CH_MODE, "[GAVDP][GavdpDecideConfig][ERR] no matched channel mode---")
    TRC_MSG(BT_GAVDP_NO_MATCHED_BLK_LEN, "[GAVDP][GavdpDecideConfig][ERR] no matched SBC block length---")
    TRC_MSG(BT_GAVDP_NO_MATCHED_SBAND_NUM, "[GAVDP][GavdpDecideConfig][ERR] no matched SBC subband number---")
    TRC_MSG(BT_GAVDP_NO_MATCHED_ALLOC, "[GAVDP][GavdpDecideConfig][ERR] no matched allocated method---")

    TRC_MSG(BT_GAVDP_DISC_SIG, "[GAVDP][GavdpDiscSigChnl]++timer")
    TRC_MSG(BT_GAVDP_DISC_SIG_ERR, "[GAVDP][GavdpDiscSigChnl]rmtinfonode not used")
    TRC_MSG(BT_GAVDP_DISC_SIG_CMG, "[GAVDP][GavdpDiscSigChnl]cmgrNode == 0")
    TRC_MSG(BT_GAVDP_DISC_SIG_CHNL, "[GAVDP][GavdpDiscSigChnl]chnlNode == 0")
    TRC_MSG(BT_GAVDP_CONN_STREAM, "[GAVDP][GavdpConnectStream]+++")
    TRC_MSG(BT_GAVDP_CONN_STREAM_ERR, "[GavdpConnectStream][Error]No Resource For another connection")
    TRC_MSG(BT_GAVDP_GET_CAP_REQ, "[GAVDP][GavdpGetCapabilityReq]+++ rmt SepID: %d")
    TRC_MSG(BT_GAVDP_GET_CAP_REQ_PENDING, "[GAVDP][GavdpGetCapabilityReq] status == BT_STATUS_PENDING")
    TRC_MSG(BT_GAVDP_DECIDESEP_ERR, "[GavdpDecideSEP][Error]strem_type:%d")
    TRC_MSG(BT_GAVDP_DECIDESEP_NO_MATCH, "[GavdpDecideSEP][Error]Find none matched SEP codecType:%d, vsCodecType:%d")
    TRC_MSG(BT_GAVDP_DECIDESEP_NO_MATCH_SEP, "[GavdpDecideSEP][Error]Find none matched SEP sep:%d,sep_index:%d,sep_cnt:%d")
    TRC_MSG(BT_GAVDP_DECIDESEP_CODEC, "[GavdpDecideSEP][Info]Codec Type:%d,vsCodecType:%d,cfg sep type:%d")
    TRC_MSG(BT_GAVDP_DECIDESEP_CURRENT_CFG, "[GavdpDecideSEP]current cfg codec type = %d, %02x %02x %02x %02x %02x %02x %02x")
    TRC_MSG(BT_GAVDP_SET_CFG_REQ_ERR, "[GavdpSetConfigurationReq][Error]rmtInfo is NULL")
    TRC_MSG(BT_GAVDP_SET_CFG_REQ_NO_MATCH, "[GavdpSetConfigurationReq][Error]No Matched SEP")
    TRC_MSG(BT_GAVDP_SET_CFG_REQ_FAIL, "[GavdpSetConfigurationReq][Error]status : 0x%x")

    TRC_MSG(BT_GAVDP_SEP_INFO, "[Gavdp][Info]SEP:0x%x,streamType:%d,codecType:%d,inUse:%d")
    
    TRC_MSG(BT_GAVDP_INIT_RMTINFO_NULL, "[Gavdp_InitialRmtInfo]NULL rmtInfo")
    TRC_MSG(BT_GAVDP_INIT_RMTINFO_BAD_ROLE, "[Gavdp_InitialRmtInfo][Error]Bad role:%d")
    TRC_MSG(BT_GAVDP_DEINIT_RMTINFO_NULL, "[Gavdp_DeinitialRmtInfo]NULL rmtInfo")
    
    TRC_MSG(BT_GAVDP_FIND_NO_RMTINFO_ERR, "[GAVDP][Error]Find No Remote Info")
    TRC_MSG(BT_GAVDP_FIND_NO_SEP_ERR, "[GAVDP][Error]Find No SEP")
    //TRC_MSG(GAVDPGAVDPDISCSIGCHNLAVDTP_DISCONNECT, "[GavdpFindSepByCodecType][Error]Bad Stream Type")
    //TRC_MSG(GAVDPGAVDPSWITCHROLE, "[GAVDP][GavdpSwitchRole]+++")
    TRC_MSG(GAVDPGAVDPAVDTPEVENTCALLBACK_NO_REGISTERED_SEP, "[GAVDP][GavdpAvdtpEventCallback] no registered SEP.")
    TRC_MSG(GAVDPGAVDPAVDTPEVENTCALLBACKAVDTP_EVENT_CAPABILITYNOT, "[GAVDP][GavdpAvdtpEventCallback][AVDTP_EVENT_CAPABILITY]not AVDTP_CODEC_TYPE_SBC")
    TRC_MSG(GAVDPGAVDPAVDTPEVENTCALLBACKAVDTP_EVENT_GET_CAP_CNFTR, "[GAVDP][GavdpAvdtpEventCallback][AVDTP_EVENT_GET_CAP_CNF]try another SEP")
    TRC_MSG(GAVDPGAVDPAVDTPEVENTCALLBACKAVDTP_EVENT_SET_CFG_CNFCU, "[GAVDP][GavdpAvdtpEventCallback][AVDTP_EVENT_SET_CFG_CNF]current_cfg_sep_id:%d, get another sep capability")
    TRC_MSG(GAVDPGAVDPAVDTPEVENTCALLBACKAVDTP_EVENT_STREAM_CLOSED, "[GAVDP][GavdpAvdtpEventCallback][AVDTP_EVENT_STREAM_CLOSED][AVDP_STATE_SIG_PASSIVE_DISCONNECTING]start sig_disc_timer")
    TRC_MSG(GAVDPGAVDP_INITGAVDP_STATE_DEINITIALIZING, "[GAVDP][GAVDP_Init]GAVDP_STATE_DEINITIALIZING")
    TRC_MSG(GAVDPGAVDP_INITFREE_CHANNEL_NODE, "[GAVDP][GAVDP_Init]free channel node")
    TRC_MSG(GAVDPGAVDP_INITFREE_CMGR_NODE, "[GAVDP][GAVDP_Init]free cmgr node")
    TRC_MSG(GAVDPGAVDP_DEINIT, "[GAVDP][GAVDP_DeInit]")
    TRC_MSG(GAVDPGAVDP_DEINITCMGR_DEREGISTERHANDLER, "[GAVDP][GAVDP_DeInit]CMGR_DeregisterHandler")
    TRC_MSG(GAVDPGAVDP_DEREGISTERFREE_CHANNEL_NODE_IS_NOT_FOUND_TO, "[GAVDP][GAVDP_DeRegister]Free channel node is not found. To release the node while initializing.")
    TRC_MSG(GAVDPGAVDP_DEREGISTERAVDTP_DEREGISTER_D, "[GAVDP][GAVDP_DeRegister]AVDTP_Deregister: %d")
    TRC_MSG(GAVDPGAVDP_DEREGISTERFREE_CMGR_NODE_IS_NOT_FOUND_TO_RE, "[GAVDP][GAVDP_DeRegister]Free CMGR node is not found. To release the node while initializing.")
    TRC_MSG(GAVDPGAVDP_ESTABLISHCONNECTIONREQWRNCONNECTION_OR_STR, "[GAVDP][GAVDP_EstablishConnectionReq][WRN]Connection or Stream is incoming")

TRC_MSG(BT_GAVDP_FIND_CMGR_NODE, "[GAVDP][GavdpFindCmgrNode]+++ cmgr handler addr: 0x%08x")
TRC_MSG(BT_GAVDP_FIND_CMGR_FOUND, "[GAVDP][GavdpFindCmgrNode] cmgrNode is found")
TRC_MSG(BT_GAVDP_FIND_CMGR_NOT_FOUND, "[GAVDP][GavdpFindCmgrNode][ERR]+++ cmgrNode is not found")

TRC_MSG(BT_GAVDP_FIND_CHNL_NODE, "[GAVDP][GavdpFindChnlNode]+++ channel addr: 0x%08x")
TRC_MSG(BT_GAVDP_FIND_CHNL_FOUND, "[GAVDP][GavdpFindChnlNode] chnlNode is found")
TRC_MSG(BT_GAVDP_FIND_CHNL_NOT_FOUND, "[GAVDP][GavdpFindChnlNode][ERR] chnlNode is not found")

TRC_MSG(BT_GAVDP_ALL_CMGR_USED, "[GAVDP][GavdpFindFreeCmgrNode][ERR] All cmgrNodes are in used")

TRC_MSG(BT_GAVDP_ALL_CHNL_USED, "[GAVDP][GavdpFindFreeChnlNode][ERR] All chnlNodes are in used")

TRC_MSG(BT_GAVDP_CHNL_FIND_SEP, "[GAVDP][GavdpFindSepByChannel]+++ channel addr: 0x%08x")
TRC_MSG(BT_GAVDP_CHNL_FIND_SEP_FOUND, "[GAVDP][GavdpFindSepByChannel] SEP is found")
TRC_MSG(BT_GAVDP_CHNL_FIND_SEP_NOT_FOUND, "[GAVDP][GavdpFindSepByChannel]SEP is not found")

TRC_MSG(BT_GAVDP_CMGR_FIND_SEP, "[GAVDP][GavdpFindSepByCmgrHdl]+++ cmgr handler addr: 0x%08x")
TRC_MSG(BT_GAVDP_CMGR_FIND_SEP_FOUND, "[GAVDP][GavdpFindSepByCmgrHdl] SEP is found")
TRC_MSG(BT_GAVDP_CMGR_FIND_SEP_NOT_FOUND, "[GAVDP][GavdpFindSepByCmgrHdl][ERR] SEP is not found")

TRC_MSG(BT_GAVDP_ID_FIND_SEP, "[GAVDP][GavdpFindSepById] SEP ID: %d")
TRC_MSG(BT_GAVDP_ID_FIND_SEP_FOUND, "[GAVDP][GavdpFindSepById] SEP is found:0x%x")
TRC_MSG(BT_GAVDP_ID_FIND_SEP_NOT_FOUND, "[GAVDP][GavdpFindSepById][ERR] SEP is not found")
    TRC_MSG(BT_GAVDP_ID_FIND_SEP_BYADDR_FOUND, "[GAVDP][GavdpFindSepByBDaddr] SEP is found:0x%x")
    TRC_MSG(BT_GAVDP_ID_FIND_SEP_BYADDR_NOT_FOUND, "[GAVDP][GavdpFindSepByBDaddr][ERR] SEP is not found")

TRC_MSG(BT_GAVDP_SEP_AVAILABLE, "[GAVDP][GavdpIsSepAvailable] SEP is available")
TRC_MSG(BT_GAVDP_SEP_NOT_AVAILABLE, "[GAVDP][GavdpIsSepAvailable][ERR] SEP is not available")

TRC_MSG(BT_GAVDP_DEV_CONNECTED, "[GAVDP][GavdpIsDevConnected] Dev is connected")
TRC_MSG(BT_GAVDP_DEV_NOT_CONNECTED, "[GAVDP][GavdpIsDevConnected] Dev is not connected")

TRC_MSG(BT_GAVDP_CFG_SBC_BYTE0, "[GAVDP][GavdpDecideConfig] config_codec info:0x%x")
TRC_MSG(BT_GAVDP_CFG_SBC_BYTE1, "[GAVDP][GavdpDecideConfig] config_codec info:0x%x")
TRC_MSG(BT_GAVDP_CFG_SBC_BYTE2, "[GAVDP][GavdpDecideConfig] config_codec info:0x%x")
TRC_MSG(BT_GAVDP_CFG_SBC_BYTE3, "[GAVDP][GavdpDecideConfig] config_codec info:0x%x")

TRC_MSG(BT_GAVDP_LINK_AVDTP_CHNL, "[GAVDP][GavdpConnectAvdtpChannel]+++ SigState: %d, SepAddr: 0x%x, SepID: %d, CmdStage: %d, StrmState: %d")
TRC_MSG(BT_GAVDP_LINK_AVDTP_CHNL_BUSY, "[GAVDP][GavdpConnectAvdtpChanne] status == BT_STATUS_BUSY")
TRC_MSG(BT_GAVDP_LINK_AVDTP_CHNL_PENDING, "[GAVDP][GavdpConnectAvdtpChanne] status == BT_STATUS_PENDING")
TRC_MSG(BT_GAVDP_LINK_AVDTP_CHNL_FAILED, "[GAVDP][GavdpConnectAvdtpChanne] [ERR] AVDTP_Connect failed, try to disconnect 4")

TRC_MSG(BT_GAVDP_DISCOVER_STRM_REQ, "[GAVDP][GavdpDiscoverStreamsReq]+++ SigState: %d, SepAddr: 0x%x, SepID: %d, CmdStage: %d, StrmState: %d")
TRC_MSG(BT_GAVDP_DISCOVER_STRM_REQ_PENDING, "[GAVDP][GavdpDiscoverStreamsReq] status == BT_STATUS_PENDING")


TRC_MSG(BT_GAVDP_SET_CFG_REQ, "[GAVDP][GavdpSetConfigurationReq]+++ SigState: %d, SepAddr: 0x%x, SepID: %d, CmdStage: %d, StrmState: %d")
TRC_MSG(BT_GAVDP_SET_CFG_REQ_NO_MATCHED_CODEC, "[GAVDP][GavdpSetConfigurationReq][ERR] no matched codec settings---")
TRC_MSG(BT_GAVDP_SET_CFG_REQ_PENDING, "[GAVDP][GavdpSetConfigurationReq] status == BT_STATUS_PENDING")

TRC_MSG(BT_GAVDP_OPEN_STRM_REQ, "[GAVDP][GavdpOpenStreamReq]+++ SigState: %d, SepAddr: 0x%x, SepID: %d, CmdStage: %d, StrmState: %d")
TRC_MSG(BT_GAVDP_OPEN_STRM_REQ_PENDING, "[GAVDP][GavdpOpenStreamReq] status == BT_STATUS_PENDING")
    TRC_MSG(BT_GAVDP_OPEN_STRM_REQ_ERR, "[GAVDP][GavdpOpenStreamReq][Error]NO SEP in remote info")
    TRC_MSG(BT_GAVDP_OPEN_STRM_REQ_INFO, "[GAVDP][GavdpOpenStreamReq]sep:0x%x,stream:0x%x,stream channel = 0x%x")


TRC_MSG(BT_GAVDP_GAVDP_CBK_INFO1, "[GAVDP][GavdpGavdpEventCallback]+++ SEP addr: 0x%08x, event: 0x%x, error: %d")
TRC_MSG(BT_GAVDP_GAVDP_CBK_SEP_STAT, "[GAVDP][GavdpGavdpEventCallback] GAVDP(sig_conn_state): %d, sep cmd state: %d, sep strm state: %d")
TRC_MSG(BT_GAVDP_GAVDP_CBK_STRM_EST_FAIL, "[GAVDP][GavdpGavdpEventCallback][GAVDP_EVENT_STREAM_ESTABLISH_CNF][ERR] AVDTP_Disconnect")
    TRC_MSG(BT_GAVDP_GAVDP_CBK_ADDR, "[GAVDP][GavdpGavdpEventCallback][Error]addr is NULL")
    TRC_MSG(BT_GAVDP_GAVDP_CBK_RMT, "[GAVDP][GavdpGavdpEventCallback][Error]rmtInfo is NULL")

TRC_MSG(BT_GAVDP_CMGR_CBK_INFO1, "[GAVDP][GavdpCmgrEventCallback]+++ cmgrHdlr addr: 0x%08x, event: %d, status: %d")
TRC_MSG(BT_GAVDP_CMGR_CBK_CON_OUTGOING, "[GAVDP][GavdpCmgrEventCallback] GAVDP(sig_conn_state) == GAVDP_STATE_SIG_CONNECT_OUTGOING")
TRC_MSG(BT_GAVDP_CMGR_CBK_LINK_CON_CNF_SUCCESS, "[GAVDP][GavdpCmgrEventCallback][CMEVENT_DATA_LINK_CON_CNF] status == BT_STATUS_SUCCESS")
TRC_MSG(BT_GAVDP_CMGR_CBK_LINK_CON_CNF_FAILED, "[GAVDP][GavdpCmgrEventCallback][CMEVENT_DATA_LINK_CON_CNF][ERR] CMGR_CreateDataLink failed, try to disconnect 3")
    TRC_MSG(BT_GAVDP_CMGR_CBK_ERR, "[GAVDP][GavdpCmgrEventCallback][Error]Find no Remote Info")

TRC_MSG(BT_GAVDP_AVDTP_CBK_INFO1, "[GAVDP][GavdpAvdtpEnventCallback]+++ chnl: 0x%08x, event: %d")
TRC_MSG(BT_GAVDP_AVDTP_CBK_SEP_NOT_REG, "[GAVDP][GavdpAvdtpEnventCallback][ERR]no registered SEP")
TRC_MSG(BT_GAVDP_AVDTP_CBK_USE_FAKE_SEP, "[GAVDP][GavdpAvdtpEnventCallback] sep = &GAVDP(fake_sep)")
TRC_MSG(BT_GAVDP_AVDTP_CBK_SEP_STAT, "[GAVDP][GavdpAvdtpEnventCallback] GAVDP(sig_conn_state): %d, sep id: %d, sep cmd state: %d, sep strm state: %d")
TRC_MSG(BT_GAVDP_AVDTP_CBK_CONNECTED, "[GAVDP][GavdpAvdtpEnventCallback][AVDTP_EVENT_CONNECT]+++ err code: %d")
TRC_MSG(BT_GAVDP_AVDTP_CBK_CONNECTED_OUT, "[GAVDP][GavdpAvdtpEnventCallback][AVDTP_EVENT_CONNECT]GAVDP_STATE_SIG_CONNECT_OUTGOING")
TRC_MSG(BT_GAVDP_AVDTP_CBK_CONNECTED_IN, "[GAVDP][GavdpAvdtpEnventCallback][AVDTP_EVENT_CONNECT]GAVDP_STATE_SIG_CONNECT_INCOMING")
TRC_MSG(BT_GAVDP_AVDTP_CBK_CONNECTED_FAILED, "[GAVDP][GavdpAvdtpEnventCallback][AVDTP_EVENT_CONNECT][ERR] bad GAVDP(sig_conn_state)")
TRC_MSG(BT_GAVDP_AVDTP_CBK_CONNECT_IND_BAD_STAT, "[GAVDP][GavdpAvdtpEnventCallback][AVDTP_EVENT_CONNECT_IND][ERR] bad signal state")
TRC_MSG(BT_GAVDP_AVDTP_CBK_CONNECT_IND, "[GAVDP][GavdpAvdtpEnventCallback][AVDTP_EVENT_CONNECT_IND] Sep is available")
TRC_MSG(BT_GAVDP_AVDTP_CBK_CONNECT_IND_CMGR_SUCCESS, "[GAVDP][GavdpAvdtpEnventCallback][AVDTP_EVENT_CONNECT_IND] CMGR_CreateDataLink success, AVDTP_ConnectRsp(TRUE)")
TRC_MSG(BT_GAVDP_AVDTP_CBK_CONNECT_IND_CMGR_FAILED, "[GAVDP][GavdpAvdtpEnventCallback][AVDTP_EVENT_CONNECT_IND][ERR] CMGR_CreateDataLink fail, AVDTP_ConnectRsp(FALSE)")
TRC_MSG(BT_GAVDP_AVDTP_CBK_CONNECT_IND_NO_SEP, "[GAVDP][GavdpAvdtpEnventCallback][AVDTP_EVENT_CONNECT_IND][ERR]  no available SEP ")
    TRC_MSG(BT_GAVDP_AVDTP_CBK_CONNECT_RMT_ERR, "[GAVDP][GavdpAvdtpEnventCallback][AVDTP_EVENT_CONNECT][Error]rmtInfoNode is NULL")
    TRC_MSG(BT_GAVDP_AVDTP_CBK_CONNECT_IN_ERRSTATE, "[GAVDP][GavdpAvdtpEnventCallback][AVDTP_EVENT_CONNECT_IND] Already connected")
    TRC_MSG(BT_GAVDP_AVDTP_CBK_CONNECT_RMTINFO_EXIST, "[GAVDP][GavdpAvdtpEnventCallback]Already Got rmtInfo Node")
    TRC_MSG(BT_GAVDP_AVDTP_CBK_CONNECT_IN_ERRCMG, "[GAVDP][GavdpAvdtpEnventCallback][AVDTP_EVENT_CONNECT_IND]:Find No CMGR Node")
    TRC_MSG(BT_GAVDP_AVDTP_CBK_CONNECT_IN_ERRCHNL, "[GAVDP][GavdpAvdtpEnventCallback][AVDTP_EVENT_CONNECT_IND]:Find No Channel Node")
    TRC_MSG(BT_GAVDP_AVDTP_CBK_CONNECT_RMTINFO_NOTFOUND, "[GAVDP][GavdpAvdtpEnventCallback]Find No Remote Info Node")
    TRC_MSG(BT_GAVDP_AVDTP_CBK_CONNECT_RMTBTADDR, "[GAVDP][GavdpAvdtpEnventCallback]remote bd_addr,%02x:%02x:%02x:%02x:%02x:%02x")

TRC_MSG(BT_GAVDP_AVDTP_CBK_DISCOVER_IND_BAD_STAT, "[GAVDP][GavdpAvdtpEnventCallback][AVDTP_EVENT_DISCOVER_IND][ERR] est state error, currnet state: %d, AVDTP_DiscoverStreamsRsp(REJECT)")
    TRC_MSG(BT_GAVDP_AVDTP_CBK_DISCOVER_IND_ACPT, "[GAVDP][GavdpAvdtpEnventCallback][AVDTP_EVENT_DISCOVER_IND]AVDTP_DiscoverStreamsRsp(ACCEPT)")
    TRC_MSG(BT_GAVDP_AVDTP_CBK_DISCOVER_IND_SEP, "[GAVDP][GavdpAvdtpEnventCallback][AVDTP_EVENT_DISCOVER_IND]SEID=%d")

TRC_MSG(BT_GAVDP_AVDTP_CBK_STRM_INFO, "[GAVDP][GavdpAvdtpEnventCallback][AVDTP_EVENT_STREAM_INFO]+++ get sep list info: sep_count=%d, inUse=%d, id=%d, mediaType(audio:0)=%d, streamType=%d")
TRC_MSG(BT_GAVDP_AVDTP_CBK_STRM_INFO_BAD_STAT, "[GAVDP][GavdpAvdtpEnventCallback][AVDTP_EVENT_STREAM_INFO][ERR] est state error, currnet state: %d")
    TRC_MSG(BT_GAVDP_AVDTP_CBK_STRM_INFO_RECFG, "[GAVDP][GavdpAvdtpEnventCallback][AVDTP_EVENT_STREAM_INFO]Reconfig set SEP index:%d SEID:%d")

TRC_MSG(BT_GAVDP_AVDTP_CBK_DISCOVER_CNF, "[GAVDP][GavdpAvdtpEnventCallback][AVDTP_EVENT_DISCOVER_CNF] discover completed SEPID=%d")
TRC_MSG(BT_GAVDP_AVDTP_CBK_DISCOVER_CNF_FAILED, "[GAVDP][GavdpAvdtpEnventCallback][AVDTP_EVENT_DISCOVER_CNF][ERR] discover failed")
TRC_MSG(BT_GAVDP_AVDTP_CBK_DISCOVER_CNF_BAD_STAT, "[GAVDP][GavdpAvdtpEnventCallback][AVDTP_EVENT_DISCOVER_CNF][ERR] est state error, currnet state: %d")
TRC_MSG(BT_GAVDP_AVDTP_CBK_GET_CAP_IND_BAD_STAT, "[GAVDP][GavdpAvdtpEnventCallback][AVDTP_EVENT_GET_CAP_IND][ERR] est state error, currnet state: %d, AVDTP_GetCapabilitiesRsp(REJECT)")
TRC_MSG(BT_GAVDP_AVDTP_CBK_GET_CAP_IND_RAW_DATALEN, "[GAVDP][GavdpAvdtpEnventCallback][AVDTP_EVENT_GET_CAP_IND] rawDataLen: %d")
TRC_MSG(BT_GAVDP_AVDTP_CBK_GET_CAP_IND_RAW_DATA0, "[GAVDP][GavdpAvdtpEnventCallback][AVDTP_EVENT_GET_CAP_IND] p.data[0]: 0x%02x")
TRC_MSG(BT_GAVDP_AVDTP_CBK_GET_CAP_IND_ACP_SEP_ID, "[GAVDP][GavdpAvdtpEnventCallback][AVDTP_EVENT_GET_CAP_IND] acp_id: %d")
TRC_MSG(BT_GAVDP_AVDTP_CBK_GET_CAP_IND_ACP_SEP_ADDR, "[GAVDP][GavdpAvdtpEnventCallback][AVDTP_EVENT_GET_CAP_IND] acp_sep: 0x%08x")
TRC_MSG(BT_GAVDP_AVDTP_CBK_GET_CAP_IND_ACPT, "[GAVDP][GavdpAvdtpEnventCallback][AVDTP_EVENT_GET_CAP_IND] AVDTP_GetCapabilitiesRsp(ACCEPT)")
TRC_MSG(BT_GAVDP_AVDTP_CBK_CAP_INFO, "[GAVDP][GavdpAvdtpEnventCallback][AVDTP_EVENT_CAPABILITY]+++ get sep capa info...")
TRC_MSG(BT_GAVDP_AVDTP_CBK_CAP_INFO_CNT, "[GAVDP][GavdpAvdtpEnventCallback][AVDTP_EVENT_CAPABILITY] remote conunt: %d")
TRC_MSG(BT_GAVDP_AVDTP_CBK_CAP_CNF, "[GAVDP][GavdpAvdtpEnventCallback][AVDTP_EVENT_GET_CAP_CNF] get cap completed")
TRC_MSG(BT_GAVDP_AVDTP_CBK_CAP_CNF_FAILED, "[GAVDP][GavdpAvdtpEnventCallback][AVDTP_EVENT_GET_CAP_CNF][ERR] get cap failed")
TRC_MSG(BT_GAVDP_AVDTP_CBK_CAP_CNF_BAD_STAT, "[GAVDP][GavdpAvdtpEnventCallback][AVDTP_EVENT_GET_CAP_CNF][ERR]state error, con_state: %d")
    TRC_MSG(BT_GAVDP_AVDTP_CBK_CAP_CNF_SEPID, "[GAVDP][GavdpAvdtpEnventCallback][AVDTP_EVENT_GET_CAP_CNF]get Cap SEID:%d")
    TRC_MSG(BT_GAVDP_AVDTP_CBK_CAP_CNF_ALLSEP, "[GAVDP][GavdpAvdtpEnventCallback][AVDTP_EVENT_GET_CAP_CNF]Got all SEP Cap, rmtinfo:0x%x")
    TRC_MSG(BT_GAVDP_AVDTP_CBK_CAP_CNF_SETCFG, "[GAVDP][GavdpAvdtpEnventCallback][AVDTP_EVENT_GET_CAP_CNF]Start SetConfiguration,stream type:%d")
    TRC_MSG(BT_GAVDP_AVDTP_CBK_CAP_CNF_RECFG, "[GAVDP][GavdpAvdtpEnventCallback][AVDTP_EVENT_GET_CAP_CNF]Go back Reconfiguration,stream type:%d")

TRC_MSG(BT_GAVDP_AVDTP_CBK_SET_CFG_IND_BAD_STAT, "[GAVDP][GavdpAvdtpEnventCallback][AVDTP_EVENT_SET_CFG_IND][ERR] est state error, currnet state: %d, AVDTP_SetConfigRsp(REJECT)")
TRC_MSG(BT_GAVDP_AVDTP_CBK_SET_CFG_IND_RAW_DATALEN, "[GAVDP][GavdpAvdtpEnventCallback][AVDTP_EVENT_SET_CFG_IND] rawDataLen: %d")
TRC_MSG(BT_GAVDP_AVDTP_CBK_SET_CFG_IND_RAW_DATA012, "[GAVDP][GavdpAvdtpEnventCallback][AVDTP_EVENT_SET_CFG_IND] rawData[0]: 0x%02x,  rawData[1]: 0x%02x, rawData[2]: 0x%02x")
TRC_MSG(BT_GAVDP_AVDTP_CBK_SET_CFG_IND_PKT_DATA012, "[GAVDP][GavdpAvdtpEnventCallback][AVDTP_EVENT_SET_CFG_IND] p.data[0]: 0x%02x,  p.data[1]: 0x%02x, p.data[2]: 0x%02x")
TRC_MSG(BT_GAVDP_AVDTP_CBK_SET_CFG_IND_SEP_NOT_FOUND, "[GAVDP][GavdpAvdtpEnventCallback][AVDTP_EVENT_SET_CFG_IND][ERR] SEP is not found, AVDTP_SetConfigRsp(REJECT)")
TRC_MSG(BT_GAVDP_AVDTP_CBK_SET_CFG_IND_CODEC_MISMATCHED, "[GAVDP][GavdpAvdtpEnventCallback][AVDTP_EVENT_SET_CFG_IND][ERR] codec does not match, AVDTP_SetConfigRsp(REJECT)")
    TRC_MSG(BT_GAVDP_AVDTP_CBK_SET_CFG_IND_ACPT, "[GAVDP][GavdpAvdtpEnventCallback][AVDTP_EVENT_SET_CFG_IND] AVDTP_SetConfigRsp(ACCEPT)")
    TRC_MSG(BT_GAVDP_AVDTP_CBK_SET_CFG_IND_NORMT, "[GAVDP][GavdpAvdtpEnventCallback][AVDTP_EVENT_SET_CFG_IND] No rmtinfo Resource For another connection")
    TRC_MSG(BT_GAVDP_AVDTP_CBK_SET_CFG_IND_SEPINUSE, "[GAVDP][GavdpAvdtpEnventCallback][AVDTP_EVENT_SET_CFG_IND]SEP in use ud=%d")

TRC_MSG(BT_GAVDP_AVDTP_CBK_SET_CFG_CNF, "[GAVDP][GavdpAvdtpEnventCallback][AVDTP_EVENT_SET_CFG_CNF] set cap completed")
TRC_MSG(BT_GAVDP_AVDTP_CBK_SET_CFG_CNF_FAILED, "[GAVDP][GavdpAvdtpEnventCallback][AVDTP_EVENT_SET_CFG_CNF][ERR] set cap failed")
TRC_MSG(BT_GAVDP_AVDTP_CBK_SET_CFG_CNF_BAD_STAT, "[GAVDP][GavdpAvdtpEnventCallback][AVDTP_EVENT_SET_CFG_CNF][ERR] est state error, currnet state: %d")

TRC_MSG(BT_GAVDP_AVDTP_CBK_OPEN_IND_BAD_SEP, "[GAVDP][GavdpAvdtpEnventCallback][AVDTP_EVENT_STREAM_OPEN_IND][ERR]sep is not correct, open sep id:  %d, set config sep id: %d, AVDTP_OpenStreamRsp(REJECT)")
TRC_MSG(BT_GAVDP_AVDTP_CBK_OPEN_IND_BAD_STAT, "[GAVDP][GavdpAvdtpEnventCallback][AVDTP_EVENT_STREAM_OPEN_IND][ERR] est state error, currnet state: %d, AVDTP_OpenStreamRsp(REJECT)")
TRC_MSG(BT_GAVDP_AVDTP_CBK_OPEN_IND, "[GAVDP][GavdpAvdtpEnventCallback][AVDTP_EVENT_STREAM_OPEN_IND] call back to app")
TRC_MSG(BT_GAVDP_AVDTP_CBK_OPEN_CNF, "[GAVDP][GavdpAvdtpEnventCallback][AVDTP_EVENT_STREAM_OPEN]GAVDP(sig_conn_state) = GAVDP_STATE_SIG_IDLE")
TRC_MSG(BT_GAVDP_AVDTP_CBK_OPEN_CNF_SUCCESS, "[GAVDP][GavdpAvdtpEnventCallback][AVDTP_EVENT_STREAM_OPEN]sep->stream_state = GAVDP_STATE_OPEN")
TRC_MSG(BT_GAVDP_AVDTP_CBK_OPEN_CNF_FAILED, "[GAVDP][GavdpAvdtpEnventCallback][AVDTP_EVENT_STREAM_OPEN][ERR] sep->stream_state = GAVDP_STATE_IDLE")
TRC_MSG(BT_GAVDP_AVDTP_CBK_OPEN_CNF_HAS_OPEND, "[GAVDP][GavdpAvdtpEnventCallback][AVDTP_EVENT_STREAM_OPEN][ERR] stream has already opened by headset")
TRC_MSG(BT_GAVDP_AVDTP_CBK_OPEN_CNF_BAD_STAT, "[GAVDP][GavdpAvdtpEnventCallback][AVDTP_EVENT_STREAM_OPEN][ERR] est state error, currnet state: %d")
TRC_MSG(BT_GAVDP_AVDTP_CBK_START_IND_CMD_STAT, "[GAVDP][GavdpAvdtpEnventCallback][AVDTP_EVENT_STREAM_START_IND]sep->command_stage = GAVDP_WAIT_RES_START")
TRC_MSG(BT_GAVDP_AVDTP_CBK_START_IND, "[GAVDP][GavdpAvdtpEnventCallback][AVDTP_EVENT_STREAM_START_IND]call back to app")
TRC_MSG(BT_GAVDP_AVDTP_CBK_START_IND_BAD_STAT, "[GAVDP][GavdpAvdtpEnventCallback][AVDTP_EVENT_STREAM_START_IND][ERR] state error, currnet state: %d,AVDTP_StartStreamRsp(REJECT)")
TRC_MSG(BT_GAVDP_AVDTP_CBK_START_CNF_CMD_STAT, "[GAVDP][GavdpAvdtpEnventCallback][AVDTP_EVENT_STREAM_STARTED]sep->command_stage = GAVDP_WAIT_NONE")
TRC_MSG(BT_GAVDP_AVDTP_CBK_START_CNF_STAT_TRANS, "[GAVDP][GavdpAvdtpEnventCallback][AVDTP_EVENT_STREAM_STARTED]sep->stream_state = GAVDP_STATE_STREAMING")
TRC_MSG(BT_GAVDP_AVDTP_CBK_START_CNF_SUCCESS, "[GAVDP][GavdpAvdtpEnventCallback][AVDTP_EVENT_STREAM_STARTED]stream start completed")
TRC_MSG(BT_GAVDP_AVDTP_CBK_START_CNF_FAILED, "[GAVDP][GavdpAvdtpEnventCallback][AVDTP_EVENT_STREAM_STARTED][ERR] stream start failed")
TRC_MSG(BT_GAVDP_AVDTP_CBK_START_CNF_BAD_STAT, "[GAVDP][GavdpAvdtpEnventCallback][AVDTP_EVENT_STREAM_STARTED][ERR] state error, currnet state: %d")
TRC_MSG(BT_GAVDP_AVDTP_CBK_SUSPEND_IND_CMD_STAT, "[GAVDP][GavdpAvdtpEnventCallback][AVDTP_EVENT_STREAM_SUSPEND_IND] sep->command_stage = GAVDP_WAIT_RES_SUSPEND")
TRC_MSG(BT_GAVDP_AVDTP_CBK_SUSPEND_IND, "[GAVDP][GavdpAvdtpEnventCallback][AVDTP_EVENT_STREAM_SUSPEND_IND] call back to app")
TRC_MSG(BT_GAVDP_AVDTP_CBK_SUSPEND_IND_BAD_STAT, "[GAVDP][GavdpAvdtpEnventCallback][AVDTP_EVENT_STREAM_SUSPEND_IND][ERR] state error, currnet state: %d,AVDTP_SuspendStreamRsp(REJECT)")
TRC_MSG(BT_GAVDP_AVDTP_CBK_SUSPEND_CNF_CMD_STAT, "[GAVDP][GavdpAvdtpEnventCallback][AVDTP_EVENT_STREAM_SUSPENDED] sep->command_stage = GAVDP_WAIT_NONE")
TRC_MSG(BT_GAVDP_AVDTP_CBK_SUSPEND_CNF_STAT_TRANS, "[GAVDP][GavdpAvdtpEnventCallback][AVDTP_EVENT_STREAM_SUSPENDED] sep->stream_state = GAVDP_STATE_OPEN")
TRC_MSG(BT_GAVDP_AVDTP_CBK_SUSPEND_CNF_SUCCESS, "[GAVDP][GavdpAvdtpEnventCallback][AVDTP_EVENT_STREAM_SUSPENDED] stream suspend completed")
TRC_MSG(BT_GAVDP_AVDTP_CBK_SUSPEND_CNF_FAILED, "[GAVDP][GavdpAvdtpEnventCallback][AVDTP_EVENT_STREAM_SUSPENDED][ERR] stream suspend failed")
TRC_MSG(BT_GAVDP_AVDTP_CBK_SUSPEND_CNF_BAD_STAT, "[GAVDP][GavdpAvdtpEnventCallback][AVDTP_EVENT_STREAM_SUSPENDED][ERR] state error, currnet state: %d")
TRC_MSG(BT_GAVDP_AVDTP_CBK_RECONFIG_IND_CMD_STAT, "[GAVDP][GavdpAvdtpEnventCallback][AVDTP_EVENT_STREAM_RECONFIG_IND] sep->command_stage = GAVDP_WAIT_RES_RECONFIG")
TRC_MSG(BT_GAVDP_AVDTP_CBK_RECONFIG_IND, "[GAVDP][GavdpAvdtpEnventCallback][AVDTP_EVENT_STREAM_RECONFIG_IND] call back to app")
TRC_MSG(BT_GAVDP_AVDTP_CBK_RECONFIG_IND_BAD_STAT, "[GAVDP][GavdpAvdtpEnventCallback][AVDTP_EVENT_STREAM_RECONFIG_IND][ERR] state error, currnet state: %d, AVDTP_ReconfigRsp(REJECT)")
TRC_MSG(BT_GAVDP_AVDTP_CBK_RECONFIG_CNF_CMD_STAT, "[GAVDP][GavdpAvdtpEnventCallback][AVDTP_EVENT_STREAM_RECONFIG_CNF] sep->command_stage = GAVDP_WAIT_NONE")
TRC_MSG(BT_GAVDP_AVDTP_CBK_RECONFIG_CNF_SUCCESS, "[GAVDP][GavdpAvdtpEnventCallback][AVDTP_EVENT_STREAM_RECONFIG_CNF] stream reconfig completed")
TRC_MSG(BT_GAVDP_AVDTP_CBK_RECONFIG_CNF_FAILED, "[GAVDP][GavdpAvdtpEnventCallback][AVDTP_EVENT_STREAM_RECONFIG_CNF][ERR] stream reconfig failed")
TRC_MSG(BT_GAVDP_AVDTP_CBK_RECONFIG_CNF_BAD_STAT, "[GAVDP][GavdpAvdtpEnventCallback][AVDTP_EVENT_STREAM_RECONFIG_CNF][ERR] state error, currnet state: %d")
TRC_MSG(BT_GAVDP_AVDTP_CBK_ABORT_IND_CMD_STAT, "[GAVDP][GavdpAvdtpEnventCallback][AVDTP_EVENT_STREAM_ABORT_IND] sep->command_stage = GAVDP_WAIT_RES_ABORT")
TRC_MSG(BT_GAVDP_AVDTP_CBK_ABORT_IND, "[GAVDP][GavdpAvdtpEnventCallback][AVDTP_EVENT_STREAM_ABORT_IND] call back to app")
TRC_MSG(BT_GAVDP_AVDTP_CBK_ABORT_CNF_BAD_STAT, "[GAVDP][GavdpAvdtpEnventCallback][AVDTP_EVENT_STREAM_ABORTED][ERR] state error, currnet state: %d")
TRC_MSG(BT_GAVDP_AVDTP_CBK_ABORT_CNF_STAT_TRANS, "[GAVDP][GavdpAvdtpEnventCallback][AVDTP_EVENT_STREAM_ABORTED] sep->stream_state = GAVDP_STATE_IDLE")
TRC_MSG(BT_GAVDP_AVDTP_CBK_ABORT_CNF, "[GAVDP][GavdpAvdtpEnventCallback][AVDTP_EVENT_STREAM_ABORTED] stream abort completed")
TRC_MSG(BT_GAVDP_AVDTP_CBK_ABORT_CNF_CMD_STAT, "[GAVDP][GavdpAvdtpEnventCallback][AVDTP_EVENT_STREAM_ABORTED] sep->command_stage = sep->command_stage = GAVDP_WAIT_NONE")
TRC_MSG(BT_GAVDP_AVDTP_CBK_CLOSE_IND_CMD_STAT, "[GAVDP][GavdpAvdtpEnventCallback][AVDTP_EVENT_STREAM_CLOSE_IND] sep->command_stage = GAVDP_WAIT_RES_CLOSE")
TRC_MSG(BT_GAVDP_AVDTP_CBK_CLOSE_IND, "[GAVDP][GavdpAvdtpEnventCallback][AVDTP_EVENT_STREAM_CLOSE_IND] call back to app")
TRC_MSG(BT_GAVDP_AVDTP_CBK_CLOSE_IND_BAD_STAT, "[GAVDP][GavdpAvdtpEnventCallback][AVDTP_EVENT_STREAM_CLOSE_IND][bad state] stream state:%d, conn state:%d")

TRC_MSG(BT_GAVDP_AVDTP_CBK_CLOSE_CNF_CMD_STAT, "[GAVDP][GavdpAvdtpEnventCallback][AVDTP_EVENT_STREAM_CLOSED] stream_state %d, conn_state 0x%x")
TRC_MSG(BT_GAVDP_AVDTP_CBK_CLOSE_CNF_STAT_TRANS, "[GAVDP][GavdpAvdtpEnventCallback][AVDTP_EVENT_STREAM_CLOSED] sep->stream_state = GAVDP_STATE_IDLE")
TRC_MSG(BT_GAVDP_AVDTP_CBK_CLOSE_CNF_SUCCESS, "[GAVDP][GavdpAvdtpEnventCallback][AVDTP_EVENT_STREAM_CLOSED]stream close completed")
TRC_MSG(BT_GAVDP_AVDTP_CBK_CLOSE_CNF_FAILED, "[GAVDP][GavdpAvdtpEnventCallback][AVDTP_EVENT_STREAM_CLOSED][ERR] stream close failed")
TRC_MSG(BT_GAVDP_AVDTP_CBK_CLOSE_CNF_BAD_STAT, "[GAVDP][GavdpAvdtpEnventCallback][AVDTP_EVENT_STREAM_CLOSED][ERR] state error, currnet state: 0x%x")
TRC_MSG(BT_GAVDP_AVDTP_CBK_CLOSE_CNF_DISC_SIG_CHNL, "[GAVDP][GavdpAvdtpEnventCallback][AVDTP_EVENT_STREAM_CLOSED] AVDTP_Disconnect")
    TRC_MSG(BT_GAVDP_AVDTP_CBK_CLOSE_CNF_SEPNULL, "[GAVDP][GavdpAvdtpEnventCallback][AVDTP_EVENT_STREAM_CLOSED][Warn]Local SEP is NULL")

TRC_MSG(BT_GAVDP_AVDTP_CBK_PACKET_SENT, "[GAVDP][GavdpAvdtpEnventCallback][VDTP_EVENT_STREAM_PACKET_SENT] packet sent completed")
TRC_MSG(BT_GAVDP_AVDTP_CBK_DISC_SIG_CHNL, "[GAVDP][GavdpAvdtpEnventCallback][AVDTP_EVENT_DISCONNECT] signal channel disconnected")
TRC_MSG(BT_GAVDP_AVDTP_CBK_DISC_CMGR, "[GAVDP][GavdpAvdtpEnventCallback][AVDTP_EVENT_DISCONNECT] cmgrNode == 0")
TRC_MSG(BT_GAVDP_AVDTP_CBK_DISC_CHNL, "[GAVDP][GavdpAvdtpEnventCallback][AVDTP_EVENT_DISCONNECT] chnlNode == 0")
TRC_MSG(BT_GAVDP_AVDTP_CBK_DISC_STRM_CHNL, "[GAVDP][GavdpAvdtpEnventCallback][AVDTP_EVENT_DISCONNECT] stream channel disconnected")
    TRC_MSG(BT_GAVDP_AVDTP_CBK_DISC_RMTINFO, "[GAVDP][GavdpAvdtpEnventCallback][AVDTP_EVENT_DISCONNECT]rmtinfo:0x%x")
    TRC_MSG(BT_GAVDP_AVDTP_CBK_DISC_RMTINFO_NODE, "[GAVDP][GavdpAvdtpEnventCallback][AVDTP_EVENT_DISCONNECT]rmtInfoNode:0x%x")
    TRC_MSG(BT_GAVDP_AVDTP_CBK_DISC_RMTINFO_NODE_ERROR, "[GAVDP][GavdpAvdtpEnventCallback][AVDTP_EVENT_DISCONNECT]Find No rmtInfoNode")

TRC_MSG(BT_GAVDP_AVDTP_CBK_START_RSP_TX_DONE, "[GAVDP][GavdpAvdtpEnventCallback][AVDTP_EVENT_STREAM_STARTED]stream start rsp TX done")
TRC_MSG(BT_GAVDP_AVDTP_CBK_SUSPEND_RSP_TX_DONE, "[GAVDP][GavdpAvdtpEnventCallback][AVDTP_EVENT_STREAM_STARTED]stream suspend rsp TX done")
TRC_MSG(BT_GAVDP_AVDTP_CBK_PACKET_RECV, "[GAVDP][GavdpAvdtpEnventCallback][VDTP_EVENT_STREAM_PACKET_SENT] packet recv %d")
    TRC_MSG(BT_GAVDP_AVDTP_CBK_ERR_RMTINFO, "[GAVDP][GavdpAvdtpEnventCallback]Find NO Remote Info, event:%d")
    TRC_MSG(BT_GAVDP_AVDTP_CBK_INCOM, "[GAVDP][GavdpAvdtpEnventCallback][Info]Incoming Connection")
    TRC_MSG(BT_GAVDP_AVDTP_CBK_BDADDR, "[GAVDP][GavdpAvdtpEnventCallback][Info]bd_addr %02x:%02x:%02x:%02x:%02x:%02x")
    TRC_MSG(BT_GAVDP_AVDTP_CBK_LOCSEP, "[GAVDP][GavdpAvdtpEnventCallback][Info]Local SEP 0x%x")
    TRC_MSG(BT_GAVDP_AVDTP_CBK_LOCSEP_NULL, "[GAVDP][GavdpAvdtpEnventCallback][Warn]Local SEP not Configured")

TRC_MSG(BT_GAVDP_INIT, "[GAVDP][GAVDP_Init]")
TRC_MSG(BT_GAVDP_INIT_ALREADY, "[GAVDP][GAVDP_Init][ERR]GAVDP_ERR_ALREADY_INIT")
    TRC_MSG(BT_GAVDP_INIT_DEINIT, "[GAVDP][GAVDP_Init]GAVDP_STATE_DEINITIALIZING")
    TRC_MSG(BT_GAVDP_INIT_FREE_CHNL, "[GAVDP][GAVDP_Init]free channel node")
    TRC_MSG(BT_GAVDP_INIT_FREE_CMGR, "[GAVDP][GAVDP_Init]free cmgr node")
    TRC_MSG(BT_GAVDP_DEINIT, "[GAVDP][GAVDP_DeInit]")
    TRC_MSG(BT_GAVDP_DEINIT_CMGR, "[GAVDP][GAVDP_DeInit]CMGR_DeregisterHandler")
    TRC_MSG(BT_GAVDP_DEINIT_RMTINFO, "[GAVDP][GAVDP_DeInit]Free remote info node is not found. To release the node while initializing")

TRC_MSG(BT_GAVDP_REG, "[GAVDP][GAVDP_Register]+++ SEP addr: 0x%08x")
TRC_MSG(BT_GAVDP_REG_NO_SEP, "[GAVDP][GAVDP_Register][ERR] sep node is already on the list")
TRC_MSG(BT_GAVDP_REG_ERROR, "[GAVDP][GAVDP_Register][ERR] index: %d")
TRC_MSG(BT_GAVDP_REG_SEP_ID, "[GAVDP][GAVDP_Register] sep->info.id: %d")
    TRC_MSG(BT_GAVDP_REG_SEP_INFO, "[GAVDP][GAVDP_Register]sep:0x%x stream:0x%x stream channel:0x%x,callback:0x%x")
TRC_MSG(BT_GAVDP_REG_CHNL, "[GAVDP][GAVDP_Register] AVDTP event callback register, channel")
TRC_MSG(BT_GAVDP_REG_STRM, "[GAVDP][GAVDP_Register] AVDTP_RegisterStream")
TRC_MSG(BT_GAVDP_REG_STRM_ID, "[GAVDP][GAVDP_Register] sep->stream.locStrmId : %d")
TRC_MSG(BT_GAVDP_REG_CMGR, "[GAVDP][GAVDP_Register] CMGR event callback register, cmgr_hdlr")
TRC_MSG(BT_GAVDP_REG_INS_SEP, "[GAVDP][GAVDP_Register] Insert SEP node, SEP address: 0x%08x, Callback address: 0x%08x")
TRC_MSG(BT_GAVDP_REG_INS_CHNL, "[GAVDP][GAVDP_Register] Insert channel node:0x%x")
TRC_MSG(BT_GAVDP_REG_INS_CMGR, "[GAVDP][GAVDP_Register] Insert cmgr node")

TRC_MSG(BT_GAVDP_DEREG, "[GAVDP][GAVDP_DeRegister]+++ SEP addr: 0x%08x")
TRC_MSG(BT_GAVDP_DEREG_NO_SEP, "[GAVDP][GAVDP_DeRegister][ERR] sep node is not on the list")
TRC_MSG(BT_GAVDP_DEREG_STRM, "[GAVDP][GAVDP_DeRegister] AVDTP_DeregisterStream")
TRC_MSG(BT_GAVDP_DEREG_CMGR_NOT_RECALL, "[GAVDP][GAVDP_DeRegister][ERR] sep->cmgr_hdlr != 0")
TRC_MSG(BT_GAVDP_DEREG_CMGR, "[GAVDP][GAVDP_DeRegister] CMGR_DeregisterHandler(cmgr_hdlr)")
TRC_MSG(BT_GAVDP_DEREG_CHNL_NOT_RECALL, "[GAVDP][GAVDP_DeRegister][ERR] sep->signal_channel != 0")
TRC_MSG(BT_GAVDP_DEREG_CHNL, "[GAVDP][GAVDP_DeRegister] AVDTP_Deregister(channel)")
    TRC_MSG(BT_GAVDP_DEREG_CHNL_NODE_ERR, "[GAVDP][GAVDP_DeRegister]Free channel node is not found. To release the node while initializing.")
    TRC_MSG(BT_GAVDP_DEREG_CHNL_STATE, "[GAVDP][GAVDP_DeRegister] AVDTP_Deregister return %d")
    TRC_MSG(BT_GAVDP_DEREG_CMGR_ERR, "[GAVDP][GAVDP_DeRegister]Free CMGR node is not found. To release the node while initializing.")
    TRC_MSG(BT_GAVDP_DEREG_RMTINFO_ERR, "[GAVDP][GAVDP_DeRegister]Free remote info node is not found. To release the node while initializing.")

TRC_MSG(BT_GAVDP_EST_CON_REQ, "[GAVDP][GAVDP_EstablishConnectionReq]+++ SEP addr: 0x%08x, BD addr: %02x:%02x:%02x:%02x:%02x:%02x")
TRC_MSG(BT_GAVDP_EST_CON_REQ_STAT, "[GAVDP][GAVDP_EstablishConnectionReq] rmtInfo->conn_state: 0x%x")
TRC_MSG(BT_GAVDP_EST_CON_REQ_BAD_STAT, "[GAVDP][GAVDP_EstablishConnectionReq][ERR] conn state error")
TRC_MSG(BT_GAVDP_EST_CON_REQ_STAT_TRANS, "[GAVDP][GAVDP_EstablishConnectionReq] GAVDP(sig_conn_state) = GAVDP_STATE_SIG_CONNECT_OUTGOING")
TRC_MSG(BT_GAVDP_EST_CON_REQ_CMGR_PENDING, "[GAVDP][GAVDP_EstablishConnectionReq] CMGR_CreateDataLink status == BT_STATUS_PENDING")
TRC_MSG(BT_GAVDP_EST_CON_REQ_CMGR_SUCCESS, "[GAVDP][GAVDP_EstablishConnectionReq] CMGR_CreateDataLink status == BT_STATUS_SUCCESS")
TRC_MSG(BT_GAVDP_EST_CON_REQ_CMGR_FAILED, "[GAVDP][GAVDP_EstablishConnectionReq] CMGR_CreateDataLink failed, GAVDP(sig_conn_state) = GAVDP_STATE_SIG_IDLE, try to disconnect 1")
    TRC_MSG(BT_GAVDP_EST_CON_REQ_SIGEXIST, "[GAVDP][GAVDP_EstablishConnectionReq]signal exist")
    TRC_MSG(BT_GAVDP_EST_CON_REQ_STREAM_EXIST, "[GAVDP][GAVDP_EstablishConnectionReq]stream exist")
    TRC_MSG(BT_GAVDP_EST_CON_REQ_RMTINFO_ERR, "[GAVDP][GAVDP_EstablishConnectionReq][Error]Find no remote info node")
    TRC_MSG(BT_GAVDP_EST_CON_REQ_RMTINFO_NODE, "[GAVDP][GAVDP_EstablishConnectionReq][info]rmote Info Node:0x%x")
    TRC_MSG(BT_GAVDP_EST_CON_REQ_INCOM, "[GAVDP][GAVDP_EstablishConnectionReq][WRN]Connection or Stream is incoming")
    TRC_MSG(BT_GAVDP_EST_CON_REQ_SIG, "[GAVDP][GAVDP_EstablishConnectionReq]signal channel = 0x%x")

TRC_MSG(BT_GAVDP_EST_CON_RSP, "[GAVDP][GAVDP_EstablishConnectionRsp]+++ SEP addr: 0x%08x, result: %d")
TRC_MSG(BT_GAVDP_EST_CON_RSP_STAT, "[GAVDP][GAVDP_EstablishConnectionRsp] GAVDP(sig_conn_state): %d, sep cmd state: %d, sep strm state: %d")
TRC_MSG(BT_GAVDP_EST_CON_RSP_STAT_TRANS, "[GAVDP][GAVDP_EstablishConnectionRsp] GAVDP(sig_conn_state) = GAVDP_STATE_SIG_IDLE, sep->stream_state = GAVDP_STATE_IDLE")
TRC_MSG(BT_GAVDP_EST_CON_RSP_ACPT, "[GAVDP][GAVDP_EstablishConnectionRsp] sep->stream_state = GAVDP_STATE_OPEN, AVDTP_OpenStreamRsp(ACCEPT)")
TRC_MSG(BT_GAVDP_EST_CON_RSP_REJ, "[GAVDP][GAVDP_EstablishConnectionRsp] AVDTP_OpenStreamRsp(REJECT)")
TRC_MSG(BT_GAVDP_EST_CON_RSP_BAD_STAT, "[GAVDP][GAVDP_EstablishConnectionRsp] state error, AVDTP_OpenStreamRsp(REJECT)")
    TRC_MSG(BT_GAVDP_EST_CON_RSP_RMTINFO_ERR, "[GAVDP][GAVDP_EstablishConnectionRsp][Error]Find No Remote Info")
    TRC_MSG(BT_GAVDP_EST_CON_RSP_SEP_ERR, "[GAVDP][GAVDP_EstablishConnectionRsp][Error]Find No SEP")

TRC_MSG(BT_GAVDP_START_STRM_REQ, "[GAVDP][GAVDP_StartStreamReq]+++ SEP addr: 0x%08x")
TRC_MSG(BT_GAVDP_START_STRM_REQ_STAT, "[GAVDP][GAVDP_StartStreamReq] rmtInfo->conn_state: %d, sep cmd state: %d, sep strm state: %d")
TRC_MSG(BT_GAVDP_START_STRM_REQ_BAD_STAT, "[GAVDP][GAVDP_StartStreamReq][ERR] state error")
TRC_MSG(BT_GAVDP_START_STRM_REQ_PENDING, "[GAVDP][GAVDP_StartStreamReq] AVDTP_StartStream == BT_STATUS_PENDING, sep->command_stage = GAVDP_WAIT_CNF_START")
TRC_MSG(BT_GAVDP_START_STRM_REQ_FAILED, "[GAVDP][GAVDP_StartStreamReq][ERR] AVDTP_StartStream != BT_STATUS_PENDING")
    TRC_MSG(BT_GAVDP_START_STRM_REQ_RMTINFO_ERR, "[GAVDP][GAVDP_StartStreamReq][Error]Find No Remote Info")
    TRC_MSG(BT_GAVDP_START_STRM_REQ_SEP_ERR, "[GAVDP][GAVDP_StartStreamReq][Error]Find No SEP")
    TRC_MSG(BT_GAVDP_START_STRM_REQ_RETURN, "[GAVDP][GAVDP_StartStreamReq]AVDTP_StartStream return :%d")

TRC_MSG(BT_GAVDP_START_STRM_RSP, "[GAVDP][GAVDP_StartStreamRsp]+++ SEP addr: 0x%08x, result: %d")
TRC_MSG(BT_GAVDP_START_STRM_RSP_STAT, "[GAVDP][GAVDP_StartStreamRsp] GAVDP(sig_conn_state): %d, sep cmd state: %d, sep strm state: %d")
TRC_MSG(BT_GAVDP_START_STRM_RSP_ACPT, "[GAVDP][GAVDP_StartStreamRsp] sep->stream_state = GAVDP_STATE_STREAMING, AVDTP_StartStreamRsp(ACCEPT)")
TRC_MSG(BT_GAVDP_START_STRM_RSP_REJ, "[GAVDP][GAVDP_StartStreamRsp] sep->stream_state = GAVDP_STATE_OPEN , AVDTP_StartStreamRsp(REJECT)")
TRC_MSG(BT_GAVDP_START_STRM_RSP_BAD_STAT, "[GAVDP][GAVDP_StartStreamRsp][ERR] state error, AVDTP_StartStreamRsp(REJECT)")

TRC_MSG(BT_GAVDP_SUSPEND_STRM_REQ, "[GAVDP][GAVDP_SuspendStreamReq]+++ SEP addr: 0x%08x")
TRC_MSG(BT_GAVDP_SUSPEND_STRM_REQ_STAT, "[GAVDP][GAVDP_SuspendStreamReq] GAVDP(sig_conn_state): %d, sep cmd state: %d, sep strm state: %d")
TRC_MSG(BT_GAVDP_SUSPEND_STRM_REQ_BAD_STAT, "[GAVDP][GAVDP_SuspendStreamReq][ERR] state error")
TRC_MSG(BT_GAVDP_SUSPEND_STRM_REQ_PENDING, "[GAVDP][GAVDP_SuspendStreamReq] AVDTP_SuspendStream == BT_STATUS_PENDING, sep->command_stage = GAVDP_WAIT_CNF_SUSPEND")
TRC_MSG(BT_GAVDP_SUSPEND_STRM_REQ_FAILED, "[GAVDP][GAVDP_SuspendStreamReq][ERR] AVDTP_SuspendStream != BT_STATUS_PENDING")

TRC_MSG(BT_GAVDP_SUSPEND_STRM_RSP, "[GAVDP][GAVDP_SuspendStreamRsp]+++ SEP addr: 0x%08x, result: %d")
TRC_MSG(BT_GAVDP_SUSPEND_STRM_RSP_STAT, "[GAVDP][GAVDP_SuspendStreamRsp] GAVDP(sig_conn_state): %d, sep cmd state: %d, sep strm state: %d")
TRC_MSG(BT_GAVDP_SUSPEND_STRM_RSP_ACPT, "[GAVDP][GAVDP_SuspendStreamRsp] sep->stream_state = GAVDP_STATE_OPEN, AVDTP_SuspendStreamRsp(ACCEPT)")
TRC_MSG(BT_GAVDP_SUSPEND_STRM_RSP_REJ, "[GAVDP][GAVDP_SuspendStreamRsp] sep->stream_state = GAVDP_STATE_STREAMING, AVDTP_SuspendStreamRsp(REJECT)")
TRC_MSG(BT_GAVDP_SUSPEND_STRM_RSP_BAD_STAT, "[GAVDP][GAVDP_SuspendStreamRsp][ERR] state error, AVDTP_StartStreamRsp(REJECT)")

TRC_MSG(BT_GAVDP_CHG_PARA_REQ, "[GAVDP][GAVDP_ChangeParametersReq]+++ SEP addr: 0x%08x")
TRC_MSG(BT_GAVDP_CHG_PARA_REQ_STAT, "[GAVDP][GAVDP_ChangeParametersReq] GAVDP(sig_conn_state): %d, sep cmd state: %d, sep strm state: %d")
TRC_MSG(BT_GAVDP_CHG_PARA_REQ_BAD_STAT, "[GAVDP][GAVDP_ChangeParametersReq][ERR] state error")
TRC_MSG(BT_GAVDP_CHG_PARA_REQ_PENDING, "[GAVDP][GAVDP_ChangeParametersReq] AVDTP_Reconfig == BT_STATUS_PENDING, sep->command_stage = GAVDP_WAIT_CNF_RECONFIG")
TRC_MSG(BT_GAVDP_CHG_PARA_REQ_FAILED, "[GAVDP][GAVDP_ChangeParametersReq][ERR] AVDTP_Reconfig != BT_STATUS_PENDING")
    TRC_MSG(BT_GAVDP_CHG_PARA_REQ_DISCOVER, "[GAVDP][GAVDP_ChangeParametersReq][Swtich Codec]Step 0:Discover for Reconfig")
    TRC_MSG(BT_GAVDP_CHG_PARA_REQ_CLOSE_STREAM, "[GAVDP][GAVDP_ChangeParametersReq][Swtich Codec] Step 1: Close stream")
    TRC_MSG(BT_GAVDP_CHG_PARA_REQ_CFGSEP, "[GAVDP][GAVDP_ChangeParametersReq]rmtInfo->cfg_sep_index: %d")

TRC_MSG(BT_GAVDP_CHG_PARA_RSP, "[GAVDP][GAVDP_ChangeParametersRsp]+++ SEP addr: 0x%08x, result: %d")
TRC_MSG(BT_GAVDP_CHG_PARA_RSP_STAT, "[GAVDP][GAVDP_ChangeParametersRsp] GAVDP(sig_conn_state): %d, sep cmd state: %d, sep strm state: %d")
TRC_MSG(BT_GAVDP_CHG_PARA_RSP_ACPT, "[GAVDP][GAVDP_ChangeParametersRsp] AVDTP_ReconfigRsp(ACCEPT)")
TRC_MSG(BT_GAVDP_CHG_PARA_RSP_REJ, "[GAVDP][GAVDP_ChangeParametersRsp] AVDTP_ReconfigRsp(REJECT)")
TRC_MSG(BT_GAVDP_CHG_PARA_RSP_BAD_STAT, "[GAVDP][GAVDP_ChangeParametersRsp][ERR] state error, AVDTP_ReconfigRsp(REJECT)")

TRC_MSG(BT_GAVDP_ABORT_REQ, "[GAVDP][GAVDP_AbortReq]+++ SEP addr: 0x%08x")
TRC_MSG(BT_GAVDP_ABORT_REQ_STAT, "[GAVDP][GAVDP_AbortReq]GAVDP(sig_conn_state): %d, sep cmd state: %d, sep strm state: %d")
TRC_MSG(BT_GAVDP_ABORT_REQ_BAD_STAT, "[GAVDP][GAVDP_AbortReq][ERR] state error")
TRC_MSG(BT_GAVDP_ABORT_REQ_PENDING, "[GAVDP][GAVDP_AbortReq]AVDTP_AbortStream == BT_STATUS_PENDING, sep->command_stage = GAVDP_WAIT_CNF_ABORT")
TRC_MSG(BT_GAVDP_ABORT_REQ_FAILED, "[GAVDP][GAVDP_AbortReq][ERR] AVDTP_AbortStream != BT_STATUS_PENDING")

TRC_MSG(BT_GAVDP_ABORT_RSP, "[GAVDP][GAVDP_AbortRsp]+++SEP addr: 0x%08x")
TRC_MSG(BT_GAVDP_ABORT_RSP_STAT, "[GAVDP][GAVDP_AbortRsp]GAVDP(sig_conn_state): %d, sep cmd state: %d, sep strm state: %d")
TRC_MSG(BT_GAVDP_ABORT_RSP_ACPT, "[GAVDP][GAVDP_AbortRsp]sep->stream_state = GAVDP_STATE_IDLE, AVDTP_AbortStreamRsp")

TRC_MSG(BT_GAVDP_REL_CON_REQ, "[GAVDP][GAVDP_ReleaseConnectionReq]+++ SEP addr: 0x%08x")
TRC_MSG(BT_GAVDP_REL_CON_REQ_STAT, "[GAVDP][GAVDP_ReleaseConnectionReq] GAVDP(sig_conn_state): %d, sep cmd state: %d, sep strm state: %d")
TRC_MSG(BT_GAVDP_REL_CON_REQ_BAD_STAT, "[GAVDP][GAVDP_ReleaseConnectionReq][ERR] state error")
TRC_MSG(BT_GAVDP_REL_CON_REQ_PENDING, "[GAVDP][GAVDP_ReleaseConnectionReq] AVDTP_CloseStream == BT_STATUS_PENDING, sep->command_stage = GAVDP_WAIT_CNF_CLOSE")
TRC_MSG(BT_GAVDP_REL_CON_REQ_FAILED, "[GAVDP][GAVDP_ReleaseConnectionReq][ERR] AVDTP_CloseStream != BT_STATUS_PENDING")

TRC_MSG(BT_GAVDP_REL_CON_RSP, "[GAVDP][GAVDP_ReleaseConnectionRsp]+++ SEP addr: 0x%08x")
TRC_MSG(BT_GAVDP_REL_CON_RSP_STAT, "[GAVDP][GAVDP_ReleaseConnectionRsp] GAVDP(sig_conn_state): %d, sep cmd state: %d, sep strm state: %d")
TRC_MSG(BT_GAVDP_REL_CON_RSP_ACPT, "[GAVDP][GAVDP_ReleaseConnectionRsp] AVDTP_CloseStreamRsp(ACCEPT), sep->command_stage = GAVDP_STATE_IDLE")
TRC_MSG(BT_GAVDP_REL_CON_RSP_REJ, "[GAVDP][GAVDP_ReleaseConnectionRsp] AVDTP_CloseStreamRsp(REJECT)")
TRC_MSG(BT_GAVDP_REL_CON_RSP_BAD_STAT, "[GAVDP][GAVDP_ReleaseConnectionRsp][ERR] state error, AVDTP_CloseStreamRsp(REJECT)")

TRC_MSG(BT_GAVDP_SEND_DATA_REQ, "[GAVDP][GAVDP_StreamSendDataReq]+++ SEP addr: 0x%08x")
TRC_MSG(BT_GAVDP_SEND_DATA_REQ_STAT, "[GAVDP][GAVDP_StreamSendDataReq] GAVDP(sig_conn_state): %d, sep cmd state: %d, sep strm state: %d")
TRC_MSG(BT_GAVDP_SEND_DATA_REQ_BAD_LEN, "[GAVDP][GAVDP_StreamSendDataReq][ERR] buffer_size == 0, GAVDP_ERR_BAD_LENGTH")
TRC_MSG(BT_GAVDP_SEND_DATA_REQ_FATAL, "[GAVDP][GAVDP_StreamSendDataReq][ERR] AVDTP_SendStreamData == 0, GAVDP_ERR_FATAL")
TRC_MSG(BT_GAVDP_SEND_DATA_REQ_SUCCESS, "[GAVDP][GAVDP_StreamSendDataReq] HCI_Process")
    TRC_MSG(BT_GAVDP_SEND_DATA_REQ_NOA2DP, "[GAVDP][GAVDP_StreamSendDataReq]AVDTP_CODEC_TYPE_NON_A2DP")
    TRC_MSG(BT_GAVDP_SEND_DATA_REQ_CODECTYPE, "[GAVDP][GAVDP_StreamSendDataReq]codec type=%d")
/* GAVDP TRACE END */

/* A2DP TRACE START */
TRC_MSG(BT_A2DP_CMGR_CLOSE, "[A2DP] close cmgr link, stream id = %d")
TRC_MSG(BT_A2DP_CMGR_EVENT_CALLBACK, "[A2DP] cmgr callback event: %d, status: %d")
TRC_MSG(BT_A2DP_SDP_EVENT_CALLBACK, "[A2DP] sdp query callback, result:%d, stream_handler:%d, wait cnf:%d, attr ind:%d")
TRC_MSG(BT_A2DP_SDP_REQUERY_SUCCESS, "[A2DP] for A2DP re-query sdp success,connect GAVDP now")
TRC_MSG(BT_A2DP_SDP_SUCCESS_AND_CONN_GAVDP, "[A2DP] try to connect gavdp, UUID:%x")
TRC_MSG(BT_A2DP_DO_SDP_AGAIN, "[A2DP] Do SDP query again for A2DP")
TRC_MSG(BT_A2DP_DO_SDP_QUERY, "[A2DP] sdp query, stream id: %d")
TRC_MSG(BT_A2DP_BAD_ADDRESS, "[A2DP] unrecognize addr")
TRC_MSG(BT_A2DP_RELEASE_STREAM_HDL, "[A2DP] release stream handler: %d")
TRC_MSG(BT_A2DP_CONTINUE_OPEN_REQ, "[A2DP] A2dpContinueOpenReq, bt addr: %x, %x, %x, stream hdl: %d")
TRC_MSG(BT_A2DP_DEVICE_OPENED, "[A2DP] open req, this device has been connected.")
TRC_MSG(BT_A2DP_GET_STREAM_HDL_ERR, "[A2DP] get stream handler error.")
TRC_MSG(BT_A2DP_GET_STREAM_SEP_ERR, "[A2DP] get stream endpoint error.")
TRC_MSG(BT_A2DP_CONTINUE_OPEN_INFO, "[A2DP] sep infor: 0x%x, stream hdl: %d")
TRC_MSG(BT_A2DP_STREAM_OPEN, "[A2DP] A2DP_StreamOpenReq: %d, %x, %x, %x")
TRC_MSG(BT_A2DP_OPEN_CNF_INFO, "[A2DP] open cnf error: %d, steam_handler: %d, wait cnf: %d, wait res: %d")
TRC_MSG(BT_A2DP_ADDR, "[A2DP] addr: %2x%2x%2x%2x%2x%2x")
TRC_MSG(BT_A2DP_STREAM_HANDLE, "[A2DP] stream handler: %d")
TRC_MSG(BT_A2DP_OPEN_IND, "[A2DP] stream open ind, stream hdl: %d, wait res: %d, wait cnf: %d")
TRC_MSG(BT_A2DP_OPEN_RES, "[A2DP] stream open ind, result: 0x%x, stream hdl: %d, wait res: %d")
TRC_MSG(BT_A2DP_RECONFIG_REQ, "[A2DP] stream reconfig req, stream hdl: %d, wait cnf: %d")
TRC_MSG(BT_A2DP_RECONFIG_CNF, "[A2DP] stream reconfig cnf, stream hdl: %d, error: %d")
TRC_MSG(BT_A2DP_RECONFIG_IND, "[A2DP] stream reconfig ind, stream hdl: %d, wait res: %d, wait cnf: %d")
TRC_MSG(BT_A2DP_RECONFIG_RES, "[A2DP] stream reconfig res, result: %d, stream hdl: %d, wait res: %d")
TRC_MSG(BT_A2DP_NGEOCONFIG_FAIL, "[A2DP][A2DPStreamReconfigReq]no matched codec settings---")
TRC_MSG(BT_A2DP_START_REQ, "[A2DP] stream start req, stream hdl: %d, wait res: %d, wait cnf: %d")
TRC_MSG(BT_A2DP_START_CNF, "[A2DP] stream start cnf, stream hdl: %d, error: %d, wait cnf: %d, wait res: %d, wait started: %d, suspend: %d")
TRC_MSG(BT_A2DP_START_IND, "[A2DP] stream start ind, stream hdl: %d, wait res: %d, wait cnf: %d")
TRC_MSG(BT_A2DP_START_RES, "[A2DP] stream start res, result: 0x%x, stream hdl: %d, wait res: %d, wait cnf: %d")
TRC_MSG(BT_A2DP_SUSPEND_REQ, "[A2DP] stream suspend req, stream hdl: %d, wait res: %d, wait cnf: %d, wait started: %d")
TRC_MSG(BT_A2DP_SUSPEND_CNF, "[A2DP] stream suspend cnf, stream hdl: %d, error: %d, wait res: %d, wait cnf: %d")
TRC_MSG(BT_A2DP_SUSPEND_IND, "[A2DP] stream suspend ind, stream hdl: %d, wait res: %d, wait cnf: %d")
TRC_MSG(BT_A2DP_SUSPEND_RES, "[A2DP] stream suspend res, result: %d, stream hdl: %d, wait res: %d, wait cnf: %d")
TRC_MSG(BT_A2DP_CLOSE_REQ, "[A2DP] stream close req, stream hdl: %d, wait res: %d, wait cnf: %d")
TRC_MSG(BT_A2DP_CLOSE_CNF, "[A2DP] stream close cnf, stream hdl: %d, error: %d, wait res: %d, wait cnf: %d")
TRC_MSG(BT_A2DP_CLOSE_IND, "[A2DP] stream close ind, stream hdl: %d, wait res: %d, wait cnf: %d")
TRC_MSG(BT_A2DP_CLOSE_RES, "[A2DP] stream close res, result: %d, stream hdl: %d, wait res: %d, wait cnf: %d")
TRC_MSG(BT_A2DP_ABORT_REQ, "[A2DP] stream abort req, stream hdl: %d, wait res: %d, wait cnf: %d")
TRC_MSG(BT_A2DP_ABORT_CNF, "[A2DP] stream abort cnf, stream hdl: %d, error: %d, wait res: %d, wait cnf: %d")
TRC_MSG(BT_A2DP_ABORT_IND, "[A2DP] stream abort ind, stream hdl: %d, wait res: %d, wait cnf: %d")
TRC_MSG(BT_A2DP_ABORT_RES, "[A2DP] stream abort res, stream hdl: %d, wait res: %d, wait cnf: %d")
TRC_MSG(BT_A2DP_DELAY_SEND_QOS, "[A2DP] delay send qos to upper layer.")
TRC_MSG(BT_A2DP_SEND_STREAM_DATA, "[A2DP] send stream data, dev num: %d, in use: %d, stream state: %d, len: %d")
TRC_MSG(BT_A2DP_GAVDP_EVENT_CALLBACK, "[A2DP] gavdp callback event: 0x%x")
TRC_MSG(BT_A2DP_INIT, "[A2DP] bt_a2dp_init")
TRC_MSG(BT_A2DP_DEINIT, "[A2DP] bt_a2dp_deinit")
TRC_MSG(BT_A2DP_ACTIVATE, "[A2DP]activate, source sep num: %d, sink sep num: %d, is active: %d")
TRC_MSG(BT_A2DP_DEACTIVATE, "[A2DP]deactivate, is active: %d")
TRC_MSG(BT_A2DP_STOP_FM, "[A2DP] fm over controller stop fm, link state: %d, enabled: %d, mode: %d, link: %x")
TRC_MSG(BT_A2DP_START_FM, "[A2DP] fm over controller start fm, stream hdl: %d")
TRC_MSG(BT_A2DP_SUSPEND_FM, "[A2DP] fm over controller suspend fm, stream hdl: %d")
TRC_MSG(BT_A2DP_RESUME_FM, "[A2DP] fm over controller resume fm, stream hdl: %d")
TRC_MSG(BT_A2DP_STOP_FM_REQ, "[A2DP] fm over controller stop fm, stream hdl: %d")
TRC_MSG(BT_A2DP_FM_SET_CODEC_ELEMENT, "[A2DP] fm over controller set codec elemLen: %d, element: %d")
TRC_MSG(BT_A2DP_STREAM_SEND_DATA_REQ, "bt_a2dp_stream_send_data_req: state=%d, wait_cnf=%d, wait_res=%d")
TRC_MSG(BT_A2DP_PANIC, "bt_a2dp_panic: state=%d, wait_cnf=%d, wait_res=%d")
TRC_MSG(BT_A2DP_PRINT_STATE, "bt_a2dp: state=%d")
TRC_MSG(BT_A2DP_PRINT_VALUE1, "bt_a2dp dbg: value=%d")
TRC_MSG(BT_A2DP_PRINT_VALUE2, "bt_a2dp dbg: value1=%d, value2=%d")
TRC_MSG(BT_A2DP_PRINT_VALUE3, "bt_a2dp dbg: value1=%d, value2=%d, value3=%d")
TRC_MSG(BT_A2DP_PRINT_VALUE4, "bt_a2dp dbg: value1=%d, value2=%d, value3=%d, value4=%d")
TRC_MSG(BT_A2DP_PRINT_VALUE5, "bt_a2dp dbg: value1=%d, value2=%d, value3=%d, value4=%d, value5=%d")
TRC_MSG(BT_A2DP_PRINT_VALUE6, "bt_a2dp dbg: value1=%d, value2=%d, value3=%d, value4=%d, value5=%d, value6=%d")
TRC_MSG(BT_A2DP_SINK_RECV_DATA_PRINT_INDEX, "[A2DP_SINK]A2DP_ReceiveStreamData: index = %d")
TRC_MSG(BT_A2DP_SINK_RECEIVE_MEDIA_DATA, "[A2DP_SINK]Receive stream data: data ptr(%x), data len(%d)")
TRC_MSG(BT_A2DP_SINK_RING_BUFFER_NOT_ENOUGH, "[A2DP_SINK]Ring buffer space not enough: ring buf free len(%d), audio data len(%d)")
TRC_MSG(BT_A2DP_SINK_CURR_NOTIF_COUNT, "[A2DP_SINK]Need to notify MED: notify threshhold(%d), write progress(%d)")
TRC_MSG(BT_A2DP_SINK_START_CODEC, "[A2DP_SINK]Notify the MED to START the codec")
TRC_MSG(BT_A2DP_CODEC_START_REQ, "[A2DP] stream start req, stream state: %d, wait res: %d, wait cnf: %d")
TRC_MSG(BT_A2DP_STREAM_CODEC_START2, "Receive mmi codec start cmd:  write_len=%d, need_notify=%d, start_monitor=%d")
TRC_MSG(BT_A2DP_SINK_STOP_CODEC, "[A2DP_SINK]Notify the MED to STOP the codec")
TRC_MSG(BT_A2DP_SET_SCO_STATE, "[A2DP][a2dp_set_sco_state](%d)")
    TRC_MSG(BT_A2DP_FIND_STREAMID, "[A2DP][A2dpFindStreamIDbyAddr]0x%x:0x%x:0x%x:0x%x:0x%x:0x%x")
    TRC_MSG(BT_A2DP_STREAM_OPEN_INFO, "[A2DP][A2dpStreamOpenCnf]stream_handler:%d,sep:%x")
    TRC_MSG(BT_A2DP_STREAM_OPEN_INFO_CODECTYPE, "[A2DP][A2dpStreamOpenCnf]sep->codec.codecType = %d")
    TRC_MSG(BT_A2DP_ACTIVATE_CODECTYPE, "[A2DP][a2dp_convert_codec]codecType : %x")
    TRC_MSG(BT_A2DP_START_ERROR,"[A2DP_StreamStartRes]stream handle[%d]Bad State:%d")    
    TRC_MSG(BT_A2DP_GET_STATE,"A2dpGetState(handle=%d, in_use=%d, state=%d)")    
    TRC_MSG(BT_A2DP_GET_STATE_ERR,"A2dpGetState_error(%d)")    
/* A2DP TRACE END */

/* JSR82 TRACE START */
/* [JSR82 ] Add by mtk01411: For BT JSR82 traces: 2007-0127 */
TRC_MSG(BT_JSR82_DEACTIVATE_STATUD_CONID, "bt_jsr82_HandleJSR82Deactivate(): stauts=%02X,con_id=%02X")
TRC_MSG(BT_JSR82_DEACTIVATE_FIND_CHNL_INX, "bt_jsr82_HandleJSR82Deactivate(): Find jsr82 channel :%02x")
TRC_MSG(BT_JSR82_DEACTIVATE_DEREG_CHNL_STATUS, "bt_jsr82_HandleJSR82Deactivate():Deregister channel :%02x")
TRC_MSG(BT_JSR82_VM_END_PEND_CON_REQ_PS_TYPE, "VM termination: pend con req is chnl OPEN with ps_type=%d,then disc link")
TRC_MSG(BT_JSR82_VM_DISC_ALL_LINK_PEND_CON_REQ_NO_TYPE, "BTJSR82_CheckSendVMDiscAllLinksCnf(): vm_request_disc_all_link_but_pending_conreq_no=%d,type=%d")
TRC_MSG(BT_JSR82_AUTH_COMPLETE_BUT_ONE_ENCRYPT_ON_GOING, "bt_jsr82_HandleAuthenticationCnf():Complete Auth,but One encryption is on onging")
TRC_MSG(BT_JSR82_SEC_LINK_ENCRYPT_STATUS, "bt_jsr82_HandleAuthenticationCnf(): return from SEC_SetLinkEncryption err=%d")
TRC_MSG(BT_JSR82_GET_SESSION_INX, "BTJSR82_GetSessionInx():Find jsr82 channel :%02x")
TRC_MSG(BT_JSR82_SEARCH_L2CAP_CNTX_DUMP_SESSION_INFO, "bt_jsr82_SearchL2capContext():inx:%02x,status:%02x, ps_type:%02x, chnl:%02x, cli_srv_type:%02x")
TRC_MSG(BT_JSR82_SEARCH_L2CAP_CNTX_L2CAP_INFO, "bt_jsr82_SearchL2capContext():inx=%d,l2cap_con_state:%d, l2capCid=%d")
TRC_MSG(BT_JSR82_SEARCH_L2CAP_CNTX_FIND_EXISTED_L2CID, "bt_jsr82_SearchL2capContext():jsr82 find l2cap id:%04x,l2capCid=%04x")
TRC_MSG(BT_JSR82_ADD_NEW_L2CAP_TO_CNTX, "bt_jsr82_AddNewL2capToContext():l2cap_id=%d,ptr->l2capCtx.l2cap_con_state=%d")
TRC_MSG(BT_JSR82_ADD_CREATE_L2CAP_TO_CNTX, "bt_jsr82_AddCreateL2capToContext():l2cap_id=%d,ptr->l2capCtx.l2cap_con_state=%d")
TRC_MSG(BT_JSR82_FREE_L2CAP_CNTX, "bt_jsr82_ReleaseL2capFromContext():state=%04x,l2capid=%04x and reset l2cap_cid and con_state")
TRC_MSG(BT_JSR82_NO_L2CAP_CON_RELEASE_FIND_BY_ID, "bt_jsr82_ReleaseL2capFromContext():no l2capid=%d when release l2cap conn")
TRC_MSG(BT_JSR82_REG_SEC_RECORD_ON_CHNL, "bt_jsr82_L2capRegisterSecurity(): record_chnl=%d")
TRC_MSG(BT_JSR82_FIND_ALLOCATED_L2CAP_PSM_INX, "bt_jsr82_get_L2capPSMIndex():Find allocated L2CAP PSM=%d and index:%02x")
TRC_MSG(BT_JSR82_FIND_EMPTY_PSM_INX_REG_STATUS, "bt_jsr82_get_L2capPSMIndex(): find empty inx=%02x, RegisterPsm status:%02x")
TRC_MSG(BT_JSR82_FREE_L2CAP_PSM_INX, "bt_jsr82_free_L2capPSMIndex:%08x, %d")
TRC_MSG(BT_JSR82_FIND_ONE_ALLOCATED, "Find allocated L2CAP PSM index:%02x")
TRC_MSG(BT_JSR82_DUMP_L2CAP_PSM_INFO, "Dump L2capPSMIndex:inx=%d,used=%d,psm=%d,used_no=%d")
TRC_MSG(BT_JSR82_FREE_L2CAP_PSM_NEW_SEC_VAL, "Free L2CAP PSM inx=%d,new security value:%02x")
TRC_MSG(BT_JSR82_DUMP_FIND_L2CAP_PSM_CNTX, "Find L2capPSMInContext:inx=%d,status=%d,ps_type=%d,chnl=%d,cli_srv_type=%d,l2capCid=%d")
TRC_MSG(BT_JSR82_FIND_L2CAP_PSM_CNTX_RESULT, "Find L2capPSMInContext:%d,chnl=%d,l2cap_cid=%d")
TRC_MSG(BT_JSR82_DUMP_FIND_L2CAP_PSM_LISTEN_CNTX, "Find L2capPSMListenInContext:inx=%d,status=%d,ps_type=%d,chnl=%d,cli_srv_type=%d,l2capCid=%d")
TRC_MSG(BT_JSR82_FIND_L2CAP_PSM_LISTEN_CNTX_RESULT, "Find L2capPSMListenInContext:%d,chnl=%d,l2cap_cid=%d")
TRC_MSG(BT_JSR82_TURN_OFF_ALL_SERVICES_DISC_ALL_LINKS, "JSR82:Turn off All services and try to disconnect all Acl links")
TRC_MSG(BT_JSR82_ACL_ADD_LINK, "bt_jsr82_ACLAddLink:%08X")
TRC_MSG(BT_JSR82_FIND_A_ACTIVE_LINK_USED_NO, "Find an active link and its attached used_no=%d")
TRC_MSG(BT_JSR82_FIND_ONE_EMPTY_IN_ADD_LINK, "Find a empty one, assign it for this added link")
TRC_MSG(BT_JSR82_REMOVE_ACL_LINK, "bt_jsr82_ACLRemoveLink:%08x")
TRC_MSG(BT_JSR82_REMOVE_LINK_USED_NO, "ACLRemoveLink: find an active link and used_no=%d")
TRC_MSG(BT_JSR82_NEXT_CHECK_IN_REMOVE_LINK, "Iterator of RemoveLink link=%08X")
TRC_MSG(BT_JSR82_CHECK_DISC_ACL_NO, "CheckAndDisconnectAclNo(): active_link_no=%d")
TRC_MSG(BT_JSR82_CHECK_DISC_ACL_RFCOMM_CON_REQ_ONGOING, "JSR82CheckAndDisconnectAclNo(): RFCOMM con req is ongoing")
TRC_MSG(BT_JSR82_CHECK_DISC_ACL_L2CAP_CON_REQ_ONGOING, "JSR82CheckAndDisconnectAclNo(): L2CAP con req is ongoing")
TRC_MSG(BT_JSR82_CHECK_DISC_TIMER, "bt_jsr82_ACLCheckDisconnectTimer")
TRC_MSG(BT_JSR82_DISC_TIMER_PEND_CON_REQ_NO, "bt_jsr82_ACLCheckDisconnectTimer(): Still has pending_conreq_no=%d")
TRC_MSG(BT_JSR82_RFCALLBACK_INFO, "BTJSR82_RfCallbackFunc():con_id=%d,event=%d,chan=%08X,ptr=%08X,ptr1=%08X,parms_remDev=%08X")
TRC_MSG(BT_JSR82_RFCOMM_TX_COMPLETED, "JSR82 RFCOMM Tx data Completed")
TRC_MSG(BT_JSR82_RFEVENT_CLOSED_IND, "JSR82 RFEVENT CLOSED IND")
TRC_MSG(BT_JSR82_RFEVENT_CLOSED_RESET_SESSION_CREDIT, "JSR82 RFComm closed: Reset credit for session entry")
TRC_MSG(BT_JSR82_RFSRV_CLOSED, "JSR82 RFCOMM SRV CLOSED")
TRC_MSG(BT_JSR82_RFCHNL_DISC_COMPLETED, "JSR82 RFCOMM Channel disconnect completed")
TRC_MSG(BT_JSR82_RFCOMM_RX_IND_LEN, "JSR82 RFCOMM:Rx data ind,len=%d")
TRC_MSG(BT_JSR82_RFCOMM_OPEN_IND_AUTHORIZE_SETTING, "JSR82 RFEVENT_OPEN_IND authroize setting:%02x")
TRC_MSG(BT_JSR82_RFSRV_OPEN, "JSR82 RFCOMM Server is Open")
TRC_MSG(BT_JSR82_L2CAPCALL_INFO, "JSR82 L2CAP Callback: session_inx=%d,l2ChnlId=%d,con_id=%d, event=%d")
TRC_MSG(BT_JSR82_L2CAP_CON_IND_STATUS, "JSR82 L2CAP Accept or not, status=%d")
TRC_MSG(BT_JSR82_NOT_ADD_NEW_L2CAP_CNTX, "JSR82 L2CAP con ind:Not add new L2cap to cntx:index:%02x")
TRC_MSG(BT_JSR82_L2CAP_DISCONNECTED_CHNL_LINK, "JSR82 L2CAP_DISCONNECTED,chnl=%08X,link=%08X")
TRC_MSG(BT_JSR82_L2CAP_DISCONNECTED_INX_CON_ID, "JSR82 L2CAP DISCONNECTED_INX_CON_ID,index:%02x, con_id:%02x")
TRC_MSG(BT_JSR82_L2CAP_DISCONNECTED_STATE, "JSR82 L2CAP DISC:ptr->l2capCtx.l2cap_con_state:%02x")
TRC_MSG(BT_JSR82_L2CAP_DISC_COMPLETED, "JSR82 L2CAP Channel disconnect completed")
TRC_MSG(BT_JSR82_L2CAP_CONNECTED_CHNL, "JSR82 L2CAP CONNECTED with chnl=%08X")
TRC_MSG(BT_JSR82_L2CAP_CLIENT_CONNECTED_INX, "JSR82 L2CAP Client connected inx=%d")
TRC_MSG(BT_JSR82_L2CAP_CONNECTED_CON_ID, "JSR82 L2Cap Connected con_id=%d")
TRC_MSG(BT_JSR82_L2CAP_OPEN_CHNL_FAILED, "JSR82 L2Cap Open Chnl failed")
TRC_MSG(BT_JSR82_L2CAP_RX_IND_LEN, "JSR82 L2CAP RX ind with len=%d")
TRC_MSG(BT_JSR82_CMGRCLICALLBACK_NOT_ITS_BD_ADDR, "bt_jsr82_CmgrClientCallback Not the connect bd_addr")
TRC_MSG(BT_JSR82_CLI_CMGR_CALLBACK_CON_ID_EVENT_STATUS, "JSR82 Client Cmgr Callback: con_id=%d,event=%d,status=%d")
TRC_MSG(BT_JSR82_LINK_COF_CHECK_VM_DISC_PEND_CON_NO, "After VM starts termination: this pending con req finally success, pend_con=%d")
TRC_MSG(BT_JSR82_LINK_CON_CNF_TRY_OPEN_RFCHNL, "JSR82 LINK CON CNF then Try Open RFChnl")
TRC_MSG(BT_JSR82_LINK_CON_CNF_GET_L2CAP_PSM_INX, "JSR82 LINK CON CNF: Get L2CAP PSM Index;%02x")
TRC_MSG(BT_JSR82_LINK_CON_CNF_TRY_OPEN_L2CAP_CHNL_CID, "JSR82 LINK CON CNF then Try Open L2cap Chnl with cid=%04X")
TRC_MSG(BT_JSR82_LINK_CON_CNF_RET_STATUS, "JSR82 LINK_CON_CNF ret_Status:%02x")
TRC_MSG(BT_JSR82_OPEN_CHNL_FAILED_LINK_CON_CNF_STATUS, "JSR82 open channel failed,link_con_cnf status=%d")
TRC_MSG(BT_JSR82_VM_END_ACL_SETUP_OK_BUT_PS_TYPE_REJECTED, "VM termination: pending con req is ACL link setup ok,but ps_type=%d is rejected")
TRC_MSG(BT_JSR82_SRV_CMGR_CALLBACK_EVENT_STATUS, "JSR82 Srv Cmgr Callback with Event=%d, Status=%d")
TRC_MSG(BT_JSR82_ENABLE_SERVICE_FIND_NO_CHNL, "JSR82 Enable Service empty Channel find, case=%d")
TRC_MSG(BT_JSR82_DISABLE_SERVICE_NO_EMPTY_CHANNEL, "BT_JSR82_Disable_Service no empty Channel")
TRC_MSG(BT_JSR82_ACLCHECKANDDISCONNECTACLNO, "BT_JSR82_ACLCheckAndDisconnectAclNo")
TRC_MSG(BT_JSR82_RELEASE_SRVCHNL_INX_SERVER_CHNL_NUMxD_STILL_HAS_OTHER_REIGSTERED_ONES, "BT_JSR82_RELEASE_SRVCHNL_INX Server chnl_num=%d, still has other reigstered ones")
TRC_MSG(BT_JSR82_APPSDPDBDEACTIVATE, "BT_JSR82_AppSdpDbDeactivate")
TRC_MSG(BT_JSR82_RELEASE_PSM_INX_PSM_ERROR_NOT_REGISTERED, "BT_JSR82_RELEASE_PSM_INX PSM Error, not registered")
TRC_MSG(BT_JSR82_SESSIONAPENABLESERVICECFN_PS_TYPEx02X, "BT_JSR82_SessionApEnableServiceCfn Ps_type:%02x")
TRC_MSG(BT_JSR82_HANDLESESSIONAPTURNOFFSERVICE, "BT_JSR82_HandleSessionApTurnOffService")
TRC_MSG(BT_JSR82_ENABLE_SERVICE_HANDLESESSIONAPENABLESERVICEREGISTRATION_CMGR_HANDLER_STATUSx02X, "BT_JSR82_Enable_Service HandleSessionApEnableService():Registration CMGR handler status:%02x")
TRC_MSG(BT_JSR82_ENABLE_SERVICE_AVAILABLE_CHANNELx08X, "BT_JSR82_Enable_Service Available Channel:%08x")
TRC_MSG(BT_JSR82_SENDTORFCOMM_REMOVE_A_FREE_PKT_TO_SEND_DATA, "BT_JSR82_sendToRfComm(): remove a free pkt to send data")
TRC_MSG(BT_JSR82_GET_FREE_SRVCHNL_INX_GET_FREE_CHANNEL_xD, "BT_JSR82_GET_FREE_SRVCHNL_INX Get Free channel :%d")
TRC_MSG(BT_JSR82_HANDLEJSR82DEACTIVATE, "BT_JSR82_HandleJSR82Deactivate")
TRC_MSG(BT_JSR82_SENDTOL2CAP_REMOVE_A_FREE_PKT_TO_SEND_DATA, "BT_JSR82_sendToL2Cap(): remove a free pkt to send data")
TRC_MSG(BT_JSR82_RELEASE_SRVCHNL_INX_CURRENT_RFCOMM_CHANNEL_USAGE_TABLEx08X, "BT_JSR82_RELEASE_SRVCHNL_INX current rfcomm_channel_usage_table:%08x")
TRC_MSG(BT_JSR82_SESSIONAPENABLERESULTEVENT, "bt_jsr82_SessionApEnableResultEvent")
TRC_MSG(BT_JSR82_SESSIONAPDISCONNECTALLACLCFN, "BT_JSR82_SessionApDisconnectAllAclCfn")
TRC_MSG(BT_JSR82_CREDIT_xD_DEVCREDIT_xD, "BT_JSR82_credit %d, dev->credit %d")
TRC_MSG(BT_JSR82_L2CAP_CON_REQOPEN_CHANNEL_FAILED, "BT_JSR82_L2CAP_CON_REQ:open channel failed")
TRC_MSG(BT_JSR82_HANDLESETACLSECURITYREQTHIS_LINKS_AUTH_OR_ENCRYPT_ALREADY_ONGOING, "BT_JSR82_HandleSetACLSecurityReq():This link's auth or encrypt already ongoing")
TRC_MSG(BT_JSR82_L2CAP_CON_REQ_INIT_CON_IDx02X, "BT_JSR82_L2CAP_CON_REQ Init con_id:%02x")
TRC_MSG(BT_JSR82_GET_FREE_PSM_INX_GET_FREE_PSM_xD, "BT_JSR82_GET_FREE_PSM_INX Get Free PSM :%d")
TRC_MSG(BT_JSR82_SESSIONAPTURNONSERVICECFN, "BT_JSR82_SessionApTurnOnServiceCfn")
TRC_MSG(BT_JSR82_SESSIONAPCONNECTCFN_SIZEx02X, "BT_JSR82_SessionApConnectCfn size:%02x")
TRC_MSG(BT_JSR82_HANDLESETACLSECURITYREQ_RETURN_FROM_SEC_SETLINKENCRYPTION_ERRxD, "BT_JSR82_HandleSetACLSecurityReq(): return from SEC_SetLinkEncryption err=%d")
TRC_MSG(BT_JSR82_CON_RSP_FIND_JSR82_CHANNEL_x02X, "BT_JSR82_CON_RSP Find jsr82 channel :%02x")
TRC_MSG(BT_JSR82_HANDLESETACLSECURITYREQ_RETURN_FROM_SEC_AUTHENTICATELINK_ERRxD, "BT_JSR82_HandleSetACLSecurityReq(): return from SEC_AuthenticateLink err=%d")
TRC_MSG(BT_JSR82_GET_FREE_PSM_INX_CURRENT_L2CAP_PSM_USAGE_TABLEx08X, "BT_JSR82_GET_FREE_PSM_INX current l2cap_psm_usage_table:%08x")
TRC_MSG(BT_JSR82_ENABLE_SERVICE_L2CAP_PSMx08X, "BT_JSR82_Enable_Service L2CAP PSM:%08x")
TRC_MSG(BT_JSR82_SENDTOL2CAP_AFTER_JBT_SESSION_DEVTX_WITH_PS_L2CAP_GET_BYTESxD, "BT_JSR82_sendToL2Cap After jbt_session_DevTX() with PS_L2CAP: get bytes=%d")
TRC_MSG(BT_JSR82_GET_FREE_SRVCHNL_INX_CURRENT_RFCOMM_CHANNEL_USAGE_TABLEx08X, "BT_JSR82_GET_FREE_SRVCHNL_INX current rfcomm_channel_usage_table:%08x")
TRC_MSG(BT_JSR82_SET_HIGH_WATER_MARK_SESSION_AP_RECORD_PTRCOD_IDx02X_TRANSACTION_IDx04X, "BT_JSR82_SET_HIGH_WATER_MARK session_ap_record_ptr->cod_id:%02x, transaction_id:%04X")
TRC_MSG(BT_JSR82_SENDTORFCOMM_AFTER_JBT_SESSION_DEVTX_GET_BYTESxD, "BT_JSR82_sendToRfComm  After jbt_session_DevTX(): get bytes=%d")
TRC_MSG(BT_JSR82_SESSIONAPCLOSEINDx02X_x02X_x04X, "BT_JSR82_SessionApCloseInd:%02x, %02x, %04x")
TRC_MSG(BT_JSR82_DISABLE_SERVICE_FIND_JSR82_CHANNEL_x02X, "BT_JSR82_Disable_Service Find jsr82 channel :%02x")
TRC_MSG(BT_JSR82_CON_RSP_NO_EMPTY_CHANNEL, "BT_JSR82_CON_RSP no empty Channel")
TRC_MSG(BT_JSR82_HANDLESESSIONAPCONNECTREQ, "BT_JSR82_HandleSessionApConnectReq")
TRC_MSG(BT_JSR82_HANDLESESSIONAPSDPREQ, "BT_JSR82_HandleSessionSdpReq")
TRC_MSG(BT_JSR82_SESSIONAPCONNECTIND_SIZEx02X, "BT_JSR82_SessionApConnectInd  size:%02x")
TRC_MSG(BT_JSR82_RFCOMM_CON_REQ_EMPTY_CHANNEL_FIND, "BT_JSR82_RFCOMM_CON_REQ empty Channel find")
TRC_MSG(BT_JSR82_TRIGGER_PANIC_MECHANISM_BY_JVN_FOR_TESTING_ERROR_HANDLE, "BT_JSR82_Trigger Panic mechanism by JVN for testing error handle")
TRC_MSG(BT_JSR82_SESSIONAPCONNECTCFN, "BT_JSR82_SessionApConnectCfn")
TRC_MSG(BT_JSR82_SESSIONAPRXRSP, "bt_jsr82_SessionApRxRsp")
TRC_MSG(BT_JSR82_HANDLESETACLSECURITYREQ_REMDEV_INDEXxDENABLE_AUTHENTICATION_LINKxD_ENABLE_ENCRYPTxD, "BT_JSR82_HandleSetACLSecurityReq(): remDev_index=%d,enable_authentication_link=%d, enable_encrypt=%d")
TRC_MSG(BT_JSR82_HANDLESETACLSECURITYREQ_CURRENT_LINK_AUTHSTATExDENCRYPTSTATExD, "BT_JSR82_HandleSetACLSecurityReq(): current link authState=%d,encryptState=%d")
TRC_MSG(BT_JSR82_ADVANCECREDIT_CHNL_STATExD_NOT_IN_CONNECTED, "BT_JSR82_advanceCredit(): chnl_state=%d, not in CONNECTED")
TRC_MSG(BT_JSR82_RX_CNF_FIND_JSR82_CHANNEL_x02X, "BT_JSR82_RX_CNF Find jsr82 channel :%02x")
TRC_MSG(BT_JSR82_RFCALLBACKFUNC_CHAN_REMDEV_IS_NULL_EVENTxD_PARMS_REMDEVx08X, "In BTJSR82_RfCallbackFunc(): chan remDev is NULL, event=%d, parms remDev=%08X")
TRC_MSG(BT_JSR82_RFCOMM_CON_REQ_NO_EMPTY_CHANNEL, "BT_JSR82_RFCOMM_CON_REQ no empty Channel")
TRC_MSG(BT_JSR82_TX_REQ_NO_EMPTY_CHANNEL, "BT_JSR82_TX_REQ no empty Channel")
TRC_MSG(BT_JSR82_VM_TERMINATION_PENDING_CON_REQ_IS_ACL_LINK_SETUP_OKBUT_L2CAP_IS_REJECTED, "VM termination: pending con req is ACL link setup ok,but L2CAP is rejected")
TRC_MSG(BT_JSR82_RFCOMM_CON_REQ_OPEN_RFCOMM_CHNL_FAILED, "BT_JSR82_RFCOMM_CON_REQ: Open RFCOMM chnl failed")
TRC_MSG(BT_JSR82_L2CAP_CON_REQ_EMPTY_CHANNEL_FIND, "BT_JSR82_L2CAP_CON_REQ empty Channel find")
TRC_MSG(BT_JSR82_RELEASE_PSM_INX_RETURN_PSM_IDxD, "BT_JSR82_RELEASE_PSM_INX Return psm_id:%d")
TRC_MSG(BT_JSR82_HANDLESESSIONAPENABLESERVICEREGISTRATION_ON_SERV_CHNL__xD_AND_STATUSx02X, "BT_JSR82_HandleSessionApEnableService():Registration on serv_chnl = %d and status:%02x")
TRC_MSG(BT_JSR82_VM_TERMINATE_PENDING_CON_REQ_CONNECTED_THEN_DISC_THIS_LINK, "VM terminate: pending con req: connected, then disc this link")
TRC_MSG(BT_JSR82_SEARCHL2CAPCONTEXT, "bt_jsr82_SearchL2capContext")
TRC_MSG(BT_JSR82_VM_TERMINATION_PENDING_CON_REQ_IS_ACL_LINK_SETUP_OKBUT_RFCOMM_IS_REJECTED, "VM termination: pending con req is ACL link setup ok,but RFCOMM is rejected")
TRC_MSG(BT_JSR82_SESSIONAPTXCFN, "BT_JSR82_SessionApTxCfn")
TRC_MSG(BT_JSR82_TURN_OFF_SERVICE_EMPTY_CHANNEL_IDLE_WRONG_STATE, "BT_JSR82_Turn_Off_Service empty Channel idle, wrong state")
TRC_MSG(BT_JSR82_TX_REQ_FIND_JSR82_CHANNEL_x02X, "BT_JSR82_TX_REQ Find jsr82 channel :%02x")
TRC_MSG(BT_JSR82_HANDLESESSIONAPTURNONSERVICE, "BT_JSR82_HandleSessionApTurnOnService")
TRC_MSG(BT_JSR82_SESSIONAPRXINDEVENT, "bt_jsr82_SessionApRxIndEvent")
TRC_MSG(BT_JSR82_DISC_REQ_FIND_JSR82_CHANNEL_x02X, "BT_JSR82_DISC_REQ Find jsr82 channel :%02x")
TRC_MSG(BT_JSR82_DISABLE_SERVICE_DEREGISTER_CHANNEL_x02X, "BT_JSR82_Disable_Service Deregister channel :%02x")
TRC_MSG(BT_JSR82_RELEASE_PSM_INX_CURRENT_L2CAP_PSM_USAGE_TABLEx08X, "BT_JSR82_RELEASE_PSM_INX current l2cap_psm_usage_table:%08x")
TRC_MSG(BT_JSR82_SESSIONAPTXREADYIND, "BT_JSR82_SessionApTxReadyInd")
TRC_MSG(BT_JSR82_SESSIONAPCONNECTIND, "BT_JSR82_SessionApConnectInd")
TRC_MSG(BT_JSR82_L2CAP_CON_REQ_L2CAP_PSM_INDEXx02X, "BT_JSR82_L2CAP_CON_REQ L2CAP PSM Index;%02x")
TRC_MSG(BT_JSR82_GET_FREE_PSM_INX_CURRENT_MASKx08X, "BT_JSR82_GET_FREE_PSM_INX current mask:%08x")
TRC_MSG(BT_JSR82_SESSIONAPRXIND, "BT_JSR82_SessionApRxInd")
TRC_MSG(BT_JSR82_HANDLESETACLSECURITYREQTRY_TO_AUTHENTICATE_ACL_LINK, "BT_JSR82_HandleSetACLSecurityReq():Try to authenticate ACL Link")
TRC_MSG(BT_JSR82_ENABLE_SERVICE_PS_TYPEx02X, "BT_JSR82_Enable_Service ps_type:%02x")
TRC_MSG(BT_JSR82_RX_CNF_NO_EMPTY_CHANNEL, "BT_JSR82_RX_CNF no empty Channel")
TRC_MSG(BT_JSR82_SESSIONAPRXREADYIND, "BT_JSR82_SessionApRxReadyInd")
TRC_MSG(BT_JSR82_HIGHWATERxD_SPPOS_RXBYTESxD_RF_FRAMESIZExD, "BT_JSR82_highWater=%d, SPPOS_RxBytes=%d, RF_FrameSize=%d")
TRC_MSG(BT_JSR82_L2CAP_CON_REQ_NO_EMPTY_CHANNEL, "BT_JSR82_L2CAP_CON_REQ no empty Channel")
TRC_MSG(BT_JSR82_SESSIONAPTURNOFFSERVICECFN, "BT_JSR82_SessionApTurnOffServiceCfn")
TRC_MSG(BT_JSR82_HANDLESETACLSECURITYREQREMOTE_LINK_IS_NOT_EXISTED, "BT_JSR82_HandleSetACLSecurityReq():Remote link is not existed")
TRC_MSG(BT_JSR82_TURN_ON_SERVICE_EMPTY_CHANNEL_IDLE_WRONG_STATE, "BT_JSR82_Turn_On_Service empty Channel idle, wrong state")
TRC_MSG(BT_JSR82_RELEASE_SRVCHNL_INX_CHANNEL_ERROR_NOT_REGISTERED, "BT_JSR82_RELEASE_SRVCHNL_INX Channel Error, not registered")
TRC_MSG(BT_JSR82_SESSIONAPTXCFNEVENT, "bt_jsr82_SessionApTxCfnEvent")
TRC_MSG(BT_JSR82_SESSIONAPDISABLESERVICECFN, "BT_JSR82_SessionApDisableServiceCfn")
TRC_MSG(BT_JSR82_SESSIONAPENABLESERVICECFN, "BT_JSR82_SessionApEnableServiceCfn")
TRC_MSG(BT_JSR82_GET_FREE_SRVCHNL_INX_CURRENT_MASKx08X, "BT_JSR82_GET_FREE_SRVCHNL_INX current mask:%08x")
TRC_MSG(BT_JSR82_DISABLE_SERVICE_INXx02X_STATUSx02X_CON_IDx02X, "BT_JSR82_Disable_Service inx:%02x, status:%02x, con_id:%02x")
TRC_MSG(BT_JSR82_ENABLE_SERVICE_CON_IDx02X, "BT_JSR82_Enable_Service Con id:%02x")
TRC_MSG(BT_JSR82_DISABLE_SERVICE_L2CAP_CON_INDEX_xD_IS_NOT_IDLE_xD, "BT_JSR82_Disable_Service L2cap con index %d is not idle: %d")
TRC_MSG(BT_JSR82_DISC_REQ_NO_EMPTY_CHANNEL, "BT_JSR82_DISC_REQ no empty Channel")
TRC_MSG(BT_JSR82_ADVANCECREDITCALL_RF_ADVANCECREDIT, "BT_JSR82_advanceCredit():Call RF_AdvanceCredit()")
TRC_MSG(BT_JSR82_SORT_ATTIBS_ATTRIBUTE_SIZExD, "BT_JSR82_SORT_ATTIBS attribute size:%d")
TRC_MSG(BT_JSR82_SDPDBDEACTIVATE_FIND_INDEX_I_TO_UNREGISTERx02X, "BT_JSR82_SdpDbDeactivate Find index i to unregister:%02x")
TRC_MSG(BT_JSR82_VERIFY_RECORD_RECORD_LENGTHx04X, "BT_JSR82_Verify_Record Record length:%04x")
TRC_MSG(BT_JSR82_SORT_ATTIBS_AFTER_SORTING, "BT_JSR82_SORT_ATTIBS After sorting")
TRC_MSG(BT_JSR82_RETRIEVERECORDCNF_RECORD_SIZExDX, "BT_JSR82_RetrieveRecordCnf record size:%dx")
TRC_MSG(BT_JSR82_VERIFY_RECORD_THE_ELEMENT_TYPE_x02X, "BT_JSR82_Verify_Record The Element type: %02x")
TRC_MSG(BT_JSR82_VERIFY_RECORD_TYPEx02X_SIZE_INDEXx02X, "BT_JSR82_Verify_Record type:%02x size index:%02x")
TRC_MSG(BT_JSR82_VERIFY_RECORD_C_THE_ELEMENT_SIZE_x02X, "BT_JSR82_Verify_Record C The Element size: %02x")
TRC_MSG(BT_JSR82_SORT_ATTIBS_ATTRIBUTE_IDxD, "BT_JSR82_SORT_ATTIBS attribute id:%d")
TRC_MSG(BT_JSR82_VERIFY_DATA_ELEMENT_INVALID_PARAMETERS, "BT_JSR82_Verify_DATA_ELEMENT invalid parameters")
TRC_MSG(BT_JSR82_VERIFY_RECORD_B_THE_ELEMENT_SIZE_x02X, "BT_JSR82_Verify_Record B The Element size: %02x")
TRC_MSG(BT_JSR82_DEREG_RECORD_FIND_INDEX_I_TO_UNREGISTERx02X, "BT_JSR82_DeReg_Record Find index i to unregister:%02x")
TRC_MSG(BT_JSR82_VERIFY_DATA_ELEMENT_TYPEx02X_SIZE_INDEXx02X, "BT_JSR82_Verify_DATA_ELEMENT type:%02x size index:%02x")
TRC_MSG(BT_JSR82_VERIFY_RECORD_FINALLY_ATTRIBUTE_INDEXx02X, "BT_JSR82_Verify_Record finally Attribute index:%02x")
TRC_MSG(BT_JSR82_VERIFY_RECORD_DATA0x02X_DATA1x02X, "BT_JSR82_Verify_Record data[0]:%02x, data[1]:%02x")
TRC_MSG(BT_JSR82_VERIFY_DATA_ELEMENT_VERIFY_FAILED, "BT_JSR82_Verify_DATA_ELEMENT Verify failed")
TRC_MSG(BT_JSR82_SORT_ATTIBS_INDEXxD, "BT_JSR82_SORT_ATTIBS index:%d")
TRC_MSG(BT_JSR82_VERIFY_RECORD_ATTRIBUTE_VALUE_ELEMENT_HEADER_SIZE_x04X, "BT_JSR82_Verify_Record Attribute value Element header size: %04x")
TRC_MSG(BT_JSR82_GETAVAILABLERECORDHANDLER_RECORD_HANDLERx08X, "BT_JSR82_GetAvailableRecordHandler Record handler:%08x")
TRC_MSG(BT_JSR82_REG_RECORD_FIND_INDEX_I_AVAILABLEx02X, "BT_JSR82_Reg_Record Find index i available:%02x")
TRC_MSG(BT_JSR82_VERIFY_RECORD_ATTRIBUTE_INDEX_xD_TOO_LARGE, "BT_JSR82_Verify_Record attribute index :%d too large")
TRC_MSG(BT_JSR82_GETAVAILABLERECORDHANDLER_FIND_INDEX_I_AVAILABLEx02X, "BT_JSR82_GetAvailableRecordHandler Find index i available:%02x")
TRC_MSG(BT_JSR82_RETRIEVERECORDCNF_RESULTx02X, "BT_JSR82_RetrieveRecordCnf result:%02x")
TRC_MSG(BT_JSR82_VERIFY_RECORD_A_THE_ELEMENT_SIZE_x02X, "BT_JSR82_Verify_Record A The Element size: %02x")
TRC_MSG(BT_JSR82_VERIFY_DATA_ELEMENT_PEASE_DATA_ELEMENT_FAILED, "BT_JSR82_Verify_DATA_ELEMENT pease data element failed")
TRC_MSG(BT_JSR82_VERIFY_DATA_ELEMENT_X3_THE_ELEMENT_SIZE_x02X, "BT_JSR82_Verify_DATA_ELEMENT X3 The Element size: %02x")
TRC_MSG(BT_JSR82_REG_RECORD_REMOVE_STATUSxD, "BT_JSR82_Reg_Record Remove status:%d")
TRC_MSG(BT_JSR82_DEREG_RECORD_STATUSx02X, "BT_JSR82_DeReg_Record Status:%02x")
TRC_MSG(BT_JSR82_RETRIEVERECORDCNF_RAW_DATAx02Xx02X_x02Xx02X, "BT_JSR82_RetrieveRecordCnf raw data:%02x,%02x, %02x,%02x")
TRC_MSG(BT_JSR82_VERIFY_DATA_ELEMENT_X1_THE_ELEMENT_SIZE_x02X, "BT_JSR82_Verify_DATA_ELEMENT X1 The Element size: %02x")
TRC_MSG(BT_JSR82_REG_RECORD_SDP_ADDRECORD_STATUSx02X, "BT_JSR82_Reg_Record SDP_AddRecord Status:%02x")
TRC_MSG(BT_JSR82_VERIFY_RECORD_VERIFY_FAILED, "BT_JSR82_Verify_Record Verify failed")
TRC_MSG(BT_JSR82_REG_RECORD_THE_ATTRIBUTE_NO_ISx02X, "BT_JSR82_Reg_Record The attribute no is:%02x")
TRC_MSG(BT_JSR82_RETRIEVERECORDCNF_HANDLEx08X, "BT_JSR82_RetrieveRecordCnf handle:%08x")
TRC_MSG(BT_JSR82_REG_RECORD_UPDATE_THE_RECORD, "BT_JSR82_Reg_Record Update the record")
TRC_MSG(BT_JSR82_VERIFY_RECORD_ATTRIBUTE_VALUE_ELEMENT_SIZE_x04X, "BT_JSR82_Verify_Record Attribute value Element size: %04x")
TRC_MSG(BT_JSR82_VERIFY_DATA_ELEMENT_X2_THE_ELEMENT_SIZE_x02X, "BT_JSR82_Verify_DATA_ELEMENT X2 The Element size: %02x")
TRC_MSG(BT_JSR82_VERIFY_RECORD_E_THE_ELEMENT_SIZE_x02X, "BT_JSR82_Verify_Record E The Element size: %02x")
TRC_MSG(BT_JSR82_VERIFY_DATA_ELEMENT_INVALID_SIZE_DESCRIPTOR_VALUEx02X, "BT_JSR82_Verify_DATA_ELEMENT Invalid size descriptor value=%02X")
TRC_MSG(BT_JSR82_REG_RECORD_INDEXxD, "BT_JSR82_Reg_Record index:%d")
TRC_MSG(BT_JSR82_VERIFY_RECORD_ITS_DATAx02Xx02Xx02Xx02Xx02Xx02Xx02Xx02X, "BT_JSR82_Verify_Record its data:%02x,%02x,%02x,%02x,%02x,%02x,%02x,%02x,")
TRC_MSG(BT_JSR82_REG_RECORD_NO_AVAILABLE_SERVICE_RECORD, "BT_JSR82_Reg_Record No available service record")
TRC_MSG(BT_JSR82_VERIFY_DATA_ELEMENT_X5_THE_ELEMENT_SIZE_x02X, "BT_JSR82_Verify_DATA_ELEMENT X5 The Element size: %02x")
TRC_MSG(BT_JSR82_DEREG_RECORD_NO_REGISTERED_SERVICE_RECORD, "BT_JSR82_DeReg_Record No registered service record")
TRC_MSG(BT_JSR82_REG_RECORD_RECORD_PARSE_ERROR, "BT_JSR82_Reg_Record Record parse error")
TRC_MSG(BT_JSR82_REG_RECORD_ATTRIBUTE_IDxD, "BT_JSR82_Reg_Record attribute id:%d")
TRC_MSG(BT_JSR82_VERIFY_RECORD_INVALID_SIZE_DESCRIPTOR_VALUEx02X, "BT_JSR82_Verify_Record Invalid size descriptor value=%02X")
TRC_MSG(BT_JSR82_VERIFY_DATA_ELEMENT_DATA_ELEMENT_TOO_LARGE_NOT_CHECK, "BT_JSR82_Verify_DATA_ELEMENT data element too large, not check")
TRC_MSG(BT_JSR82_REG_RECORD_ATTRIBUTE_SIZExD, "BT_JSR82_Reg_Record attribute size:%d")
TRC_MSG(BT_JSR82_VERIFY_DATA_ELEMENT_ATTRIBUTE_VALUE_ELEMENT_SIZE_x02X, "BT_JSR82_Verify_DATA_ELEMENT Attribute value Element size: %02x")
TRC_MSG(BT_JSR82_VERIFY_RECORD_THE_ATTRIBUTE_ID_xD, "BT_JSR82_Verify_Record The attribute id :%d")
TRC_MSG(BT_JSR82_L2_DISCON_IND_INX_L2CID, "BT_JSR82_L2EVENT_DISCCON_IND: inx=%d,l2cap_cid=%d")
TRC_MSG(BT_JSR82_L2_DISCONNECTED_IND_SRV_CHNL_CLOSED_NEVER_OPENED, "JSR82_L2CAP_DISCONNECTED_Srv: Chnl is in CLOSED state and never Opened")
TRC_MSG(BT_JSR82_L2_DISCONNECTED_IND_NOT_NOTIFY_JBT_L2CON_STATE, "JSR82_DISCONNECTED of Srv: Not necessary to notify JBT,l2cap_con_state=%d")
TRC_MSG(BT_JSR82_SDAP_SEARCH_RAW_RETRY_WAIT_FOR_DISC_COMPLETE_TIMEOUT, "Sdap_Search_Raw_Retry_Wait_for_Disc_Complete_Timeout():Retry check again")
TRC_MSG(BT_JSR82_CHECK_CONTINUE_QUERY, "check_continute_query():End of sdp request, reset continute state to zero")
TRC_MSG(BT_JSR82_CHECK_CONSTATE_VALUE, "check_continute_query():contState value=%d")
TRC_MSG(BT_JSR82_CHECK_DUMP_CONSTATE_DATA_INX, "check_continute_query():inx=%d,contState data=%d")
TRC_MSG(BT_JSR82_TRY_CONTINUE_LEN_CONTSTATE_PTR, "JSR82 try continue with len=%d, contState_ptr=%08X")
TRC_MSG(BT_JSR82_TRY_CONTINUE_SDP_TO_REMDEV, "JSR82 Try to continue do sdp to remDev=%08X")
TRC_MSG(BT_JSR82_CMGR_CREATEDATALINK_STATUS, "JSR82 CMGR_CreateDataLink case=%d, with return status=%d")
TRC_MSG(BT_JSR82_HANDLE_AUTH_CNF_ERRCODE, "BT_JSR82_HandleAuthCnf_errCode=%d")
TRC_MSG(BT_JSR82_HANDLE_AUTH_CNF_DEL_DEV_RECORD_STATUS, "BT_JSR82_HandleAuthCnf:Delete Device Record, status=%d")
TRC_MSG(BT_JSR82_RFCOMM_CLOSED_DUE_TO_ACCESS_DENIED_DEL_DEV_RECORD_STATUS, "BT_JSR82_RFCallbackFunc: Client con req Access Denied,delete record status=%d")
TRC_MSG(BT_JSR82_L2CAP_DEREGISTER_PSM_STATUS, "BT_JSR82_L2Cap_DeregisterPSM_status=%d")
TRC_MSG(BT_JSR82_CHECK_DISC_ACL_L2CAP_SRV_INX_STATE, "BT_JSR82_VM_TERMINATE_DISC_ACL_BUT_L2CAP_SRV: inx=%d,chnl_state=%d")
TRC_MSG(BT_JSR82_CHECK_DSIC_ACL_VM_PEND_CON_NUM, "BT_JSR82_VM_TERMINATE_Pend_con_num=%d")
TRC_MSG(BT_JSR82_L2CAP_DEREGISTER_PSM_CHNL_STATE, "BT_JSR82_L2Cap_DeregisterPSM_Chnl with inx=%d,State=%d")
TRC_MSG(BT_JSR82_FORCE_DEREGISTER_PSM_INX, "BT_JSR82_Force_Deregister_PSM_inx=%d")
TRC_MSG(BT_JSR82_L2CAP_DUMMY_CALLBACK_CID_EVENT_STATUS, "BT_JSR82_Dummy_Callback_cid=%d,event=%d,status=%d")
TRC_MSG(BT_JSR82_CON_REQ_TIMEOUT_HDLR, "BT_JSR82_ConReqTimeoutHdlr_power_staus=%d")
TRC_MSG(BT_JSR82_SDP_REQ_TIMEOUT_HDLR, "BT_JSR82_SdpReqTimeoutHdlr_power_staus=%d")
TRC_MSG(BT_JSR82_CON_REQ_PREVIOUS_ONGOING, "BT_JSR82_One_Previous_ConReq_Ongoing")
TRC_MSG(BT_JSR82_SDP_REQ_PREVIOUS_ONGOING, "BT_JSR82_One_Previous_SdpReq_Ongoing")
TRC_MSG(BT_JSR82_L2CAP_DISCONNECTED_DUE_TO_SECURITY_BLOCK_DEL_DEV_RECORD_STATUS, "BT_JSR82_L2CapCallbackFunc:Disconnected due to Security Block then delete dev record,status=%d")
TRC_MSG(JSR82_SESSION_CONNECT_REQUEST, "JSR82 session connect request")
TRC_MSG(JSR82_FIND_L2CAP_IDBT_DEBUGx04X, "jsr82 find l2cap id:%04x")
TRC_MSG(BT_JSR82_SESSIONAPCLOSEIND, "bt_jsr82_SessionApCloseInd")
TRC_MSG(BT_JSR82_CMGRCLIENTCALLBACK, "bt_jsr82_CmgrClientCallback")
TRC_MSG(MSG_ID_BT_JSR82_CONNECT_CFN_TRC, "MSG_ID_BT_JSR82_CONNECT_CFN")
TRC_MSG(MSG_ID_BT_JSR82_ENABLE_SERVICE_CNF_TRC, "MSG_ID_BT_JSR82_ENABLE_SERVICE_CNF")
TRC_MSG(FUNC_JSR82_RING_BUFFER_SET_READY_TO_READ_AS_FALSE, "JSR82 RingBuffer: Set readyToRead Flas as FLASE")
TRC_MSG(FUNC_JSR82_RING_BUFFER_ALLOCATE_READRINGBUF_FAILED, "JSR82 RingBuffer: allocate for ReadRingBuf failed, size=%d")
TRC_MSG(FUNC_JSR82_RING_BUFFER_ALLOCATE_WRITERINGBUF_FAILED, "JSR82 RingBuffer: allocate for WriteRingBuf failed, size=%d")
TRC_MSG(FUNC_JSR82_RING_BUFFER_READ_01, "JSR82 RingBuffer Read Data func: case1 Set readyToRead to TRUE and ReadMore=%d")
TRC_MSG(FUNC_JSR82_RING_BUFFER_READ_02, "JSR82 RingBuffer Read Data func: case2 Set readyToRead to FALSE")
TRC_MSG(BT_JSR82_DEVRX_DATA_LOST_DUE_TO_RING_BUFFER_FULL, "BT JSR82 jsr82_session_DevRX(): %d bytes data lost due to ring buffer full!")
TRC_MSG(BT_JSR82_PUTBYTES_INVALID_INDEX, "BT JSR82 jsr82_session_PutBytes(): Input index (%d) is invalid. status: IDLE")
TRC_MSG(BT_JSR82_PUTBYTES_INVALID_STATE, "BT JSR82 jsr82_session_PutBytes(): This connection (%d) is NOT in OPEN state")
TRC_MSG(BT_JSR82_DATA_AVAILABLE_IND_INVALID_INDEX, "BT JSR82 jsr82_session_SendDataAvailableInd():  Input index (%d) is invalid. status: IDLE")
TRC_MSG(BT_JSR82_DATA_AVAILABLE_IND_INVALID_STATE, "BT JSR82 jsr82_session_SendDataAvailableInd():  This connection (%d) is NOT in OPEN state")
TRC_MSG(BT_JSR82_DATA_AVAILABLE_IND_WAIT_IND_RSP, "BT JSR82 jsr82_session_SendDataAvailableInd():  One IND has been sent and is wait for IND_RSP (%d)")
TRC_MSG(BT_JSR82_DATA_AVAILABLE_IND_RSP_INVALID_INDEX, "BT JSR82 jsr82_session_DataAvailableIndRsp():  Input index (%d) is invalid. status: IDLE")
TRC_MSG(BT_JSR82_DATA_AVAILABLE_IND_RSP_INVALID_STATE, "BT JSR82 jsr82_session_DataAvailableIndRsp():  This connection (%d) is NOT in OPEN state")
TRC_MSG(BT_JSR82_L2CAPCALL_INFO_NO_MATCHED_CONTEXT, "JSR82 L2CAP Callback: NO matched index in context. l2ChnlId=%d, event=%d")
TRC_MSG(BT_JSR82_L2CAP_CALLBACK_L2EVENT_DISCONNECTED_DUE_TO_REJECT, "BT JSR82 L2CAP callback: L2EVENT_DISCONNECTED is back due to the CONNECT_IND has been rejected")
/* JSR82 TRACE END */

/* JBT TRACE START*/
TRC_MSG(FUNC_JBT_INIT, "JBT Initialize")
TRC_MSG(FUNC_JBT_RX_MSG, "JBT Rx Msg=%02x")
TRC_MSG(FUNC_JBT_RESULT, "JBT Rx Msg=%02x")
TRC_MSG(FUNC_JBT_OPCODE, "JBT UT TEST Opcode =%02x")
TRC_MSG(FUNC_JBT_TRANSACTION_ID, "JBT UT TEST Transaction Id =%02x")
TRC_MSG(FUNC_JBT_SHOW_8BYTES, "JBT Show result =%08x")
TRC_MSG(FUNC_JBT_SHOW_COD, "JBT Show class of device =%08x")
TRC_MSG(FUNC_JBT_SHOW_NAME, "JBT UT TEST Device name =%02x (%c)")
TRC_MSG(FUNC_JBT_ADDR, "JBT Rx Msg=%02x,%02x,%02x,%02x,%02x,%02x")
TRC_MSG(FUNC_JBT_UT_INQUIRY_COMPLETED, "JBT UT test inquiry completed")
TRC_MSG(FUNC_JBT_UT_INQUIRY_CANCEL_COMPLETED, "JBT UT test inquiry cancel completed")
TRC_MSG(FUNC_JBT_DISCOVERY_STATE, "JBT Device Discovery State=%02x")
TRC_MSG(FUNC_JBT_GET_ACL_INFO, "JBT Get ACL info, Master: %02x, Authenticated:%02x, Encrypted:%02x")
TRC_MSG(FUNC_JBT_SDPDB_GET_RECORD_HDL, "JBT Get Record Handler result:%02x,handler:%08x")
TRC_MSG(FUNC_JBT_SDPDB_REGISTER_RECORD_RESULT, "JBT Register Record result:%02x,handler:%08x")
TRC_MSG(FUNC_JBT_SDPDB_DEREGISTER_RECORD_RESULT, "JBT DeRegister Record result:%02x,handler:%08x")
TRC_MSG(FUNC_JBT_COMMAND_ENQUEUE, "JBT Command input Queue:%02x, trans_id :%08x")
TRC_MSG(FUNC_JBT_COMMAND_QUEUE_INFO, "JBT Command Queue start:%02x, end:%02x, no:%02x, running:%02x")
TRC_MSG(FUNC_JBT_COMMAND_DEQUEUE, "JBT Command output Queue:%02x, trans_id :%08x")
TRC_MSG(FUNC_JBT_CMD_INSERT_QUEUE, "JBT jbt_cmd_insert_queue:%02x")
TRC_MSG(FUNC_JBT_CMD_KICK_OFF, "JBT jbt_cmd_kick_check_list:%02x")
TRC_MSG(FUNC_JBT_CMD_ONE, "JBT New Command%02x")
TRC_MSG(FUNC_JBT_SESSION_REGISTRATION_RESULT, "JBT Session Registration result:%02x,trans:%08x, channel:%04x, con_id:%02x")
TRC_MSG(FUNC_JBT_SESSION_TURNON_RESULT, "JBT Session turnon result:%02x,trans:%08x, con_id:%02x")
TRC_MSG(FUNC_JBT_SPP_GET_DATA, "JBT_SPP_GET_DATA")
TRC_MSG(FUNC_JBT_SPP_SEND_DATA, "JBT_SPP_SEND_DATA")
TRC_MSG(FUNC_JBT_CAN_NOT_GET_ONE_FREE_ENTRY, "JBT can not allocate a free entry")
TRC_MSG(FUNC_JBT_CAN_NOT_FIND_EXISTING_ENTRY, "JBT can not find an existing entry with type=%d and value=%d")
TRC_MSG(FUNC_JBT_SET_READY_TO_READ_AS_FALSE, "JBT Set readyToRead Flas as FLASE")
TRC_MSG(FUNC_JBT_READ, "JBT Read Data func: DataRead=%d,Length=%d")
TRC_MSG(FUNC_JBT_READ_01, "JBT Read Data func: case1 Set readyToRead to TRUE and ReadMore=%d")
TRC_MSG(FUNC_JBT_READ_02, "JBT Read Data func: case2 Set readyToRead to FALSE")
TRC_MSG(FUNC_JBT_ALLOCATE_READRINGBUF_FAILED, "JBT allocate for ReadRingBuf failed, size=%d")
TRC_MSG(FUNC_JBT_ALLOCATE_WRITERINGBUF_FAILED, "JBT allocate for WriteRingBuf failed, size=%d")
TRC_MSG(FUNC_JBT_SESSION_RX_READY_IND, "JBT UT: Rx Ready Ind with con_id=%d, len=%d")
TRC_MSG(FUNC_JBT_SESSION_TX_READY_IND, "JBT UT: Tx Ready Ind with con_id=%d")
TRC_MSG(FUNC_JBT_SESSION_CON_REQ_RESULT, "JBT UT: Connnect Request Result with result=%02X, transaction_id=%08X, con_id=%02X")
TRC_MSG(FUNC_JBT_SESSION_CON_IND, "JBT UT: Connect Ind with result=%02X, transaction_id=%08X, con_id=%02X")
TRC_MSG(FUNC_JBT_SESSION_RX_BYTES, "JBT UT: Simulate App to read data this time: con_id=%02X,bytes=%02X")
TRC_MSG(FUNC_JBT_SESSION_RX_END, "JBT UT: Read all data stored in ReadRingBuf due to this time RX_READY_IND")
TRC_MSG(FUNC_JBT_SESSION_ENABLE_TX_TEST_ON_SERVER, "JBT UT: Enable Tx Testing on Server when recv connect_ind with con_id=%02X")
TRC_MSG(FUNC_JBT_SESSION_TX_BYTES, "JBT UT: Simulate App to write data this time: con_id=%02X, bytes=%02X")
TRC_MSG(FUNC_JBT_SESSION_TX_END, "JBT UT: End of TX Testing due to WriteRingBuf full when recv this time ind msg")
TRC_MSG(FUNC_JBT_DISC_IND, "JBT UT: Recv DISC_IND with con_id=%02X")
TRC_MSG(FUNC_JBT_MEM_ALLOCATED, "JBT Memory buffer of JBT after allocated:%d")
TRC_MSG(FUNC_JBT_MEM_RELEASED, "JBT Memory buffer of JBT after released:%d")
TRC_MSG(JBT_JBT_SET_ACL_SECURITY_CMD_TRANSACTION_IDx08X, "JBT jbt_set_acl_security_cmd, transaction_id:%08x")
TRC_MSG(JBT_JBT_CMD_CHECK_DEVICE_IN_QUEUE_NODE_NOT_0, "JBT jbt_cmd_check_device_in_queue node not 0")
TRC_MSG(JBT_JBT_FREE_ALL, "JBT jbt_free_all")
TRC_MSG(JBT_JBT_HANDLE_SESSION_ENABLED_RESULT_PARMSPS_TYPEx02X, "JBT jbt_handle_session_enabled_result parms.ps_type:%02x")
TRC_MSG(JBT_MSG_ID_BT_BM_DISCOVERY_RESULT_IND, "JBT MSG_ID_BT_BM_DISCOVERY_RESULT_IND")
TRC_MSG(JBT_JBT_SET_LOCAL_DISCOVERY_CMD_TRANSACTION_IDx08X, "JBT jbt_set_local_discovery_cmd, transaction_id:%08x")
TRC_MSG(JBT_JBT_RESTORE_MMI_CMD, "JBT jbt_restore_mmi_cmd")
TRC_MSG(JBT_MSGRESULTx02X, "JBT msg->result:%02x")
TRC_MSG(JBT_PARMSCODx08X, "JBT parms.cod:%08x")
TRC_MSG(JBT_MSGCODx08X, "JBT msg->cod:%08x")
TRC_MSG(JBT_JBT_POWER_ONOPERATION_STATEx02X, "JBT jbt_power_on.operation_state:%02x")
TRC_MSG(JBT_MSG_ID_MMI_BT_BCC_RESTORE_CNF, "JBT MSG_ID_MMI_BT_BCC_RESTORE_CNF")
TRC_MSG(JBT_BT_HANDLE_SESSION_DISCONNECT_IND_PARMSL2CAP_IDx04X, "JBT bt_handle_session_disconnect_ind parms.l2cap_id:%04x")
TRC_MSG(JBT_JBT_GET_REMOTE_NAME_CMD_ADDRx02Xx02Xx02Xx02Xx02Xx02X, "JBT jbt_get_remote_name_cmd, addr:%02x,%02x,%02x,%02x,%02x,%02x")
TRC_MSG(JBT_IN_JBT_SPP_READ_DATAREADxDLENGTHxD, "JBT In jbt_spp_read(): DataRead=%d,Length=%d")
TRC_MSG(JBT_JBT_HANDLE_SESSION_DEREGISTRATION_RESULT_PARMSTRANSACTION_IDx08X, "JBT jbt_handle_session_deregistration_result parms.transaction_id:%08x")
TRC_MSG(JBT_MSG_ID_BT_APP_SDPDB_GET_HANDLE_CNF, "JBT MSG_ID_BT_APP_SDPDB_GET_HANDLE_CNF")
TRC_MSG(JBT_BT_HANDLE_SESSION_CONNECT_IND, "JBT bt_handle_session_connect_ind")
TRC_MSG(JBT_JBT_CMD_QUEUE_CONTEXTCMD_RUN_NOxD, "JBT jbt_cmd_queue_context.cmd_run_no:%d")
TRC_MSG(JBT_MSG_ID_BT_APP_SDPDB_DEREGISTER_CNF, "JBT MSG_ID_BT_APP_SDPDB_DEREGISTER_CNF")
TRC_MSG(JBT_JBT_HANDLE_SET_LOCAL_COD_RESULT, "JBT jbt_handle_set_local_cod_result")
TRC_MSG(JBT_BT_HANDLE_SESSION_DISCONNECT_IND_FREE_WRITERINGBUF, "JBT bt_handle_session_disconnect_ind free WriteRingBuf")
TRC_MSG(JBT_JBT_ALLOCATE_ONE_AVAILABLE_ENTRY, "JBT jbt_allocate_one_available_entry")
TRC_MSG(JBT_MSG_ID_BT_BM_READ_LOCAL_COD_CNF, "JBT MSG_ID_BT_BM_READ_LOCAL_COD_CNF")
TRC_MSG(JBT_JBT_CMD_INSERT_QUEUE_RETURN_STATUS_xD, "JBT jbt_cmd_insert_queue return status :%d")
TRC_MSG(JBT_OLD_TRANSACTION_IDx08X_NEW_TRANSACTION_IDx08X, "JBT old transaction_id:%08x, new transaction_id:%08x")
TRC_MSG(JBT_JBT_SDPDB_CONTEXTJBT_DEREGISTER_RECORDOPERATION_STATEx08X, "JBT jbt_sdpdb_context.jbt_deregister_record.operation_state:%08x")
TRC_MSG(JBT_JBT_REGISTER_RECORD_CMD_RECORD_TYPEx08X, "JBT jbt_register_record_cmd record type:%08x")
TRC_MSG(JBT_JBT_HANDLE_RESTORE_MMI_REQ_RESULT, "JBT jbt_handle_restore_mmi_req_result")
TRC_MSG(JBT_JBT_GAP_CONTEXTJBT_READ_ADDRTRANSACTION_IDx08X, "JBT jbt_gap_context.jbt_read_addr.transaction_id:%08x")
TRC_MSG(JBT_JBT_CMD_LIST_INIT, "JBT jbt_cmd_list_init")
TRC_MSG(JBT_JBT_HANDLE_SESSION_DEREGISTRATION_RESULT_MSGPS_TYPEx02X, "JBT jbt_handle_session_deregistration_result msg->ps_type:%02x")
TRC_MSG(JBT_JBT_GET_LOCAL_ADDR_CMD_TRANSACTION_IDx08X, "JBT jbt_get_local_addr_cmd, transaction_id:%08x")
TRC_MSG(JBT_JBT_RESTORE_BTSTACK_MEMORY, "JBT jbt_restore_btstack_memory")
TRC_MSG(JBT_JBT_HANDLE_SESSION_TURNON_RESULT_MSGPS_TYPEx02X, "JBT jbt_handle_session_turnon_result msg->ps_type:%02x")
TRC_MSG(JBT_JBT_RESTORE_PROCEDURE_RESULTxD, "JBT jbt_restore_procedure, result:%d")
TRC_MSG(JBT_BT_HANDLE_SESSION_CONNECT_IND_PARMSCON_IDx02X, "JBT bt_handle_session_connect_ind parms.con_id:%02x")
TRC_MSG(JBT_JBT_HANDLE_SDAP_COMPLETED_RESULT_PARMSRESULTx02X, "JBT jbt_handle_sdap_completed_result parms.result:%02x")
TRC_MSG(JBT_MSG_ID_BT_BM_SEARCH_RAW_CNF, "JBT MSG_ID_BT_BM_SEARCH_RAW_CNF")
TRC_MSG(JBT_JBT_HANDLE_POWER_OFF_REQ_RESULT_OPCODEx02X, "JBT jbt_handle_power_off_req_result opcode:%02x")
TRC_MSG(JBT_JBT_FREE_INDX_DSIZExD, "JBT jbt release block indx :%d,size:%d")
TRC_MSG(JBT_JBT_HANDLE_REGISTER_RECORD_RESULT, "JBT jbt_handle_register_record_result")
TRC_MSG(JBT_JBT_HANDLE_SESSION_TURNON_RESULT_PARMSTRANSACTION_IDx08X, "JBT jbt_handle_session_turnon_result parms.transaction_id:%08x")
TRC_MSG(JBT_JBT_GET_ACL_INFO_CMD_TRANSACTION_IDx08X, "JBT jbt_get_acl_info_cmd, transaction_id:%08x")
TRC_MSG(JBT_JBT_CMD_CHECK_DEVICE_IN_QUEUE_NODEPARMS_08X, "JBT jbt_cmd_check_device_in_queue node->parms :08x")
TRC_MSG(JBT_INFOTRANSACTION_IDx08X, "JBT info->transaction_id:%08x")
TRC_MSG(JBT_JBT_CMD_CHECK_DEVICE_IN_QUEUE_JBT_CMDCODE_DEVICE_DISCOVERY_CMD, "JBT jbt_cmd_check_device_in_queue JBT_CMDCODE_DEVICE_DISCOVERY_CMD")
TRC_MSG(JBT_BT_HANDLE_SESSION_CONNECT_REQ_CNF_PARMSPS_TYPEx02X, "JBT bt_handle_session_connect_req_cnf parms.ps_type:%02x")
TRC_MSG(JBT_JBT_GET_ACL_INFO_CMD_BODY, "JBT jbt_get_acl_info_cmd_body")
TRC_MSG(JBT_L2CAP_IDx04X, "JBT l2cap_id:%04x")
TRC_MSG(JBT_JBT_DEVICE_DISCOVERYx08X, "JBT jbt_device_discovery:%08x")
TRC_MSG(JBT_JBT_GET_ACL_INFO_CMD_ADDRx02Xx02Xx02Xx02Xx02Xx02X, "JBT jbt_get_acl_info_cmd, addr:%02x,%02x,%02x,%02x,%02x,%02x")
TRC_MSG(JBT_MSGBDADDRx02Xx02Xx02Xx02Xx02Xx02X, "JBT msg->bdaddr:%02x,%02x,%02x,%02x,%02x,%02x")
TRC_MSG(JBT_JBT_CMD_QUEUE_NONCONCURRENT_PROCESSING_END, "JBT jbt_cmd_queue_nonconcurrent_processing end")
TRC_MSG(JBT_UUIDx04X, "JBT  uuid:%04x")
TRC_MSG(JBT_SDPDB_INDEXxD_IS_FREE, "JBT  Sdpdb index:%d is free")
TRC_MSG(JBT_JBT_DEVICE_DISCOVERY_CMD_IAC_CODEx08X, "JBT jbt_device_discovery_cmd, iac_code:%08x")
TRC_MSG(JBT_JBT_GET_REMOTE_NAME_CMD_TRANSACTION_IDx08X, "JBT jbt_get_remote_name_cmd, transaction_id:%08x")
TRC_MSG(JBT_JBT_HANDLE_SET_DISCOVERABLE_MODE_RESULT, "JBT jbt_handle_set_discoverable_mode_result")
TRC_MSG(JBT_JBT_HANDLE_SESSION_ENABLED_RESULT_PARMSTRANSACTION_IDx08X, "JBT jbt_handle_session_enabled_result parms.transaction_id:%08x")
TRC_MSG(JBT_BT_HANDLE_SESSION_CONNECT_IND_PARMSMTUx04X, "JBT bt_handle_session_connect_ind parms.mtu:%04x")
TRC_MSG(JBT_JBT_SESSION_DISCONNECT_REQ, "JBT jbt_session_disconnect_req")
TRC_MSG(JBT_JBT_CMD_CHECK_DEVICE_IN_QUEUE_JBT_CMD_LIST_INSERT_TAIL, "JBT jbt_cmd_check_device_in_queue jbt_cmd_list_insert_tail")
TRC_MSG(JBT_GAP_INIT_RESET_POWER_STATE_TO_OFF, "JBT  GAP Init, reset power state to OFF")
TRC_MSG(JBT_JBT_DEREGISTER_RECORD_CMD_RECORD_TRANSACTION_IDx08X, "JBT jbt_deregister_record_cmd record transaction_id:%08x")
TRC_MSG(JBT_JBT_HANDLE_SESSION_TURNON_RESULT_PARMSCON_IDx02X, "JBT jbt_handle_session_turnon_result parms.con_id:%02x")
TRC_MSG(JBT_JBT_ALLOCATE_ONE_AVAILABLE_ENTRY_FIND_NONE, "JBT jbt_allocate_one_available_entry find none")
TRC_MSG(JBT_DB_INDEXx02X, "JBT db_index:%02x")
TRC_MSG(JBT_MSG_ID_BT_JSR82_CONNECT_IND, "JBT MSG_ID_BT_JSR82_CONNECT_IND")
TRC_MSG(JBT_SDPDB_INIT, "JBT Sdpdb init")
TRC_MSG(JBT_JBT_GENERAL_NON_POWERON_REJECT_RETURN_STATUSxD, "JBT jbt_general_non_poweron_reject, return status:%d")
TRC_MSG(JBT_JBT_GET_LOCAL_COD_CMD_TRANSACTION_IDx08X, "JBT jbt_get_local_cod_cmd, transaction_id:%08x")
TRC_MSG(JBT_JBT_CMD_LIST_REMOVE_HEAD, "JBT jbt_cmd_list_remove_head")
TRC_MSG(JBT_MSGLENx02X, "JBT msg->len:%02x")
TRC_MSG(JBT_JBT_HANDLE_SDAP_COMPLETED_RESULT, "JBT jbt_handle_sdap_completed_result")
TRC_MSG(JBT_JBT_MALLOC_INDEXxD_SIZExD, "JBT jbt request block index:%d, size:%d")
TRC_MSG(JBT_JBT_CMD_CHECK_AND_REMOVE_IN_QUEUE_OPCODEx02X, "JBT jbt_cmd_check_and_remove_in_queue opcode:%02x")
TRC_MSG(JBT_JBT_HANDLE_SESSION_ENABLED_RESULT_MSGPS_TYPEx02X, "JBT jbt_handle_session_enabled_result msg->ps_type:%02x")
TRC_MSG(JBT_MSG_ID_BT_JSR82_CONNECT_CNF, "JBT MSG_ID_BT_JSR82_CONNECT_CNF")
TRC_MSG(JBT_JBT_CMD_HANDLE_RESTORE_INDEXx02X, "JBT jbt_cmd_handle_restore index:%02x")
TRC_MSG(JBT_JBT_HANDLE_GET_RECORD_HANDLE_RESULT_x02X, "JBT jbt_handle_get_record_handle_result :%02x")
TRC_MSG(JBT_MTUx04X, "JBT mtu:%04x")
TRC_MSG(JBT_L2CAP_INIT, "JBT l2cap init")
TRC_MSG(JBT_SECURITYx02X, "JBT security:%02x")
TRC_MSG(JBT_JBT_ALLOCATE_ONE_AVAILABLE_ENTRY_FIND_ONE, "JBT jbt_allocate_one_available_entry find one")
TRC_MSG(JBT_JBT_SESSION_SERVICE_DEREGISTRATION, "JBT jbt_session_service_deregistration")
TRC_MSG(JBT_MSG_ID_BT_JSR82_RESTROE_ACL_CNF, "JBT MSG_ID_BT_JSR82_RESTROE_ACL_CNF")
TRC_MSG(JBT_BT_HANDLE_SESSION_CONNECT_IND_PARMSTRANSACTION_IDx08X, "JBT bt_handle_session_connect_ind parms.transaction_id:%08x")
TRC_MSG(JBT_JBT_SDPDB_CONTEXTJBT_REGISTER_RECORDOPERATION_STATE_x02X, "JBT jbt_sdpdb_context.jbt_register_record.operation_state :%02x")
TRC_MSG(JBT_JBT_HANDLE_SESSION_DEREGISTRATION_RESULT, "JBT jbt_handle_session_deregistration_result")
TRC_MSG(JBT_JBT_CMD_KICK_CHECK_LIST, "JBT jbt_cmd_kick_check_list")
TRC_MSG(JBT_JBT_HANDLE_DEVICE_DISCOVERY_ENTRY_RESULT, "JBT jbt_handle_device_discovery_entry_result")
TRC_MSG(JBT_JBT_GET_LOCAL_COD_CMD_BODY, "JBT jbt_get_local_cod_cmd_body")
TRC_MSG(JBT_JBT_SESSION_SERVICE_REGISTRATION, "JBT jbt_session_service_registration")
TRC_MSG(JBT_JBT_CMD_CHECK_AND_REMOVE_IN_QUEUE_JBT_CMD_LIST_RESET, "JBT jbt_cmd_check_and_remove_in_queue jbt_cmd_list_reset")
TRC_MSG(JBT_JBT_HANDLE_SESSION_TURNON_RESULT_MSGRESULTx02X, "JBT jbt_handle_session_turnon_result msg->result:%02x")
TRC_MSG(JBT_JSR82_HANDLE_MESSAGE_COMPLETED, "JBT JSR82 Handle message completed")
TRC_MSG(JBT_BT_HANDLE_SESSION_DISCONNECT_IND_PARMSCON_IDx02X, "JBT bt_handle_session_disconnect_ind parms.con_id:%02x")
TRC_MSG(JBT_INSERT_NODE_TO_TARGETLIST_TAIL, "JBT insert_node_to_targetList_tail")
TRC_MSG(JBT_TYPEx02X, "JBT type:%02x")
TRC_MSG(JBT_MSG_ID_BT_JSR82_TX_READY_IND, "JBT MSG_ID_BT_JSR82_TX_READY_IND")
TRC_MSG(JBT_BT_HANDLE_SESSION_DISCONNECT_IND_FREE_CHANNEL_BUFFER, "JBT bt_handle_session_disconnect_ind free channel_buffer")
TRC_MSG(JBT_JBT_SDPDB_CONTEXTJBT_GET_RECORD_HANDLEOPERATION_STATEx02X, "JBT jbt_sdpdb_context.jbt_get_record_handle.operation_state:%02x")
TRC_MSG(JBT_JBT_CMD_INSERT_QUEUE_TYPExD, "JBT jbt_cmd_insert_queue type:%d")
TRC_MSG(JBT_JBT_GAP_CONTEXTJBT_GET_LOCAL_DISCOVERABLEOPERATION_STATEx02X, "JBT jbt_gap_context.jbt_get_local_discoverable.operation_state:%02x")
TRC_MSG(JBT_JBT_HANDLE_POWER_ON_REQ_RESULT, "JBT jbt_handle_power_on_req_result")
TRC_MSG(JBT_MSG_ID_BT_JSR82_DISCONNECT_IND, "JBT MSG_ID_BT_JSR82_DISCONNECT_IND")
TRC_MSG(JBT_IN_JBT_SPP_DEVRX_SET_READYTOREAD_FALSE, "JBT In jbt_spp_DevRx(): Set readyToRead FALSE")
TRC_MSG(JBT_JBT_HANDLE_SESSION_TURNOFF_RESULT_PARMSTRANSACTION_IDx08X, "JBT jbt_handle_session_turnoff_result parms.transaction_id:%08x")
TRC_MSG(JBT_BT_HANDLE_SESSION_CONNECT_REQ_CNF_PARMSL2CAP_IDx04X, "JBT bt_handle_session_connect_req_cnf parms.l2cap_id:%04x")
TRC_MSG(JBT_BT_HANDLE_SESSION_CONNECT_REQ_CNF_PARMSCON_IDx02X, "JBT bt_handle_session_connect_req_cnf parms.con_id:%02x")
TRC_MSG(JBT_JBT_HANDLE_DEVICE_DISCOVERY_COMPLETED_RESULT, "JBT jbt_handle_device_discovery_completed_result")
TRC_MSG(JBT_JBT_SDPDB_CONTEXTSDP_RECORDDB_INDEXUSED, "JBT jbt_sdpdb_context.sdp_record[db_index].used")
TRC_MSG(JBT_MSG_ID_BT_APP_SDPDB_REGISTER_CNF, "JBT MSG_ID_BT_APP_SDPDB_REGISTER_CNF")
TRC_MSG(JBT_MSG_ID_BT_BM_READ_REMOTE_NAME_CNF, "JBT MSG_ID_BT_BM_READ_REMOTE_NAME_CNF")
TRC_MSG(JBT_JBT_RESTORE_BTSTACK_COD, "JBT jbt_restore_btstack_cod")
TRC_MSG(JBT_JBT_HANDLE_DEREGISTER_RECORD_RESULTx02X, "JBT jbt_handle_deregister_record_result:%02x")
TRC_MSG(JBT_JBT_HANDLE_REGISTER_RECORD_RESULT_x02X, "JBT jbt_handle_register_record_result :%02x")
TRC_MSG(JBT_JBT_CMD_KICK_CHECK_LIST_DONE, "JBT jbt_cmd_kick_check_list_done")
TRC_MSG(JBT_JBT_HANDLE_DEREGISTER_RECORD_RESULT_x02X, "JBT jbt_handle_deregister_record_result :%02x")
TRC_MSG(JBT_JBT_SET_LOCAL_COD_CMD_MODEx08X, "JBT jbt_set_local_cod_cmd, mode:%08x")
TRC_MSG(JBT_JBT_CMD_QUEUE_NONCONCURRENT_COMPLETED, "JBT jbt_cmd_queue_nonconcurrent_completed")
TRC_MSG(JBT_JBT_DEVICE_DISCOVERY_CANCEL_CMD_TRANSACTION_IDx02X, "JBT jbt_device_discovery_cancel_cmd, transaction_id:%02x")
TRC_MSG(JBT_JBT_DEVICE_DISCOVERY_CMD_BODY, "JBT jbt_device_discovery_cmd_body")
TRC_MSG(JBT_JBT_HANDLE_SESSION_ENABLED_RESULT, "JBT jbt_handle_session_enabled_result")
TRC_MSG(JBT_PSM_CHANNELx04X, "JBT psm_channel:%04x")
TRC_MSG(JBT_JBT_HANDLE_SESSION_DEREGISTRATION_RESULT_PARMSCON_IDx02X, "JBT jbt_handle_session_deregistration_result parms.con_id:%02x")
TRC_MSG(JBT_JBT_GAP_CONTEXTJBT_READ_ADDROPERATION_STATEx02X, "JBT jbt_gap_context.jbt_read_addr.operation_state:%02x")
TRC_MSG(JBT_MSG_ID_BT_BM_DISCOVERY_CNF, "JBT MSG_ID_BT_BM_DISCOVERY_CNF")
TRC_MSG(JBT_JBT_HANDLE_SDAP_RESULT, "JBT jbt_handle_sdap_result")
TRC_MSG(JBT_JBT_HANDLE_GET_RECORD_HANDLE_RESULT_x08X, "JBT jbt_handle_get_record_handle_result :%08x")
TRC_MSG(JBT_MSG_ID_BT_BM_GET_LINK_STATE_CNF, "JBT MSG_ID_BT_BM_GET_LINK_STATE_CNF")
TRC_MSG(JBT_JBT_REGISTER_RECORD_CMD_RECORD_TRANSACTION_IDx08X, "JBT jbt_register_record_cmd record transaction_id:%08x")
TRC_MSG(JBT_SEARCH_TYPEx02X, "JBT search_type:%02x")
TRC_MSG(JBT_JBT_CMD_CHECK_DEVICE_IN_QUEUE_STATUS_x02X, "JBT jbt_cmd_check_device_in_queue status :%02x")
TRC_MSG(JBT_JBT_SET_ACL_SECURITY_CMD_ADDRx02Xx02Xx02Xx02Xx02Xx02X, "JBT jbt_set_acl_security_cmd, addr:%02x,%02x,%02x,%02x,%02x,%02x")
TRC_MSG(JBT_INDEXx02X_USEDx02XHANDLEx08X, "JBT index:%02x, used:%02x,handle:%08x")
TRC_MSG(JBT_JBT_HANDLE_DEVICE_DISCOVERY_CANCEL_RESULT, "JBT jbt_handle_device_discovery_cancel_result")
TRC_MSG(JBT_TRANSACTION_IDx08X, "JBT transaction_id:%08x")
TRC_MSG(JBT_JBT_HANDLE_DEREGISTER_RECORD_RESULT_x08X, "JBT jbt_handle_deregister_record_result :%08x")
TRC_MSG(JBT_SIZEx02X, "JBT size:%02x")
TRC_MSG(JBT_JBT_HANDLE_GET_REMOTE_NAME_RESULT, "JBT jbt_handle_get_remote_name_result")
TRC_MSG(JBT_JBT_REGISTER_RECORD_CMD_RECORD_SIZEx08X, "JBT jbt_register_record_cmd record size:%08x")
TRC_MSG(JBT_MSG_ID_BT_BM_DISCOVERY_CANCEL_CNF, "JBT MSG_ID_BT_BM_DISCOVERY_CANCEL_CNF")
TRC_MSG(JBT_JBT_HANDLE_SESSION_TURNOFF_RESULT_MSGRESULTx02X, "JBT jbt_handle_session_turnoff_result msg->result:%02x")
TRC_MSG(JBT_JBT_GAP_CONTEXTJBT_GET_CODOPERATION_STATEx02X, "JBT jbt_gap_context.jbt_get_cod.operation_state:%02x")
TRC_MSG(JBT_JBT_GAP_CONTEXTJBT_GET_CODTRANSACTION_IDx08X, "JBT jbt_gap_context.jbt_get_cod.transaction_id:%08x")
TRC_MSG(JBT_MSG_ID_BT_BM_SEARCH_RAW_RESULT, "JBT MSG_ID_BT_BM_SEARCH_RAW_RESULT")
TRC_MSG(JBT_SESSION_ENTRYTURN_ON_OPOPERATION_STATEx02X, "JBT session_entry->turn_on_op.operation_state:%02x")
TRC_MSG(JBT_JBT_INIT, "JBT jbt_init")
TRC_MSG(JBT_INITIALIZE, "JBT_Initialize")
TRC_MSG(JBT_JBT_SESSION_SERVICE_TURN_ON, "JBT jbt_session_service_turn_on")
TRC_MSG(JBT_JBT_HANDLE_SESSION_ENABLED_RESULT_PARMSPSM_CHANNELx04X, "JBT jbt_handle_session_enabled_result parms.psm_channel:%04x")
TRC_MSG(JBT_JBT_POWER_ON_CMD, "JBT jbt_power_on_cmd")
TRC_MSG(JBT_BT_HANDLE_SESSION_CONNECT_IND_ADDRx02Xx02Xx02Xx02Xx02Xx02X, "JBT bt_handle_session_connect_ind addr:%02x,%02x,%02x,%02x,%02x,%02x")
TRC_MSG(JBT_JBT_SET_LOCAL_COD_CMD_BODY, "JBT jbt_set_local_cod_cmd_body")
TRC_MSG(JBT_JBT_SDPDB_RELEASE_ENTRY, "JBT jbt_sdpdb_release_entry")
TRC_MSG(JBT_JBT_HANDLE_RESTORE_BTSTACK_RESULT, "JBT jbt_handle_restore_btstack_result")
TRC_MSG(JBT_JBT_GAP_POWER_STATE_RETURN_STATUSxD, "JBT jbt_gap_power_state, return status:%d")
TRC_MSG(JBT_IN_JBT_SPP_READCASE2_SET_READYTOREAD_TO_FALSE, "JBT In jbt_spp_read():case2 Set readyToRead to FALSE")
TRC_MSG(JBT_BT_HANDLE_SESSION_CONNECT_REQ_CNF_PARMSTRANSACTION_IDx08X, "JBT bt_handle_session_connect_req_cnf parms.transaction_id:%08x")
TRC_MSG(JBT_VALUEx08X, "JBT value:%08x")
TRC_MSG(JBT_BT_HANDLE_SESSION_DISCONNECT_IND_PARMSPS_TYPEx02X, "JBT bt_handle_session_disconnect_ind parms.ps_type:%02x")
TRC_MSG(JBT_JBT_GAP_CONTEXTJBT_RESTORE_STATEx02X, "JBT jbt_gap_context.jbt_restore_state:%02x")
TRC_MSG(JBT_JBT_GAP_CONTEXTJBT_SET_CODOPERATION_STATEx02X, "JBT jbt_gap_context.jbt_set_cod.operation_state:%02x")
TRC_MSG(JBT_JBT_GAP_CONTEXTJBT_DEVICE_DISCOVERYTRANSACTION_IDx08X, "JBT jbt_gap_context.jbt_device_discovery.transaction_id:%08x")
TRC_MSG(JBT_SECURITY_VALUEx02X, "JBT security_value:%02x")
TRC_MSG(JBT_JBT_CMD_CHECK_AND_REMOVE_IN_QUEUE_MATCHED, "JBT jbt_cmd_check_and_remove_in_queue matched")
TRC_MSG(JBT_MSG_ID_BT_JSR82_TURNOFF_SERVICE_CNF, "JBT MSG_ID_BT_JSR82_TURNOFF_SERVICE_CNF")
TRC_MSG(JBT_SDAP_INIT, "JBT sdap init")
TRC_MSG(JBT_JBT_POWER_OFF_CMD, "JBT jbt_power_off_cmd")
TRC_MSG(JBT_MSG_ID_MMI_BT_BCC_GET_DISCOVERABLE_MODE_CNF, "JBT MSG_ID_MMI_BT_BCC_GET_DISCOVERABLE_MODE_CNF")
TRC_MSG(JBT_BT_HANDLE_SESSION_CONNECT_IND_PARMSRESULTx02X, "JBT bt_handle_session_connect_ind parms.result:%02x")
TRC_MSG(JBT_JBT_HANDLE_POWER_OFF_REQ_RESULT_JBT_POWEROFF_BY_JBT, "JBT jbt_handle_power_off_req_result JBT_POWEROFF_BY_JBT")
TRC_MSG(JBT_EXISTED_VALUEx08X_USEDx02X, "JBT existed_value:%08x, used:%02x")
TRC_MSG(JBT_BT_HANDLE_SESSION_DISCONNECT_IND, "JBT bt_handle_session_disconnect_ind")
TRC_MSG(JBT_BT_HANDLE_SESSION_CONNECT_IND_PARMSPS_TYPEx02X, "JBT bt_handle_session_connect_ind parms.ps_type:%02x")
TRC_MSG(JBT_JBT_GET_RECORD_HANDLE_CMD, "JBT jbt_get_record_handle_cmd")
TRC_MSG(JBT_RESULTx02X, "JBT result:%02x")
TRC_MSG(JBT_MSGDISCOVERABLE_MODEx02X, "JBT msg->discoverable_mode:%02x")
TRC_MSG(JBT_JBT_HANDLE_SESSION_DEREGISTRATION_RESULT_PARMSPS_TYPEx02X, "JBT jbt_handle_session_deregistration_result parms.ps_type:%02x")
TRC_MSG(JBT_MSG_ID_BT_JSR_DEACTIVE_CNF, "JBT MSG_ID_BT_JSR_DEACTIVE_CNF")
TRC_MSG(JBT_JBT_INIT_COMPLETED, "JBT jbt_init completed")
TRC_MSG(JBT_BT_HANDLE_SESSION_DISCONNECT_IND_FREE_READRINGBUF, "JBT bt_handle_session_disconnect_ind free ReadRingBuf")
TRC_MSG(JBT_MSG_ID_MMI_BT_BCC_POWER_ON_CNF, "JBT MSG_ID_MMI_BT_BCC_POWER_ON_CNF")
TRC_MSG(JBT_JBT_CMD_QUEUE_CONCURRENT_PROCESSING_END, "JBT jbt_cmd_queue_concurrent_processing end")
TRC_MSG(JBT_JBT_GAP_CONTEXTJBT_POWER_STATUSx02X, "JBT jbt_gap_context.jbt_power_status:%02x")
TRC_MSG(JBT_JBT_SESSION_CONNECT_REQ, "JBT jbt_session_connect_req")
TRC_MSG(JBT_JBT_DEREGISTER_RECORD_CMD_HANDLEx08X, "JBT jbt_deregister_record_cmd handle:%08x")
TRC_MSG(JBT_JBT_CMD_HANDLE_RESTORE_JBT_CMD_QUEUE_CONTEXTCMD_RUN_NOx02X, "JBT jbt_cmd_handle_restore jbt_cmd_queue_context.cmd_run_no:%02x")
TRC_MSG(JBT_JBT_CMD_QUEUE_NONCONCURRENT_PROCESSING, "JBT jbt_cmd_queue_nonconcurrent_processing")
TRC_MSG(JBT_MSG_ID_BT_JSR82_ENABLE_SERVICE_CNF, "JBT MSG_ID_BT_JSR82_ENABLE_SERVICE_CNF")
TRC_MSG(JBT_MSG_ID_BT_JSR_POWER_OFF_REQ, "JBT MSG_ID_BT_JSR_POWER_OFF_REQ")
TRC_MSG(JBT_COMMAND_REJECT_A, "JBT Command Reject A")
TRC_MSG(JBT_SDAP_SEARCH_PATTx02Xx02Xx02Xx02X, "JBT  SDAP search patt:%02x,%02x,%02x,%02x")
TRC_MSG(JBT_DEVICE_NAMEx02X_xC, "JBT Device name:%02x, %c")
TRC_MSG(JBT_JBT_SESSION_SERVICE_TURN_OFF, "JBT jbt_session_service_turn_off")
TRC_MSG(JBT_JBT_GAP_CONTEXT_JBT_RESTORE_STATExD, "JBT jbt_gap_context, jbt_restore_state:%d")
TRC_MSG(JBT_MSGWRITE_TYPEx08X, "JBT msg->write_type:%08x")
TRC_MSG(JBT_MSG_ID_BT_JSR_TEST_CMD2_REQ, "JBT MSG_ID_BT_JSR_TEST_CMD2_REQ")
TRC_MSG(JBT_BT_HANDLE_SESSION_CONNECT_IND_PARMSL2CAP_IDx04X, "JBT bt_handle_session_connect_ind parms.l2cap_id:%04x")
TRC_MSG(JBT_JBT_GAP_CONTEXTJBT_GET_REMOTE_NAMEOPERATION_STATEx02X, "JBT jbt_gap_context.jbt_get_remote_name.operation_state:%02x")
TRC_MSG(JBT_JBT_REGISTER_RECORD_CMD, "JBT jbt_register_record_cmd")
TRC_MSG(JBT_JBT_HANDLE_POWER_OFF_REQ_RESULT, "JBT jbt_handle_power_off_req_result")
TRC_MSG(JBT_COMMAND_REJECT_C_DUE_TO_NO_ENTRY, "JBT Command Reject C Due to no entry")
TRC_MSG(JBT_JBT_CMD_CHECK_DEVICE_IN_QUEUE_JBT_CMD_LIST_INIT, "JBT jbt_cmd_check_device_in_queue jbt_cmd_list_init")
TRC_MSG(JBT_JBT_GET_REMOTE_NAME_CMD_BODY, "JBT jbt_get_remote_name_cmd_body")
TRC_MSG(JBT_JBT_POWER_STATUSx02X, "JBT jbt_power_status:%02x")
TRC_MSG(JBT_MSG_ID_MMI_BT_BCC_SET_DISCOVERABLE_MODE_CNF, "JBT MSG_ID_MMI_BT_BCC_SET_DISCOVERABLE_MODE_CNF")
TRC_MSG(JBT_JBT_GAP_CONTEXTJBT_GET_ACL_INFOTRANSACTION_IDx08X, "JBT jbt_gap_context.jbt_get_acl_info.transaction_id:%08x")
TRC_MSG(JBT_MSG_ID_BT_JSR82_RX_READY_IND, "JBT MSG_ID_BT_JSR82_RX_READY_IND")
TRC_MSG(JBT_ADDRx02Xx02Xx02Xx02Xx02Xx02X, "JBT addr:%02x,%02x,%02x,%02x,%02x,%02x")
TRC_MSG(JBT_BT_HANDLE_SESSION_CONNECT_REQ_CNF, "JBT bt_handle_session_connect_req_cnf")
TRC_MSG(JBT_JBT_GAP_CONTEXTJBT_GET_REMOTE_NAMETRANSACTION_IDx08X, "JBT jbt_gap_context.jbt_get_remote_name.transaction_id:%08x")
TRC_MSG(JBT_JBT_SET_LOCAL_NAME_CMD_TRANSACTION_IDx08X, "JBT jbt_set_local_name_cmd, transaction_id:%08x")
TRC_MSG(JBT_JBT_SDPDB_FIND_ENTRY_BY_HANDLE_x08X, "JBT jbt_sdpdb_find_entry_by_handle :%08x")
TRC_MSG(JBT_COMMAND_REJECT_B, "JBT Command Reject B")
TRC_MSG(JBT_MSG_ID_BT_JSR_TEST_CMD1_REQ, "JBT MSG_ID_BT_JSR_TEST_CMD1_REQ")
TRC_MSG(JBT_JBT_DEREGISTER_RECORD_CMD, "JBT jbt_deregister_record_cmd")
TRC_MSG(JBT_NODECMD_CODExD, "JBT node->cmd_code:%d")
TRC_MSG(JBT_JBT_CMD_QUEUE_CONCURRENT_PROCESSING_OPCODExD, "JBT jbt_cmd_queue_concurrent_processing opcode:%d")
TRC_MSG(JBT_SESSION_ENTRYINITIATORxD, "JBT session_entry->initiator:%d")
TRC_MSG(JBT_JBT_GET_LOCAL_ADDR_CMD_BODY, "JBT jbt_get_local_addr_cmd_body")
TRC_MSG(JBT_JBT_HANDLE_SESSION_TURNOFF_RESULT, "JBT jbt_handle_session_turnoff_result")
TRC_MSG(JBT_RESULTx02X_IS_MASTERx02X_IS_AUTHx02X_IS_ENCRYPTED, "JBT result:%02x, is_master:%02x, is_auth:%02x, is_encrypted")
TRC_MSG(JBT_MSG_ID_BT_BM_WRITE_LOCAL_COD_CNF, "JBT MSG_ID_BT_BM_WRITE_LOCAL_COD_CNF")
TRC_MSG(JBT_MSGNAME_LENx02X, "JBT msg->name_len:%02x")
TRC_MSG(JBT_JBT_HANDLE_GET_DISCOVERABLE_MODE_RESULT, "JBT jbt_handle_get_discoverable_mode_result")
TRC_MSG(JBT_JBT_GET_LOCAL_NAME_CMD_TRANSACTION_IDx08X, "JBT jbt_get_local_name_cmd, transaction_id:%08x")
TRC_MSG(JBT_JBT_SET_LOCAL_DISCOVERY_CMD_MODEx08X, "JBT jbt_set_local_discovery_cmd, mode:%08x")
TRC_MSG(JBT_JBT_REGISTER_RECORD_CMD_HANDLEx08X, "JBT jbt_register_record_cmd handle:%08x")
TRC_MSG(JBT_JBT_SEARCH_AN_EXISTING_ENTRY, "JBT jbt_search_an_existing_entry")
TRC_MSG(JBT_REMOVE_NODE_FROM_TARGETLIST, "JBT remove_node_from_targetList")
TRC_MSG(JBT_JBT_HANDLE_SESSION_ENABLED_RESULT_PARMSCON_IDx02X, "JBT jbt_handle_session_enabled_result parms.con_id:%02x")
TRC_MSG(JBT_JBT_HANDLE_SESSION_TURNOFF_RESULT_PARMSCON_IDx02X, "JBT jbt_handle_session_turnoff_result parms.con_id:%02x")
TRC_MSG(JBT_JBT_HANDLE_POWER_OFF_REQ_RESULT_TYPEx02X, "JBT jbt_handle_power_off_req_result type:%02x")
TRC_MSG(JBT_IN_JBT_SPP_READCASE1_SET_READYTOREAD_TO_TRUE_AND_READMORExD, "JBT In jbt_spp_read():case1 Set readyToRead to TRUE and ReadMore=%d")
TRC_MSG(JBT_JBT_GAP_CONTEXTJBT_GET_ACL_INFOOPERATION_STATEx02X, "JBT jbt_gap_context.jbt_get_acl_info.operation_state:%02x")
TRC_MSG(JBT_JBT_SDAP_CMD, "JBT jbt_sdap_cmd")
TRC_MSG(JBT_JBT_HANDLE_SESSION_TURNOFF_RESULT_MSGPS_TYPEx02X, "JBT jbt_handle_session_turnoff_result msg->ps_type:%02x")
TRC_MSG(JBT_JBT_CMD_QUEUE_CONTEXTQUEUE_KICK_OFF_D, "JBT jbt_cmd_queue_context.queue_kick_off :%d")
TRC_MSG(JBT_JBT_CMD_LIST_INSERT_TAIL, "JBT jbt_cmd_list_insert_tail")
TRC_MSG(JBT_MSG_ID_BT_JSR82_DISABLE_SERVICE_CNF, "JBT MSG_ID_BT_JSR82_DISABLE_SERVICE_CNF")
TRC_MSG(JBT_JBT_SET_ACL_SECURITY_CMD_SECURITY_MODEx02X, "JBT jbt_set_acl_security_cmd, security_mode:%02x")
TRC_MSG(JBT_JBT_SDAP_SS_CMD, "JBT jbt_sdap_ss_cmd")
TRC_MSG(JBT_JBT_SDAP_SA_CMD, "JBT jbt_sdap_sa_cmd")
TRC_MSG(JBT_JBT_SDAP_SSA_CMD, "JBT jbt_sdap_sss_cmd")
TRC_MSG(JBT_JBT_SDAP_SA_RECORD_HANDLERx08X, "JBT sa record handler:%08x")
TRC_MSG(JBT_JBT_GAP_CONTEXTJBT_DEVICE_DISCOVERYOPERATION_STATEx02X, "JBT jbt_gap_context.jbt_device_discovery.operation_state:%02x")
TRC_MSG(JBT_JBT_HANDLE_REGISTER_RECORD_RESULT_x08X, "JBT jbt_handle_register_record_result :%08x")
TRC_MSG(JBT_JBT_DEVICE_DISCOVERY_CMD_TRANSACTION_IDx08X, "JBT jbt_device_discovery_cmd, transaction_id:%08x")
TRC_MSG(JBT_PARMSRESULTx02X, "JBT parms.result:%02x")
TRC_MSG(JBT_BT_HANDLE_SESSION_CONNECT_REQ_CNF_MSGRESULTx02X, "JBT bt_handle_session_connect_req_cnf msg->result:%02x")
TRC_MSG(JBT_JBT_GAP_CONTEXTJBT_SET_LOCAL_DISCOVERABLEOPERATION_STATEx02X, "JBT jbt_gap_context.jbt_set_local_discoverable.operation_state:%02x")
TRC_MSG(JBT_JBT_CMD_QUEUE_CONTEXTCMD_RUN_NOx02X, "JBT jbt_cmd_queue_context.cmd_run_no:%02x")
TRC_MSG(JBT_JBT_CMD_CHECK_DEVICE_IN_QUEUE_CMD_OPCODExD, "JBT jbt_cmd_check_device_in_queue cmd_opcode:%d")
TRC_MSG(JBT_MSG_ID_BT_JSR82_TURNON_SERVICE_CNF, "JBT MSG_ID_BT_JSR82_TURNON_SERVICE_CNF")
TRC_MSG(JBT_JBT_SET_LOCAL_COD_CMD_TRANSACTION_IDx08X, "JBT jbt_set_local_cod_cmd, transaction_id:%08x")
TRC_MSG(JBT_MSG_ID_BT_JSR_KICK_NEW_COMMAND, "JBT MSG_ID_BT_JSR_KICK_NEW_COMMAND")
TRC_MSG(JBT_BT_HANDLE_SESSION_DISCONNECT_IND_SESSION_ENTRYINITIATORxD, "JBT bt_handle_session_disconnect_ind session_entry->initiator:%d")
TRC_MSG(JBT_JBT_RESTORE_BTSTACK_LINK_CMD, "JBT jbt_restore_btstack_link_cmd")
TRC_MSG(JBT_JBT_HANDLE_GET_LOCAL_ADDR_RESULT, "JBT jbt_handle_get_local_addr_result")
TRC_MSG(JBT_JBT_NODECMD_CODExD, "JBT jbt node->cmd_code:%d")
TRC_MSG(JBT_MSG_ID_BT_JSR_POWER_OFF_IND, "JBT MSG_ID_BT_JSR_POWER_OFF_IND")
TRC_MSG(JBT_JBT_GAP_CONTEXTJBT_SET_CODTRANSACTION_IDx08X, "JBT jbt_gap_context.jbt_set_cod.transaction_id:%08x")
TRC_MSG(JBT_JBT_GET_LOCAL_DISCOVERY_CMD_TRANSACTION_IDx08X, "JBT jbt_get_local_discovery_cmd, transaction_id:%08x")
TRC_MSG(JBT_JBT_HANDLE_GET_ACL_INFO_RESULT, "JBT jbt_handle_get_acl_info_result")
TRC_MSG(JBT_MSG_ID_BT_BM_READ_LOCAL_ADDR_CNF, "JBT MSG_ID_BT_BM_READ_LOCAL_ADDR_CNF")
TRC_MSG(JBT_JBT_SDAP_CONTEXTJBT_SERVICE_SEARCHOPERATION_STATEx02X, "JBT jbt_sdap_context.jbt_service_search.operation_state:%02x")
TRC_MSG(JBT_JBT_CMD_INSERT_QUEUE, "JBT jbt_cmd_insert_queue")
TRC_MSG(JBT_SPP_INIT, "JBT Spp init")
TRC_MSG(JBT_PS_TYPEx02X, "JBT ps_type:%02x")
TRC_MSG(JBT_CON_IDx02X, "JBT con_id:%02x")
TRC_MSG(JBT_JBT_HANDLE_SESSION_TURNON_RESULT, "JBT jbt_handle_session_turnon_result")
TRC_MSG(JBT_JBT_HANDLE_GET_LOCAL_COD_RESULT, "JBT jbt_handle_get_local_cod_result")

TRC_MSG(FUNC_JBT_OPEN_FILE_FAILED, "JBT UT: Open file failed with errcode=%d")
TRC_MSG(FUNC_JBT_GET_FILE_SIZE, "JBT UT: Get file size =%d")
TRC_MSG(FUNC_JBT_PUTBYTES, "JBT UT PutBytes(): actual_write=%d,wanted_write_this_time=%d,accumulate_len=%d,tmp_buf_pos=%d,wanted_write_next_time=%d,fsize=%d")
TRC_MSG(FUNC_JBT_PUTBYTES_CLOSE01, "JBT UT: Put All Data to TX buf, close file")
TRC_MSG(FUNC_JBT_READ_FAILED, "JBT UT: Read failed with errcode=%d")
TRC_MSG(FUNC_JBT_WRITE_FAILED, "JBT UT: Write failed with errcode=%d")
TRC_MSG(FUNC_JBT_OPEN_FILE_FOR_RECEIVED_DATA, "JBT UT: Open file for received data later successfully")
TRC_MSG(FUNC_JBT_GETBYTES, "JBT UT GetBytes(): actual read=%d,wanted_read_this_time=%d,accumulate_len=%d,tmp_buf_pos=%d,fsize=%d")
TRC_MSG(FUNC_JBT_WRITE_BUF_DATA_TO_FILE, "JBT UT: Write Received data in tmp_buf to File")
TRC_MSG(FUNC_JBT_RECEIVED_ALL_DATA, "JBT UT: Received all data with size=%d")
TRC_MSG(FUNC_JBT_WAIT_FOR_READY_TO_WRITE_IND, "JBT UT: Wait for MSG READY TO WRITE IND")
TRC_MSG(FUNC_JBT_WAIT_FOR_READY_TO_READ_IND, "JBT UT: Wait for MSG READY TO READ IND")
TRC_MSG(FUNC_JBT_SEARCH_EACH_ENTRY, "JBT UT:In jbt_search_an_existing_entry():Search each entry, Its  inx or transactionId value=%d,used=%d")
TRC_MSG(FUNC_JBT_DISC_IND_CLIENT_FREE_RINGBUF, "JBT UT: bt_handle_session_disconnect_ind(): client free rw ringbuf")
TRC_MSG(FUNC_JBT_DISC_IND_SRV_RESET_RW_PTR, "JBT UT: bt_handle_session_disconnect_ind(): server resets rw ptr to pStart")
TRC_MSG(FUNC_JBT_DISC_IND_CLIENT_FREE_CHNL_BUF, "JBT UT: bt_handle_session_disconnect_ind(): client release channel_buffer")
TRC_MSG(FUNC_JBT_CON_REQ_FAILED_FREE_RINGBUF, "JBT UT: spp client connect req failed, release RW ringbuf")
TRC_MSG(FUNC_JBT_CON_REQ_FAILED_FREE_CHNL_BUF, "JBT UT: spp client connect req failed, release channel buffer")
TRC_MSG(FUNC_JBT_REG_SERVICE_ALLOCATE_CHNL_BUF, "JBT SESSION: Register service request: allocate channel buffer")
TRC_MSG(FUNC_JBT_REG_SERVICE_ALLOCATE_RWRING_BUF, "JBT SESSION: Register service request: allocate rw ring buffer")
TRC_MSG(FUNC_JBT_ENABLE_SERVICE_FAILED_FREE_RING_BUF, "JBT UT: Enable service failed, release rw ring buf")
TRC_MSG(FUNC_JBT_ENABLE_SERVICE_FAILED_FREE_CHNL_BUF, "JBT UT: Enable service failed, release channel buffer")
TRC_MSG(FUNC_JBT_DEREG_SERVICE_SUCCESS_FREE_CHNL_BUF, "JBT UT: Deregister service success: release channel buffer")
TRC_MSG(FUNC_JBT_DEREG_SERVICE_SUCCESS_FREE_RING_BUF, "JBT UT: Deregister service success: release rw ring buffer")
TRC_MSG(FUNC_JBT_CON_REQ_ALLOCATE_CHNL_BUF, "JBT: SPP con req, allocate channel buffer")
TRC_MSG(FUNC_JBT_CON_REQ_ALLOCATE_RING_BUF, "JBT: SPP con req, allocate rw ring buffer")
TRC_MSG(FUNC_JBT_DISC_IND_CLIENT_FREE_SESSION_ENTRY, "JBT UT: bt_handle_session_disconnect_ind(): client release session_entry")
TRC_MSG(FUNC_JBT_WRITE_BUT_SESSION_NOT_FIND, "JBT UT: Write but session entry not found, check if the session is closed or not")
TRC_MSG(FUNC_JBT_CAN_NOT_GET_ONE_FREE_SUBENTRY, "JBT: jbt_session_con_req(): can not get one free subsession entry")
TRC_MSG(FUNC_JBT_CAN_NOT_FIND_EXISTING_SUBENTRY, "JBT UT: connect_request_cnf(): can not find subsession entry with type=%d, value=%d")
TRC_MSG(FUNC_JBT_REQ_CMD_FAILED_FREE_BUF_AND_RESET_ENTRY, "JBT: jbt_reset_session_entry() free RWBuf ChnlBuf and reset entries due to req cmd failed")
TRC_MSG(FUNC_JBT_UT_RW_PTR, "JBT_UT: jbt_ut_rw_acceptor APPRingBuf: start=%08X,read=%08X,write=%08X,end=%08X")
TRC_MSG(FUNC_JBT_CURRENT_LB_MODE, "JBT: current enable_txrx_loopback_mode=%d")
TRC_MSG(FUNC_JBT_REJCT_DUE_TO_POWEROFF_ONGOING, "JBT: Reject this request due to POWER OFF state")
TRC_MSG(FUNC_JBT_UT_SET_ACL_SECURITY_INFO, "JBT: Get notification of Set ACL Security info")
TRC_MSG(JBT_HANDLE_SET_ACL_SECURITY_RESULT, "JBT: jbt_handle_set_acl_security_result()")

TRC_MSG(FUNC_JBT_BCC_INIT, "[JSRBCC] jbt_bcc_init")
TRC_MSG(FUNC_JBT_BCC_AUTHORIZE_REQ_CMD, "[JSRBCC] jbt_authorize_req_cmd, op_state=%d, tran_id=%d, bd_addr[0]=0x%02x, bd_addr[1]=0x%02x, bd_addr[2]=0x%02x, bd_addr[3]=0x%02x, bd_addr[4]=0x%02x, bd_addr[5]=0x%02x")
TRC_MSG(FUNC_JBT_BCC_IS_AUTHORIZED_REQ_CMD, "[JSRBCC] jbt_is_authorized_req_cmd, op_state=%d, tran_id=%d, bd_addr[0]=0x%02x, bd_addr[1]=0x%02x, bd_addr[2]=0x%02x, bd_addr[3]=0x%02x, bd_addr[4]=0x%02x, bd_addr[5]=0x%02x")
TRC_MSG(FUNC_JBT_BCC_IS_TRUSTED_REQ_CMD, "[JSRBCC] jbt_is_trusted_req_cmd, op_state=%d, tran_id=%d, bd_addr[0]=0x%02x, bd_addr[1]=0x%02x, bd_addr[2]=0x%02x, bd_addr[3]=0x%02x, bd_addr[4]=0x%02x, bd_addr[5]=0x%02x")
TRC_MSG(FUNC_JBT_BCC_GET_HOST_SECURITY_MODE_REQ_CMD, "[JSRBCC] jbt_get_host_security_mode_cmd, op_state=%d, tran_id=%d")
TRC_MSG(FUNC_JBT_BCC_GET_PREKNOWN_DEV_COUNT_REQ_CMD, "[JSRBCC] jbt_get_preknown_device_count_req_cmd, op_state=%d, tran_id=%d")
TRC_MSG(FUNC_JBT_BCC_GET_PREKNOWN_DEV_REQ_CMD, "[JSRBCC] jbt_get_preknown_devices_req_cmd, op_state=%d, tran_id=%d")
TRC_MSG(FUNC_JBT_BCC_GET_NATIVE_PWR_STATUS_REQ_CMD, "[JSRBCC] jbt_get_native_pwr_status_req_cmd, op_state=%d, tran_id=%d")
TRC_MSG(FUNC_JBT_BCC_AUTHORIZE_REQ_CMD_RESULT, "[JSRBCC] jbt_authorize_req_cmd_result, result=%d, tran_id=%d, bd_addr[0]=0x%02x, bd_addr[1]=0x%02x, bd_addr[2]=0x%02x, bd_addr[3]=0x%02x, bd_addr[4]=0x%02x, bd_addr[5]=0x%02x")
TRC_MSG(FUNC_JBT_BCC_IS_AUTHORIZED_REQ_CMD_RESULT, "[JSRBCC] jbt_is_authorized_req_cmd_result, result=%d, tran_id=%d, bd_addr[0]=0x%02x, bd_addr[1]=0x%02x, bd_addr[2]=0x%02x, bd_addr[3]=0x%02x, bd_addr[4]=0x%02x, bd_addr[5]=0x%02x")
TRC_MSG(FUNC_JBT_BCC_IS_TRUSTED_REQ_CMD_RESULT, "[JSRBCC] jbt_is_trusted_req_cmd_result, result=%d, tran_id=%d, bd_addr[0]=0x%02x, bd_addr[1]=0x%02x, bd_addr[2]=0x%02x, bd_addr[3]=0x%02x, bd_addr[4]=0x%02x, bd_addr[5]=0x%02x")
TRC_MSG(FUNC_JBT_BCC_GET_HOST_SECURITY_MODE_REQ_CMD_RESULT, "[JSRBCC] jbt_get_host_security_mode_cmd_result, security_mode=%d, tran_id=%d")
TRC_MSG(FUNC_JBT_BCC_GET_PREKNOWN_DEV_COUNT_REQ_CMD_RESULT, "[JSRBCC] jbt_get_preknown_device_count_req_cmd_result, dev_count=%d, tran_id=%d")
TRC_MSG(FUNC_JBT_BCC_GET_PREKNOWN_DEV_REQ_CMD_RESULT, "[JSRBCC] jbt_get_preknown_devices_req_cmd_result, device_count=%d, tran_id=%d")
TRC_MSG(FUNC_JBT_BCC_GET_NATIVE_PWR_STATUS_REQ_CMD_RESULT, "[JSRBCC] jbt_get_native_pwr_status_req_result, native_pwr_status=%d, tran_id=%d")
TRC_MSG(JBT_FINALIZE_REQ_EVENT, "jbt_finalize(): block in request events =%08X")
TRC_MSG(JBT_FINALIZE_COMPLETE, "jbt_finalize(): retrieve events successfully, end of jbt_finalize()")
TRC_MSG(JBT_FINALIZE_ALREADY_OFF, "jbt_finalize(): jbt is already in power off state, end of jbt_finalize()")
TRC_MSG(JBT_POWEROFF_BY_MMI_END_BEFORE_JBT_POWER_OFF, "jbt_handle_power_off_req_result():Recv power_off_ind before end of JBT_POWER_OFF_CMD")
TRC_MSG(JBT_FINALIZE_WAIT_POWER_ON, "jbt_finalize():waiting JBT power on end")
TRC_MSG(JBT_FINALIZE_START_POWER_OFF, "jbt_finalize(): powered on, start to power of JBT")
TRC_MSG(JBT_FINALIZE_COMPLETE_POWER_ON_FAILED, "jbt_finalize(): wait for power on but failed, finalize complete")
TRC_MSG(JBT_SET_END_POWER_ON_EVENT, "jbt_finalize(): set event due to recv result of jbt power on")
TRC_MSG(JBT_JBT_GET_LOCAL_NAME_CMD_BODY, "jbt_get_local_name_cmd_body()")
TRC_MSG(JBT_BT_GET_LOCAL_NAME_TRANSACTION_ID, "jbt_get_local_name_cmd_body() with transaction_id=%d")
TRC_MSG(JBT_BT_COMPLETE_RESTORE_MMI_AND_COD, "jbt_restore_procedure(): complete of MMI restore and CoD restored by MMI, not from JBT to BTStack")
TRC_MSG(JBT_HANDLE_GET_LOCAL_NAME_RESULT, "jbt_handle_get_local_name_result()")
TRC_MSG(FUNC_JBT_RING_WRITE_DATA_INFO, "JBTRING_WriteData(): pStart=%08x,pEnd=%08x,pRead=%08x,pWrite=%08x")
TRC_MSG(FUNC_JBT_RING_READ_DATA_INFO, "JBTRING_ReadData():pStart=%08x,pEnd=%08x,pRead=%08x,pWrite=%08x")
TRC_MSG(FUNC_JBT_RING_READ_DATA_CASE1, "JBTRING_ReadData(), case1: readable_len=%d")
TRC_MSG(FUNC_JBT_RING_READ_DATA_CASE2, "JBTRING_ReadData(), case2: first_readable_len=%d,total_data_len=%d")
TRC_MSG(FUNC_JBT_RING_READ_DATA_CASE2_INFO, "JBTRING_ReadData() case2:pStart=%08x,pEnd=%08x,pRead=%08x,pWrite=%08x")
TRC_MSG(FUNC_JBT_RING_READ_DATA_CASE2_LEFT_INFO, "JBTRING_ReadData():left_wanted_read_len=%d,left_available_data_len=%d,actual_read_len=%d")
TRC_MSG(FUNC_JBT_CANCEL_INQUIRY_DUE_TO_VM_TERMINATE, "JBT:Cancel an ongoing Discovery operation due to speed VM termination")
TRC_MSG(FUNC_JBT_CANCEL_INQUIRY_FAILED_WHILE_VM_TERMINATE, "JBT:Cancel Discovery operation failed while VM termination")
TRC_MSG(FUNC_JBT_GET_CNF_GENERATE_BY_JBT_DUE_TO_VM_TERMINATE, "JBT:get cnf generated by JBT due to vm termination with case=%d")
TRC_MSG(FUNC_JBT_DISC_IND_SUBSESSION_COUNT, "JBT:Disc_Ind_hdler, subsession_count=%d")
TRC_MSG(FUNC_JBT_ADM_CREATE_INIT, "JBT: Adm is created at init stage due to jvm_main invokes jbt_init")
TRC_MSG(FUNC_JBT_ADM_ALREADY_CREATE_INIT, "JBT: Adm is already created in jbt_init")
TRC_MSG(FUNC_JBT_ADM_CREATE_POWER_ON_SUCCESS, "JBT: Adm is created when jbt_power_on is ok")
TRC_MSG(FUNC_JBT_ADM_DELETE_STATUS, "JBT:status of kal_adm_delete()=%d")
TRC_MSG(FUNC_JBT_MEM_ALLOC_INX_SIZE_PTR, "jbt_malloc inx=%d,size=%d,ptr=%08X")
TRC_MSG(FUNC_JBT_MEM_FREE_INX_SIZE_PTR, "jbt_free inx=%d,size=%d,ptr=%08X")
TRC_MSG(FUNC_JBT_REPORT_JBT_POWER_OFF_OR_ABNORMAL_RESET, "jbt reports JBT_POWER_OFF_OR_ABNORMAL_RESET to vm after jbt_init")
/* JBT TRACE END */

/* OBEX TRACE START */
TRC_MSG(BT_OBEX_TRACE_START, "BT_OBEX_TRACE_START") /* MBT LOG FILTER. DO NOT MODIFY */

/* OBEX */
TRC_MSG(BTSTACK_SENDTXBUFFER_STATUS_xD, "BTSTACK_SendTxBuffer status: %d")
TRC_MSG(OBEX_RECEIVED_NEW_OBEX_COMMAND_BEFORE_PREVIOUS_RESPONSE_SENT_SUCCESSFULLY, "[OBEX]---ERROR: Received new OBEX command before previous response sent successfully.")
TRC_MSG(OBEX_CLIENT_RFCOMM_EVENT_RECEIVED_xD_BYTES, "OBEX: Client RFCOMM Event: Received %d bytes")
TRC_MSG(OBEX_SERVER_SEQUENCE_NUMBER_ERROR__xD, "OBEX: Server Sequence Number Error = %d!!")
TRC_MSG(DATAIND_RECV_FAILED_WSAGETLASTERROR__xD, "DataInd: Recv() failed, WSAGetLastError() = %d")
TRC_MSG(OBEX_TRANSPORT_BUSY, "OBEX: Transport Busy!")
TRC_MSG(OBEX_ASYNDPROC_SOCKET_xX_RECEIVED_MESSAGE_CLOSE, "OBEX: AsyndProc() Socket %x received message: Close")
TRC_MSG(OBEX_SERVER_RFCOMM_EVENT_TRANSMIT_COMPLETE, "OBEX: Server RFCOMM Event: RFEVENT_PACKET_HANDLED,status=%d, dataLen=(%d), appHndl=0x%x")
TRC_MSG(OBEX_SERVER_L2CAP_EVENT_TRANSMIT_COMPLETE, "OBEX: Server L2CAP Event: RFEVENT_PACKET_HANDLED,status=%d, dataLen=(%d), appHndl=0x%x")
TRC_MSG(OBEX_CLIENT_RFCOMM_EVENT_CLOSED, "OBEX: Client RFCOMM Event: RFEVENT_CLOSED")
TRC_MSG(OBEX_CLIENT_L2CAP_EVENT_CLOSED, "OBEX: Client L2CAP Event: RFEVENT_CLOSED")
TRC_MSG(OBEX_TCP_CONNECT_FAILED, "OBEX: TCP Connect failed.")
TRC_MSG(OBEX_SERVER_RECEIVED_CLOSE_FOR_SESSION_OTHER_THAN_THE_ACTIVE_ONE, "OBEX: Server received Close for session other than the active one.")
TRC_MSG(OBEX_CLIENT_CMEVENT_DATA_LINK_DIS_REPORTS_LINK_DISCONNECT, "OBEX Client: CMEVENT_DATA_LINK_DIS Reports Link Disconnect.")
TRC_MSG(OBEX_RECEIVED_OBEX_CONNECT_OBEX_PACKET_SIZE_xD_BYTES, "OBEX: Received OBEX Connect. OBEX Packet Size %d bytes.")
TRC_MSG(OBEX_RF_SENDDATA_FAILED, "OBEX: RF_SendData FAILED: return (%d)")
TRC_MSG(OBEX_SERVER_SENT_RFPKT_NUM, "---OBEX: SERVER sent out (%d) RF_PACKET---")
TRC_MSG(OBEX_ASYNCPROC_SOCKET_xX_RECEIVED_MESSAGE_WRITE_CONN_ACCEPTED, "OBEX: AsyncProc() Socket %x received message: Write (Conn Accepted).")
TRC_MSG(OBEX_ASYNCPROC_CLIENT_SOCKET_xX_RECEIVED_MESSAGE_READ, "OBEX: AsyncProc() Client Socket %x received message: Read")
TRC_MSG(OBEX_NONCE_TRC, "OBEX: Nonce:")
TRC_MSG(BEFORE_BTSTACK_SENDTXBUFFER_SIF_xD, "before BTSTACK_SendTxBuffer SIF: %d")
TRC_MSG(OBEX_CLIENT_RECV_RFPKT_NUM, "---OBEX: CLIENT recv (%d) RF_PACKET---")
TRC_MSG(TCPSTACK_SOCKET_FAILURExD, "TCPSTACK: Socket failure=%d")
TRC_MSG(OBEX_SEQNUM_xD, "OBEX: SeqNum: %d.")
TRC_MSG(BTCLIENTSDPCALLBACK_BTXPCLIENTSTATE__OCS_DISCONNECTING, "BtClientSdpCallback: btxp->client.state == OCS_DISCONNECTING")
TRC_MSG(BTCLIENTSDPCALLBACK_BTXPCLIENTSTATE_L2CAP_OCS_DISCONNECTING, "BtClientSdpCallback: btxp->client.state == OCS_DISCONNECTING")
TRC_MSG(OBEX_CLIENT_IGNORED_EVENT_xD, "OBEX Client: Ignored Event %d")
TRC_MSG(OBEX_CLIENT_IGNORED_RFCOMM_EVENT_xD, "OBEX Client: Ignored RFCOMM Event %d")
TRC_MSG(OBEX_CLIENT_IGNORED_L2CAP_EVENT_xD, "OBEX Client: Ignored L2CAP Event %d")
TRC_MSG(OBEX_CLIENT_RFCOMM_EVENT_TRANSMIT_COMPLETE, "OBEX: Client RFCOMM Event: RFEVENT_PACKET_HANDLED, status=%d,dataLen=%d")
TRC_MSG(OBEX_CLIENT_L2CAP_EVENT_TRANSMIT_COMPLETE, "OBEX: Client L2CAP Event: RFEVENT_PACKET_HANDLED, status=%d,dataLen=%d")
TRC_MSG(BTSTACK_SENDTXBUFFER_LEN_xD, "BTSTACK_SendTxBuffer len: %d")
TRC_MSG(OBEX_CALL_OBPARSE_BUFFAVAIL, "[OBEX] call ObParserBuffAvail()... appHndl(0x%x) - (%d)")
TRC_MSG(OBEX_ASYNDPROC_SOCKET_xX_RECEIVED_MESSAGE, "OBEX: AsyndProc() Socket %x received message:")
TRC_MSG(OBEX_IGNORED_EVENT_xD, "OBEX: Ignored Event %d")
TRC_MSG(OBEX_CLIENT_SEQUENCE_STATUSxD_EXPECT_SEQNUMxD_NEXTSEQNUMxD_GOT_SEQNUMxD, "OBEX: Client Sequence: Status=%d, Expect: SeqNum=%d, NextSeqNum=%d, Got: SeqNum=%d.")
TRC_MSG(OBEX_CONNECTED_TRC, "OBEX: Connected.")
TRC_MSG(OBEX_SESSION_ID_TRC, "OBEX: Session ID:")
TRC_MSG(OBEX_SENDTXBUFFER, "[OBEX] ObParserTxBuffAvail Call OBSTACK_SendTxBuffer. AppHndl=0x%x, obp=0x%x")
TRC_MSG(OBEX_NO_FREE_PACKET, "[OBEX] --- OBPROT_TxDone: NO FREE packet ---- ")
TRC_MSG(OBEXCLIENTCONNECTIONCALLBACK_BTXPCLIENTSTATE__OCS_DISCONNECTING, "ObexClientConnectionCallback: btxp->client.state == OCS_DISCONNECTING")
TRC_MSG(OBEX_SERVER_RFCOMM_EVENT_RECEIVED_xD_BYTES, "OBEX: Server RFEVENT_DATA_IND: Received %d bytes")
TRC_MSG(OBEX_SERVER_RFCOMM_EVENT_CLOSED, "OBEX: Server RFCOMM Event: RFEVENT_CLOSED. server state=(%d),appHndl=0x%x")
TRC_MSG(OBSERVERSENDRESPONSE_xD, "ObServerSendResponse: %d")
TRC_MSG(OBEX_BT_DEBUGx02X, "OBEX: %02x")
TRC_MSG(OBEX_OBEXPACKET_RECEIVED, "[OBEX]=== One OBEX Packect is received. packetLen=(%d) ===")
TRC_MSG(OBEX_TIMEOUT_x0X, "OBEX: Timeout: %0X.")
TRC_MSG(OBEX_INVALID_SESSION_PARAMETERS_HEADER, "OBEX: Invalid Session Parameters Header!")
TRC_MSG(OBEX_ASYNCPROC_SOCKET_xX_RECEIVED_MESSAGE_ACCEPT, "OBEX: AsyncProc() Socket %x received message: Accept")
TRC_MSG(OBEX_RFCOMM_SENDDATA_FAILED, "[OBEX]==== RF_SendData failed! ===, status=%d")
TRC_MSG(OBEX_CLIENT_RECV_RESPONSE_WITH_NO_FINALBIT, "[OBEX] === OBClientEventInd(OBPE_OPER_IND) Error: respcode(0x%x) has NO Final Bit. Disconnect...")
TRC_MSG(OBEX_CLIENT_RESUME_SEQUENCE_STATUSxD_EXPECT_SEQNUMxD_NEXTSEQNUMxD_GOT_SEQNUMxD, "OBEX: Client Resume Sequence: Status=%d, Expect: SeqNum=%d, NextSeqNum=%d, Got: SeqNum=%d.")
TRC_MSG(OBEX_SELECT_WINDOW_REGISTRATION_FAILED_xX, "OBEX: Select Window Registration failed, %x")
TRC_MSG(OBEX_CMEVENT_DATA_LINK_DIS, "OBEX: CMEVENT_DATA_LINK_DIS. server state=(%d)")
TRC_MSG(OBEX_SERVER_SEQUENCE_NUMBER_VALID, "OBEX: Server Sequence Number Valid!!")
TRC_MSG(OBEX_OBPROT_TXDONE, "[OBEX] OBPROT_TxDone: AppHndl= 0x%x")
TRC_MSG(OBEX_SEND_PACKET_WHEN_TRANSPORT_LAYER_IS_DISCONNECTED, "[OBEX]---ObParserSendPacket when obp->rxState == OBSC_RX_NOP: no CONNECTTION.")
TRC_MSG(OBEX_CLIENTSENDCOMMAND, "OBEX: ClientSendCommand: 0x%x")
TRC_MSG(OBEX_CALL_RF_SENDDATA, "OBEX: call RF_SendData, datalen=%d, b1=0x%x,b2=0x%x,b3=0x%x")
TRC_MSG(OBEX_CALL_RF_CLOSECHANNEL, "OBEX: BTSTACK_DisconnectReq call RF_CloseChannel")
TRC_MSG(OBEX_CLIENT_RFCOMM_DATA_IND, "OBEX: BtClientCallBack RFCOMM_DATA_IND. received (%d) bytes")
TRC_MSG(OBEX_CLIENT_RFCOMM_OPEN, "OBEX: BtClientCallBack RFCOMM_OPEN!client.state=(%d)")
TRC_MSG(OBEX_CLIENT_L2CAP_OPEN, "OBEX: BtL2ClientCallBack L2EVENT_OPEN!client.state=(%d)")
TRC_MSG(OBEX_CLIENT_RFCOMM_CLOSED, "[OBEX] BtClientCallBack btxp=0X%x, RFChannel 0X%x :RFEVENT_CLOSED!! client.state=(%d)")
TRC_MSG(OBEX_SERVER_RFCOMM_OPEN_IND, "OBEX: BtServerCallBack RFCOMM_OPEN_IND! server state=(%d), appHndl=0x%x")
TRC_MSG(OBEX_SERVER_RFCOMM_OPEN, "OBEX: BtServerCallBack RFCOMM_OPEN! server state=(%d), appHndl=0x%x")
TRC_MSG(OBEX_CLIENT_DEINIT, "[OBEX]: OBEX_ClientDeinit...")
TRC_MSG(OBEX_CLIENT_SENDREQUEST, "[OBEX] OBEX_ClientSendRequest....opcode=%d")
TRC_MSG(OBEX_CLIENT_SENDREQUEST_BUSY, "[OBEX]OBEX_ClientSendRequest return OB_STATUS_BUSY!")
TRC_MSG(OBEX_CLIENT_SENDREQUEST_NOCONNECT, "[OBEX]OBEX_ClientSendRequest return OB_STATUS_NO_CONNECT!")
TRC_MSG(OBEX_CLIENT_SENDREQUEST_TOOSMALL, "[OBEX]OBEX_ClientSendRequest return OB_STATUS_PACKET_TOO_SMALL!")
TRC_MSG(OBEX_CLIENT_ABORT, "[OBEX]OBEX_ClientAbort...")
TRC_MSG(OBEX_CLIENT_ABORT_NOCONNECT, "[OBEX]OBEX_ClientAbort return OB_STATUS_NO_CONNECT!")
TRC_MSG(OBEX_CLIENT_ABORT_BUSY, "[OBEX]OBEX_ClientAbort return OB_STATUS_BUSY!")
TRC_MSG(OBEX_CLIENT_EVENTIND, "[OBEX] ObClientEventInd - OBPE_Event: %d")
TRC_MSG(OBEX_CLIENT_PROCESS_SIMPLEEVENT, "[OBEX] ProcessSimpleOpEvents - response=%x")
TRC_MSG(OBEX_CLIENT_COMPLETE, "[OBEX] ClientComplete - OBCE_Event=%d")
TRC_MSG(OBEX_CLIENT_SENDREQUEST_INVALIDPARAM, "[OBEX]OBEX_ClientSendRequest return OB_STATUS_INVALID_PARM!")
TRC_MSG(OBEX_SERVER_EVENTIND, "[OBEX] ObServerEventInd Event: %d")
TRC_MSG(OBEX_SERVER_PUTDELETE, "======OBEX::SERVER PUT-DELETE===")
TRC_MSG(OBEX_SERVER_CREATEEMPTY, "======OBEX::SERVRE PUT CREATE-EMPTY ===")
TRC_MSG(OBEX_PARSE_RX, "[OBEX]ObParseRx..AppHndl=0x%x, obp=0x%x, obp->rxState=(%d), b1=0x%x,b2=0x%x,b3=0x%x")
TRC_MSG(OBEX_PARSE_RX_OPCODE, "[OBEX]ObParseRx.ServerParser.opcode=0x%x,obp->rxState=(%d), obp=0x%x, packetLen=%d, obp=0x%x")
TRC_MSG(OBEX_PARSE_RX_RSP, "OBEX: ObParseRx..ClientParser.rsp=0x%x, packetLen=%d, obp=0x%x")
TRC_MSG(OBEX_PARSE_RX_STAGEBUFF0, "[OBEX] ServerParser: obp->stageBuff[0] = 0x%x")
TRC_MSG(OBEX_PARSE_RX_OPCODE_MISMATCH, "OBEX: opcode missmatch : opcode=0x%x, obp->stageBuff[0] = 0x%x - disconnecting")
TRC_MSG(OBEX_PARSE_RX_COMPARE, "[OBEX] obp->stageBuff[0]=0x%x, obp->opcode=0x%x")
TRC_MSG(OBEX_PARSE_RX_DEFER_OPER, "[OBEX]===ObParserRx: obp->flags |= OBPF_DEFER_OPER_IND!")
TRC_MSG(OBEX_PARSE_RX_DEFER_OPER_FLOAT, "[OBEX](obp->flags & OBPF_DEFER_OPER_IND), call eventIndFunc with OBPE_NO_EVENT!")
TRC_MSG(OBEX_PARSER_SENDPACKET, "[OBEX]---AppHndl=0x%x,obp=0x%x ObParserSendPacket cmd=0x%x, packetLen=(%d) ...")
TRC_MSG(OBEX_NO_FREETXBUFFER, "[OBEX]----obp(0x%x) cmd(0x%x) OBSTACK_GetTxBuffer return NULL: obp->flags|=OBPF_PENDING")
TRC_MSG(OBEX_SENDRESPONDSE, "OBEX: obp:0x%x ObServerSendResponse: rsp=0x%x, handle=%d")
TRC_MSG(OBEX_SENDCOMMAND, "OBEX: obp:0x%x ObClientSendCommand: cmd=0x%x, handle=%d")
TRC_MSG(OBEX_SETABORT, "[OBEX]obp:0x%x ObParserSetAbort...")
TRC_MSG(OBEX_TX_DONE, "[OBEX]====obp:0x%x ObParserTxDone =====")
TRC_MSG(OBEX_REMOVE_DEFER, "[OBEX]obp:0X%x (obp->flags & OBPF_DEFER_OPER_IND), call eventIndFunc with OBPE_OPER_IND...")
TRC_MSG(OBEX_PARSER_DISONNECT, "[OBEX]ObParserDisconnect...parser=0X%x")
TRC_MSG(OBEX_PARSER_DISONNECTIND, "[OBEX]ObParserDisconnectInd...parser=0X%x")
TRC_MSG(OBEX_PARSER_LINKTRANS, "[OBEX]obp:0X%x ObParserLinkTransport set stack!")
TRC_MSG(OBEX_BTSTACK_CLIENTCONNECT, "[OBEX]BTSTACK_ClientConnect....ClientState=%d")
TRC_MSG(OBEX_BTSTACK_CLIENTDISCONNECT, "[OBEX]BTSTACK_ClientDisconnect...ClientState=(%d) bConnType(%d)")
TRC_MSG(OBEX_BTSTACK_RFCLOSECHANNEL, "[OBEX]BTSTACK_ClientDisconnect call RF_CloseChannel channel=0X%x, btxp=0X%x")
TRC_MSG(OBEX_BTSTACK_RFCLOSECHANNEL_RETURN, "[OBEX]RF_CloseChannel return: %d")
TRC_MSG(OBEX_SET_MASTER, "[OBEX] Try to be a master when receiving RFEVENT_OPEN event in BtServCallBack()")
TRC_MSG(OBEX_SERVER_CONN_CB, "[OBEX] CMGR ServerCallback: Event=%d, Status=%d, server state =(%d)")
TRC_MSG(OBEX_CLIENT_CONN_CB, "[OBEX] CMGR ClientCallback Event=%d, Status=%d")
TRC_MSG(OBEX_SERVER_REMOVE_DL, "[OBEX]ObexServerConnectionCallback call CMGR_RemoveDataLink...")
TRC_MSG(OBEX_SERVER_BDADDR_ERR, "[OBEX] Server: bad address: Not the connect bd_addr")
TRC_MSG(OBEX_CLIENT_BDADDR_ERR, "[OBEX]CLIENT: Not the connect bd_addr")
TRC_MSG(OBEX_CLIENT_SDPCALLBACK, "[OBEX] BtClientSdpCallback with result=%d, attribute_index=%d")
TRC_MSG(OBEX_CLIENT_OPEN_RFCHANNEL, "[OBEX]call RF_OpenClientChannel:btxp->client.channel =0x%x, uuid:0x%04x channel:0x%02x")
TRC_MSG(OBEX_TPCONNECT, "[OBEX]OBEX_TpConnect....")
TRC_MSG(OBEX_TPCONNECT_INVALIDPARAM, "[OBEX]OBEX_TpConnect return OB_STATUS_INVALID_PARM")
TRC_MSG(OBEX_TPCONNECT_CONNECTED, "[OBEX]OBEX_TpConnect already has a connection!!")
TRC_MSG(OBEX_TPCONNECT_RETURN, "[OBEX] OBEX_TpConnect return status = %d")
TRC_MSG(OBEX_TPDISCONNECT, "[OBEX]OBEX_TpDisconnect ....")
TRC_MSG(OBEX_TPDISCONNECT_INVALID_PARM, "[OBEX]OBEX_TpDisconnect .return OB_STATUS_INVALID_PARM.")
TRC_MSG(OBEX_TPDISCONNECT_NOCONNECT, "[OBEX]---OBEX_TpDisconnect return OB_STATUS_NO_CONNECT!!")

TRC_MSG(OBEX_CLIENT_L2SDPCALLBACK, "[OBEX] BtClientL2SdpCallback with result=%d, attribute_index=%d")
TRC_MSG(OBEX_CLIENT_OPEN_L2Channel, "[OBEX]call l2cap_OpenClientChannel:btxp->client.channel =0x%x, uuid:0x%04x channel:0x%02x psm:0x%x")
TRC_MSG(OBEX_OPEN_L2CHANNEL_RETURN, "[OBEX] L2CAP_OpenClientChannel return : (%d)")
TRC_MSG(OBEX_CLIENT_L2CALLBACK, "OBEX: L2CAP_callback channelId(0x%x) event(0x%x) psmvalue(0x%x)")

TRC_MSG(OBEX_RFCOMM_REGISTER_SERVER_CHANNEL_FAILED, "[OBEX] Fatal Error: RF_RegisterServerChannel FAILED!")
TRC_MSG(OBEX_SERVER_EXPECT_FINALBIT, "[OBEX]Server:ProcessGeneral:Opcode=(0x%x),Final bit expected - Rejecting")
TRC_MSG(OBEX_PARSERX_HEADERLEN_ERROR, "[OBEX]ObParseRx: Header Length is not 0 - disconnect")
TRC_MSG(OBEX_PARSERX_PACKETLEN_ERROR, "[OBEX]ObParseRx: Packet data Overflow/Underflow - disconnect! PacketLen : %d CurPacketLen : %d")
TRC_MSG(OBEX_PACKET_SIZE_OVERFLOW, "[OBEX]Error: Sending Packet (%d bytes) exceeds Maximum OBEX Packet Size.")
TRC_MSG(OBEX_VERIFY_SERVER_EVENT_FAILED, "[OBEX]Verify Server Event Failed: Received event %d, Last event %d")
TRC_MSG(OBEX_CMGR_SCO_REJECT, "[OBEX] ==== CMGR_ClientCallback: BT_STATUS_SCO_REJECT ===")
TRC_MSG(OBEX_CMGR_BTCHIP_REASON, "[OBEX] ==== CMGR_ClientCallback: BT_STATUS_BTCHIP_REJECT === ")
TRC_MSG(OBEX_DISCONNECT_CLIENT_LINK, "[OBEX] BtDisconnectClientLink...")
TRC_MSG(OBEX_START_SERVICE_QUERY, "[OBEX]---BtStartServiceQuery...")
TRC_MSG(OBEX_START_L2CAP_SERVICE_QUERY, "[OBEX]---BtStartL2ServiceQuery...")
TRC_MSG(OBEX_SERVER_READ_HEADERBLOCK_ERROR, "[OBEX] == ObServerReadHeaderBlock ReadFile Error! rcode=%d")
TRC_MSG(OBEX_CLIENT_STATE, "[OBEX] btxp->client.state=%d")
TRC_MSG(OBEX_RESEND_PENDING_PACKET, "[OBEX] ObParserTxBuffAvail: Re-send the pending packet obp=0x%x...")
TRC_MSG(OBEX_CALL_CMGR_CREATEDATALINK, "[OBEX] call CMGR_CreateDataLink...")
TRC_MSG(OBEX_CMGR_CREATEDATALINK_RETURN, "[OBEX] CMGR_CreateDataLink return : %d")
TRC_MSG(OBEX_CMGR_REMOVEDATALINK_RETURN, "[OBEX] CMGR_RemoveDataLink return : %d")
TRC_MSG(OBEX_OPEN_RFCHANNEL_RETURN, "[OBEX]RF_OpenClientChannel return : (%d)")
TRC_MSG(OBEX_CALL_CMGR_REMOVEDATALINK, "[OBEX]call CMGR_RemoveDataLink....")
TRC_MSG(OBEX_SERVER_BUSY_REJECT_CONNECT, "[OBEX]server state is busy, REJECT the connection")
TRC_MSG(OBEX_SERVER_LINKTRANSPORTFAILED_REJECT_CONNECT, "[OBEX]OBPROT_LinkTransport failed, REJECT the connection")
TRC_MSG(OBEX_SENDTXBUFFER_LEN_ERROR, "[OBEX]BTSTACK_SendTxBuffer ERROR: len (%d) > BTSTACK_MaxTxSize (%d)")
TRC_MSG(OBEX_CALL_RF_SENDDATA_RETURN, "OBEX: call RF_SendData(DataLen=%d) return status=(%d)")
TRC_MSG(OBEX_TOOMUCH_RESPHEADERS, "[OBEX] TOO much response headers, resp_len=%d, ServerMaxHeaderSize=%d")
TRC_MSG(OBEX_SERVER_NO_OBJECT, "[OBEX]--- OBEX server: app has NOT provided object!")
TRC_MSG(OBEX_SERVER_WRITE_OBJECT_FAILED, "[OBEX]--- OBEX server: Write Object failed! ret=(%d)")
TRC_MSG(OBEX_INVALID_CONNECTIONID, "[OBEX]=== Invalid connection ID (%d) === ")
TRC_MSG(OBEX_SERVER_ABORT, "[OBEX]OBEX_ServerAbort...resp=(0x%x)")
TRC_MSG(OBEX_SERVER_DEINIT_BUSY, "[OBEX]OBEX_ServerDeinit, OSC(currentOperation)=(%d)")
TRC_MSG(OBEX_SERVER_DEINIT_RFDEREGISTER_RETURN, "[OBEX]BTSTACK_ServerDeinit: RF_DeregisterService return (%d)")
TRC_MSG(OBEX_SERVER_DEINIT_CMGRDEREGISTER_RETURN, "[OBEX]BTSTACK_ServerDeinit: CMGR_DeregisterHandler return (%d)")
TRC_MSG(OBEX_SERVER_ABORT_RSP_INVALID, "[OBEX]OBEX_ServerAbort INVALID RspCode(0x%x)!")
TRC_MSG(OBEX_SERVER_ABORT_EVENT_INVALID, "[OBEX]OBEX_ServerAbort INVALID event! CurOper=%d,event=%d")
TRC_MSG(OBEX_CLIENT_START_TIMER, "[OBEX][TIMER] OBEX_ClientStartReqTimer for cmd=(0x%x), AppHndl=0x%x, timer_dur=%d")
TRC_MSG(OBEX_CLIENT_STOP_TIMER, "[OBEX][TIMER]OBEX_ClientStopReqTimer AppHndl=0x%x, timer_id=%d")
TRC_MSG(OBEX_CLIENT_RESTART_TIMER, "[OBEX][TIMER]OBEX_ClientRestartReqTimer AppHndl=0x%x, timer_id=%d")
TRC_MSG(OBEX_CLIENT_REQTIMEOUT, "[OBEX][TIMER] ===OBEX_ClientRequestTimeout: AppHndl=0x%x, timer_id=%d, tpStatus=(%d)")
TRC_MSG(OBEX_SERVER_CANFITONEPACKET, "[OBEX]===Server ProcessGet: OSC(canFitOnePacket)=TRUE, txTotalLen=%d, maxTxLen=%d")
TRC_MSG(OBEX_SERVER_READHDBLOCK_FITONEPKT, "[OBEX]===ObServerReadHeaderBlock_FitOnePkt, len=%d == ")
TRC_MSG(OBEX_SERVER_READ_HEADERBLOCK_FITONEPKT, "[OBEX]----ObServerReadHeaderBlock_FitOnePkt..curOper=%d,canFitOnePacket=%d,hb=%d,len=%d")
TRC_MSG(OBEX_SERVER_READ_HEADERBLOCK_FITONEPKT_FILL_EOB, "[OBEX]----ObServerReadHeaderBlock_FitOnePkt...fill OBEXH_END_BODY Header")
TRC_MSG(OBEX_CLIENT_READ_HEADERBLOCK_READOBJ_FAILED, "[OBEX]----ObClientReadHeaderBlock FAILED! ret = %d")
TRC_MSG(OBEX_CLIENT_SEND_ABORT_FOR_RW_ERROR, "[OBEX]----ProcessGetEvents: OBRC_CLIENT_RW_ERROR, send ABORT request!AppHndl=0x%x")
TRC_MSG(OBEX_SERVER_SEND_RESPONSE, "[OBEX]OBEX_ServerSendResponse...ObexApp=0x%x,OSC(resp)=0x%x, Opcode()=0x%x")
TRC_MSG(OBEX_SERVER_PROCGET_SENDOBJ, "[OBEX]Server ProcessGet: objLen=%d,txLength=%d,resp=0x%x, hb=HB_SERVER_OBJECT")
TRC_MSG(OBEX_SERVER_GET_HB_LEN, "[OBEX]ObServerGetHeaderBlockLen: len=%d")
TRC_MSG(OBEX_SERVER_READ_HB, "[OBEX]ObServerReadHeaderBlock: ObexApp=0x%x, hb=%d, len=%d, rspCode=0x%x")
TRC_MSG(OBEX_SERVER_GET_HB_LEN_FOP, "[OBEX]--ObServerGetHeaderBlockLen_FitOnePkt..curOper=%d, canFitOnePacket=%d, block_len=%d")
TRC_MSG(OBEX_BUFAVAIL_MAX_TX_SIZE_ZERO, "[OBEX]--ObParserTxBuffAvail:obp=0x%x, len==0, maybe RF channel is closing")
TRC_MSG(OBEX_SERVER_EVENTIND_OPER_ABORTED, "[OBEX]--ObServerEventInd,OBPE_OPER_COMPLETE,OBSE_ABORTED: OSC(resp)=0x%x,ObServerGetOpcode()=0x%x,OSC(opcode)=0x%x")
TRC_MSG(OBEX_PARSE_TXDONE_SENDINGRFPNUM, "[OBEX]obParserTxDone: server 0x%x SendingRFPktNum = %d")
TRC_MSG(OBEX_BTSTACK_TXTIMEOUT, "[OBEX] ---- BTSTACK_TxTimeout : con=0x%x ---")
TRC_MSG(OBEX_GIVEPKT_TO_WAITINGAPP, "[OBEX]-- OBPROT_GivePktToWaitingApp_IfNeed  call ObParserTxBuffAvail(0x%x)")
TRC_MSG(OBEX_RETURN_PENDING_PKT, "[OBEX TxTimer]---OBPROT_ReturnTxBuffer_IfNeed con=0x%x,buf=0x%x")
TRC_MSG(OBEX_OBPROT_TXTIMEOUT, "[OBEX TxTimer] ==== OBPROT_TxTimeout ==== con=0x%x")
TRC_MSG(OBEX_PROC_PENDING_RFPKT, "[OBEX]---RFCLOSED: OBPROT_ReturnTxBuffer_IfNeed return (%d),SendingRFPktNum=%d")
TRC_MSG(OBEX_RFOPEN_TIMEOUT, "[OBEX] RFOpenTimeout: btxp[%x] state[%d] timer[%d]")
TRC_MSG(OBEX_CLIENT_DISCONNECTING_ED, "[OBEX] client(tpStatus=%d) is already DISCONNECTING or DISCONNECTED!")
TRC_MSG(OBEX_CLIENTTPDISCONNECT_RETURN, "[OBEX] OBEX_ClientTpDisconnect return (%d)")
TRC_MSG(OBEX_READHEADBLK_ERR, "[OBEX] ObParserTxBuffAvail:Observer:ObReadHeaderBlock Error(%d)! So Disconnect!")
TRC_MSG(OBEX_PBAP_PARAMS, "[OBEX]ProcessGet:PBAP Server: appHeaderLen=%d, OSC(objLen)=%d,txTotalLen=%d, maxTxLen=%d")
TRC_MSG(OBEX_TX_TIMEOUT_INDEX, "[OBEX] -- OBPROT_TxTimeout: index i=(%d)")
TRC_MSG(OBEX_ACCEPT_RFCHNL, "[OBEX] BTSTACK_AcceptRFChnConn btxp=0x%x...")
TRC_MSG(OBEX_REJECT_RFCHNL, "[OBEX] BTSTACK_RejectRFChnConn btxp=0x%x...")
TRC_MSG(OBEX_PARSER_SEND_ABORT_FOR_READ_ERROR, "[OBEX]ObParserSendPacket: ReadData ERROR(%d), for Client, send ABORT command")
TRC_MSG(OBEX_DISCONNECT_FOR_READHEADBLK_ERR, "[OBEX]ObParserTxBuffAvail ReadData ERROR(%d), DISCONNECT the connection!")
TRC_MSG(OBEX_NOT_TPCONNECTED_RETURN, "[OBEX] obp 0x%x ObParserTxBuffAvail..NOT OB_TP_CONNECTED., just RETURN")
TRC_MSG(OBEX_OBPARSE_TXBUFAVAIL, "[OBEX] obp 0x%x ObParserTxBuffAvail...")
TRC_MSG(OBEX_CLIENT_READ_HB, "[OBEX]ObClientReadHeaderBlock: ObexApp=0x%x, hb=%d, len=%d")
TRC_MSG(OBEX_TXSEND_FAILED_RETURN_BUF, "[OBEX]OBSTACK_SendTxBuffer FAILED (status=%d): return packet buffer ===")
TRC_MSG(OBEX_PUT_PACKET_TOO_SMALL, "[OBEX][ERR] packet too small hbLength:%d max:%d")
TRC_MSG(OBEX_CLIENTSENDREQUEST_TXLENGTH, "[OBEX] sendrequest txOffset:%d txLength:%d")
TRC_MSG(OBEX_CLIENTSENDCOMMAND_TXLENGTH, "[OBEX] send command txOffset:%d txLength:%d hb:%d OCC(objLen):%d OCC(opcode):0x%x")
TRC_MSG(OBEX_CLIENT_APPEND_CONNID, "[OBEX][CONN] Append CONNID and adjust OCC(txLength):%d")
TRC_MSG(OBEX_CLIENT_CALC_OBJ_TXLENGTH_BUFSTYLE, "[OBEX][CONN] OBEX_ClientSendCommand bufstyle Assign OCC(txLength):%d OCC(objLen):%d idFlag:%d")
TRC_MSG(OBEX_CLIENT_CALC_OBJ_TXLENGTH_OBSTYLE, "[OBEX][CONN] OBEX_ClientSendCommand obstyle Assign OCC(txLength):%d OCC(objLen):%d idFlag:%d")
TRC_MSG(OBEX_CONNID_VALUE, "[OBEX][CONN] Setup CONNID idFlag:%d")
TRC_MSG(OBEX_APPEND_CONNID_QUEUEHEADER, "[OBEX][CONN] Append CONNID to queue header")
TRC_MSG(OBEX_REG_RFCOMM_CHANNEL, "OBEX: register rfcomm %d")
TRC_MSG(OBEX_SERV_INIT_L2CAP_BUF, "OBEX: S GoepL2cap is %d pl2Buffer:0x%x")
TRC_MSG(OBEX_NO_L2CAP_BUF, "OBEX: WRN no l2cap buffer")
TRC_MSG(OBEX_REG_L2CAP_PSM, "OBEX: Register L2cap set the inLinkMode psm:0x%x inLinkMode:%d")
TRC_MSG(OBEX_REG_L2CAP_PSM_RETURN, "OBEX: L2CAP_RegisterPsm return:0x%x psm:0x%x")
TRC_MSG(OBEX_DEREG_L2CAP_PSM, "OBEX: l2cap deregister status:%d")
TRC_MSG(OBEX_SERVER_CONNECTED_REJECT_INCOMING_RFCOMM, "OBEX: server has connected with l2cap. reject rfcomm incoming")
TRC_MSG(OBEX_SERVER_CURRENT_STATE, "OBEX: S current state:%d appHndl:0x%x")
TRC_MSG(OBEX_SERVER_REJECT_SECOND_INCOMING, "OBEX: BtServL2Callback reject incoming state:%d l2channelId:%d")
TRC_MSG(OBEX_SERVER_L2CAP_OPEN, "OBEX: L2EVENT_CONNECTED state:%d appHndl:0x%x")
TRC_MSG(OBEX_SERVER_L2CAP_DISCONNECTED, "OBEX: L2EVENT_DISCONNECTED state:%d appHndl:0x%x")
TRC_MSG(OBEX_SERVER_L2CAP_PACKET_HANDLED, "OBEX: L2EVENT_PACKET_HANDLED state:%d appHndl:0x%x pkt:0x%x left:%d")
TRC_MSG(OBEX_L2TIMEOUT_IGNORE, "BTSTACK_AUTO_GOEPL2SDP_Timeout_Ignore ")
TRC_MSG(OBEX_L2CAP_DISCONNECT_REQ, "OBEX: L2CAP_DisconnectReq channelid:%d status:%d")
TRC_MSG(OBEX_L2CAP_FLOW_DATA_IND, "OBEX: L2EVENT_FLOW_DATA_IND state:%d appHndl:0x%x len:%d")
TRC_MSG(OBEX_L2CAP_GOEPL2SDP_TIMEOUT, "OBEX: BTSTACK_AUTO_GOEPL2SDP_Timeout ")
TRC_MSG(OBEX_START_SERVICE_QUERY_FAIL, "OBEX: [WRN] BTSTACK_AUTO_GOEPL2SDP_Timeout fail to start query %d")
TRC_MSG(OBEX_L2CAP_FLOW_DATA_IND_ERR, "OBEX: Data Flow ind, rx buffer shall not be empty")
TRC_MSG(OBEX_L2CAP_UNREGEISTER_PSM, "OBEX: BtClientL2CallBack unregister l2cap bConnType:%d psm:0x%x")
TRC_MSG(OBEX_L2CAP_CONFIG_INLINKMODE, "OBEX: set the inLinkMode psm:0x%x inLinkMode:%d")
TRC_MSG(OBEX_L2CAP_SENDDATA, "OBEX: L2CAP_SendData status:%x (datalen:%d pkt:0x%x) left:%d")
TRC_MSG(OBEX_L2CAP_CONNECT_RSP, "OBEX: L2CAP_ConnectRsp channelId:%d accept:%d return:%d")
TRC_MSG(OBEX_ACCEPT_RFCHNL_RETURN, "OBEX: RF_AcceptChannel return:%d")
TRC_MSG(OBEX_RFCOMM_QUERY_UNKNOW, "OBEX: BtStartServiceQuery Unknow uuid:%x")
TRC_MSG(OBEX_SDPCALLBACK_IGNORE, "OBEX: attribute:%d status:%d")
TRC_MSG(OBEX_CLIENT_PROCESS_SIMPLEOP, "[OBEX][CLIENT] ProcessSimpleOpEvents obap:0x%x OBPE_OPER:%d")
TRC_MSG(OBEX_CLIENT_PROCESS_PUTOP, "[OBEX][CLIENT] ProcessPutEvents obap:0x%x OBPE_OPER:%d status:%d")
TRC_MSG(OBEX_CLIENT_PROCESS_GETOP, "[OBEX][CLIENT] ProcessGetEvents obap:0x%x OBPE_OPER:%d status:%d")
TRC_MSG(OBEX_TXCOMPLETE_EVENT, "[CLIENT] Tx_Complete Clear srm flags")
TRC_MSG(OBEX_REMOTE_MTU_VALUE, "OBEX: Get mtu maxTxPacket:%d")
TRC_MSG(OBEX_LOCAL_MTU_VALUE, "OBEX: prepare mtu maxTxPacket:%d")
TRC_MSG(OBEX_L2CAP_INIT, "[OBEX][SERV] init l2buffer:0x%x")
TRC_MSG(OBEX_VERSION_MTU, "OBEX: Connect Field mtu:%d version0x%x")
TRC_MSG(OBEX_SERVER_EVENT_IND, "[OBEX] ObServerEventInd OBPE_EVENT:%d curOp:%d")
TRC_MSG(OBEX_SERVER_EVENT_START_IND, "OBEX: OPER_IND_START opcode:0x%x bConntype:%d")
TRC_MSG(OBEX_SERVER_REMOTE_MTU_TOO_LARGE_WRN, "[OBEX][WRN] Remote mtu is large then l2cap !mtu:%d  l2cap:%d")
TRC_MSG(OBEX_SERVER_DISABLE_SRM_ENABLE, "[OBEX][SERVER] Got all data. disable srm receive:%d objLen:%d")
TRC_MSG(OBEX_SERVER_REMOTE_SEND_LARGE_THEN_MTU, "[OBEX][ERR] Error! remote sends too much data ! mru:%d received:%d")
TRC_MSG(OBEX_SERVER_DISABLE_SRM_ENABLE_ENDBODY, "[OBEX][SERVER] Got endbody. disable srm")
TRC_MSG(OBEX_SERVER_PROCESS_GET, "[OBEX][SERVER] ProcessGet obap:0x%x OBPE_OPER:%d")
TRC_MSG(OBEX_SERVER_PROCESS_GENERAL, "[OBEX][SERVER] ProcessGeneral OBPE_OPER:%d")
TRC_MSG(OBEX_CONN_ID_NOT_VALIED, "[OBEX][ERR] id is not valid ! disconnect it")
TRC_MSG(OBEX_SERVER_SENDRESPONSE_COUNT_REJECT, "[OBEX][WRN] sendResponse count is 0 ! %d ")
TRC_MSG(OBEX_RESET_SRM_ENABLE, "[SRM] reset obap:0x%x srm_server ")
TRC_MSG(OBEX_UNACK_NUMBER, "[OBEX][CLIENT] OBPE_OPER_IND unack:%d")
TRC_MSG(OBEX_CLIENT_READ_HB_IN_HEADER, "[OBEX] ObClientReadHeaderBlock OCC(txLength):%d OCC(txOffset):%d remainlen:%d")
TRC_MSG(OBEX_BCONNTYPE, "OBEX: obap:0x%x bConnType:%d")

/* BTMMIObex.c  Trace*/
TRC_MSG(BT_BT_MMI_OBEX_GET_PROFILE_SHARED_BUF, "[BTMMIOBEX] mmi_bt_obex_get_profile_shared_buffer().")
TRC_MSG(OADP_FSM_BEGIN, "[OADP]FSM Begin: state[%d] event[%d] inst[0x%x] op[0x%x]")
TRC_MSG(OADP_FSM_END, "[OADP]FSM End: state[%d] status[%d]")
TRC_MSG(OADP_GOEP_CLINET_EVENT, "[OADP]incoming Client event: event[%d] oper[%d] header[%d] inst[0x%x]")
TRC_MSG(OADP_GOEP_SERVER_EVENT, "[OADP]incoming Server event: event[%d] oper[%d] header[%d] inst[0x%x]")
TRC_MSG(OADP_NEW_INSTANCE, "[OADP]new instance: id[%d] mod[%d]")
TRC_MSG(OADP_NEW_OPERATION, "[OADP]new operation: inst[0x%x] op[0x%x] id[%d] type[%d]")
TRC_MSG(OADP_NEW_CONNECTION, "[OADP]new connection: inst[0x%x] op[0x%x]")
TRC_MSG(OADP_DELETE_INSTANCE, "[OADP]delete instance: inst[0x%x]")
TRC_MSG(OADP_DELETE_OPERATION, "[OADP]delete operation: inst[0x%x] op[0x%x]")
TRC_MSG(OADP_DELETE_CONNECTION, "[OADP]delete connection: inst[0x%x] conn[0x%x]")
TRC_MSG(OADP_DATA_READ, "[OADP]OBEX read [%d] bytes: inst[0x%x] op[0x%x] obj[0x%x]")
TRC_MSG(OADP_DATA_WRITE, "[OADP]OBEX write [%d] bytes: inst[0x%x] op[0x%x] obj[0x%x]")
TRC_MSG(OADP_DATA_OBJLEN, "[OADP]OBEX get object len: inst[0x%x] op[0x%x] obj[0x%x] total[%d]")
TRC_MSG(OADP_NEW_OBJECT, "[OADP]new object: inst[0x%x] obj[0x%x]")
TRC_MSG(OADP_OBJECT_SIZE, "[OADP]set object size: inst[0x%x] obj[0x%x] size[%d]")
TRC_MSG(OADP_OPEN_OBJECT, "[OADP]open object: inst[0x%x] obj[0x%x] mode[%d] data[0x%x]")
TRC_MSG(OADP_DELETE_OBJECT, "[OADP]delete object: inst[0x%x] obj[0x%x]")

TRC_MSG(BT_OBEX_TRACE_END, "BT_OBEX_TRACE_END") /* MBT LOG FILTER. DO NOT MODIFY */
/* OBEX TRACE END */

/* GOEP TRACE START */
TRC_MSG(GOEP_SERVERCONTINUE_STATUS__xD, "[GOEP]--GOEP_ServerContinue: status = %d")
TRC_MSG(GOEP_SERVERACCEPT_STATUS__xD, "[GOEP]--GOEP_ServerAccept: status = %d")
TRC_MSG(GOEP_SERVERABORT_STATUS__xD, "[GOEP]--GOEP_ServerAbort: status = %d")
TRC_MSG(GOEP_SERVERAUTH_STATUS__xD, "[GOEP]--GOEP_ServerAuthenticate: status = %d")
TRC_MSG(GOEP_MAIN_DISCONECT_AN_INEXISTENT_GOEP_CONN_ID_xD, "goep_main: Disconect an inexistent goep_conn_id: %d")
TRC_MSG(GOEP_CANNOT_FIND_FREE_GOEP_CONN_ID, "goep_main: Can not find free goep id")
TRC_MSG(GOEP_CANNOT_FIND_SERVER_WITH_GOEP_CONN_ID, "goep_main: Can not find server with goep_conn_id")
TRC_MSG(GOEP_CANNOT_FIND_CLIENT_WITH_GOEP_CONN_ID, "goep_main: Can not find client with goep_conn_id")
TRC_MSG(GOEP_CANNOT_FIND_CLIENT_WITH_REQ_ID, "goep_main: Can not find client with req_id")
TRC_MSG(GOEP_CANNOT_FIND_BT_UUID, "goep_main: Can not find matched BT uuid")
TRC_MSG(GOEP_CANNOT_FIND_OBEX_UUID, "goep_main: Can not find matched OBEX uuid")
TRC_MSG(GOEP_REGISTER_SERVER_RSP_CODE, "goep_main: Register server failed: %d")
TRC_MSG(GOEP_DEREGISTER_SERVER_RSP_CODE, "goep_main: Deregister server failed: %d")
TRC_MSG(GOEP_DISCONNECT_REQ_RSP_CODE, "goep_disconnect_req_hdlr: status = %d")
TRC_MSG(GOEP_OBEX_DISCONNECT_FAIL, "goep_main: GOEP_Disconect fail with rspcode: %d! so send disconnect_ind to mmi!")
TRC_MSG(GOEP_CALL_OBEX_CLIENTDISCONNECT, "goep: GOEP_Disconect CALL OBEX_ClientDisconnect")
TRC_MSG(GOEP_CLIENT_TP_DISCONNECTED, "goep: ClientCallback TP_Disconnected!")
TRC_MSG(GOEP_CLIENT_CALLBACK, "========goep: ClientCallback --- event = %d")
TRC_MSG(GOEP_ABORTREQFAIL_SEND_ABORT_RSP, "goep: GOEP_Abort fail! Send Abort Response to MMI!")
TRC_MSG(GOEP_CLIENT_CONNECTED, "goep: ClientCallback -- Connected!")
TRC_MSG(GOEP_SEND_CONNECT_RSP, "goep_main: send OBEX CONNECT_RSP msg with rsp_code = %d")
TRC_MSG(GOEP_CLIENT_CALL_TEMPOP_HANDLER_CALLBACK, "goep: CALL Client tempOp.handler->callback, event=(%d)")
TRC_MSG(GOEP_RECV_MSG_FROM_MMI, "goep_main: recieve msg from MMI! msg = %d")
TRC_MSG(GOEP_SERVER_CALLBACK, "========goep: ServerCallback --- event = %d, server=0x%x")
TRC_MSG(GOEP_OBEX_CONNECTION_NUM, "[GOEP] Current Obex connections = %d!!")
TRC_MSG(GOEP_ENTER_SERVER_TPDISCONNECT, "[GOEP] GOEP_ServerTpDisconnect...Server=0X%x")
TRC_MSG(GOEP_REGISTER_CLIENT, "[GOEP] GOEP_RegisterClient...ClientApp=0X%x")
TRC_MSG(GOEP_DEREGISTER_CLIENT, "[GOEP] GOEP_DeregisterClient...ClientApp=0X%x")
TRC_MSG(GOEP_CONNECT_ENTERING, "[GOEP] GOEP_Connect.ClientApp=0X%x..GoepClientObexCons client=0x%x mru=%d")
TRC_MSG(GOEP_CONNECT_STATUS_BUSY, "[GOEP] GOEP_Connect..OB_STATUS_BUSY.")
TRC_MSG(GOEP_CONNECT_BUILDHEADERS_FAILED, "[GOEP] GOEP_Connect..ClientBuildHeaders failed. OB_STATUS_FAILED.")
TRC_MSG(GOEP_CONNECT_STATUS_RESTRICTED, "[GOEP] GOEP_Connect: set status = OB_STATUS_RESTRICTED!!")
TRC_MSG(GOEP_DISCONNECT_ENTERING, "[GOEP] GOEP_Disconnect.AppClient=0x%x..GoepClientObexCons client=0x%x")
TRC_MSG(GOEP_PUSH_ENTERING, "[GOEP]GOEP_Push.ClientApp=0X%x.GoepClientObexCons client=0x%x")
TRC_MSG(GOEP_PULL_ENTERING, "[GOEP] GOEP_Pull.ClientApp=0X%x..GoepClientObexCons client=0x%x")
TRC_MSG(GOEP_SETFOLDER_ENTERING, "[GOEP] GOEP_SetFolder.ClientApp=0X%x...GoepClientObexCons client=0x%x")
TRC_MSG(GOEP_CLIENTABORT_ENTERING, "[GOEP] GOEP_ClientAbort.ClientApp=0X%x..GoepClientObexCons client=0x%x")
TRC_MSG(GOEP_TPCONNECT_ENTERING, "[GOEP] GOEP_TpConnect.ClientApp=0X%x..GoepClientObexCons=0X%x")
TRC_MSG(GOEP_TPDISCONNECT_ENTERING, "[GOEP] GOEP_TpDisonnect.ClientApp=0X%x..GoepClientObexCons=0x%x")
TRC_MSG(GOEP_CLIENTCONTINUE_ENTERING, "[GOEP] GOEP_ClientContinue.ClientApp=0X%x..GoepClientObexCons client=0x%x")
TRC_MSG(GOEP_CLIENT_QUEUEHEADER, "[GOEP]GOEP_ClientQueueHeader, type=%d, Len=%d........")
TRC_MSG(GOEP_OBCE_CONNECTED, "[GOEP] GoepClntCallback.CONNECTED..GoepClientObexCons=0X%x")
TRC_MSG(GOEP_OBCE_DISCONNECT, "[GOEP] GoepClntCallback.DISCONNECTED..GoepClientObexCons=0X%x")
TRC_MSG(GOEP_OBCE_ABORTED, "[GOEP]====GoepClntCallback con=0X%x get event: OBCE_ABORTED, reason=0X%x")
TRC_MSG(GOEP_CLIENT_BUILDHEADERS_FAILED, "[GOEP]ClientBuildHeaders failed!")
TRC_MSG(GOEP_CLIENTABORT_ALREADY_PENDING, "[GOEP] GOEP_ClientAbort...client->obc.client.status == OBRC_USER_ABORT, return PENDING")
TRC_MSG(GOEP_TPCONNECT_STATUS_BUSY, "[GOEP] GOEP_TpConnect OB_STATUS_BUSY!")
TRC_MSG(GOEP_TPCONNECT_ACTIVE, "[GOEP] GOEP_TpConnect client->flags & GOEF_ACTIVE!!!!")
TRC_MSG(GOEP_TPDISCONNECT_INUSE, "GOEP: GOEP_TpDisconnect inUse > 1. So cann't call OBEX_ClientTpDisconnect")
TRC_MSG(GOEP_TPDISCONNECT_STATUS, "[GOEP] OBEX_ClientTpDisconnect return status =%d ")
TRC_MSG(GOEP_CLIENT_QUEUEHEADER_LENTOOLARGE, "[GOEP]GOEP_ClientQueueHeader, Len=%d is too large! availible len = %d")
TRC_MSG(GOEP_WAITFOR_AUTH_REQ, "[GOEP] NotifyAllClients: Pending to wait for authenticate request")
TRC_MSG(GOEP_RECV_AUTH_CHAL, "[GOEP]NotifyCurrClient: Received GOEP_EVENT_AUTH_CHALLENGE")
TRC_MSG(GOEP_RECV_AUTH_RESP, "[GOEP] NotifyCurrClient: Received GOEP_EVENT_AUTH_RESPONSE")
TRC_MSG(GOEP_CLIENT_RELEASE_CONNID, "[GOEP]client ReleaseConnID: %d")
TRC_MSG(GOEP_SERVICE_RELEASE_CONNID, "[GOEP]service ReleaseConnID: %d")
TRC_MSG(GOEP_SERVICE_ALLOC_CONNID, "[GOEP]Service AllocateConnID: %d")
TRC_MSG(GOEP_CLIENT_ALLOC_CONNID, "[GOEP]client AllocateConnID: %d")
TRC_MSG(GOEP_CALL_RFCLOSECHANNEL, "[GOEP]: ====goep_disconnect_req_hdlr call  RF_CloseChannel... ")
TRC_MSG(GOEP_CALL_RFCLOSECHANNEL_FAILED, "[GOEP]:=== RF_CloseChannel return %d, failed! call goep_send_disconnect_ind_msg...")
TRC_MSG(GOEP_DISCONNECT_FLAG_SETUP, "[GOEP]: Setup the disconncting flag state:%d ")
TRC_MSG(GOEP_DEINIT_SERVER_FAILED, "[GOEP]===goep_deinit server failed: status %d")
TRC_MSG(GOEP_DEINIT_CLIENT_FAILED, "[GOEP]===goep_deinit client failed: status %d")
TRC_MSG(GOEP_IS_OPERATING, "[GOEP]GOEP_Disconnect: client->currOp.handler!=NULL, return BUSY!!")
TRC_MSG(GOEP_NO_ACTIVE_CONNECT, "[GOEP] !GOEF_ACTIVE, return OB_STATUS_NO_CONNECT")
TRC_MSG(GOEP_CLIENT_HANDLE_ERROR, "[GOEP] Client != client->currOp.handler(%d)")
TRC_MSG(GOEP_RFCOMM_OPENIND_ACCEPT, "[GOEP] RFCommOpenInd, Accept it!")
TRC_MSG(GOEP_SERVER_APP_CALLBACK, "[GOEP]--- GOEP Server call app callback with event=(%d)---")
TRC_MSG(GOEP_ENTER_SERVER_ABORT, "[GOEP]--- GOEP_ServerAbort...Server=0X%x, RespCode=0X%x ---")
TRC_MSG(GOEP_NOTIFY_ALLCLIENT, "[GOEP]NotifyAllClients: i=%d, client->profiles[i]->connState=%d")
TRC_MSG(GOEP_CLIENT_ABORTED, "[GOEP]NotifyCurrClient ABORTED: reason=%d,CurOper=%d, status=%d")

TRC_MSG(GOEP_ENTER_SERVER_ACCEPT, "[GOEP] GOEP_ServerAccept...Server=0X%x")
TRC_MSG(GOEP_PROCESS_NAME_HEADER, "[GOEP]GoepServerProcessHeaders:OBEXH_NAME,nameLen=%d,currLen=%d, remainLen=%d, b_truncate=%d")
TRC_MSG(GOEP_FIND_SAME_TARGETUUID, "[GOEP]=== Find SAME target UUID, i=(%d), uuid=(%d) ===")
TRC_MSG(GOEP_SAME_SERVICE_HAS_REQUESTED, "[GOEP]=== Not allow 2 SAME profile Client! ===")
TRC_MSG(GOEP_ENTER_SERVER_ACCEPT_NO_OBJECT, "[GOEP] GOEP_ServerAcceptNoObject...Server=0X%x")
TRC_MSG(GOEP_SERVER_TPDISCONNECT_RETURN, "[GOEP] GOEP_ServerTpDisconnect return status=(%d)")
TRC_MSG(GOEP_SERVERAUTH, "[GOEP] GOEP_ServerAuthenticate Server=0X%x, Resp=0X%x, Chall=0X%x")
TRC_MSG(GOEP_SERVER_VERIFYAUTHRESP, "[GOEP] GOEP_ServerVerifyAuthResponse Server=0X%x")
TRC_MSG(GOEP_SERVER_VERIFYAUTHRESP_RETURN, "[GOEP] GOEP_ServerVerifyAuthResponse return status=(%d)")
TRC_MSG(GOEP_SERVER_RECEIVE_AUTHCHAL_HEADER, "[GOEP]---GOEP Server received AUTH challenge header!")
TRC_MSG(GOEP_SERVER_QUEUEHEADER, "[GOEP]GOEP_ServerQueueHeader, type=%d, Len=%d........")
TRC_MSG(GOEP_ENTER_SERVER_CONTINUE, "[GOEP]GOEP_ServerContinue...Server=0X%x")
TRC_MSG(GOEP_SERVER_CONTINUE_FAILED, "[GOEP]GOEP_ServerContinue:handler=0x%x,oustandingResp=%d,event=(%d),oper=(%d)")
TRC_MSG(GOEP_SERVER_CONTINUE_BUILDHEADER_FAIL, "[GOEP] -- GOEP_ServerContinue: ServerBuildHeaders Error! --")
TRC_MSG(GOEP_CONNECT_NO_CHALLENGE, "[GOEP] GOEP_Connect..no GOEF_CHALLENGE .OB_STATUS_INVALID_PARM.")
TRC_MSG(GOEP_SERVER_AUTHORIZE_RES, "[GOEP] GOEP_ServerAuthorizeResponse server=0x%x, rsp_code=%d")
TRC_MSG(GOEP_INVALID_MSG, "[GOEP]goep_main INVALID msg: msg_id=%d, REGISTER_SERVER_REQ=%d, AUTHORIZE_RES=%d")
TRC_MSG(GOEP_CMCONNID_HAS_ALLOCED, "[GOEP] Service->cm_conn_id=(%d) has alloced before!")
TRC_MSG(GOEP_ALREADY_DISCONNECTING, "[GOEP] client is already CS_DISCONNECTING!")
TRC_MSG(GOEP_SDPIND_CLIENTAPP_ISNULL, "[GOEP]GOEP_ClientSDPSupportedFormatsInd, clientApp is NULL!===")

/* GOEP TRACE END */

/* OPP TRACE START */
/* OPP SERVER */
//GENERAL
TRC_MSG(BT_OPPS_CTX_CHECK, "[OPPS]")
TRC_MSG(BT_OPPS_MSG_CHECK_ERR, "[OPPS]")
TRC_MSG(BT_OPPS_ACTIVATE, "[OPPS] activate")

/* OPP CLIENT */
//GENERAL
TRC_MSG(BT_OPPC_DEINIT_API, "[OPPC] deinit")
TRC_MSG(BT_OPPC_INIT_API, "[OPPC] init api")
TRC_MSG(BT_OPPC_STATE_ERROR, "[OPPC] check error state:(%d)")
TRC_MSG(BT_OPPC_CTX_CHECK, "[OPPC] check :(%d)")
TRC_MSG(BT_OPPC_MSG_CHECK_ERR, "[OPPC] check :(%d)")
TRC_MSG(BT_OPPC_MAX_PACKET_SIZE, "[OPPC] max apcket size:(%d)")
//HANDLER
TRC_MSG(BT_OPPC_DISCONNECT_FEATURE, "[OPPC] ")
TRC_MSG(BT_OPPC_PULL_FEATURE, "[OPPC] pull_feature")
TRC_MSG(BT_OPPC_PULL_FEATURE_WRONG_STATE, "[OPPC] pull_feature")
TRC_MSG(BT_OPPC_PULL_FEATURE_WRONG_PARAM, "[OPPC] pull_feature")
TRC_MSG(BT_OPPC_CONNECT_CNF_HDL, "[OPPC] connect_cnf")
//INTERNAL
TRC_MSG(BT_OPPC_CONN_TERM, "[OPPC] conn_term")
TRC_MSG(BT_OPPC_CONN_SERVER, "[OPPC] conn server")
TRC_MSG(BT_OPPC_DISC_CLIENT, "[OPPC] disc_client idx:(%d)")
TRC_MSG(BT_OPPC_PUSH_RSP_FS_READ, "[OPPC] push_rs_fs_read")
TRC_MSG(BT_OPPC_SEND_FILE_OBJ_FS_OPEN, "[OPPC] send file fh:(%d)")
/* OPP TRACE END */

/* FTP TRACE START */
/* FTP Server */
/* FTP MMI trace state */
TRC_MSG(BT_FTPC_STATE_TRANSITION, "[FTPMMI_GOEP] state transition. (%d -> %d)")
TRC_MSG(BT_FTPC_STATE_ERROR, "[FTPMMI_GOEP] wrong state. (%d)")
TRC_MSG(BT_FTP_POPUP_HDLR, "[FTPMMI] mmi_bt_ftp_popup_hdlr(), behavior[%d]")
TRC_MSG(BT_FTPS_STATE_TRANSITION, "[FTPMMI_GOEP] state transition. index: %d , state:(%d -> %d)")
TRC_MSG(BT_FTPS_STATE_ERROR, "[FTPMMI_GOEP] wrong state. index: %d , state:(%d)")
TRC_MSG(BT_FTPS_INIT, "[FTPMMI_GOEP] mmi_bt_ftp_init()")
TRC_MSG(BT_FTPS_DEINIT, "[FTPMMI_GOEP] mmi_bt_ftp_deinit()")
TRC_MSG(BT_FTPS_EVENT_HDLR, "[FTPMMI_GOEP] mmi_bt_ftp_event_hdlr()")
TRC_MSG(BT_FTPS_ACTIVATE, "[FTPMMI_GOEP] mmi_bt_ftps_activate()")
TRC_MSG(BT_FTPS_DEACTIVATE, "[FTPMMI_GOEP] mmi_bt_ftps_deactivate()")
TRC_MSG(BT_FTPS_STATE, "[FTPMMI_GOEP] FTPS check state. index:(%d) , state:(%d)")
TRC_MSG(BT_FTPS_DISCONNECT_CLIENT, "[FTPMMI_GOEP] mmi_bt_ftps_disconnect_client()")
TRC_MSG(BT_FTPS_DISCONNECT_CLIENT_CHECK, "[FTPMMI_GOEP] mmi_bt_ftps_disconnect_client() state:(%d), context.g_conn_id:(%d), cm.g_conn_id(%d)")
TRC_MSG(BT_FTPS_SET_FOLDER_SCR_CALLBACK, "[FTPMMI_GOEP] mmi_bt_ftps_set_shared_fodler()")
TRC_MSG(BT_FTPS_AUTHORIZE_ACCEPT, "[FTPMMI_GOEP] mmi_bt_ftps_authorize_accept() check context index:(%d), state:(%d), cur_goep_conn_id:(%d)")
TRC_MSG(BT_FTPS_AUTHORIZE_REJECT, "[FTPMMI_GOEP] mmi_bt_ftps_authorize_reject() check context index:(%d), state:(%d), cur_goep_conn_id:(%d)")
TRC_MSG(BT_FTPS_AUTHORIZE_DEL_CB, "[FTPMMI_GOEP] mmi_bt_ftps_authorize_confirm_del_cb() check context index:(%d), state:(%d), cur_goep_conn_id:(%d)")
TRC_MSG(BT_FTPS_GET_DEV_NAME, "[FTPMMI_GOEP] mmi_bt_ftps_get_dev_name() check context index:(%d), cur_goep_conn_id:(%d)")
TRC_MSG(BT_FTPS_ICON_STOP_TIMER, "[FTPMMI_GOEP] mmi_bt_ftps_stop_icon_timer_expire_hdler()")
TRC_MSG(BT_FTPS_DISCONN_IND_HDLR_FIND_INDEX_FAILED_ONLY_FTPS, "[FTPMMI_GOEP] mmi_bt_ftp_disconnect_ind_hdlr()-- only open FTS: find index failed")
TRC_MSG(BT_FTPS_DISCONN_IND_HDLR_FIND_INDEX_FAILED_ONLY_FTPC, "[FTPMMI_GOEP] mmi_bt_ftp_disconnect_ind_hdlr()-- only open FTC: find index failed")
//TRC_MSG(BT_FTPS_CNTX_INIT, "[FTPMMI_GOEP] mmi_bt_ftps_cntx_init()")
TRC_MSG(BT_FTPS_CNTX_INIT_FS_OPEN, "[FTPMMI_GOEP] mmi_bt_ftps_cntx_init(), folder path init FS_OPEN(%d)")
TRC_MSG(BT_FTPS_CNTX_INIT_FS_READ, "[FTPMMI_GOEP] mmi_bt_ftps_cntx_init(), folder path init read root folder FS_READ(%d)")
TRC_MSG(BT_FTPS_WRITE_OBJ, "[FTPMMI_GOEP] mmi_bt_ftps_write_obj(), push_ind->pkt_type(%d)")
TRC_MSG(BT_FTPS_WRITE_OBJ_PATH_ERROR, "[FTPMMI_GOEP] mmi_bt_ftps_write_obj() -- path error")
TRC_MSG(BT_FTPS_WRITE_OBJ_OPEN, "[FTPMMI_GOEP] mmi_bt_ftps_write_obj(), file open FS_OPEN(%d)")
TRC_MSG(BT_FTPS_WRITE_OBJ_WRITE, "[FTPMMI_GOEP] mmi_bt_ftps_write_obj(), file write FS_WRITE(%d)")
TRC_MSG(BT_FTPS_GEN_DUP_OBJ_NAME, "[FTPMMI_GOEP] mmi_bt_ftps_gen_dup_name()")
TRC_MSG(BT_FTPS_PUSH_OBJ, "[FTPMMI_GOEP] mmi_bt_ftps_push_obj()")
TRC_MSG(BT_FTPS_PUSH_OBJ_CHECK_FOLDER, "[FTPMMI_GOEP] mmi_bt_ftps_push_obj(), check folder FS_OPEN(%d)")
TRC_MSG(BT_FTPS_PUSH_OBJ_ERR_GOTO, "[FTPMMI_GOEP] mmi_bt_ftps_push_obj() -- ERR GOTO")
TRC_MSG(BT_FTPS_PUSH_DELETE, "[FTPMMI_GOEP] mmi_bt_ftps_push_delete()")
TRC_MSG(BT_FTPS_PUSH_DELETE_INVALID_NAME, "[FTPMMI_GOEP] mmi_bt_ftps_push_delete() -- invalid name")
TRC_MSG(BT_FTPS_PUSH_DELETE_WITHOUT_NAME, "[FTPMMI_GOEP] mmi_bt_ftps_push_delete() -- without name")
TRC_MSG(BT_FTPS_PUSH_DELETE_FILE, "[FTPMMI_GOEP] mmi_bt_ftps_push_delete() -- delete file FS_XDelete(%d)")
TRC_MSG(BT_FTPS_PUSH_DELETE_FOLDER, "[FTPMMI_GOEP] mmi_bt_ftps_push_delete() -- delete folder FS_RemoveDir(%d)")
TRC_MSG(BT_FTPS_PUSH_CONTINUE, "[FTPMMI_GOEP] mmi_bt_ftps_write_obj_continue(), push_ind->pkt_type(%d)")
TRC_MSG(BT_FTPS_PUSH_CONTINUE_WRITE, "[FTPMMI_GOEP] mmi_bt_ftps_write_obj_continue(), file write FS_WRITE(%d)")
TRC_MSG(BT_FTPS_PUSH_INBUF_CONTINUE, "[FTPMMI_GOEP] mmi_bt_ftps_inbuf_write_obj_continue()")
TRC_MSG(BT_FTPS_PUSH_INBUF_CONTINUE_WRITE, "[FTPMMI_GOEP] mmi_bt_ftps_inbuf_write_obj_continue(), file write FS_WRITE(%d)")
TRC_MSG(BT_FTPS_CREATE_FOLDER, "[FTPMMI_GOEP] mmi_bt_ftps_create_folder(), goep_conn_id(%d)")
TRC_MSG(BT_FTPS_CREATE_FOLDER_CREATE_DIR, "[FTPMMI_GOEP] mmi_bt_ftps_create_folder(), FS_CreateDir(%d)")
TRC_MSG(BT_FTPS_SET_FOLDER, "[FTPMMI_GOEP] mmi_bt_ftps_set_folder(), goep_conn_id(%d)")
TRC_MSG(BT_FTPS_SET_PARENT_FOLDER, "[FTPMMI_GOEP] mmi_bt_ftps_set_parent_folder(), goep_conn_id(%d)")
TRC_MSG(BT_FTPS_PULL_CONTINUE, "[FTPMMI_GOEP] mmi_bt_ftps_pull_continue(), goep_conn_id(%d)")
TRC_MSG(BT_FTPS_SEND_OBJ, "[FTPMMI_GOEP] mmi_bt_ftps_send_obj(), goep_conn_id(%d)")
TRC_MSG(BT_FTPS_SEND_FOLDER_CONTENT, "[FTPMMI_GOEP] mmi_bt_ftps_send_folder_content(), goep_conn_id(%d)")
TRC_MSG(BT_FTPS_SEND_FOLDER_CONTENT_OPEN_ERROR, "[FTPMMI_GOEP] mmi_bt_ftps_send_folder_content() -- open folder content file error ")
TRC_MSG(BT_FTPS_FIND_GOEP_ID_FAILED, "[FTPMMI_GOEP] mmi_bt_ftps_find_goep_id() -- failed, server->goep_conn_id:(%d), find->goep_conn_id:(%d)")
TRC_MSG(BT_FTPS_SDP_DEREGISTER_CNF_HDLR, "[FTPMMI_GOEP] mmi_bt_ftps_sdp_deregister_cnf_hdlr(), state(%d)")
TRC_MSG(BT_FTPS_REGISTER_SERVER_CNF_HDLR, "[FTPMMI_GOEP] mmi_bt_ftps_register_server_rsp_hdlr(), state(%d)")
TRC_MSG(BT_FTPS_DEREGISTER_SERVER_CNF_HDLR, "[FTPMMI_GOEP] mmi_bt_ftps_deregister_server_rsp_hdlr(), state(%d)")
TRC_MSG(BT_FTPS_CONNECT_IND_HDLR, "[FTPMMI_GOEP] mmi_bt_ftps_connect_ind_hdlr(), state(%d)")
TRC_MSG(BT_FTPS_PUSH_IND_HDLR, "[FTPMMI_GOEP] mmi_bt_ftps_push_ind_hdlr(), state(%d)")
TRC_MSG(BT_FTPS_PULL_IND_HDLR, "[FTPMMI_GOEP] mmi_bt_ftps_pull_ind_hdlr(), state(%d), ind->pkt_type:(%d)")
TRC_MSG(BT_FTPS_PULL_IND_HDLR_CONTINUE_WRITE_FOLDER, "[FTPMMI_GOEP] mmi_bt_ftps_pull_ind_hdlr() -- continue write, state(%d)")
TRC_MSG(BT_FTPS_PULL_IND_HDLR_CONTINUE_WRITE_FOLDER_FS_ERROR, "[FTPMMI_GOEP] mmi_bt_ftps_pull_ind_hdlr() -- gen folder error, ret(%d)")
TRC_MSG(BT_FTPS_SET_FOLDER_IND_HDLR, "[FTPMMI_GOEP] mmi_bt_ftps_set_folder_ind_hdlr(), state(%d), ind->setpath_flag:(%d)")
TRC_MSG(BT_FTPS_ABORT_IND_HDLR, "[FTPMMI_GOEP] mmi_bt_ftps_abort_ind_hdlr(), state(%d)")
TRC_MSG(BT_FTPS_AUTHORIZE_IND_HDLR, "[FTPMMI_GOEP] mmi_bt_ftps_authorize_ind_hdlr(), state(%d)")
TRC_MSG(BT_FTPS_SET_FS_FLAG, "[FTPMMI_GOEP] mmi_bt_ftps_set_fs_flag() = %d")
TRC_MSG(BT_FTPS_READ_FS_FLAG, "[FTPMMI_GOEP] mmi_bt_ftps_read_fs_flag_and_popup()")
TRC_MSG(BT_FTPS_PUSH_DEL_CBK, "[FTPMMI_GOEP] mmi_bt_ftps_push_delete_call_back() state(%d), DEL result:(%d)")
TRC_MSG(BT_FTPS_USB_PLUG_IN, "[FTPMMI_GOEP] mmi_bt_ftps_usb_plugin_hdle()")
TRC_MSG(BT_FTPS_AUTH_SCR_HDLR, "[FTPMMI] mmi_bt_ftps_auth_scr_hdlr(), behavior[%d]")
TRC_MSG(BT_FTPS_CNTX_INIT, "[FTPS] bt_ftps_cntx_init()")
TRC_MSG(BT_FTPS_WORK_FOLDER_INIT, "[FTPS] bt_ftps_work_folder_init()")
TRC_MSG(BT_FTP_UTIL_DELETE_FILE, "[FTP] delete file:(%s)")
TRC_MSG(BT_FTPS_WRITER_FLUSH_BUFFER_FAIL, "[FTPS][WRN] write data to file ret:%d")
TRC_MSG(BT_FTPS_WRITER_FLUSH_NEWDATA_FAIL, "[FTPS][WRN] wriet data to file ret:%d")
//TRC_MSG(BT_FTPS_GEN_FOLDER_PARAM, "[FTPS] gen_folder_content root:(%d) path:(%s) output:(%s) max:(%d)")
TRC_MSG(BT_FTPS_UTIL_OPEN_FILE_FAIL, "[FTPS][ERR] open file fail fh:(%d)")
TRC_MSG(BT_FTPS_INIT_NBUFFER_DISABLE, "[FTPS] nbuffer_isInit false. disable it. set:(%d)")
TRC_MSG(BT_FTPS_GEN_FOLDER_PARAM, "[FTPS] gen_folder_content root:(%d) path:(%s) output:(%s) max:(%d)")
TRC_MSG(BT_FTPS_GEN_FOLDER_PARAM_CHECK_FAIL, "[FTPS][WRN] gen_folder folderpath is 0(%d) xmlFilepath is 0(%d)")
TRC_MSG(BT_FTPS_GEN_FOLDER_FINDFIRST_FAIL, "[FTPS][WRN] gen_folder fail to browse folder")
TRC_MSG(BT_FTPS_GEN_FOLDER_ADD_EXTRA_OBJECT, "[FTPS] add extra object to xml file num:(%d)")
TRC_MSG(BT_FTPC_CLOSE_RECV_FILE, "[FTPC] close recv file handle")
TRC_MSG(BT_FTPC_OPEN_FILE_FAIL, "[FTPC][WRN] fail to open file fh:(%d)")
TRC_MSG(BT_FTPC_GET_FILESIZE_FAIL, "[FTPC][WRN] fail to get file size:(%d)")
TRC_MSG(BT_FTPC_CLOSE_PUSH_FILE, "[FTPC] close push file handle")
TRC_MSG(BT_FTPC_ACTION_DELETE_FOLDER, "[FTPC] delete_folder_routine delete folder name:(%s)")
TRC_MSG(BT_FTPC_ACTION_CREATE_FOLDER, "[FTPC] create_folder_routine create folder name:(%s)")
TRC_MSG(BT_FTPC_ACTION_PUSH_FILE, "[FTPC] start_push_a_file filename state:(%d)")
TRC_MSG(BT_FTPC_ACTION_PUSH_FILE_FAIL, "[FTPC][WRN] start_push_a_file wrong state")
TRC_MSG(BT_FTPC_ACTION_PUSH_FILE_CHECKSIZE_FAIL, "[FTPC][WRN] start_push_a_file filename too long")
TRC_MSG(BT_FTPC_ACTION_PUSH_FILE_GETFILENAME_FAIL, "[FTPC][WRN] start_push_a_file filename too long")
TRC_MSG(BT_FTPC_PUSH_FILE_HDL, "[FTPC] start_push_a_file filename rsp_code:(%d) state:(%d) fh:(%d)")
TRC_MSG(BT_FTPC_FILE_STATE_CHECK, "[FTPC][WRN] file-state:(%d) total:(%d) reamin:(%d) fh:(%d)")

/* FTP Client */
TRC_MSG(BT_FTPC_TARGET_FILEPATH, "[FTPC] target filepath:(%s)")
TRC_MSG(BT_FTPC_TARGET_FILENAME, "[FTPC] target filename:(%s)")
TRC_MSG(BT_FTPC_TARGET_FOLDERPATH, "[FTPC] target folderpath:(%s)")
TRC_MSG(BT_FTPC_UTIL_OPEN_FILE_FAIL, "[FTPC][ERR] open file fail fh:(%d)")
TRC_MSG(BT_FTPC_DEL_RECV_FILE, "[FTPC] delete receive file:(%s)")
TRC_MSG(BT_FTPC_ACTION_PUSH_FILE_DONE, "[FTPC] push_file done")
TRC_MSG(BT_FTPC_PUSH_CNF_HDLR, "[FTPC] push_cnf rsp_code:(%d) state:(%d) abort:(%d)")
TRC_MSG(BT_FTPC_TARGET_FOLDERPATH_NO_RESOURCE, "[FTPC][ERR] NO ENOUGH SPACE to save filepath")
// API
TRC_MSG(BT_FTPC_CONNECT_SERVER, "[FTPC] bt_ftpc_connect_server()")
TRC_MSG(BT_FTPC_CONNECT_SERVER_CHECK, "[FTPC] bt_ftpc_connect_server() check context index:(%d), state:(%d), lap:(%d), uap:(%d), nap:(%d)")
TRC_MSG(BT_FTPC_BACK_FOLDER, "[FTPC] bt_ftpc_back_folder() state:(%d), goep_conn_id:(%d)")
TRC_MSG(BT_FTPC_ROOT_FOLDER, "[FTPC] bt_ftpc_root_folder() state:(%d), goep_conn_id:(%d)")
TRC_MSG(BT_FTPC_CHANGE_FOLDER, "[FTPC] bt_ftpc_change_folder() state:(%d), goep_conn_id:(%d)")
TRC_MSG(BT_FTPC_CHANGE_FOLDER_FORWARD, "[FTPC] bt_ftpc_change_folder(): Forward Folder")
TRC_MSG(BT_FTPC_CHANGE_FOLDER_BACK, "[FTPC] bt_ftpc_change_folder(): Back Folder")
TRC_MSG(BT_FTPC_CHANGE_FOLDER_REFRESH, "[FTPC] bt_ftpc_change_folder(): Refresh Folder")
TRC_MSG(BT_FTPC_GET_FILE_OBJ, "[FTPC] bt_ftpc_get_file_obj() FTPC check state. state:(%d)")
// INTERNAL
TRC_MSG(BT_FTPC_IS_RUN, "[FTPC] bt_ftpc_is_run() FTPC check state. state:(%d)")
TRC_MSG(BT_FTPC_IS_CANCELING, "[FTPC] bt_ftpc_is_canceling() FTPC check state. state:(%d) abort-flag:(%d)")
TRC_MSG(BT_FTPC_IS_ABORTING, "[FTPC] bt_ftpc_is_aborting() FTPC check state. state:(%d) abort-flag:(%d)")
TRC_MSG(BT_FTPC_CONNECTION_TERMINATED, "[FTPC] bt_ftpc_connection_terminated()")
TRC_MSG(BT_FTPC_WORK_FOLDER_INIT, "[FTPC] bt_ftp_work_folder_init()")
TRC_MSG(BT_FTPC_WORK_FOLDER_INIT_OPEN_NO_ERROR, "[FTPC] bt_ftp_work_folder_init() open no error")
TRC_MSG(BT_FTPC_WORK_FOLDER_INIT_OPEN_ERROR, "[FTPC] bt_ftp_work_folder_init() open error")
TRC_MSG(BT_FTPC_DISCONNECT_IND_HDLR, "[FTPC] bt_ftp_disconnect_ind_hdlr() client->goep_id:(%d), client->req_id:(%d), client->state:(%d)")
TRC_MSG(BT_FTPS_DISCONNECT_IND_HDLR, "[FTPS] bt_ftp_disconnect_ind_hdlr() ind->goep_id:(%d), ind->req_id:(%d), server->goep_id:(%d), server->state:(%d) ")
//TRC_MSG(BT_FTPC_DISCONNECT_IND_HDLR, "[FTPC] bt_ftp_disconnect_ind_hdlr() ind->goep_id:(%d), ind->req_id:(%d), client->goep_id:(%d), client->req_id:(%d), client->state:(%d)")
TRC_MSG(BT_FTPC_DISCONNECT_IND_HDLR_FIND_INDEX_FAILED, "[FTPC] bt_ftp_disconnect_ind_hdlr()-- all open FTS and FTC:find index failed")
TRC_MSG(BT_FTPC_DISCONN_IND_HDLR_FIND_INDEX_FAILED_CONN_CACEL, "[FTPC] bt_ftp_disconnect_ind_hdlr()-- client connect cacel case: find index failed")
// HDLR/MSG
TRC_MSG(BT_FTPC_UNKNOW_MSG_HDLR, "[FTPC][ERR] Unhandle msg-id:(%d)")
TRC_MSG(BT_FTPC_CONNECT_CANCEL, "[FTPC] bt_ftpc_connect_cancel() FTPC check state. state:(%d)")
TRC_MSG(BT_FTPC_SEND_DISCONNECT_MSG, "[FTPC] bt_ftpc_send_disconnect() FTPC check state. state:(%d)")
TRC_MSG(BT_FTPC_SEND_ABORT_MSG, "[FTPC] send abort message ")
TRC_MSG(BT_FTPC_CNTX_INIT, "[FTPC] btmtk_ftpc_client_enable()")
TRC_MSG(BT_FTPC_CNTX_INIT_WRN, "[FTPC] btmtk_ftpc_client_enable() has enabled")
TRC_MSG(BT_FTPC_CNTX_DEINIT, "[FTPC] btmtk_ftpc_client_disable()")
TRC_MSG(BT_FTPC_CNTX_DEINIT_WRN, "[FTPC] btmtk_ftpc_client_disable() has disabled")
TRC_MSG(BT_FTPC_RECEIVED_FOLDER_INIT_OPEN, "[FTPC] bt_ftpc_received_folder_init() FS_Open(%d)")
TRC_MSG(BT_FTPC_RECEIVED_FOLDER_INIT_CREATE, "[FTPC] bt_ftpc_received_folder_init() FS_CreateDir(%d)")
TRC_MSG(BT_FTPC_FIND_GOEP_ID_FAILED, "[FTPC] bt_ftpc_find_goep_id() -- failed, client->goep_conn_id:(%d), find->goep_conn_id:(%d)")
TRC_MSG(BT_FTPC_WRITE_OBJ, "[FTPC] bt_ftpc_write_obj(), rsp->pkt_type(%d) rsp->frag_len(%d)")
TRC_MSG(BT_FTPC_WRITE_OBJ_OPEN, "[FTPC] bt_ftpc_write_obj(), file open FS_OPEN(%d)")
TRC_MSG(BT_FTPC_WRITE_OBJ_WRITE, "[FTPC] bt_ftpc_write_obj(), file write FS_WRITE(%d)")
TRC_MSG(BT_FTPC_WRITE_OBJ_CONTINUE, "[FTPC] bt_ftpc_write_obj_continue(), rsp->pkt_type(%d) rsp->frag_len(%d)")
TRC_MSG(BT_FTPC_WRITE_OBJ_CONTINUE_WRITE, "[FTPC] bt_ftpc_write_obj_continue(), file write FS_WRITE(%d)")
TRC_MSG(BT_FTPC_GET_FOLDER, "[FTPC] bt_ftpc_get_folder(), rsp->rsp_code(%d), rsp->pkt_type(%d), rsp->to_self(%d)")
TRC_MSG(BT_FTPC_GET_FOLDER_PARSE_RESUME, "[FTPC] bt_ftpc_get_folder() -- parse resume, entity of cur folder:(%d), parsed cnt of cur folder:(%d)")
TRC_MSG(BT_FTPC_GET_FOLDER_PARSE_DONE, "[FTPC] bt_ftpc_get_folder() -- parse done(goto), parse_return:(%d), entity of cur folder:(%d), parsed cnt of cur folder:(%d)")
TRC_MSG(BT_FTPC_GET_FOLDER_CONTINUE_PARSE, "[FTPC] bt_ftpc_get_folder() -- continue parse(goto) send pull_rsp to self")
TRC_MSG(BT_FTPC_GET_FOLDER_OPEN, "[FTPC] bt_ftpc_write_obj(), file open FS_OPEN(%d)")
TRC_MSG(BT_FTPC_GET_FOLDER_WRITE, "[FTPC] bt_ftpc_write_obj(), file write fh:(%d) FS_WRITE(%d)")
TRC_MSG(BT_FTPC_GET_OBJ, "[FTPC] bt_ftpc_get_obj(), rsp->rsp_code(%d), rsp->pkt_type(%d)")
TRC_MSG(BT_FTPC_PARSE_FOLDER_CONTENT, "[FTPC] bt_ftpc_parse_folder_content()")
TRC_MSG(BT_FTPC_PARSE_FOLDER_CONTENT_PAUSE, "[FTPC] bt_ftpc_parse_folder_content() -- parsing pause!!, entity of cur folder:(%d)")
TRC_MSG(BT_FTPC_FOLDER_LISTING_START_EL, "[FTPC] bt_ftpc_folder_listing_startElement() -- parsing pause!!, entity of cur folder:(%d)")
TRC_MSG(BT_FTPC_GET_FOLDER_CONTENT, "[FTPC] bt_ftpc_get_folder_content(), state:(%d), goep_conn_id:(%d)")
TRC_MSG(BT_FTPC_CONNECT_CNF_HDLR, "[FTPC] bt_ftpc_connect_rsp_hdlr(), rsp_code:(%d) state:(%d)")
TRC_MSG(BT_FTPC_PULL_CNF_HDLR, "[FTPC] bt_ftpc_pull_rsp_hdlr(), state:(%d) abort:(%d)")
TRC_MSG(BT_FTPC_SET_FOLDER_CNF_HDLR, "[FTPC] bt_ftpc_set_folder_rsp_hdlr(), state:(%d)")
TRC_MSG(BT_FTPC_ABORT_CNF_HDLR, "[FTPC] bt_ftpc_abort_rsp_hdlr(), state:(%d)")
TRC_MSG(BT_FTPS_CONNECTION_TERMINATED, "[FTPS] bt_ftp_connection_terminated(), server/client role:(%d)")
TRC_MSG(BT_FTPC_CHECK_FOLDER_EXISTED, "[FTPC] bt_ftp_check_folder_existed(), path:(%s)")
TRC_MSG(BT_FTPC_CHECK_FOLDER_EXISTED_ERROR, "[FTPC] bt_ftp_check_folder_existed(), return(%d)")
TRC_MSG(BT_FTPC_DELETE_FILE, "[FTPC] bt_ftp_delete_file()")
TRC_MSG(BT_FTPC_GET_LIST, "[FTPMMI_SCR] bt_ftpc_get_list_files()")
TRC_MSG(BT_FTPC_GET_RECV_CALL_BACK, "[FTPMMI_SCR] bt_ftpc_get_recv_drv_callback() uuid=0x%x,drv=%d,selected=%d")
TRC_MSG(BT_FTPC_GET_ALL, "[FTPMMI_SCR] bt_ftpc_get_all_files()")
TRC_MSG(BT_FTPC_FIND_NEXT_FILE, "[FTPMMI_SCR] bt_ftpc_find_next_file()")
TRC_MSG(BT_FTPC_CHECK_LIST, "[FTPMMI_SCR] bt_ftpc_check_list()")
TRC_MSG(BT_FTPC_FREE_LIST, "[FTPMMI_SCR] bt_ftpc_free_list()")
TRC_MSG(BT_FTPC_GET_NEXT_FILE, "[FTPMMI_SCR] bt_ftpc_get_next_file()")
TRC_MSG(BT_FTPC_RESET_PULL_VAR, "[FTPMMI_SCR] bt_ftpc_reset_pull_variable()")
TRC_MSG(BT_FTPC_PARSE_EL_START_ERR, "[FTPC] bt_ftpc_folder_listing_startElement() -- parser error and stopped.")
TRC_MSG(BT_FTPC_PARSE_EL_END_ERR, "[FTPC] bt_ftpc_folder_listing_endElement() -- parser error and stopped.")
TRC_MSG(BT_FTPC_RENAME_OBJ, "[FTPMMI_SCR] bt_ftpc_rename_recved_obj().")
TRC_MSG(BT_FTPC_ABORTED_HDL, "[FTPC] bt_ftpc_receiving_aborted_hdlr().")
TRC_MSG(BT_FTPC_DEL_TMP_FILE, "[FTPC] bt_ftpc_delete_pulling_file().")
TRC_MSG(BT_FTPC_SET_FLAG_ABORT_REQ_SENT, "[FTPC] bt_ftpc_set_abort_req_sent_flag().")
TRC_MSG(BT_FTPC_RESET_FLAG_ABORT_REQ_SENT, "[FTPC] bt_ftpc_reset_abort_req_sent_flag().")
TRC_MSG(BT_FTPC_BROWSE_FILES_TIMER_TIMEOUT_FAILED_HDLR, "[FTPC] bt_ftpc_browse_files_failed_timer_expire_hdler().")
TRC_MSG(BT_FTPC_PARSE_FOLDER_CONTENT_FS_OPEN, "[FTPC] bt_ftpc_parse_folder_content().  parsed file FS_OPEN(%d)")
TRC_MSG(BT_FTPC_PARSE_FOLDER_CONTENT_FS_OPEN_LNAME_FILE, "[FTPC] bt_ftpc_parse_folder_content().  long file name file FS_OPEN(%d)")
//TRC_MSG(BT_FTPC_WRITE_BUF2FILE_FS_WRITE, "[FTPC] bt_ftp_write_buf2file().   FS_WRITE(%d)")
//TRC_MSG(BT_FTPC_READ_FS_FLAG, "[FTPC] bt_ftpc_read_fs_flag_and_popup(). ")
TRC_MSG(BT_FTPC_SET_FS_FLAG, "[FTPC] bt_ftpc_set_fs_flag(). = %d ")
//TRC_MSG(BT_FTPC_ADD_HISTORY_BEFORE_CM, "[FTPC] bt_ftp_add_history_before_cm_marker(). ")
//TRC_MSG(BT_FTPC_INTBUF_WRITE_OBJ_CONTINUE, "[FTPC] bt_ftpc_intbuf_write_obj_continue()")
//TRC_MSG(BT_FTPC_INTBUF_WRITE_OBJ_CONTINUE_WRITE,"[FTPC] bt_ftpc_intbuf_write_obj_continue(), file write FS_WRITE(%d)")
//TRC_MSG(BT_FTPC_USB_PLUG_IN,"[FTPC] bt_ftpc_usb_plugin_hdle()")
TRC_MSG(BT_FTPC_MAKE_RECV_PATH, "[FTPMMI_SCR] bt_ftpc_make_recv_path()")
TRC_MSG(BT_FTPC_WRITE_LNAME2FILE, "[FTPC] bt_ftpc_write_lname2file()")
TRC_MSG(BT_FTPC_WRITE_LNAME2FILE_FS_OPEN, "[FTPC] bt_ftpc_write_lname2file() FS_OPEN(%d)")
TRC_MSG(BT_FTPC_WRITE_LNAME2FILE_FS_SEEK, "[FTPC] bt_ftpc_write_lname2file() FS_SEEK(%d)")
TRC_MSG(BT_FTPC_WRITE_LNAME2FILE_FS_WRITE, "[FTPC] bt_ftpc_write_lname2file() FS_WRITE(%d)")
TRC_MSG(BT_FTPC_READ_LNAME, "[FTPC] bt_ftpc_read_lname()")
TRC_MSG(BT_FTPC_READ_LNAME_FS_OPEN, "[FTPC] bt_ftpc_read_lname() FS_OPEN(%d)")
TRC_MSG(BT_FTPC_READ_LNAME_FS_SEEK, "[FTPC] bt_ftpc_read_lname() FS_SEEK(%d)")
TRC_MSG(BT_FTPC_READ_LNAME_FS_READ, "[FTPC] bt_ftpc_read_lname() FS_READ(%d)")
TRC_MSG(BT_FTPC_DISCONNECT_CLIENT_CHECK, "[FTPC] bt_ftpc_disconnect_server() state:(%d), context.g_conn_id:(%d), cm.g_conn_id(%d)")
/* FTP TRACE END */

/* HID TRACE START */
TRC_MSG(BT_HIDD_ADP_STATUS, "[HID ADP] hidd status: hidd_state=%d, hidd_active=%d, num_intr_queue=%d, intrTx=%d")
TRC_MSG(BT_HIDD_ADP_STATE_CHANGE_IND, "[HID ADP] hidd state change: %d --> %d")
TRC_MSG(BT_HIDD_ADP_START_TIMER, "[HID ADP] start timer, timer_id=%d, timer_duration=%d")
TRC_MSG(BT_HIDD_ADP_STOP_TIMER, "[HID ADP] stop timer, timer_id=%d")
TRC_MSG(BT_HIDD_ADP_SEND_MOUSE_COMMAND, "[HID ADP] send mouse cmd, cmd:0x%02x 0x%02x")
TRC_MSG(BT_HIDD_ADP_SEND_KBD_COMMAND, "[HID ADP] send kbd cmd, cmd:0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x")
TRC_MSG(BT_HIDD_ADP_SEND_COMPLETE_STATUS, "[HID ADP] Interrupt complete status, status = %d, intrTx = %d")
TRC_MSG(BT_HIDD_ADP_SEND_STATUS, "[HID ADP] Interrupt complete status, status = %d")
TRC_MSG(BT_HIDD_ADP_TRANSATION_COMPLETE, "[HID ADP] Transation complete status, status = %d, transation type = %d")
TRC_MSG(INTERRUPT_COMPLETE_FAILED, "[HID ADP] Interrupt complete failed")
TRC_MSG(CONNECTION_OPENED, "[HID ADP] Connection opened")
TRC_MSG(HID_SENDING_SET_PROTOCOL_RESPONSE, "[HID ADP] HID Sending Set Protocol Response...")
TRC_MSG(CONTROL_FUNCTION_RECEIVED_SUSPEND, "[HID ADP] Control Function Received: SUSPEND")
TRC_MSG(HID_SENDING_INTERRUPT, "[HID ADP] HID Sending Interrupt...")
TRC_MSG(INTERRUPT_RECEIVED, "[HID ADP] Interrupt Received:")
TRC_MSG(CONTROL_FUNCTION_RECEIVED_SOFT_RESET, "[HID ADP] Control Function Received: SOFT RESET")
TRC_MSG(SET_PROTOCOL_PROTOCOL__x02X, "[HID ADP] Set Protocol, Protocol = %02X")
TRC_MSG(HID_SENDING_GET_PROTOCOL_RESPONSE, "[HID ADP] HID Sending Get Protocol Response...")
TRC_MSG(SET_REPORT_REPORT_DATA_LEN__xD, "[HID ADP] Set Report, Report data len = %d:")
TRC_MSG(OPEN_REQUEST_RECEIVED, "[HID ADP] Open request received")
TRC_MSG(INTRPOOL_IS_EMPRY, "intrPool is empry")
TRC_MSG(HID_CHANNEL_COULD_NOT_SEND_SET_IDLE_RATE_RESPONSE_REASON_x02X, "[HID ADP] HID Channel could not send Set Idle Rate Response, reason: %02x")
TRC_MSG(CONTROL, "[HID ADP] Control:")
TRC_MSG(CONTROL_FUNCTION_RECEIVED_HARD_RESET, "[HID ADP] Control Function Received: HARD RESET")
TRC_MSG(HID_CHANNEL_COULD_NOT_SEND_GET_REPORT_RESPONSE_REASON_x02X, "[HID ADP] HID Channel could not send Get Report Response, reason: %02x")
TRC_MSG(TRANSACTION_RECEIVED, "[HID ADP] Transaction Received:")
TRC_MSG(TRANSACTION_COMPLETE_STATUS__x0X2, "[HID ADP] Transaction complete, status = %0x2")
TRC_MSG(CONTROL_FUNCTION_RECEIVED_NOP, "[HID ADP] Control Function Received: NOP")
TRC_MSG(HID_SENDING_SET_REPORT_RESPONSE, "[HID ADP] HID Sending Set Report Response...")
TRC_MSG(INTERRUPT_COMPLETE, "[HID ADP] Interrupt complete successfully")
TRC_MSG(HID_CHANNEL_COULD_NOT_SEND_GET_IDLE_RATE_RESPONSE_REASON_x02X, "[HID ADP] HID Channel could not send Get Idle Rate Response, reason: %02x")
TRC_MSG(GET_PROTOCOL, "[HID ADP] Get Protocol:")
TRC_MSG(SET_IDLE_IDLE_RATE__xD, "[HID ADP] Set Idle, Idle Rate = %d:")
TRC_MSG(HID_CHANNEL_COULD_NOT_SEND_SET_REPORT_RESPONSE_REASON_x02X, "[HID ADP] HID Channel could not send Set Report Response, reason: %02x")
TRC_MSG(HID_CHANNEL_COULD_NOT_SEND_SET_PROTOCOL_RESPONSE_REASON_x02X, "[HID ADP] HID Channel could not send Set Protocol Response, reason: %02X")
TRC_MSG(COULD_NOT_ACCEPT_THE_INCOMING_CONNECTION, "[HID ADP] Could Not accept the incoming connection, status: %d")
TRC_MSG(CONTROL_FUNCTION_RECEIVED_VIRTUAL_CABLE_UNPLUG, "[HID ADP] Control Function Received: VIRTUAL CABLE UNPLUG")
TRC_MSG(UNKNOWN_CONTROL_FUNCTION, "[HID ADP] Unknown Control Function")
TRC_MSG(HID_SENDING_GET_IDLE_RATE_RESPONSE, "[HID ADP] HID Sending Get Idle Rate Response...")
TRC_MSG(CLOSE_INDICATION_RECEIVED, "[HID ADP] Close indication received")
TRC_MSG(HID_SENDING_GET_REPORT_RESPONSE, "[HID ADP] HID Sending Get Report Response...")
TRC_MSG(GET_IDLE, "[HID ADP] Get Idle:")
TRC_MSG(CONTROL_FUNCTION_RECEIVED_EXIT_SUSPEND, "[HID ADP] Control Function Received: EXIT SUSPEND")
TRC_MSG(GET_REPORT, "[HID ADP] Get Report:")
TRC_MSG(CONNECTION_CLOSED, "[HID ADP] Connection closed")
TRC_MSG(HID_CHANNEL_COULD_NOT_SEND_GET_PROTOCOL_RESPONSE_REASON_x02X, "[HID ADP] HID Channel could not send Get Protocol Response, reason: %02x")
TRC_MSG(HID_SENDING_SET_IDLE_RATE_RESPONSE, "[HID ADP] Sending Set Idle Rate Response...")
TRC_MSG(HID_CHANNELx08X, "[HID] L2CAP callback channel:%08x")
TRC_MSG(HIDSTATEOPEN1_PKT_RETURNED_WITH_TRANS_TYPExD, "[HID] HidStateOpen pkt returned with trans type:%d")
TRC_MSG(HIDSTATEOPEN2_PKT_RETURNED_WITH_TRANS_TYPExD, "[HID] HidStateOpen pkt returned with trans type1:%d")
TRC_MSG(HIDSTATEOPEN_SEND_MORE_DATA, "[HID] HidStateOpen: send more data")
TRC_MSG(HIDSTATEOPENPKT_RETURNED_WITH_ERR_FLAG, "[HID] HidStateOpen:Pkt returned with err flag")
TRC_MSG(HIDCOMPLETETRANSACTION_WITH_TYPExD, "[HID] HidCompleteTransaction: with type=%d")
TRC_MSG(CHANNELSTATEx02X, "channel->state:%02x")
TRC_MSG(GET_REPORT_BIT3_IS_0, "Get Report bit3 is 0")
TRC_MSG(GET_REPORT_BIT3_IS_1, "Get Report bit3 is 1")
TRC_MSG(GET_REPORTIDxD, "Get ReportId=%d")
TRC_MSG(UNUSED_CHANNEL_0_IGNORE_IT, "Unused channel ==0, ignore it")
TRC_MSG(INSERT_TO_TRANSQUEUE_WITH_TYPExD, "Insert to transQueue with type=%d")
TRC_MSG(TRY_TO_REGISTER_SECURITY_RECORDx02X, "Try to register security record:%02x")
TRC_MSG(TRY_TO_REGISTER_SECURITY_RECORD, "Try to register security record")
TRC_MSG(RECV_GET_REPORT_WITH_VALID_ID, "Recv GET_REPORT with valid Id")
TRC_MSG(CHANNEL_IS_0_RETURN, "channel is 0, return")
TRC_MSG(GET_REPORT_PARMA_LENxD, "Get Report Parma Len=%d")
TRC_MSG(BEFORE_L2CAP_SEND_TRANSTYPExD, "Before L2Cap Send, transType=%d")
TRC_MSG(L2CAP_CONNECTRSPx02X, "L2CAP_ConnectRsp:%02x")
TRC_MSG(CIDxDCTRLCIDxD, "cid=%d,ctrlCid=%d")

TRC_MSG(CAR_SDP_PARSEATTRIBUTES__CONTINUATION_STATE_QUERY_AGAIN, "CAR: SDP_ParseAttributes - Continuation State. Query Again!")
TRC_MSG(HID_HOST_INVALID_CONTROL_COMMAND, "[HID] Host: invalid CONTROL command")
TRC_MSG(HID_SDP_QUERY_FAILED, "[HID] SDP Query failed")
TRC_MSG(HID_SDP_PARSEATTRIBUTES_SUCCEEDED_VALUE__0Xx02XUPDATED_BUFF_LEN__xD, "[HID] SDP_ParseAttributes succeeded! Value = 0x%02x,Updated Buff Len = %d")
TRC_MSG(HID_HIDSENDNEXTTRANSACTION_x02X, "[HID] HidSendNextTransaction :%02x")
TRC_MSG(HID_C_SMAx02XBx02X, "[HID] Connected Channel state:%02x,CID:%02x")
TRC_MSG(HID_HIDSENDNEXTINTERRUPT_x02X, "[HID] HidSendNextInterrupt :%02x")
TRC_MSG(HID_COULD_NOT_RESTART_QUERY, "[HID] Could not restart query")
TRC_MSG(HID_OPENCONNECTION, "[HID] OpenConnection")
TRC_MSG(HID_CHANNEL_CLOSED_STATE_RECEIVED_AN_UNEXPECTED_EVENT_x02X, "[HID] Channel closed state received an unexpected event: %02X")
TRC_MSG(HID_STATUSx02X, "[HID] CMGR link status:%02x")
TRC_MSG(BT_HID_SDP_QUERY_CALLBACK_x02X, "[HID] bt_hid_sdp_query_callback :%02x")
TRC_MSG(HIDSTATEOPENx02X, "[HID] HidStateOpen event:%02x")
TRC_MSG(HID_SDP_PARSING_FAILED, "[HID] SDP Parsing failed")
TRC_MSG(HIDSTATECONNPENDINGx02X, "[HID] HidStateConnPending event:%02x")
TRC_MSG(HIDSTATECLOSEDx02X, "[HID] HidStateClosed event:%02x")
TRC_MSG(HIDSTATEDISCPENDINGx02X_CIDx02X, "[HID] HidStateDiscPending event:%02x, Cid:%02x, reason: %02x")
TRC_MSG(HID_SDP_PARSEATTRIBUTES_SUCCEEDED_BYTES_READ__xD_UPDATED_BUFF_LEN__xD, "[HID] SDP_ParseAttributes succeeded!, Bytes Read = %d, Updated Buff Len = %d")
TRC_MSG(HID_CHANNEL_CONN_PENDING_STATE_RECEIVED_AN_UNEXPECTED_EVENT_x02X, "[HID] Channel conn pending state received an unexpected event %02X")
TRC_MSG(HIDCHANNELCTRLCIDx02X, "[HID] OpenInd Control channel Cid:%02x")
TRC_MSG(HID_SERVER_OPEN_STATE_RECEIVED_AN_UNEXPECTED_EVENT_x02X, "[HID] Server open state received an unexpected event: %02X")
TRC_MSG(HID_HID_ISCONNECTEDx02X, "[HID] HID_IsConnected:%02x")
TRC_MSG(HID_E_SMAx02XBx02X, "[HID] L2CAP callback default event state:%02x,CID:%02x")
TRC_MSG(HID_INVALID_PROFILE_VERSION, "[HID] Invalid profile version")
TRC_MSG(HID_RESPONDOPENIND_STATEx02X, "[HID] HID_RespondOpenInd, state:%02x")
TRC_MSG(HID_TRY_TO_DISCONNECT_INTR_CHANNEL, "[HID] Try to disconnect intr channel")
TRC_MSG(HID_HOST_UNEXPECTED_DATC, "[HID] Host: unexpected DATC")
TRC_MSG(HID_CTRL_L2CAP_CONNECTREQSTATUSx02X, "[HID] CTRL L2CAP_ConnectReqstatus:%02x")
TRC_MSG(HID_B_SMAx02XBx02X, "[HID] L2CAP callback CONN_IND state:%02x,CID:%02x")
TRC_MSG(HID_A_SMAx02XBx02X, "[HID] L2CAP callback CONN_AUTH state:%02x,CID:%02x")
TRC_MSG(HID_CID_x02X, "[HID] L2CAP callback CID: %02x")
TRC_MSG(HIDL2CAP_AUTHORIZECONNECTRSP_STATUSx02X, "[HID] L2Cap_AuthorizeConnectRsp status%02x")
TRC_MSG(HIDPARMSEVENTx02X, "[HID] L2CAP callback event: %02x")
TRC_MSG(L2CAP_HID_TX_STATUSx02X, "[HID] L2CAP hid tx status:%02x")
TRC_MSG(HIDCOMPLETETRANSACTION, "[HID] HidCompleteTransaction")
TRC_MSG(HID_D_SMAx02XBx02X, "[HID] L2CAP callback DISCONNECTED state:%02x,CID:%02x")
TRC_MSG(HID_SDP_PARSEATTRIBUTES_SUCCEEDED_VALUE__0Xx04XUPDATED_BUFF_LEN__xD, "[HID] SDP_ParseAttributes succeeded! Value = 0x%04x,Updated Buff Len = %d")
TRC_MSG(HIDCMGRCALLBACKx02X, "[HID] CMGR callback event: %02x")
TRC_MSG(HIDFINDUNUSEDCHANNELx02X, "[HID] HidFindUnusedChannel:%02x")
TRC_MSG(HID_L2CAP_DISCONNECT_REQ_CID_CIDx02X_STATUSx02X, "[HID] L2CAP Disconnect Req CID:%02x, status:%02x")
TRC_MSG(CHANNELCTRLCIDx02XCHANNELINTRCIDx02X, "[HID] StateDiscPending Channel->ctrlCid:%02x,Channel->intrCid:%02x")
TRC_MSG(HID_NOT_THE_CONNECT_BD_ADDR, "[HID] CMGR callback Not the connect bd_addr")
TRC_MSG(HID_CHANNELCONCOUNTx02X, "[HID] StateDiscPending Channel->conCount:%02x")
TRC_MSG(HIDSENDTRANSPACKET, "[HID] HidSendTransPacket")
TRC_MSG(HIDCLEARCONNECTIONx02X, "[HID] HidClearConnection Status:%02x")
TRC_MSG(HID_CHANNELSTATEx02X, "[HID] OpenConnection Channel->state:%02x")
TRC_MSG(HID_START_L2CAP_CONNECTION, "[HID] Start L2CAP connection")
TRC_MSG(HIDCHANNEL_0, "[HID] L2CAP callback wrong channel")
TRC_MSG(HID_HIDCOMPLETETRANSACTION, "[HID] HidCompleteTransaction")
TRC_MSG(HIDCHANNELINTRCIDx02X, "[HID] OpenInd Interrupt channel Cid:%02x")
TRC_MSG(HIDCLEARCONNECTION, "[HID] HidClearConnection")
TRC_MSG(HIDSENDNEXTTRANSACTION, "[HID] HidSendNextTransaction")
TRC_MSG(HIDCHANNELCMGRHANDLERBDC0, "[HID] channel->cmgrHandler.bdc==0")
TRC_MSG(HID_HID_SENDINTERRUPT, "[HID] HID_SendInterrupt")
TRC_MSG(HID_INITIALIZED, "[HID] Initialized.")
TRC_MSG(HID_SDP_SUCCESSFULLY, "[HID] SDP successfully")
TRC_MSG(HID_THIS_IS_DEFININTELY_THE_ONE, "[HID] This is definintely the one")
TRC_MSG(HID_INVALID_CONNECT_REQUEST, "[HID] Invalid connection request!")
TRC_MSG(HID_HOST_RESPONSE_RECEIVED_BEFORE_REQUEST_SENT, "[HID] Host: response received before request sent")
TRC_MSG(HID_HOST_RECEIVED_INPUT_REPORT_IND, "[HID_EXT_ADP] Host: reveived input report, callback: %x, dev_idx: %d, trans_proto: %d")
/* HID TRACE END */

/* BLE HID START */
TRC_MSG(HID_OPENCONNECTION_DEVTYPE, "[HID] open connection, devType: %d")
TRC_MSG(HID_QUERYDEVICE_DEVTYPE, "[HID] query service, devType: %d")
TRC_MSG(HID_QUERYSERVICE_UUID, "[HID] start query service, uuid: 0x%x%x")
TRC_MSG(HID_QUERYSERVICE_DONE, "[HID] query service complete!")
TRC_MSG(HID_GATTEVENTCALLBACK_EVENT, "[HID] gatteventcallback event: 0x%x")
TRC_MSG(HID_GATTEVENTCALLBACK_UNEXPECTED_EVENT, "[HID] gatteventcallback unexpected event!")
TRC_MSG(HID_CMGRCALLBACK_DEVTYPE, "[HID] cmgr callback connected, devType: %d")
TRC_MSG(HID_WRITE_CHARDESC_HANDLE, "[HID] write char client config, handle: %d")
TRC_MSG(HID_GATTREPORT_INFO, "[HID] report characteristic info, handle: %d, report id: %d, report type: %d")
TRC_MSG(HID_SENDLETRANSPACKET, "[HID] HidSendLeTransPacket, Trans->type: %d")
TRC_MSG(HID_NOTIFYCALLBACK_NOMATCH, "[HID] Notification callback, no matched handle!")

/* BLE HID END */

/* PBAP TRACE START */
TRC_MSG(BT_PBAP_SERVER_STATE_LOG, "[PBAP_ADP] pbap server state is (%d)")
TRC_MSG(BT_PBAP_SERVER_STATE_TRANS_LOG, "[PBAP_ADP] pbap server state trans from (%d) --> (%d)")
TRC_MSG(BT_PBAP_FUNC_CONNECT_RSP_HDLR, "[PBAP_ADP] connect_rsp_hdlr func")
TRC_MSG(BT_PBAP_INIT, "[PBAP_ADP] pbap adp init")
TRC_MSG(BT_PBAP_DEINIT, "[PBAP_ADP] pbap adp deinit")
TRC_MSG(BT_PBAP_START_UP_MOD_USBMS_BOOT, "[PBAP_ADP] pbap adp start up in USBMS_BOOT")
TRC_MSG(BT_PBAP_WORK_FOLDER_INIT, "[PBAP_ADP] pbap adp work folder init")
TRC_MSG(BT_PBAP_ACTIVATE_WITH_WRONG_STATE, "[PBAP_ADP] pbap adp activate with wrong state : %d")
TRC_MSG(BT_PBAP_SERVER_ACTIVATE_FAIL, "[PBAP_ADP] pbap adp server activate fail")
TRC_MSG(BT_PBAP_DEACTIVATE_WITH_WRONG_STATE, "[PBAP_ADP] pbap adp server deactivate with wrong state : %d")
TRC_MSG(BT_PBAP_SERVER_DEACTIVATE_FAIL, "[PBAP_ADP] pbap adp server deactivate fail")
TRC_MSG(BT_PBAP_DISCONNECT_RSP_HDLR, "[PBAP_ADP] disconnect rsp hdlr")
TRC_MSG(BT_PBAP_RECEIVE_DISCONNECT_IN_WRONG_STATE, "[PBAP_ADP] receive disconnect in wrong state : %d")
TRC_MSG(BT_ADP_PBAP_RELEASE_OBJECT, "[PBAP_ADP] bt_adp_pbap_release_object")
TRC_MSG(BT_ADP_PBAP_CHECK_STATE_VALID, "[PBAP_ADP] check state is valid : state = %d")
TRC_MSG(BT_ADP_PBAP_GET_OBJECT_LENGTH, "[PBAP_ADP] get object length , op = %d")
TRC_MSG(BT_ADP_PBAP_GET_NEW_CALLS, "[PBAP_ADP] get new calls number, %d")
TRC_MSG(BT_ADP_PBAP_SET_FOLDER_SIZE, "[PBAP_ADP] set folder size, %d")
TRC_MSG(BT_ADP_PBAP_GET_FOLDER_SIZE, "[PBAP_ADP] get folder size, %d")
TRC_MSG(BT_ADP_PBAP_GET_FOLDER_OBJECT_LENGTH, "[PBAP_ADP] get folder object length : %d")
TRC_MSG(BT_ADP_PBAP_GET_LIST_OBJECT_LENGTH, "[PBAP_ADP] get list object length : %d")
TRC_MSG(BT_ADP_PBAP_GET_ENTRY_OBJECT_LENGTH, "[PBAP_ADP] get entry object length : %d")
TRC_MSG(BT_ADP_PBAP_READ_ENTRY_IND, "[PBAP_ADP] read entry ind ,state = %d")
TRC_MSG(BT_ADP_PBAP_READ_FOLDER_IND, "[PBAP_ADP] read folder ind, state = %d")
TRC_MSG(BT_ADP_PBAP_READ_LIST_IND, "[PBAP_ADP] read list ind , state = %d")
TRC_MSG(BT_ADP_PBAP_SET_PATH_IND, "[PBAP_ADP] set path ind, state = %d")
TRC_MSG(BT_ADP_PBAP_CALL_BACK, "[PBAP_ADP] PbaServerCallback : event = %d, oper = %d, state = %d")
TRC_MSG(BT_PBAP_INIT_FAILED, "[PBAP] Object Store Initialization Failed!")
TRC_MSG(BT_PBAP_REGISTERED, "[PBAP] Server Registered")
TRC_MSG(BT_PBAP_DEREGISTERED, "[PBAP] Server De-registered")
TRC_MSG(BT_PBAP_SERVER_ABORT, "[PBAP] PBAP_ServerAbort with error code %x ")
TRC_MSG(BT_PBAP_SERVER_GOEP_CALLBACK, "[PBAP] PbapGoepServerCallback GOEP EVENT ID = %d, OPER ID = %d")
TRC_MSG(BT_PBAP_SERVER_NOT_FOUND, "[PBAP] Server not found.")
TRC_MSG(BT_PBAP_SERVER_HEADLEN_ZERO, "[PBAP] obex header len == 0")
TRC_MSG(BT_PBAP_SERVER_OPER_COMPLETE, "[PBAP] Server: %d operation complete.")
TRC_MSG(BT_PBAP_OBS_NEW_FAIL, "[PBAP]PBAPOBS_New: Out of entries")
TRC_MSG(BT_PBAP_OBS_READ_ERROR, "[PBAP]Error reading object, req.len=%d,len=%d")
TRC_MSG(BT_PBAP_ADP_AUTHORIZE_ERROR_STATE, "[PBAP ADP]authorize response in NOT-AUTHORIZING state.")
/* PBAP TRACE END */

/* PBAPC TRACE Start */
TRC_MSG(BT_PBAP_OBS_WRITE_ERROR, "[PBAP]Error writing object, req.len=%d,len=%d")
TRC_MSG(BT_ADP_PBAP_CLIENT_REG_SDP_RESULT, "[PBAP_ADP] pbap client register SDP result is (%d)")
TRC_MSG(BT_ADP_PBAP_CLIENT_REG_SDP_WITH_WRONG_STATE, "[PBAP_ADP] pbap client does not register SDP with state (%d),req (%d)")
TRC_MSG(BT_ADP_PBAP_CLIENT_DISABLE_ENTRY, "[PBAP_ADP] pbap client bt_adp_pbapc_disable_req_hdlr connState:(%d), req:(%d)")
TRC_MSG(BT_ADP_PBAP_CLIENT_DEREG_SDP_RESULT, "[PBAP_ADP] pbap client remove SDP result is (%d)")
TRC_MSG(BT_ADP_PBAP_CLIENT_DEREG_SDP_WITH_WRONG_STATE, "[PBAP_ADP] pbap client does not remove SDP with state (%d),req (%d),connState(%d)")
TRC_MSG(BT_ADP_PBAP_CLIENT_OPER_WITH_WRONG_STATE, "[PBAP_ADP] pbap client operate:(%d) with wrong state:(%d)")
TRC_MSG(BT_ADP_PBAP_CLIENT_CALL_BACK, "[PBAP_ADP] PbaClientCallback : event = %d, oper = (%d), cur_req = (%d)")
TRC_MSG(BT_ADP_PBAP_REG_CLIENT_RESULT, "[PBAP_ADP] PBAP client registered. Result is (%d)")
TRC_MSG(BT_ADP_PBAP_CLIENT_ALLOC_CM_CONNID, "[PBAP_ADP] PBAP client allocate cm_conn_id (%d)")
TRC_MSG(BT_ADP_PBAP_CLIENT_SETPATH_WITH_WRONG_STATE, "[PBAP_ADP] pbap client set path with wrong state (%d)")
TRC_MSG(BT_ADP_PBAP_CLIENT_SETPATH, "[PBAP_ADP] PBAP client setpath type (%d)")
TRC_MSG(BT_ADP_PBAP_CLIENT_PULL_ENTRY, "[PBAP_ADP] PBAPC pull entry")
TRC_MSG(BT_ADP_PBAP_CLIENT_PULL_LIST, "[PBAP_ADP] PBAPC pull list")
TRC_MSG(BT_ADP_PBAP_CLIENT_PULL_PB, "[PBAP_ADP] PBAPC pull folder")
TRC_MSG(BT_ADP_PBAP_CLIENT_DISCONNECT_ENTRY, "[PBAP_ADP] PBAP client disconnect req handler connState:(%d),cur_req:(%d)")
TRC_MSG(BT_ADP_PBAP_CLIENT_ABORT_ENTRY, "[PBAP_ADP] PBAP client abort req handler connState:(%d), cur_req:(%d)")
TRC_MSG(BT_ADP_PBAP_CLIENT_OPEN_FILE_FAIL, "[PBAP_ADP]PBAP client open file fail, return handle:(%d)")
TRC_MSG(BT_ADP_PBAP_CLIENT_RECEIVE_DATA_FAIL, "[PBAP_ADP] PBAP client write data fail, status:(%d)")
TRC_MSG(BT_PBAP_REG_CLIENT_RESULT, "[PBAP] PBAP client registered. Result is (%d)")
TRC_MSG(BT_PBAP_DEREG_CLIENT_RESULT, "[PBAP] PBAP client deregistered. Result is (%d)")
TRC_MSG(BT_PBAP_GOEP_CONNECT_RETURN, "[PBAP] PBAP client GOEP_CONNECT return (%d)")
TRC_MSG(BT_PBAP_CLIENT_GOEP_CALLBACK, "[PBAP] PbapGoepClientCallback EVENT:(%d),OPER:(%d),connState:(%d),reason:(%d),failed_rsp_code:(%d)")
TRC_MSG(BT_PBAP_CLIENT_NOT_FOUND, "[PBAP] PBAP client not found.")
TRC_MSG(BT_PBAP_GOEP_SETPATH_RETURN, "[PBAP] PBAP client GOEP_SetFolder return (%d)")
TRC_MSG(BT_PBAP_ENTRY_PULL_ENTRY, "[PBAP] PBAP client enter PBAPC_Pull_Entry")
TRC_MSG(BT_PBAP_QUEUE_HEADER_FAIL, "[PBAP] PBAP client GOEP_ClientQueueHeader fail")
TRC_MSG(BT_PBAP_SEARCH_VALUE_HEADER_LEN, "[PBAP] PBAP client: the length of the SearchValue header is(%d)")
TRC_MSG(BT_PBAP_SEARCH_VALUE_HEADER_LEN_EXCEED, "[PBAP] PBAP client:exceed the parameter specified len, max search value len(%d)")
TRC_MSG(BT_PBAP_QUEUE_HEADER_RETURN, "[PBAP] PBAP client GOEP_ClientQueueHeader return (%d)")
TRC_MSG(BT_PBAP_GOEP_PULL_RETURN, "[PBAP] PBAP client GOEP_Pull return (%d)")
TRC_MSG(BT_PBAP_ENTRY_PULL_LISTING, "[PBAP] PBAP client enter PBAPC_Pull_vCard_Listing")
TRC_MSG(BT_PBAP_ENTRY_PULL_PB_FOLDER, "[PBAP] PBAP client enter PBAPC_Pull_PB_Folder")
TRC_MSG(BT_PBAP_CLIENT_CB_HEADER_RX, "[PBAP] PBAP client PbapGoepClientCallback():GOEP_EVENT_HEADER_RX(0x%x)")
TRC_MSG(BT_PBAP_CLIENT_CB_RX_UNKNOW_APP_PARAMS, "[PBAP] PBAP client GOEP_EVENT_HEADER_RX unknow appParams(0x%x)")
TRC_MSG(BT_PBAP_CLIENT_DISCONNECT_ENTRY, "[PBAP] PBAP client PBAPC_Disconnect(),connState:(%d)")
TRC_MSG(BT_PBAP_CLIENT_DISCONNECT_RESULT, "[PBAP] PBAP client PBAPC_Disconnect(),status:(%d),connState:(%d)")
TRC_MSG(BT_PBAP_CLIENT_CB_NOT_HANDLE, "[PBAP] PBAP client PbapGoepClientCallback not handle event:(%d)")
TRC_MSG(BT_PBAP_ABORT_STATUS, "[PBAP] PBAP client PBAPC_Abort() return status:(%d)")
TRC_MSG(BT_PBAP_CLIENT_CHECK_AUTHEN, "[PBAP] PBAP client PBAPC_Check_Authentication(),flags:(%d),connState:(%d)")
TRC_MSG(BT_PBAP_CLIENT_BEGIN_TO_WRITE_DATA_INTO_FILE, "[PBAP] PBAPOBS_Write: begin to write data into file")
TRC_MSG(BT_PBAP_CLIENT_PROGRESS_OF_WRITING_FILE, "[PBAP] PBAPOBS_Write: current offset of file:(%d)")
TRC_MSG(BT_PBAP_CLIENT_WRITE_DATA_INTO_FILE_FAILED, "[PBAP] bt_adp_pbap_client_write_data_into_file: write failed, ret of FS_Write:(%d)")
TRC_MSG(BT_PBAP_GOEP_SDP_REG, "[PBAP] PBAP client SDP register return (%d)")
TRC_MSG(BT_PBAP_GOEP_SDP_DEREG, "[PBAP] PBAP client SDP deregister return (%d)")
TRC_MSG(BT_PBAP_GOEP_SDP_REG_STATUS, "[PBAP] PBAP client SDP register status return (%d)")
TRC_MSG(BT_PBAP_FIND_CNTX_INDEX, "[PBAP] PBAP client find cntx index (%d) conn_id (%d)")
TRC_MSG(BT_PBAP_WRONG_CNTX_INDEX, "[PBAP] PBAP client find none cntx idx")
/* PBAPC Trace End */

/* BIP TRACE START */
TRC_MSG(BT_BIP_PRINT_I_STATE, "[BIP_ADP] adp state error: iState(%d)")
TRC_MSG(BT_BIP_PRINT_I_STATE_TRANS, "[BIP_ADP] adp iState transition: (%d) --> (%d)")
TRC_MSG(BT_BIP_PRINT_R_STATE, "[BIP_ADP] adp state error: rState(%d)")
TRC_MSG(BT_BIP_PRINT_R_STATE_TRANS, "[BIP_ADP] adp rState transition: (%d) --> (%d)")
TRC_MSG(BT_BIP_FUNC_INIT, "[BIP_ADP] init func")
TRC_MSG(BT_BIP_FUNC_DEINIT, "[BIP_ADP] deinit func")
TRC_MSG(BT_BIP_FUNC_CNTX_DEINIT_FS_CLOSE_FAILED, "[BIP_ADP] cntx_deinit == FS_Close failed:(%d)")
TRC_MSG(BT_BIP_FUNC_CNTX_DEINIT_FS_DELETE_FAILED, "[BIP_ADP]cntx_deinit == FS_Delete failed:(%d)")
TRC_MSG(BT_BIP_FUNC_CNTX_INIT, "[BIP_ADP] cntx_init func")
TRC_MSG(BT_BIP_FUNC_WORK_FOLDER_INIT, "[BIP_ADP] work_folder_init func")
TRC_MSG(BT_BIP_FUNC_WORK_FOLDER_INIT_USB_MS, "[BIP_ADP] work_folder_init == USB MS Mode")
TRC_MSG(BT_BIP_FUNC_WORK_FOLDER_INIT_OPEN_NO_ERROR, "[BIP_ADP] work_folder_init == open workder folder success")
TRC_MSG(BT_BIP_FUNC_WORK_FOLDER_INIT_OPEN_ERROR, "[BIP_ADP] work_folder_init == open workder folder failed")
TRC_MSG(BT_BIP_FUNC_MSG_HDLR, "[BIP_ADP] msg_hdlr (msg_id:%d)")
TRC_MSG(BT_BIP_FUNC_CONN_REQ_HDLR_CONN_FAILED, "[BIP_ADP] connect_req_hdlr == failed status:(%d)")
TRC_MSG(BT_BIP_FUNC_DISCONNECT_REQ_HDLR, "[BIP_ADP] disconnect_req_hdlr func, state:(%d)")
TRC_MSG(BT_BIP_FUNC_COMMAND_REQ_HDLR, "[BIP_ADP] command_req_hdlr func, iState=(%d)")
TRC_MSG(BT_BIP_FUNC_ABORT_REQ_HDLR, "[BIP_ADP] abort_req_hdlr func, iState=(%d)")
TRC_MSG(BT_BIP_FUNC_ACTIVATE_REQ_HDLR, "[BIP_ADP] activate_req_hdlr func, rState=(%d)")
TRC_MSG(BT_BIP_FUNC_DEACTIVATE_REQ_HDLR, "[BIP_ADP] deactivate_req_hdlr func, rState=(%d)")
TRC_MSG(BT_BIP_FUNC_COMMAND_RSP_HDLR, "[BIP_ADP] command_rsp_hdlr func, rState=(%d)")
TRC_MSG(BT_BIP_FUNC_CONTINUE_RSP_HDLR, "[BIP_ADP] continue_rsp_hdlr func")
TRC_MSG(BT_BIP_FUNC_CONNECT_RSP_HDLR, "[BIP_ADP] connect_rsp_hdlr func, rState=(%d)")
TRC_MSG(BT_BIP_FUNC_GENERATE_XML_CAPABILITIES, "[BIP_ADP] generate_xml_capabilities func")
TRC_MSG(BT_BIP_FUNC_GENERATE_XML_IMG_LIST, "[BIP_ADP] generate_xml_img_list func")
TRC_MSG(BT_BIP_FUNC_GENERATE_XML_IMG_PROP, "[BIP_ADP] generate_xml_img_prop func")
TRC_MSG(BT_BIP_FUNC_PARSE_XML_IMG_LIST_START_FAIL, "[BIP_ADP] bt_bip_parse_img_list_startElement failed")
TRC_MSG(BT_BIP_FUNC_PARSE_XML_IMG_LIST_END_FAIL, "[BIP_ADP] bt_bip_parse_img_list_endElement failed")
TRC_MSG(BT_BIP_FUNC_PARSE_XML_IMG_LIST_DATA_FAIL, "[BIP_ADP] bt_bip_parse_img_list_dataElement failed")
TRC_MSG(BT_BIP_FUNC_PARSE_XML_IMG_CAP_START_FAIL, "[BIP_ADP] bt_bip_parse_img_list_startElement failed")
TRC_MSG(BT_BIP_FUNC_PARSE_XML_IMG_CAP_END_FAIL, "[BIP_ADP] bt_bip_parse_img_list_endElement failed")
TRC_MSG(BT_BIP_FUNC_PARSE_XML_IMG_CAP_DATA_FAIL, "[BIP_ADP] bt_bip_parse_img_list_dataElement failed")
TRC_MSG(BT_BIP_FUNC_PARSE_XML_IMG_PROP_START_FAIL, "[BIP_ADP] bt_bip_parse_img_list_startElement failed")
TRC_MSG(BT_BIP_FUNC_PARSE_XML_IMG_PROP_END_FAIL, "[BIP_ADP] bt_bip_parse_img_list_endElement failed")
TRC_MSG(BT_BIP_FUNC_PARSE_XML_IMG_PROP_DATA_FAIL, "[BIP_ADP] bt_bip_parse_img_list_dataElement failed")
TRC_MSG(BT_BIP_FUNC_CLOSE_FILE_CONTINUALLY, "[BIP_ADP] bip_adp_close_file_continually, fs handle=0x%x")
TRC_MSG(BT_BIP_FUNC_START_CLOSE_FILE_CONTINUALLY, "[BIP_ADP] bip_adp_start_close_file_continually, fs handle=0x%x")
TRC_MSG(BT_BIP_FUNC_CHECK_FS_ERROR, "[BIP ADP]bip_adp_check_fs_error_code: fs_error=0x%x, fs_oper=%d")
TRC_MSG(BT_BIP_FUNC_CONNECT_REQ_HDLR, "[BIP ADP]bip_adp_connect_req_hdlr, iState=%d, bip_service=%d")
TRC_MSG(BT_BIP_FS_OPEN_FAILED, "[BIP ADP]FS_Open failed, err_code=0x%x")
TRC_MSG(BT_BIP_GEN_XML_FS_OPEN_FAILED, "[BIP ADP]generate_xml_file FS_Open BIP_ADP_SND_FILE Failed!ret=0x%x")
TRC_MSG(BT_BIP_REGINITIATOR_FAILED, "[BIP ADP]Initiator Error: Could not initiaze Initiator. status = %d")
TRC_MSG(BT_BIP_FS_OPEN_SNDFILE_FAILED, "[BIP ADP]PUT_IMG_REQ: FS_Open BIP_ADP_SND_FILE Failed! ret=0x%x")
TRC_MSG(BT_BIP_FS_READ_SNDFILE_FAILED, "[BIP ADP]PUT_IMG_REQ: FS_Read BIP_ADP_SND_FILE Failed! ret=0x%x")
TRC_MSG(BT_BIP_FS_OPEN_PUTIMG_FAILED, "[BIP ADP]PUT_IMG_REQ: FS_Open msg_p->img_path Failed!ret=0x%x")
TRC_MSG(BT_BIP_FS_OPEN_PUTTHM_FAILED, "[BIP ADP]PUT_THM_REQ: FS_Open msg_p->img_path Failed!ocx=0x%x")
TRC_MSG(BT_BIP_GETIMGREQ_FS_OPEN_FAILED, "[BIP ADP]GET_IMG_REQ: FS_Open BIP_ADP_SND_FILE Failed!ret=0x%x")
TRC_MSG(BT_BIP_GETIMGREQ_FS_READ_FAILED, "[BIP ADP]GET_IMG_REQ: FS_Read BIP_ADP_SND_FILE Failed!ret=0x%x")
TRC_MSG(BT_BIP_SENDBIPREQ_FAILD, "[BIP ADP]SendBIPRequest status = %d")
TRC_MSG(BT_BIP_MMI_CONNECT_RSP_FAILED, "[BIP ADP]==== connect_rsp_hdlr: mmi cnf_code is CNF_FAILED! rsp_code=0x%x")
TRC_MSG(BT_BIP_GEN_XML_FS_WRITE_FALED, "[BIP ADP]generate_xml_file FS_Write Failed! ret=0x%x")
TRC_MSG(BT_BIP_XMLPARSE_IMGLIST_FS_OPEN_FAILED, "[BIP ADP] FS_Open BIP_ADP_IMG_LIST_FILE FAILED!!! ret=0x%x")
TRC_MSG(BT_BIP_PARSE_XML_IMGLIST_FS_WRITE_FAILED, "[BIP ADP]bt_bip_parse_img_list_endElement: FS_Write failed,return 0x%x")
TRC_MSG(BT_BIP_ADP_CREATE_DIR_RET, "[BIP ADP]FS_CreateDir return: (0x%x)")
TRC_MSG(BT_BIP_ADP_DRM_OPEN_RET, "[BIP ADP]DRM_open_file return: (%d)")
TRC_MSG(BT_BIP_ADP_DRM_GET_OBJ_METHOD_RET, "[BIP ADP]DRM_get_object_method return: (%d)")
TRC_MSG(BT_BIP_ADP_DRM_GET_RIGHTS_ISSUER_RET, "[BIP ADP]DRM_get_rights_issuer return: (%d), size=%d")
TRC_MSG(BT_BIP_ADP_CHECK_DRM_RET, "[BIP ADP]bt_bip_adp_check_DRM_rights return: (%d)")
TRC_MSG(BT_BIP_ADP_FS_DELETE_RET, "[BIP ADP]FS_Delete return: (%d)")
TRC_MSG(BT_BIP_ADP_FS_WRITE_RET, "[BIP ADP]FS_Write return: (%d), idx=%d")
TRC_MSG(BT_BIP_ADP_GEN_XML_FAILED, "[BIP ADP]bip_adp_generate_xml_file Failed!ret=0x%x")
TRC_MSG(BT_BIP_ADP_I_DISCONNECT_REQ_IN_WRONG_STATE, "[BIP ADP]Initiator Error: Initiator recv disconnect req in wrong state(%d).")
TRC_MSG(BT_BIP_ADP_R_DISCONNECT_REQ_IN_WRONG_STATE, "[BIP ADP]Responder Error: Responder recv disconnect req in wrong state(%d).")
TRC_MSG(BT_BIP_ADP_ERROR_SESSION_ROLE, "[BIP ADP] Error session role!")
TRC_MSG(BT_BIP_ADP_I_INVALID_CONTINUE_RSP, "[BIP ADP]Initiator Error: continue response in NOT-INITIATOR_REQUESTING state(%d)")
TRC_MSG(BT_BIP_ADP_R_INVALID_CONTINUE_RSP, "[BIP ADP]Responder Error: continue response in NOT-INDICATING state(%d)")
TRC_MSG(BT_BIP_FUNC_I_CNTX_DEINIT, "[BIP ADP]bip_adp_initiator_cntx_deinit...")
TRC_MSG(BT_BIP_FUNC_CNTX_DEINIT, "[BIP ADP]bip_adp_cntx_deinit...")
TRC_MSG(BT_BIP_ADP_ABORT_REASON, "[BIP ADP] --- Abort reason = (0x%x) ---")
TRC_MSG(BT_BIP_ADP_RESUME_PARSE_NULL, "[BIP ADP] bip_adp_resume_xml_parse: parser=NULL,iState=%d")
TRC_MSG(BT_BIP_ADP_PARSE_PAUSED, "[BIP ADP] bip_adp_resume_xml_parse: paused. To continue")
TRC_MSG(BT_BIP_ADP_PARSE_IMGLIST_END, "[BIP ADP]bip_adp_parse_imagelist_xml_file_end...iState=%d, result=%d")
TRC_MSG(BT_BIP_ADP_XMLPARSE_RETURN, "[BIP ADP] ---- xml_parse return (%d)")
TRC_MSG(BT_BIP_ADP_PARSE_END_FSCLOSED_FAILED, "[BIP ADP]--ERROR-- bt_adp_parsing_imglist_end FS_Close return (%d)")
TRC_MSG(BT_BIP_OBS_READ_ERROR, "[BIP OBS]Error reading image, dataLen=%d, len=%d")
TRC_MSG(BT_BIP_OBS_WRITE_ERROR, "[BIP OBS]Error writing image, dataLen=%d, len=%d")
TRC_MSG(BT_BIP_DEINIT_CLIENT_FAILED, "[BIP]Client: Deinit failed: status=%d")
TRC_MSG(BT_BIP_DEINIT_SERVER_FAILED, "[BIP]Server: Deinit failed: status=%d")
TRC_MSG(BT_BIP_ABORT, "[BIP]BIP_Abort: Abort requested,reason=%d.")
TRC_MSG(BT_BIP_REGISTERCLIENT_FAILED, "[BIP] Client GOEP_RegisterClient failed! status=%d")
TRC_MSG(BT_BIP_REGISTERSERVER_FAILED, "[BIP] Server GOEP_RegisterServer failed! status=%d")
TRC_MSG(BT_BIP_RESPONDER_NOT_FOUND, "[BIP] Responder not found.")
TRC_MSG(BT_BIP_SERVER_OPER_ABORTED, "[BIP] Server: %d operation aborted.")
TRC_MSG(BT_BIP_SERVER_PARTIAL_CONTENT_PUTIMG, "[BIP ADP] Server: OBRC_PARTIAL_CONTENT for PutImage")
TRC_MSG(BT_BIP_SERVER_PARTIAL_CONTENT_GETIMGLIST, "[BIP ADP]=== Server: OBRC_PARTIAL_CONTENT for GetImageList")
TRC_MSG(BT_BIP_INITIATOR_NOT_FOUND, "[BIP]: Initiator not found.")
TRC_MSG(BT_BIP_I_PARTIALCONTENT_GETIMGLIST, "BIP: Client: OBRC_PARTIAL_CONTENT for GetImageList!")
TRC_MSG(BT_BIP_I_PARTIALCONTENT_PUTIMG, "BIP: Client: OBRC_PARTIAL_CONTENT for PutImage!")

/* external ADP start */
TRC_MSG(BIPI_EXT_ADP_STATE_ERR, "BIP_I_EXT_ADP : statuts err, current status = %d, current opcode = %d")
TRC_MSG(BIPR_EXT_ADP_STATE_ERR, "BIP_R_EXT_ADP : statuts err, current status = %d, current opcode = %d")
TRC_MSG(BIPI_EXT_ADP_RECEIVE_MSG, "BIP_I_EXT_ADP : received msg = %d")
TRC_MSG(BIPR_EXT_ADP_RECEIVE_MSG, "BIP_R_EXT_ADP : received msg = %d")
TRC_MSG(BIPI_EXT_ADP_APP_CMD, "BIP_I_EXT_ADP: app invoke opcode = %d")
TRC_MSG(BIPR_EXT_ADP_APP_CMD, "BIP_R_EXT_ADP: app invoke opcode = %d")
TRC_MSG(BIPI_EXT_ADP_NOTIFY_APP, "BIP_I_EXT_ADP : notify app, opcode = %d, result = %d")
TRC_MSG(BIPR_EXT_ADP_NOTIFY_APP, "BIP_R_EXT_ADP : notify app, opcode = %d, status = %d")
TRC_MSG(BIPR_EXT_ADP_DO_NOT_FIND_HANDLE_BY_CN_ID, "BIP_R_EXT_ADP : do not find hanle by cn id = %d")
TRC_MSG(BIPR_EXT_ADP_DO_NOT_FIND_HANDLE_BY_REQ_ID, "BIP_R_EXT_ADP : do not find hanle by req id = %d")
TRC_MSG(BIPR_EXT_ADP_DO_NOT_FIND_HANDLE_BY_STATUS, "BIP_R_EXT_ADP : do not find hanle by status = %d")
TRC_MSG(BIPI_EXT_ADP_DO_NOT_FIND_HANDLE_BY_CN_ID, "BIP_I_EXT_ADP : do not find handle by cn id = %d")
TRC_MSG(BIPI_EXT_ADP_DO_NOT_FIND_HANDLE_BY_REQ_ID, "BIP_I_EXT_ADP : do not find handle by req id = %d")
TRC_MSG(BIPI_EXT_ADP_DO_NOT_FIND_HANDLE_BY_STATUS, "BIP_I_EXT_ADP : do not find handle by status = %d")
TRC_MSG(BIP_EXT_ADP_DO_NOT_SUPPORT_NOW, "BIP_EXT_ADP : do not support now line = %d")
/* external ADP end */

/* BIP TRACE END */

/* PAN TRACE START */
TRC_MSG(PAN_INITIALIZED, "[PAN] Initialized")
TRC_MSG(PAN_REGISTER_BUSY, "[PAN] Registeration is busy")
TRC_MSG(PAN_OPENCONNECTION, "[PAN] Open connection")
TRC_MSG(PAN_CREATEDATALINK_STATUS, "[PAN] Open connection create data link status: %02x")
TRC_MSG(PAN_OPENCONNECTION_STATUS, "[PAN] Open connection status: %02x")
TRC_MSG(PAN_CMGRCALLBACK_EVENT_STATUS, "[PAN] CMGR callback event: %02x, status: %02x")
TRC_MSG(PAN_NOT_FOR_THE_BD_ADDR, "[PAN] CMGR callback not for the bd_addr")
TRC_MSG(PAN_CMGRCALLBACK_BDADDR0, "[PAN] CMGR callback bd_addr=0")
TRC_MSG(PAN_BNEPCALLBACK, "[PAN] bnep callback pan: %02x, bneppanu: %02x")
TRC_MSG(PAN_BNEPCALLBACK_EVENT, "[PAN] bnep callback event: %02x")
TRC_MSG(PAN_HANDLEPACKETIND_GRATUITOUS_ARPREQUEST, "[PAN] bnep callback handle packet ind, ARP gratuitous request!")
TRC_MSG(PAN_BNEPCONTROL_PKTTYPE, "[PAN] Received BNEP Control Packet type %02x")
TRC_MSG(PAN_SENDPKT_BROADCAST, "[PAN] Send packet broadcasting packet")
TRC_MSG(PAN_FORWARDPKT_NODST, "[PAN] Forward packet no local devices targeted!")
TRC_MSG(PAN_FORWARDPKT_BROADCAST, "[PAN] Forward packet broadcasting packet")
TRC_MSG(PAN_FORWARDPKT_TOPEER, "[PAN] Forward packet sending packet to peer device")
TRC_MSG(PAN_SDP_QUERY_CALLBACK_RESULT, "[PAN] SDP query callback result: %02x")
TRC_MSG(PAN_SDP_QUERY_CALLBACK_CONNECT_FAILED, "[PAN] SDP query callback, could not connect to control channel")
TRC_MSG(PAN_SDP_QUERY_CALLBACK_DONE, "[PAN] SDP query callback complete, establish bnep connection")
TRC_MSG(PAN_CLEAR_CONNECTION_STATUS, "[PAN] pan clear connection status: %02x")

TRC_MSG(PAN_EXT_ADP_ACTIVATE_DONE, "[PAN EXT ADP] activate done")
TRC_MSG(PAN_EXT_ADP_DEACTIVATE_DONE, "[PAN EXT ADP] deactivate done")
TRC_MSG(PAN_EXT_ADP_HANDLE_CMD, "[PAN EXT ADP] handle command opcode: %02x")
TRC_MSG(PAN_EXT_ADP_HANDLE_CONNECT_CMD, "[PAN EXT ADP] Connect req in error state: %02x")
TRC_MSG(PAN_EXT_ADP_HANDLE_DISCONNECT_CMD, "[PAN EXT ADP] Disconnect req in error state: %02x")
TRC_MSG(PAN_EXT_ADP_HANDLE_CONNECT_IND_INVALID_DEVICE, "[PAN EXT ADP] Connect ind with error address!")
TRC_MSG(PAN_EXT_ADP_HANDLE_CONNECT_IND_PREV_STATE, "[PAN EXT ADP] handle connect ind  prevstate: %d")
TRC_MSG(PAN_EXT_ADP_HANDLE_CONNECT_CNF_INVALID_DEVICE, "[PAN EXT ADP] Connect cnf with error address!")
TRC_MSG(PAN_EXT_ADP_HANDLE_CONNECT_CNF_PREV_STATE, "[PAN EXT ADP] handle connect cnf  prevstate: %d")
TRC_MSG(PAN_EXT_ADP_HANDLE_DISCONNECT_IND_PREV_STATE, "[PAN EXT ADP] handle disconnect ind  prevstate: %d")
TRC_MSG(PAN_EXT_ADP_HANDLE_DISCONNECT_CNF_PREV_STATE, "[PAN EXT ADP] handle disconnect cnf  prevstate: %d")
/* PAN TRACE END */

/* MAP TRACE START */
/* Internal ADP start */
TRC_MSG(BTLOG_MAPS_ADP_MNS_CONNECT_DUPLICATE, "[MAPS] maps_adp_mns_connect: duplicate request (state=%d)")
TRC_MSG(BTLOG_MAPS_ADP_ACTIVATE_NOT_INITIALIZED, "[MAPS] maps_adp_activate: failed due to not initialized")
TRC_MSG(BTLOG_MAPS_ADP_DEACTIVATE_DISCONNECTING, "[MAPS] maps_adp_deactivate: disconnect 0x%x,0x%x,0x%x")
TRC_MSG(BTLOG_MAPS_ADP_ADD_CONNECTION, "[MAPS] maps_adp_add_connection: instance=%d, conn=%d, addr=0x%x,0x%x,0x%x")
TRC_MSG(BTLOG_MAPS_ADP_ADD_CONNECTION_DUPLICATE, "[MAPS] maps_adp_add_connection: connection existed")
TRC_MSG(BTLOG_MAPS_ADP_APP_CALLBACK_DATA_REQ, "[MAPS] maps_app_callback: MAP_EVENT_DATA_REQ: read %d bytes")
TRC_MSG(BTLOG_MAPS_ADP_APP_CALLBACK_DATA_REQ_DONE, "[MAPS] maps_app_callback: MAP_EVENT_DATA_REQ: read done")
TRC_MSG(BTLOG_MAPS_ADP_APP_CALLBACK_DATA_REQ_FAIL, "[MAPS] maps_app_callback: MAP_EVENT_DATA_REQ failed")
TRC_MSG(BTLOG_MAPS_ADP_APP_CALLBACK_DATA_IND, "[MAPS] maps_app_callback: MAP_EVENT_DATA_IND: write %d bytes")
TRC_MSG(BTLOG_MAPS_ADP_APP_CALLBACK_DATA_IND_DONE, "[MAPS] maps_app_callback: MAP_EVENT_DATA_IND: write done")
TRC_MSG(BTLOG_MAPS_ADP_APP_CALLBACK_DATA_IND_FAIL, "[MAPS] maps_app_callback: MAP_EVENT_DATA_IND failed")
TRC_MSG(BTLOG_MAPS_ADP_APP_CALLBACK_TP_DISCONNECTED, "[MAPS] maps_app_callback: MAP_EVENT_TP_DISCONNECTED state=%d")
TRC_MSG(BTLOG_MAPS_ADP_APP_CALLBACK_TP_DISCONNECTED_NO_CONN, "[MAPS] maps_app_callback: MAP_EVENT_TP_DISCONNECTED device authorizing")
TRC_MSG(BTLOG_MAPS_ADP_APP_CALLBACK_MNS_CONNECTED, "[MAPS] maps_app_callback: MAP_EVENT_MNS_CONNECTED state=%d")
TRC_MSG(BTLOG_MAPS_ADP_APP_CALLBACK_MNS_DISCONNECTED, "[MAPS] maps_app_callback: MAP_EVENT_MNS_DISCONNECTED state=%d")
TRC_MSG(BTLOG_MAPS_ADP_DISCONNECT, "[MAPS] maps_adp_disconnect: status=%d")

TRC_MSG(BTLOG_MAPS_DEREGISTER_SERVER_CHECK_FAILED, "[MAPS] maps_deregister_server: check failed initialized=%d")
TRC_MSG(BTLOG_MAPS_DEREGISTER_SERVER, "[MAPS] maps_deregister_server: instance=%d")
TRC_MSG(BTLOG_MAPS_GOEP_SERVER_CALLBACK, "[MAPS] MapGoepServerCallback(): event=%d, oper=%d, goep_conn_id=%d")
TRC_MSG(BTLOG_MAPS_GOEP_SERVER_CALLBACK_HEADER_RX, "[MAPS] MapGoepServerCallback(): GOEP_EVENT_HEADER_RX 0x%x")
TRC_MSG(BTLOG_MAPS_GOEP_MNS_CLIENT_CALLBACK, "[MAPS] MapMnsGoepClientCallback(): event=%d, oper=%d, goep_conn_id=%d (client: %d)")
TRC_MSG(BTLOG_MAPS_OBS_NEW, "[MAPS] maps_obs_new(%d)")
TRC_MSG(BTLOG_MAPS_OBS_CLOSE, "[MAPS] maps_obs_close(%d)")
TRC_MSG(BTLOG_MAPS_OBS_READ, "[MAPS] maps_obs_read len=%d, offset=%d")
TRC_MSG(BTLOG_MAPS_OBS_WRITE, "[MAPS] maps_obs_write len=%d, offset=%d")
TRC_MSG(BTLOG_MAPS_OBS_GET_OBJECT_LEN, "[MAPS] maps_obs_get_object_len len=%d")
TRC_MSG(BTLOG_MAPS_MNS_OBS_READ, "[MAPS] maps_mns_obs_read len=%d, offset=%d")

TRC_MSG(BTLOG_MAPC_GOEP_CLINET_CALLBACK, "[MAPC] MapGoepClientCallback(): event=%d, oper=%d, goep_conn_id=%d( client=%d)")
TRC_MSG(BTLOG_MAPC_GOEP_CLIENT_CALLBACK_HEADER_RX, "[MAPC] MapGoepClientCallback(): GOEP_EVENT_HEADER_RX 0x%x")
TRC_MSG(BTLOG_MAPC_GOEP_MNS_SERVER_CALLBACK, "[MAPC] MapMnsGoepServerCallback(): event=%d, oper=%d, goep_conn_id=%d")
TRC_MSG(BTLOG_MAPC_OBS_NEW, "[MAPC] mapc_obs_new(%d)")
TRC_MSG(BTLOG_MAPC_OBS_CLOSE, "[MAPC] mapc_obs_close(%d)")
TRC_MSG(BTLOG_MAPC_OBS_READ, "[MAPC] mapc_obs_read len=%d, offset=%d")
TRC_MSG(BTLOG_MAPC_OBS_WRITE, "[MAPC] mapc_obs_write len=%d, offset=%d")
TRC_MSG(BTLOG_MAPC_OBS_GET_OBJECT_LEN, "[MAPC] mapc_obs_get_object_len len=%d")
TRC_MSG(BTLOG_MAPC_MNS_OBS_WRITE, "[MAPC] mapc_mns_obs_write len=%d, offset=%d")
/*add for MAPC*/
TRC_MSG(BT_ADP_MAP_INIT_ENTRY, "[MAP_ADP]bt_map_init: initialize the MAP profile")
TRC_MSG(BT_ADP_MAP_DEINIT_ENTRY, "[MAP_ADP]bt_map_deinit: deinit the MAP profile")
TRC_MSG(BT_ADP_MCE_ACTIVATE_ENTRY, "[MAP_ADP]bt_adp_map_client_activate: init flag(%d), req(%d)")
TRC_MSG(BT_ADP_MAP_CLIENT_DEACTIVATE_ENTRY, "[MAP_ADP]deactivate: state(%d), conn state(%d), req(%d)")
TRC_MSG(BT_ADP_MAP_CONNECT_ENTRY, "[MAP_ADP]bt_adp_map_client_connect: state(%d), conn state(%d), req(%d), rsp(%d)")
TRC_MSG(BT_ADP_MAP_DISCONNECT_ENTRY, "[MAP_ADP]bt_adp_map_client_disconnect: state(%d), conn state(%d), req(%d), rsp(%d)")
TRC_MSG(BT_ADP_MAP_MNS_DISCONNECT_ENTRY, "[MAP_ADP]bt_adp_map_client_mns_disconnect: state(%d), conn state(%d), req(%d), rsp(%d)")
TRC_MSG(BT_ADP_MAP_MNS_SEND_EVENT_REPORT_ENTRY,"[MAP_ADP]bt_adp_map_client_mns_send_event_response: state(%d), conn state(%d), req(%d), rsp(%d)")
TRC_MSG(BT_ADP_MAP_SEND_EVENT_RESPONSE_FAIL, "[MAP_ADP]event-report response fail, result(%d)")
TRC_MSG(BT_ADP_MAP_SET_FOLDER_ENTRY, "[MAP_ADP]bt_adp_map_client_set_folder: conn state(%d), folder flag(%d), req(%d), rsp(%d)")
TRC_MSG(BT_ADP_MAP_ABORT_ENTRY, "[MAP_ADP]bt_adp_map_client_abort: conn state(%d), req(%d), rsp(%d)")
TRC_MSG(BT_ADP_MAP_GET_FOLDER_LIST_SIZE_ENTRY, "[MAP_ADP]bt_adp_map_client_get_folder_list_size: conn state(%d), req(%d), rsp(%d)")
TRC_MSG(BT_ADP_MAP_GET_FOLDER_LIST_ENTRY, "[MAP_ADP]bt_adp_map_client_get_folder_list: conn state(%d), req(%d), rsp(%d)")
TRC_MSG(BT_ADP_MAP_GET_MESSAGE_LIST_SIZE_ENTRY, "[MAP_ADP]bt_adp_map_client_get_message_list_size: conn state(%d), req(%d), rsp(%d)")
TRC_MSG(BT_ADP_MAP_GET_MESSAGE_LIST_ENTRY, "[MAP_ADP]bt_adp_map_client_get_message_list: conn state(%d), req(%d), rsp(%d)")
TRC_MSG(BT_ADP_MAP_GET_MESSAGE_ENTRY, "[MAP_ADP]bt_adp_map_client_get_message: conn state(%d), req(%d), rsp(%d)")
TRC_MSG(BT_ADP_MAP_SET_NOTIF_ENTRY, "[MAP_ADP]bt_adp_map_client_set_notif_registration: conn state(%d), req(%d), rsp(%d), notify status(%d)")
TRC_MSG(BT_ADP_MAP_SET_MESSAGE_STATUS_ENTRY, "[MAP_ADP]bt_adp_map_client_set_message_status: conn state(%d), req(%d), rsp(%d)")
TRC_MSG(BT_ADP_MAP_UPDATE_INBOX_ENTRY, "[MAP_ADP]bt_adp_map_client_update_inbox: conn state(%d), req(%d), rsp(%d)")
TRC_MSG(BT_ADP_MAP_PUSH_MESSAGE_ENTRY, "[MAP_ADP]bt_adp_map_client_push_message: conn state(%d), req(%d), rsp(%d)")
TRC_MSG(BT_ADP_MAP_MNS_AUTH_RSP_ENTRY,"[MAP_ADP]bt_adp_map_client_mns_authorize_response: conn state(%d), req(%d), rsp(%d), auth flag(%d)")
TRC_MSG(BT_ADP_MAP_MNS_AUTH_RSP_FAIL, "[MAP_ADP]mns auth rsp fail")
TRC_MSG(BT_ADP_MAP_WRONG_OBJECT_TYPE, "[MAP_ADP]bt_adp_map_client_send_data: wrong object type(%d)")
TRC_MSG(BT_MAP_APP_CLIENT_CALLBACK_ENTRY, "[MAP_ADP]map_adp_client_callback: event(%d), mas conn state:(%d), mns conn state(%d), curr req(%d), curr rsp(%d)")
TRC_MSG(BT_MAP_APP_CLIENT_CALLBACK_EVENT_NOT_HANDLE, "[MAP_ADP]map_adp_client_callback: not handled event(%d)")
TRC_MSG(BT_ADP_MCE_CREATE_WORK_FOLDER_FAIL, "[MAP_ADP]FS_CreateDir: MCE fail to create the work folder, ret(%d)")
TRC_MSG(BT_ADP_MCE_ACTIVATE_FAIL, "[MAP_ADP]bt_adp_map_client_activate_handler: g_map_adp_cntx.initialized(%d)")
TRC_MSG(BT_ADP_MCE_REGISTER_MAS_CLIENT_FAIL, "[MAP_ADP]MAP_RegisterClient: MCE fail to register MAS client ")
TRC_MSG(BT_ADP_MCE_REGISTER_MNS_SERVER_FAIL, "[MAP_ADP]MAP_MnsRegisterServer: MCE fail to register MNS server ")
TRC_MSG(BT_ADP_MAP_DEACTIVATE_FAIL, "[MAP_ADP]bt_adp_map_client_activate_handler: deactivate fail, state(%d), conn state(%d), req(%d)")
TRC_MSG(BT_ADP_MAP_OPER_WITH_WRONG_STATE, "[MAP_ADP] MAP curent operation(%d), wrong state(%d)")
TRC_MSG(BT_ADP_MAP_CONNECT_TIMEOUT, "[MAP_ADP] MCE connect timeout")
TRC_MSG(BT_ADP_MAP_CONNECT_FAIL, "[MAP_ADP]MCE connect fail, return status(%d)")
TRC_MSG(BT_ADP_MAP_CLIENT_READ_DATA_INTO_FILE_FAIL,"[MAP_ADP]bt_adp_map_client_send_data: file handle(%d), FS_Read ret(%d)")
TRC_MSG(BT_ADP_MAP_CLIENT_WRITE_DATA_INTO_FILE_FAIL, "[MAP_ADP]bt_adp_map_client_receive_data: file handle(%d), FS_Write ret(%d)")
TRC_MSG(BT_ADP_MAP_CONNECT_LINK_INDEX, "[MAP_ADP]bt_adp_map_client_connect: mas_index = %d")
TRC_MSG(BT_ADP_MAP_SEARCH_LINK_INDEX, "[MAP_ADP]BTMAPAdpClientSearchLinkinConnect: link_index = %d")

TRC_MSG(BT_MAP_GOEP_CLIENT_CALLBACK_ENTRY, "[MAP]MapGoepClientCallback: event(%d), oper(%d), conn state(%d), abort reason(%d), fail rsp code(%d)")
TRC_MSG(BT_MAP_MNS_SERVER_CALLBACK_ENTRY,"[MAP]MapMnsGoepServerCallback: event(%d), oper(%d), mns state(%d), abort reason(%d)")
TRC_MSG(BT_MAP_CREATE_ACL_LINK_FAIL, "[MAP] MAP_ClientConnect:fail to create ACL link, return status(%d)")
TRC_MSG(BT_MAP_CREATE_OBEX_CONNECTION_FAIL, "[MAP]MAP_ClientObexConnect: fail to create Obex Connection, return status(%d)")
TRC_MSG(BT_MAP_GOEP_CLIENT_CB_EVENT_NOT_HANDLE, "[MAP]MapGoepClientCallback: can not handler event(%d)")
TRC_MSG(BT_MAP_MNS_SERVER_CB_EVENT_NOT_HANDLE, "[MAP]MapMnsGoepServerCallback: can not handler event(%d)")
TRC_MSG(BT_MAP_CLIENT_DISCONNECT_ENTRY, "[MAP]MAP_ClientDisconnect: curr map client conn state(%d)")
TRC_MSG(BT_MAP_GOEP_CLIENT_CB_FAIL_FOUND_ENTRY, "[MAP]MapGoepClientCallback: fail to find the object store entry")
TRC_MSG(BT_MAP_MNS_SERVER_CB_FAIL_FOUND_ENTRY, "[MAP]MapMnsGoepServerCallback: fail to find the object store entry")
TRC_MSG(BT_MAP_SET_FOLDER_RETURN, "[MAP]MAP_ClientSetFolder: return status(%d)")
TRC_MSG(BT_MAP_QUEUE_HEADER_RETURN, "[MAP]Put app headers to GOEP queue, return status(%d)")
TRC_MSG(BT_MAP_PULL_RETURN, "[MAP]Pull return(%d)")
TRC_MSG(BT_MAP_PUSH_RETURN, "[MAP]Push return(%d)")
TRC_MSG(BT_MAP_MNS_SERVER_RECV_OBEX_HEADER, "[MAP]MapMnsGoepServerCallback: recv obex header(%d)")
TRC_MSG(BT_MAP_MAS_CLIENT_RECV_OBEX_HEADER,"[MAP]MapGoepClientCallback: recv obex header(%d)")
TRC_MSG(BT_MAP_MAS_CLIENT_RECV_APP_HEADER, "[MAP]MapGoepClientCallback: recv app para header(%d)")
TRC_MSG(BT_MAP_MNS_SERVER_RECV_APP_HEADER, "[MAP]MapMnsGoepServerCallback: recv app para header(%d)")
TRC_MSG(BT_MAP_DISCONNECT_RESULT, "[MAP]MAP_ClientDisconnect: return status(%d), curr client conn state(%d)")
TRC_MSG(BT_MAP_GOEP_CLIEN_CB_COMPLETE_EVENTE_OPER_NOT_HANDLE, "[MAP]MapGoepClientCallback: GOEP_COMPLETE_EVENT, curr oper not handle(%d)")
TRC_MSG(BT_MAP_CLIENT_CALLBACK_LINK, "[MAP]MapGoepClientCallback: link_index = %d")
TRC_MSG(BT_MAP_CLIENT_SET_NOTIFICATION_TIMEOUT, "[MAP]MAP_ClientSetNotificationTimeOut: link_index = %d")
TRC_MSG(BT_MAP_CLIENT_DELETE_FILE, "[MAP]MAP_ClientDeleteFile: mas_id = %d")
TRC_MSG(BT_MAP_MNS_SERVER_CALLBACK_LINK, "[MAP]MapMnsGoepServerCallback: link_index = %d")
TRC_MSG(BT_MAP_CALL_GOEP_REGISTERCLIENT, "[MAP]MAPC call: GOEP_RegisterClient()")
TRC_MSG(BT_MAP_CALL_GOEP_REGISTERSERVER, "[MAP]MAPC call: GOEP_RegisterServer()")
TRC_MSG(BT_MAP_CALL_GOEP_DEREGISTERSERVER, "[MAP]MAPC call: GOEP_DeregisterServer()")
TRC_MSG(BT_MAP_CALL_GOEP_DEREGISTERCLIENT, "[MAP]MAPC call: GOEP_DeregisterClient()")
TRC_MSG(BT_MAP_CALL_GOEP_TPCONNECT, "[MAP]MAPC call: GOEP_TpConnect()")
TRC_MSG(BT_MAP_CALL_GOEP_CONNECT, "[MAP]MAPC call: GOEP_Connect()")
TRC_MSG(BT_MAP_CALL_GOEP_TPDISCONNECT, "[MAP]MAPC call: GOEP_TpDisconnect()")
TRC_MSG(BT_MAP_CALL_GOEP_DISCONNECT, "[MAP]MAPC call: GOEP_Disconnect()")
TRC_MSG(BT_MAP_CALL_GOEP_SERVERTPDISCONNECT, "[MAP]MAPC call: GOEP_ServerTpDisconnect()")
TRC_MSG(BT_MAP_CALL_GOEP_SETFOLDER, "[MAP]MAPC call: GOEP_SetFolder()")
TRC_MSG(BT_MAP_CALL_GOEP_CLIENTABORT, "[MAP]MAPC call: GOEP_ClientAbort()")
TRC_MSG(BT_MAP_CALL_GOEP_SERVERABORT, "[MAP]MAPC call: GOEP_ServerAbort()")
TRC_MSG(BT_MAP_CALL_GOEP_SERVERAUTHORIZERESPONSE, "[MAP]MAPC call: GOEP_ServerAuthorizeResponse()")
TRC_MSG(BT_MAP_CALL_GOEP_PULL, "[MAP]MAPC call: GOEP_Pull()")
TRC_MSG(BT_MAP_CALL_GOEP_PUSH, "[MAP]MAPC call: GOEP_Push()")
TRC_MSG(BT_MAP_CALL_GOEP_CLIENTCONTINUE, "[MAP]MAPC call: GOEP_ClientContinue()")
TRC_MSG(BT_MAP_CALL_GOEP_SERVERCONTINUE, "[MAP]MAPC call: GOEP_ServerContinue()")
TRC_MSG(BT_MAP_CALL_GOEP_SERVERGETTPCONNINFO, "[MAP]MAPC call: GOEP_ServerGetTpConnInfo()")
TRC_MSG(BT_MAP_CALL_GOEP_SERVERACCEPT, "[MAP]MAPC call: GOEP_ServerAccept()")

TRC_MSG(BT_MAP_OBS_NEW_OBS_FAIL, "[MAP_OBS]MAPOBS_ClientNew: fail to get a new object handle!!!")
TRC_MSG(BT_MAP_OBS_OBEX_GIVE_NULL_OBS_POINTER, "[MAP_OBS]Warning: OBEX transport layer use a null pointer to callback!!!")
TRC_MSG(BT_MAP_OBS_MAS_BEGIN_WRITE_FILE, "[MAP_OBS]MAPOBS_ClientWrite: begin to write file, curr object type(%d), total leng(%d), len(%d)")
TRC_MSG(BT_MAP_OBS_MAS_BEGIN_READ_FILE, "[MAP_OBS]MAPOBS_ClientRead: begin to read a file, curre object type(%d), total leng(%d), len(%d)")
TRC_MSG(BT_MAP_OBS_MAS_WRITE_FILE_PROGRESS, "[MAP_OBS]MAPOBS_ClientWrite: curr write progress, total len(%d), curr len(%d), curr file offset(%d)")
TRC_MSG(BT_MAP_OBS_MAS_READ_FILE_PROGRESS, "[MAP_OBS]MAPOBS_ClientRead: curr read progress, total len(%d), curr len(%d), curr file offset(%d)")
TRC_MSG(BT_MAP_OBS_MNS_BEGIN_WRITE_FILE,"[MAP_OBS]MAPOBS_MnsServerWrite: begin to write file, curr object type(%d), total len(%d), len(%d)")
TRC_MSG(BT_MAP_OBS_MNS_WRITE_PROGRESS, "[MAP_OBS]MAPOBS_MnsServerWrite: write progress, total len(%d), curr len(%d), curr offset(%d)")
TRC_MSG(BT_MAP_OBS_GET_OBJECT_LEN, "[MAP_OBS]MAPOBS_ClientGetObjectLen: object len(%d)")
TRC_MSG(BT_MAP_OBS_READ_FILE_FAIL, "[MAP_OBS]Read file fail, forbidden!!! len(%d), parms->push_pull_obj->buff_len(%d)")
TRC_MSG(BT_MAP_OBS_WRITE_FILE_FAIL, "[MAP_OBS]Write file fail, forbidden!!! len(%d), parms->push_pull_obj->buff_len(%d)")
TRC_MSG(BT_MAP_OBS_NEW_OBS, "[MAP_OBS]MAPOBS_ClientNew: obs = %x")
TRC_MSG(BT_MAP_OBS_CLOSE_OBS, "[MAP_OBS]MAPOBS_ClientClose: obs = %x")
TRC_MSG(BT_MAP_OBS_READ_WRITE_FAIL, "[MAP_OBS]MAPOBS read or write fail, wrong link index! goep_conn_id = %d, conn_id(0) = %d, conn_id(1) = %d")
/* MAP TRACE END */

/* BLE SERVICE DB START */
TRC_MSG(BLEDB_LOADRECORD, "[BleDB] Loading record...")
TRC_MSG(BLEDB_REMOVE_UNBONDEDDEVICE_FROMLIST, "[BleDB] Remove unbonded device record from list")
TRC_MSG(BLEDB_UPDATERECORD_OFFSET, "[BleDB] Update record in file, seek offset: %d")
TRC_MSG(BLEDB_REMOVERECORD_DELETEFILE, "[BleDB] Remove record, delete file directly...")
TRC_MSG(BLEDB_REMOVERECORD_NOTFOUND, "[BleDB] Remove record, NOT FOUND!")
TRC_MSG(BLEDB_BONDINGCB_STATUS, "[BleDB] bonding callback, status: 0x%x")
TRC_MSG(BLEDB_GETRECORD_NEW, "[BleDB] new record, bonding status: 0x%x")
/* BLE SERVICE DB END */

/* HTP TRACE START */
TRC_MSG(HTP_INITIALIZED, "[HTP] Initialized")
TRC_MSG(HTP_OPENCONNECTION, "[HTP] Open connection...")
TRC_MSG(HTP_CREATEDATALINK_STATUS, "[HTP] Create data link status: %d")
TRC_MSG(HTP_OPENGATT_STATUS, "[HTP] Open gatt connection status: %d")
TRC_MSG(HTP_CMGRCALLBACK_EVENT_STATUS, "[HTP] data link callback, event: %d, status: %d")
TRC_MSG(HTP_NOT_FOR_THE_DEVICE, "[HTP] data link callback, not for the device!")
TRC_MSG(HTP_CMGRCALLBACK_BDADDR0, "[HTP] data link callback, error in remote device address!")
TRC_MSG(HTP_GATTEVENTCALLBACK_EVENT, "[HTP] gatteventcallback event: %d")
TRC_MSG(HTP_GATTEVENTCALLBACK_IGNORE, "[HTP] gatteventcallback ignore connect event since thermometer is not enabled!")
TRC_MSG(HTP_GATTEVENTCALLBACK_INDICATION_IGNORE, "[HTP] gatteventcallback indication shall be ignored, attribute handle: 0x%x, start handle: 0x%x, end handle: 0x%x")
TRC_MSG(HTP_GATTEVENTCALLBACK_INDICATION_HANDLE, "[HTP] gatteventcallback indication event, handle: 0x%x")
TRC_MSG(HTP_GATTEVENTCALLBACK_NOTIFICAITON_HANDLE, "[HTP] gatteventcallback notification event, handle: 0x%x")
TRC_MSG(HTP_GATTEVENTCALLBACK_UNEXPECTED_EVENT, "[HTP] gatteventcallback unexpected event!")
TRC_MSG(HTP_BTADDR, "[HTP] bt addr: %x, %x, %x, %x, %x, %x")
TRC_MSG(HTP_QUEREYGATTSERVICE, "[HTP] query gatt service")
TRC_MSG(HTP_PACKETPOOL_EMPTY, "[HTP] packet pool is empty!")
TRC_MSG(HTP_GATTOPCALLBACK_EVENT, "[HTP] gatt callback event: 0x%x, flag: %d")
TRC_MSG(HTP_FINDPRIMARYSERVICE_UUID, "[HTP] find primary service callback, uuid: 0x%x")
TRC_MSG(HTP_SET_CLIENT_CONFIG_DESCRIPTOR, "[HTP] set client configure descriptor, flag: %d, uuid: 0x%x, handle: 0x%x")
TRC_MSG(HTP_SET_MEASUREMENT_INTERVAL, "[HTP] set measurement interval, value: %d,%d, handle: 0x%x")
TRC_MSG(HTP_SEND_TEMPERATURE_INDICATION, "[HTP] send temperature measurement indication, exponent: 0x%x, Mantissa: 0x%x%x%x")
TRC_MSG(HTP_SEND_TEMPERATURE_NOTIFICATION, "[HTP] send intermediate temperature notification, exponent: 0x%x, Mantissa: 0x%x%x%x")
TRC_MSG(HTP_CLEAR_CONNECTION_STATUS, "[HTP] clear connection status: %d")
TRC_MSG(HTP_FIND_ALLCHAR_ERROR_HANDLE, "[HTP] find all characteristic callback, error handle! Ignore it...")
TRC_MSG(HTP_FIND_ALLCHAR_INFO, "[HTP] find all characteristic info, handle: 0x%x, properties: 0x%x, value handle: 0x%x, uuid: 0x%x")
TRC_MSG(HTP_FIND_ALLCHARDESC_INFO, "[HTP] find characteristic descriptor info, handle: 0x%x, uuid: 0x%x")
TRC_MSG(HTP_FIND_ALLCHARDESC_COMPLETE, "[HTP] find characteristic descriptor complete, continue to read descriptor...")
TRC_MSG(HTP_FIND_ALLCHARDESC, "[HTP] find characteristic descriptor, start: 0x%x, end: 0x%x")
TRC_MSG(HTP_READ_CHAR_ERROR_HANDLE, "[HTP] read characteristic callback, error handle! ignore it...")
TRC_MSG(HTP_READ_CHAR_INFO, "[HTP] read characteristic info, handle: 0x%x, value[0]: 0x%x")
TRC_MSG(HTP_READ_CHAR_LASTONE, "[HTP] read characteristic complete, last one is read.")
TRC_MSG(HTP_READ_CHAR_NEXTONE, "[HTP] read characteristic complete, read next one, handle: 0x%x")
TRC_MSG(HTP_READ_CHARDESC_INFO, "[HTP] read characteristic descriptor info, char uuid: 0x%x, desc uuid: 0x%x")
TRC_MSG(HTP_READ_CHARDESC_ONEMORE, "[HTP] read characteristic descriptor one more descriptor, char uuid: 0x%x, desc uuid: 0x%x")
TRC_MSG(HTP_READ_CHARDESC_NEXTCHAR, "[HTP] read characteristic descriptor try next node...")
TRC_MSG(HTP_READ_CHARDESC_COMPLETE, "[HTP] read characteristic descriptor complete, continue to query DIS...")
TRC_MSG(HTP_READ_CHAR_HANDLE, "[HTP] read characteristic handle: 0x%x")
TRC_MSG(HTP_READ_CHARDESC_HANDLE, "[HTP] read characteristic descriptor handle: 0x%x")
TRC_MSG(HTP_WRITE_CHAR_HANDLE, "[HTP] write characteristic handle: 0x%x")
TRC_MSG(HTP_WRITE_CHARDESC_HANDLE, "[HTP] write characteristic descriptor handle: 0x%x")
TRC_MSG(HTP_WRITE_INTERVAL, "[HTP] write interval value: %d")
TRC_MSG(HTP_WRITE_TEMPERATURE_CLIENTCONFIG, "[HTP] write temperature characteristic client config descriptor: 0x%x")
TRC_MSG(HTP_WRITE_INTERTEMPERATURE_CLIENTCONFIG, "[HTP] write intermediate temperature characteristic client config descriptor: 0x%x")
TRC_MSG(HTP_WRITE_INTERVAL_CLIENTCONFIG, "[HTP] write interval characteristic client config descriptor: 0x%x")
TRC_MSG(HTP_REMOVEDATABASE_NO_MATCHED, "[HTP] remove service database, NO MATCHED device database in file!")
TRC_MSG(HTP_REMOVEDATABASE_DELETEFILE, "[HTP] remove service database, ONLY ONE matched device database in file, delete it...")
TRC_MSG(HTP_INTADP_HANDLE_MESSAGE, "[HTP ADP] handle mmi message: %d")
TRC_MSG(HTP_INTADP_CALLBACK, "[HTP ADP] callback, event: 0x%x, status: %d")
TRC_MSG(HTP_INTADP_SETCLIENTCONFIG, "[HTP ADP] set client configure descriptor, characteristic: %d, config: 0x%x")
TRC_MSG(HTP_INTADP_SEND_TEMPERATURE, "[HTP ADP] send temperature, flag: 0x%x, len: %d")
TRC_MSG(HTP_INTADP_SEND_TEMPERATURE_VALUE, "[HTP ADP] send temperature value, exponent: 0x%x, mantissa: 0x%x,0x%x,0x%x")

TRC_MSG(HTP_EXT_ADP_HANDLE_CONNECT_CMD, "[HTP EXT ADP] handle connect request wrong state: %d")
TRC_MSG(HTP_EXT_ADP_HANDLE_DISCONNECT_CMD, "[HTP EXT ADP] handle disconnect request wrong state: %d")
//TRC_MSG(, "[HTP EXT ADP] ")

/* HTP TRACE END */

/* FMP TRACE START */
TRC_MSG(FMP_INITIALIZED, "[FMP] Initialized.")
TRC_MSG(FMP_CMGRCALLBACK_EVENT_STATUS, "[FMP] data link callback, event: %d, status: %d")
TRC_MSG(FMP_NOT_FOR_THE_DEVICE, "[FMP] data link callback, not for the device!")
TRC_MSG(FMP_CMGRCALLBACK_BDADDR0, "[FMP] data link callback, error in remote device address!")
TRC_MSG(FMP_OPENGATT_STATUS, "[FMP] open gatt connection status: %d")
TRC_MSG(FMP_GATTEVENTCALLBACK_EVENT, "[FMP] gatt event callback, event: 0x%x")
TRC_MSG(FMP_GATTEVENTCALLBACK_UNEXPECTED_EVENT, "[FMP] gatt event callback, unexpected event!")
TRC_MSG(FMP_GATTOPCALLBACK_EVENT, "[FMP] gatt operation callback, op: 0x%x, flag: %d")
TRC_MSG(FMP_PACKETPOOL_EMPTY, "[FMP] packet pool is empty!")
TRC_MSG(FMP_OPENCONNECTION, "[FMP] open connection...")
TRC_MSG(FMP_CREATEDATALINK_STATUS, "[FMP] create data link status: %d")
TRC_MSG(FMP_QUEREYGATTSERVICE, "[FMP] query gatt service...")
TRC_MSG(FMP_FINDPRIMARYSERVICE, "[FMP] find primary service, start handle: 0x%x, end handle: 0x%x")
TRC_MSG(FMP_FINDCHARATERISTIC, "[FMP] find characteristic, handle: 0x%x, property: 0x%x, uuid: 0x%x")
TRC_MSG(FMP_ALERTLEVEL_WRITE, "[FMP] write alert level callback, alert: %d")
TRC_MSG(FMP_REMOVEDATABASE_NO_MATCHED, "[FMP] remove service database, no matched device has been found!")
TRC_MSG(FMP_CLEAR_CONNECTION_STATUS, "[FMP] clear connection, status: 0x%x")
TRC_MSG(FMP_INTADP_HANDLE_MESSAGE, "[FMP ADP] handle mmi message: %d")
TRC_MSG(FMP_INTADP_CALLBACK, "[FMP ADP] callback, event: 0x%x, status: %d")
//TRC_MSG(, "[FMP] ")


/* FMP TRACE START */

/* MBT TRACE START */
TRC_MSG(BT_MBT_TRACE_START, "BT_MBT_TRACE_START") /* MBT LOG FILTER. DO NOT MODIFY */

/* MBT A2DP TRACE */
TRC_MSG(BTLOG_MBT_A2DP_SOURCE_ENABLED, "[MBT] mbt_a2dp_source_enable")
TRC_MSG(BTLOG_MBT_A2DP_SOURCE_DISABLED, "[MBT] mbt_a2dp_source_disable")
TRC_MSG(BTLOG_MBT_A2DP_SOURCE_CONNECT, "[MBT] mbt_a2dp_source_connect: bdaddr=%02x:%02x:%02x:%02x:%02x:%02x")
TRC_MSG(BTLOG_MBT_A2DP_SOURCE_DISCONNECT, "[MBT] mbt_a2dp_source_disconnect: bdaddr=%02x:%02x:%02x:%02x:%02x:%02x")
TRC_MSG(BTLOG_MBT_A2DP_SOURCE_START, "[MBT] mbt_a2dp_source_start")
TRC_MSG(BTLOG_MBT_A2DP_SOURCE_STOP, "[MBT] mbt_a2dp_source_stop")
TRC_MSG(BTLOG_MBT_A2DP_SOURCE_PAUSE, "[MBT] mbt_a2dp_source_pause")
TRC_MSG(BTLOG_MBT_A2DP_SOURCE_RESUME, "[MBT] mbt_a2dp_source_resume")
/* MBT AVRCP TRACE */
TRC_MSG(BTLOG_MBT_AVRCP_ENABLED, "[MBT] mbt_avrcp_enable")
TRC_MSG(BTLOG_MBT_AVRCP_DISABLED, "[MBT] mbt_avrcp_disable")
TRC_MSG(BTLOG_MBT_AVRCP_CONNECT, "[MBT] mbt_avrcp_connect: bdaddr=%02x:%02x:%02x:%02x:%02x:%02x")
TRC_MSG(BTLOG_MBT_AVRCP_DISCONNECT, "[MBT] mbt_avrcp_disconnect")
TRC_MSG(BTLOG_MBT_WISE_CMD_REQ, "[MBT] btmtk_avrcp_wise_send_cmd_reqbdaddr=%02x:%02x:%02x:%02x:%02x:%02x, value:%02x")
/* MBT DUN TRACE */
TRC_MSG(BT_DUN_MBT_ENABLE, "[BT_DUN_MBT] btmtk_dun_mbt_enable()")
TRC_MSG(BT_DUN_MBT_DISABLE, "[BT_DUN_MBT] btmtk_dun_mbt_disable()")
TRC_MSG(BT_DUN_MBT_DISCONNECT, "[BT_DUN_MBT] btmtk_dun_mbt_disconnect()")
TRC_MSG(BT_DUN_MBT_LISTEN, "[BT_DUN_MBT] btmtk_dun_mbt_listen()")
TRC_MSG(BT_DUN_MBT_LISTENSTOP, "[BT_DUN_MBT] btmtk_dun_mbt_listenstop()")
TRC_MSG(BT_DUN_MBT_ISCONNECTED, "[BT_DUN_MBT] btmtk_dun_is_connected()")
TRC_MSG(BT_DUN_MBT_ISDEVCONNECTED, "[BT_DUN_MBT] btmtk_dun_is_dev_connected()")
TRC_MSG(BT_DUN_MBT_AUTHORIZE_RES, "[BT_DUN_MBT] btmtk_dun_authorize_res(), result=%d")
TRC_MSG(BT_DUN_MBT_CB_ENABLE_CNF, "[BT_DUN_MBT] btmtk_dun_mbt_cb_enable_cnf()")
TRC_MSG(BT_DUN_MBT_CB_DISABLE_CNF, "[BT_DUN_MBT] btmtk_dun_mbt_cb_disable_cnf()")
TRC_MSG(BT_DUN_MBT_CB_LISTEN_CNF, "[BT_DUN_MBT] btmtk_dun_mbt_cb_listen_cnf()")
TRC_MSG(BT_DUN_MBT_CB_LISTEN_STOP_CNF, "[BT_DUN_MBT] btmtk_dun_mbt_cb_listen_stop_cnf()")
TRC_MSG(BT_DUN_MBT_CB_CONNECT_IND_REQ, "[BT_DUN_MBT] btmtk_dun_mbt_cb_connect_ind_req()")
TRC_MSG(BT_DUN_MBT_CB_CONNECT_IND, "[BT_DUN_MBT] btmtk_dun_mbt_cb_connect_ind()")
TRC_MSG(BT_DUN_MBT_CB_DISCONNECT_IND, "[BT_DUN_MBT] btmtk_dun_mbt_cb_disconnect_ind()")
TRC_MSG(BT_DUN_MBT_CB_DISCONNECT_CNF, "[BT_DUN_MBT] btmtk_dun_mbt_cb_disconnect_cnf()")
/* MBT FTP TRACE */
TRC_MSG(BT_FTP_WISE_API_POST_EVENT, "[MBT][CB] post event:(%d) idx:(%d) oper:(%d)")
TRC_MSG(BT_FTP_WISE_API_SDC_STATUS, "[MBT][CB] sdcFtpStatus oper:%d stat:%d reason:%d")
TRC_MSG(BT_FTP_WISE_API_SERVER_ENABLE, "[MBT][API] btmtk_ftp_server_enable")
TRC_MSG(BT_FTP_WISE_API_SERVER_DISABLE, "[MBT][API] btmtk_ftp_server_disable")
TRC_MSG(BT_FTP_WISE_API_SERVER_ACCESS_RESPONSE, "[MBT][API] btmtk_ftp_server_access_response reply:%d oper:%d rspcode:%d")
TRC_MSG(BT_FTP_WISE_API_SERVER_ACCESS_RESPONSE_FOLDER, "[MBT] folder:(%s) obj:(%s)")
TRC_MSG(BT_FTP_WISE_API_SERVER_AUTH_RESPONSE, "[MBT][API] btmtk_ftp_authorize_res %d")
TRC_MSG(BT_FTP_WISE_API_SERVER_SETROOTFOLDER, "[MBT][API] btmtk_ftp_server_setrootfolder path:(%s)")
TRC_MSG(BT_FTP_WISE_API_SERVER_DISCONNECT, "[MBT][API] btmtk_ftp_server_disconnect")
TRC_MSG(BT_FTP_WISE_API_SERVER_AUTHORIZE_RES, "[MBT] btmtk_ftp_authorize_res authMode:(%d)")
TRC_MSG(BT_FTP_WISE_API_SERVER_EXTOBJECT, "[MBT] ExtObject isAdd:%d isFolder:%d Name:'%s' ")
TRC_MSG(BT_FTP_WISE_API_IS_CONNECTED, "[MBT] btmkt_ftp_is_connected l_ret:(%d) state:(%d)")
TRC_MSG(BT_FTP_WISE_API_IS_DEV_CONNECTED, "[MBT] btmkt_ftp_is_dev_connected l_ret:(%d) state:(%d)")
TRC_MSG(BT_FTP_WISE_API_SERVER_CB, "[MBT][CB] bt_ftps_ui_cb UI Event:%d   data=%d")
TRC_MSG(BT_FTP_WISE_API_SERVER_CB_FOLDER, "[MBT][CB] folder:(%s)  obj_name:(%s)")
TRC_MSG(BT_FTP_WISE_API_CLIENT_ENABLE, "[MBT][API] btmtk_ftp_client_enable")
TRC_MSG(BT_FTP_WISE_API_CLIENT_DISABLE, "[MBT][API] btmtk_ftp_client_disable")
TRC_MSG(BT_FTP_WISE_API_CLIENT_OPEN, "[MBT][API] btmtk_ftp_client_open addr:%x:%x:%x:%x:%x:%x c.state:%d")
TRC_MSG(BT_FTP_WISE_API_CLIENT_CLOSE, "[MBT][API] btmtk_ftp_client_close")
TRC_MSG(BT_FTP_WISE_API_CLIENT_AUTH_RESPONSE, "[MBT][API] btmtk_ftp_client_auth_response %d")
TRC_MSG(BT_FTP_WISE_API_CLIENT_PUTFILE, "[MBT][API] btmtk_ftp_client_putfile dir:(%s) file:(%s)")
TRC_MSG(BT_FTP_WISE_API_CLIENT_GETFILE, "[MBT][API] btmtk_ftp_client_getfile dir:(%s) file:(%s)")
TRC_MSG(BT_FTP_WISE_API_CLIENT_CHDIR, "[MBT][API] btmtk_ftp_client_chdir dir:(%s)")
TRC_MSG(BT_FTP_WISE_API_CLIENT_MKDIR, "[MBT][API] btmtk_ftp_client_mkdir dir:(%s)")
TRC_MSG(BT_FTP_WISE_API_CLIENT_LISTDIR, "[MBT][API] btmtk_ftp_client_listdir dir:(%s) file:(%s)")
TRC_MSG(BT_FTP_WISE_API_CLIENT_DELDIR, "[MBT][API] btmtk_ftp_client_deldir dir:(%s)")
TRC_MSG(BT_FTP_WISE_API_CLIENT_DELFILE, "[MBT][API] btmtk_ftp_client_delfile file:(%s)")
TRC_MSG(BT_FTP_WISE_API_CLIENT_ABORT, "[MBT][API] btmtk_ftp_client_abort")
TRC_MSG(BT_FTP_WISE_API_CLIENT_CB, "[MBT][CB] bt_ftpc_ui_cb UI Event:%d   data=%d")
TRC_MSG(BT_FTP_WISE_API_CLIENT_CB_NOHANDLE, "[MBT][CB] Error no handle !")
TRC_MSG(BT_FTP_WISE_ERR_CLIENT_OPEN, "[MBT][WRN] btmtk_ftp_client_open fail!")
TRC_MSG(BT_FTP_WISE_ERR_CLIENT_CLOSE, "[MBT][WRN] btmtk_ftp_client_close fail!")
TRC_MSG(BT_FTP_WISE_ERR_CLIENT_MKDIR, "[MBT][WRN] btmtk_ftp_client_mkdir fail!")
TRC_MSG(BT_FTP_WISE_ERR_CLIENT_PUT_FILE, "[MBT][WRN] btmtk_ftp_client_putfile fail!")
TRC_MSG(BT_FTP_WISE_ERR_CLIENT_GET_FILE, "[MBT][WRN] btmtk_ftp_client_getfile fail!")
TRC_MSG(BT_FTP_WISE_ERR_CLIENT_ABORT, "[MBT][WRN] btmtk_ftp_client_abort fail!")
TRC_MSG(BT_FTP_WISE_ERR_CLIENT_DELDIR, "[MBT][WRN] btmtk_ftp_client_deldir fail!")
TRC_MSG(BT_FTP_WISE_ERR_CLIENT_DELFILE, "[MBT][WRN] btmtk_ftp_client_delfile fail!")
TRC_MSG(BT_FTP_WISE_ERR_CLIENT_LISTDIR, "[MBT][WRN] btmtk_ftp_client_listdir fail!")
TRC_MSG(BT_FTP_WISE_ERR_CLIENT_CHDIR, "[MBT][WRN] btmtk_ftp_client_chdir fail! isroot:(%d)")
/* MBT GAP TRACE */
TRC_MSG(BTLOG_MBT_GAP_POWER_ON_REQ, "[MBT][GAP] btmtk_gap_power_on_req")
TRC_MSG(BTLOG_MBT_GAP_STATE_OFF, "[MBT][GAP]BT off. Operation failed")
TRC_MSG(BTLOG_MBT_GAP_POWER_OFF_REQ, "[MBT][GAP] btmtk_gap_power_off_req")
TRC_MSG(BTLOG_MBT_GAP_DISCOVERY_REQ, "[MBT][GAP] btmtk_gap_discovery_request: MBTSvcID=0x%x, nMaxCount=%d")
TRC_MSG(BTLOG_MBT_GAP_DISCOVERY_FILTER_REQ, "[MBT][GAP] btmtk_gap_discovery_filter_request: nMaxCount=%d, bdaddr=%02x:%02x:%02x:%02x:%02x:%02x")
TRC_MSG(BTLOG_MBT_GAP_DISCOVERY_FILTER_REQ_PARAM, "[MBT][GAP] MBTSvc=0x%x, CoD (0x%x, 0x%x, 0x%x), Range=%d, with name=%d,  duration=%d")
TRC_MSG(BTLOG_MBT_GAP_IS_CONNECTED, "[MBT][GAP] btmtk_gap_is_connected")
TRC_MSG(BTLOG_MBT_GAP_IS_PROFILE_CONNECTED, "[MBT][GAP] btmtk_gap_is_profile_connected: 0x%x")
TRC_MSG(BTLOG_MBT_GAP_GET_LINK_STATE_REQ, "[MBT][GAP] btmtk_gap_get_link_state_request: bdaddr=%02x:%02x:%02x:%02x:%02x:%02x")
TRC_MSG(BTLOG_MBT_GAP_DISCOVERY_CANCEL_REQ, "[MBT][GAP] btmtk_gap_discovery_cancel_request")
TRC_MSG(BTLOG_MBT_GAP_WRITE_LOCAL_NAME_REQ, "[MBT][GAP] btmtk_gap_write_local_name_request: name=%s")
TRC_MSG(BTLOG_MBT_GAP_WRITE_REMOTE_NAME_REQ, "[MBT][GAP] btmtk_gap_write_remote_name_request: bdaddr=%02x:%02x:%02x:%02x:%02x:%02x, nickname=%s")
TRC_MSG(BTLOG_MBT_GAP_IS_AUTHORIZED, "[MBT][GAP] btmtk_gap_is_authorized: bdaddr=%02x:%02x:%02x:%02x:%02x:%02x")
TRC_MSG(BTLOG_MBT_GAP_SET_AUTHORIZED, "[MBT][GAP] btmtk_gap_set_authorize: bdaddr=%02x:%02x:%02x:%02x:%02x:%02x, bAuthorize=%d")
TRC_MSG(BTLOG_MBT_GAP_AUTHORIZE_RESPONSE, "[MBT][GAP] btmtk_gap_authorize_response: AuthMode=%d, AuthSvc=0x%x")
TRC_MSG(BTLOG_MBT_GAP_READ_REMOTE_NAME_REQ, "[MBT][GAP] btmtk_gap_read_remote_name_request: bdaddr=%02x:%02x:%02x:%02x:%02x:%02x")
TRC_MSG(BTLOG_MBT_GAP_READ_REMOTE_NAME_CANCEL_REQ, "[MBT][GAP] btmtk_gap_read_remote_name_cancel_request")
TRC_MSG(BTLOG_MBT_GAP_SET_VISIBLE_REQ, "[MBT][GAP] btmtk_gap_set_visible_request: bVisible=%d")
TRC_MSG(BTLOG_MBT_GAP_SET_CONNECTABLE_REQ, "[MBT][GAP] btmtk_gap_set_connectable_request: bConnectable=%d")
TRC_MSG(BTLOG_MBT_GAP_BONDING_REQ, "[MBT][GAP] btmtk_gap_bonding_request: bdaddr=%02x:%02x:%02x:%02x:%02x:%02x, len=%d, pin=%x %x %x %x %x %x %x %x %x %x %x %x %x %x %x %x")
TRC_MSG(BTLOG_MBT_GAP_BONDING_CANCEL_REQ, "[MBT][GAP] btmtk_gap_bonding_cancel_request")
TRC_MSG(BTLOG_MBT_GAP_PAIRING_REQ, "[MBT][GAP] btmtk_gap_pairing_request: bAccept=%d, len=%d, pin=%x %x %x %x %x %x %x %x %x %x %x %x %x %x %x %x")
TRC_MSG(BTLOG_MBT_GAP_SERVICE_SEARCH_REQ, "[MBT][GAP] btmtk_gap_service_search_request: bdaddr=%02x:%02x:%02x:%02x:%02x:%02x")
TRC_MSG(BTLOG_MBT_GAP_SERVICE_SEARCH_FILTER_REQ, "[MBT][GAP] btmtk_gap_service_search_filter_request=%02x:%02x:%02x:%02x:%02x:%02x")
TRC_MSG(BTLOG_MBT_GAP_SERVICE_SEARCH_FILTER_REQ_PARAM, "[MBT][GAP] btmtk_gap_service_search_filter_request=0x%x, 0x%x, 0x%x, 0x%x, 0x%x, 0x%x, 0x%x, 0x%x, 0x%x, 0x%x, 0x%x, 0x%x")
TRC_MSG(BTLOG_MBT_GAP_SERVICE_SEARCH_CANCEL_REQ, "[MBT][GAP] btmtk_gap_service_search_cancel_request")
TRC_MSG(BTLOG_MBT_GAP_DELETE_TRUST_REQ, "[MBT][GAP] btmtk_gap_delete_trust_request: bdaddr=%02x:%02x:%02x:%02x:%02x:%02x")
TRC_MSG(BTLOG_MBT_GAP_DELETE_TRUST_ALL_REQ, "[MBT][GAP] btmtk_gap_delete_trust_all_request")
TRC_MSG(BTLOG_MBT_GAP_SECURITY_USER_CONFIRM_RES, "[MBT][GAP] btmtk_gap_security_user_confirm_response: bAccept=%d")
TRC_MSG(BTLOG_MBT_GAP_BLOCK_LIST_ADD_REQ, "[MBT][GAP] btmtk_gap_block_list_add_request: bdaddr=%02x:%02x:%02x:%02x:%02x:%02x")
TRC_MSG(BTLOG_MBT_GAP_BLOCK_LIST_REMOVE_REQ, "[MBT][GAP] btmtk_gap_block_list_remove_request: bdaddr=%02x:%02x:%02x:%02x:%02x:%02x")
TRC_MSG(BTLOG_MBT_GAP_SET_INIT, "[MBT][GAP] btmtk_gap_set_init: 0x%x")
TRC_MSG(BTLOG_MBT_GAP_HANDLE_POWER_ON_CNF, "[MBT][GAP] btmtk_gap_handle_power_on_cnf: result=%d")
TRC_MSG(BTLOG_MBT_GAP_HANDLE_POWER_OFF_CNF, "[MBT][GAP] btmtk_gap_handle_power_off_cnf: result=%d")
TRC_MSG(BTLOG_MBT_GAP_ERR_MAX_REACHED, "[MBT][GAP] err: Maximum number reached")
TRC_MSG(BTLOG_MBT_GAP_HANDLE_DISCOVERY_RESULT_IND_ERR_BLOCKED, "[MBT][GAP] err: address has been blocked")
TRC_MSG(BTLOG_MBT_GAP_HANDLE_DISCOVERY_RESULT_IND_ERR_SEARCHED, "[MBT][GAP] err: address has been searched")
TRC_MSG(BTLOG_MBT_GAP_ERR_ADDR_MISMATCHED, "[MBT][GAP] err: address mismatched")
TRC_MSG(BTLOG_MBT_GAP_HANDLE_DISCOVERY_RESULT_IND_ERR_COD_MISMATCHED, "[MBT][GAP] err: CoD mismatched")
TRC_MSG(BTLOG_MBT_GAP_HANDLE_DISCOVERY_RESULT_IND_SVC, "[MBT][GAP] EIR services: 0x%x, 0x%x, 0x%x, 0x%x, 0x%x")
TRC_MSG(BTLOG_MBT_GAP_HANDLE_DISCOVERY_RESULT_IND_ERR_SVC_MISMATCHED, "[MBT][GAP] err: service not found")
TRC_MSG(BTLOG_MBT_GAP_HANDLE_DISCOVERY_RESULT_IND_ERR_RSSI_MISMATCHED, "[MBT][GAP] err: RSSI mismatched")
TRC_MSG(BTLOG_MBT_GAP_HANDLE_DISCOVERY_RESULT_IND_POST_EVENT, "[MBT][GAP] %d entries in searched list")
TRC_MSG(BTLOG_MBT_GAP_HANDLE_DISCOVERY_CNF, "[MBT][GAP] btmtk_gap_handle_discovery_cnf: result=%d, found=%d")
TRC_MSG(BTLOG_MBT_GAP_HANDLE_GET_SCATTERNET_STATE_CNF, "[MBT][GAP] btmtk_gap_handle_get_scatternet_state_cnf: return %d")
TRC_MSG(BTLOG_MBT_GAP_HANDLE_GET_LINK_STATE_CNF, "[MBT][GAP] btmtk_gap_handle_get_link_state_cnf: profile 0x%x return %d")
TRC_MSG(BTLOG_MBT_GAP_HANDLE_WRITE_LOCAL_NAME_CNF, "[MBT][GAP] btmtk_gap_handle_write_local_name_cnf: return %d")
TRC_MSG(BTLOG_MBT_GAP_ERR_CANCELED, "[MBT][GAP] err: operation already cancelled")
TRC_MSG(BTLOG_MBT_GAP_HANDLE_WRITE_SCANENABLE_CNF, "[MBT][GAP] btmtk_gap_handle_write_scanenable_mode_cnf: return %d")
TRC_MSG(BTLOG_MBT_GAP_HANDLE_PIN_CODE_IND_IS_BOND, "[MBT][GAP] during bonding=%d")
TRC_MSG(BTLOG_MBT_GAP_HANDLE_PIN_CODE_IND_ERR_NOT_21, "[MBT][GAP] err: peer do not support v2.1, try v2.0 bonding")
TRC_MSG(BTLOG_MBT_GAP_HANDLE_BONDING_CNF_ERR_STATE_MISMATCHED, "[MBT][GAP] err: not bonding state")
TRC_MSG(BTLOG_MBT_GAP_HANDLE_BONDING_CNF_ERR_ADDR_MISMATCHED, "[MBT][GAP] err: not bonding addr=%02x:%02x:%02x:%02x:%02x:%02x")
TRC_MSG(BTLOG_MBT_GAP_HANDLE_BONDING_CNF_ERR_RECEIVED, "[MBT][GAP] err: error bonding response received")
TRC_MSG(BTLOG_MBT_GAP_HANDLE_DELETE_TRUST_CNF_UPDATE_BLIST, "[MBT][GAP] btmtk_gap_handle_delete_trust_cnf: update block list")
TRC_MSG(BTLOG_MBT_GAP_HANDLE_DELETE_TRUST_CNF, "[MBT][GAP] btmtk_gap_handle_delete_trust_cnf: return %d")
TRC_MSG(BTLOG_MBT_GAP_HANDLE_DELETE_TRUST_ALL_CNF, "[MBT][GAP] btmtk_gap_handle_delete_trust_all_cnf: return %d")
TRC_MSG(BTLOG_MBT_GAP_HANDLE_LINK_STATE_IND, "[MBT][GAP] btmtk_gap_handle_link_state_ind: link no=%d->%d, addr=0x%x:0x%x:0x%x")
TRC_MSG(BTLOG_MBT_GAP_HANDLE_BLOCK_LIST_UPDATE_CNF, "[MBT][GAP] btmtk_gap_handle_block_list_update_cnf: add=%d, rem=%d")
TRC_MSG(BTLOG_MBT_GAP_HANDLE_AUTHORIZE_REQ, "[MBT][GAP] btmtk_gap_handle_authorize_req: MBTSvcID=0x%x, addr=%02x:%02x:%02x:%02x:%02x:%02x")
TRC_MSG(BTLOG_MBT_GAP_HANDLE_INT_MESSAGE, "[MBT][GAP] btmtk_gap_handle_int_message: op=%d")
TRC_MSG(BTLOG_MBT_GAP_INT_DUMP_CNTX, "[MBT][GAP] btmtk_gap_int_dump_cntx(): op[%d] = %d")
TRC_MSG(BTLOG_MBT_GAP_INT_SET_CNTX, "[MBT][GAP] btmtk_gap_int_set_cntx(%d)")
TRC_MSG(BTLOG_MBT_GAP_INT_RESET_CNTX, "[MBT][GAP] btmtk_gap_int_reset_cntx(%d)")
TRC_MSG(BTLOG_MBT_GAP_POST_EVENT, "[MBT][GAP] post event %d")
TRC_MSG(BTLOG_MBT_GAP_LOG_STRING, "[MBT][GAP] str[10] = %c%c%c%c%c%c%c%c%c%c")
TRC_MSG(BTLOG_MBT_GAP_BUSY, "[MBT][GAP] GAP busy, unable to start request %d")
/* MBT AG TRACE */
TRC_MSG(BT_HFG_WISE_API_ENABLE, "[AG][API] btmtk_ag_enable")
TRC_MSG(BT_HFG_WISE_API_DISABLE, "[AG][API] btmtk_ag_disable")
TRC_MSG(BT_HFG_WISE_API_CONNECT, "[AG][API] btmtk_ag_connect(addr=0x%02X%02X%02X%02X%02X%02X, svc=0x%04X)")
TRC_MSG(BT_HFG_WISE_API_DISCONNECT, "[AG][API] btmtk_ag_disconnect(addr=0x%02X%02X%02X%02X%02X%02X, svc=0x%04X)")
TRC_MSG(BT_HFG_WISE_API_AUDIO_CONNECT, "[AG][API] btmtk_ag_audioconnect")
TRC_MSG(BT_HFG_WISE_API_AUDIO_DISCONNECT, "[AG][API] btmtk_ag_audiodisconnect")
TRC_MSG(BT_HFG_WISE_API_GET_CON_STATUS, "[AG][API] btmtk_ag_getconstatus ret=%d")
TRC_MSG(BT_HFG_WISE_API_GET_AUDIO_CON_STATUS, "[AG][API] btmtk_ag_getaudiostatus ret=%d")
TRC_MSG(BT_HFG_WISE_API_SET_CONNECTABLE, "[AG][API] btmtk_ag_setconnectable(%d)")
TRC_MSG(BT_HFG_WISE_API_SET_AUDIO_PATH, "[AG][API] btmtk_ag_setaudiopath(%d)")
TRC_MSG(BT_HFG_WISE_API_SET_SPK_VOLUME, "[AG][API] btmtk_ag_setspkvolume(%d)")
TRC_MSG(BT_HFG_WISE_API_CALL_STATE_CHANGE, "[AG][API] btmtk_ag_callstatechange(%d)")
TRC_MSG(BT_HFG_WISE_API_SET_NETWORK_STATUS, "[AG][API] btmtk_ag_setnetworkstatus(%d)")
TRC_MSG(BT_HFG_WISE_API_SET_CALLER_ID, "[AG][API] btmtk_ag_setcid(Len=%d)")
TRC_MSG(BT_HFG_WISE_API_SET_SIGNAL_STRENGTH, "[AG][API] btmtk_ag_setsignalstrength(%d)")
TRC_MSG(BT_HFG_WISE_API_SET_ROAMING_STATUS, "[AG][API] btmtk_ag_setroamingstatus(%d)")
TRC_MSG(BT_HFG_WISE_API_SET_BATTERY_LEVEL, "[AG][API] btmtk_ag_setbatterylevel(%d)")
TRC_MSG(BT_HFG_WISE_API_SET_CALLHELD_STATUS, "[AG][API] btmtk_ag_setcallheldstatus(%d)")
TRC_MSG(BT_HFG_WISE_API_SET_OPERATOR_SELECTION, "[AG][API] btmtk_ag_setoperatorselection(mode=%d)")
TRC_MSG(BT_HFG_WISE_API_SET_EXTENDED_ERROR, "[AG][API] btmtk_ag_setextendederror(%d)")
TRC_MSG(BT_HFG_WISE_API_SET_SUBSCRIBER_NUMBER, "[AG][API] btmtk_ag_setsubscribernumber(Len=%d, type=%d, svc=%d, final=%d)")
TRC_MSG(BT_HFG_WISE_API_SET_CALL_WAITING, "[AG][API] btmtk_ag_setcallwaiting(Len=%d)")
TRC_MSG(BT_HFG_WISE_API_SEND_RESPONSE, "[AG][API] btmtk_ag_sendresponse(%d)")
TRC_MSG(BT_HFG_WISE_API_SET_CIND, "[AG][API] btmtk_ag_setcind(net=%d, call=%d, callsetup=%d, signal=%d, roam=%d, batt=%d, callheld=%d)")
TRC_MSG(BT_HFG_WISE_API_SET_CURRENT_CALL_LIST, "[AG][API] btmtk_ag_setcurrentcalllist(index=%d, dir=%d, status=%d, mode=%d, mpty=%d, type=%d, Len=%d, final=%d)")
TRC_MSG(BT_HFG_WISE_API_START_VR, "[AG][API] btmtk_ag_startvr")
TRC_MSG(BT_HFG_WISE_API_STOP_VR, "[AG][API] btmtk_ag_stopvr")
TRC_MSG(BT_HFG_WISE_API_RING_START, "[AG][API] btmtk_ag_ringstart")
TRC_MSG(BT_HFG_WISE_API_RING_STOP, "[AG][API] btmtk_ag_ringstop")
TRC_MSG(BT_HFG_WISE_API_SEND_SUPPORTED_PB_LIST, "[AG][API] btmtk_ag_sendsupportedpblist(num=%d)")
TRC_MSG(BT_HFG_WISE_API_SEND_SELECTED_PB_INFO, "[AG][API] btmtk_ag_sendselectedpbinfo(result=%d, used=%d, total=%d)")
TRC_MSG(BT_HFG_WISE_API_SEND_PB_SELECT_RESULT, "[AG][API] btmtk_ag_sendpbselectresult(result=%d, err=%d)")
TRC_MSG(BT_HFG_WISE_API_SEND_PB_ENTRIES_INFO, "[AG][API] btmtk_ag_sendpbentriesinfo(result=%d, start=%d, end=%d, maxLenNum=%d, maxLenText=%d)")
TRC_MSG(BT_HFG_WISE_API_SEND_PB_READ_RESULT, "[AG][API] btmtk_ag_sendpbreadresult(result=%d, index=%d, number=%s, type=%d, text=%s, final=%d)")
TRC_MSG(BT_HFG_WISE_API_SEND_PB_FIND_ENTRIES_INFO, "[AG][API] btmtk_ag_sendpbfindentriesinfo(result=%d, maxLenNum=%d, maxLenText=%d)")
TRC_MSG(BT_HFG_WISE_API_SEND_PB_FIND_RESULT, "[AG][API] btmtk_ag_sendpbfindresult(result=%d, index=%d, number=%s, type=%d, text=%s, final=%d)")
TRC_MSG(BT_HFG_WISE_API_SEND_PB_WRITE_INFO, "[AG][API] btmtk_ag_sendpbwriteinfo(result=%d, indStart=%d, indEnd=%d, maxLenNum=%d, typeStart=%d, typeEnd=%d, maxLenText=%d)")
TRC_MSG(BT_HFG_WISE_API_SEND_PB_WRITE_RESULT, "[AG][API] btmtk_ag_sendpbwriteresult(result=%d)")
TRC_MSG(BT_HFG_WISE_API_SET_CGM, "[AG][API] btmtk_ag_setcgm(manufacture=%s, model=%s)")
TRC_MSG(BT_HFG_WISE_API_SET_CSCS, "[AG][API] btmtk_ag_setcscs")
TRC_MSG(BT_HFG_WISE_API_SET_MULTI_FUNCTION_KEY, "[AG][API] btmtk_ag_setmultifunckey(%d)")
TRC_MSG(BT_HFG_WISE_API_SET_CALL_STATUS, "[AG][API] btmtk_ag_setcallstatus(%d)")
TRC_MSG(BT_HFG_WISE_API_SET_CALLSETUP, "[AG][API] btmtk_ag_setcallsetup(%d)")
TRC_MSG(BT_HFG_WISE_API_SEND_BTRH, "[AG][API] btmtk_ag_sendbtrh(%d)")
TRC_MSG(BT_HFG_WISE_API_SEND_CMS_ERR, "[AG][API] btmtk_ag_sendcmserr(%d)")
TRC_MSG(BT_HFG_WISE_API_SET_MSG_SVC_LIST, "[AG][API] btmtk_ag_setmsgsvclist(svc=%d, currentFlag=%d, currSvc=%d)")
TRC_MSG(BT_HFG_WISE_API_SET_MSG_STO_LIST, "[AG][API] btmtk_ag_setmsgstoragelist")
TRC_MSG(BT_HFG_WISE_API_SEND_MSG_STO_SELECT_RESULT, "[AG][API] btmtk_ag_sendmsgstorageselectresult(num=%d)")
TRC_MSG(BT_HFG_WISE_API_SEND_MSG_STO_INFO, "[AG][API] btmtk_ag_sendmsgstorageinfo(num=%d)")
TRC_MSG(BT_HFG_WISE_API_SET_CMGF, "[AG][API] btmtk_ag_setcmgf(currMode=%d)")
TRC_MSG(BT_HFG_WISE_API_SEND_SCA, "[AG][API] btmtk_ag_sendsca(opt=0x%X, sca=%s, type=%d)")
TRC_MSG(BT_HFG_WISE_API_SEND_TEXT_MODE_PARAM, "[AG][API] btmtk_ag_sendtextmodeparam(opt=0x%X, fo=%d, pid=%d, dcs=%d, intVP=%d, tsVP=%s)")
TRC_MSG(BT_HFG_WISE_API_SET_CSDH, "[AG][API] btmtk_ag_setcsdh(currShow=%d)")
TRC_MSG(BT_HFG_WISE_API_SET_MSG_SETTING_LIST, "[AG][API] btmtk_ag_setmsgsettinglist(Setting=%s, currFlag=%d, mode=%d, mt=%d, bm=%d, ds=%d, bfr=%d)")
TRC_MSG(BT_HFG_WISE_API_SEND_MSG_INDICATION, "[AG][API] btmtk_ag_sendmsgindication(mem=%d, index=%d)")
TRC_MSG(BT_HFG_WISE_API_SEND_MSG_STATUS_LIST, "[AG][API] btmtk_ag_sendmsgstatuslist(num=%d)")
TRC_MSG(BT_HFG_WISE_API_SEND_MSG_LIST, "[AG][API] btmtk_ag_sendmsglist(NoMsgFlag=%d, SMType=%d, index=%d, status=%d, final=%d)")
TRC_MSG(BT_HFG_WISE_API_SEND_MSG, "[AG][API] btmtk_ag_sendmsg(SMType=%d, status=%d)")
TRC_MSG(BT_HFG_WISE_API_SEND_MSG_RESULT, "[AG][API] btmtk_ag_sendmsgresult(MsRef=%d)")
TRC_MSG(BT_HFG_WISE_API_IS_HSAG_CONNECTED, "[AG][API] btmtk_hsag_is_connected ret=%d")
TRC_MSG(BT_HFG_WISE_API_IS_HFAG_CONNECTED, "[AG][API] btmtk_hfag_is_connected ret=%d")
TRC_MSG(BT_HFG_WISE_API_HSAG_AUTHORIZE_RES, "[AG][API] btmtk_hsag_authorize_res(mode=%d)")
TRC_MSG(BT_HFG_WISE_API_HFAG_AUTHORIZE_RES, "[AG][API] btmtk_hfag_authorize_res(mode=%d)")
TRC_MSG(BT_HFG_WISE_CBK, "[AG][CBK] handle=0x%X, evt=0x%X")
TRC_MSG(BT_HFG_WISE_EVT, "[AG][EVT] evt=%d, conn_idx=%d")
TRC_MSG(BT_HFG_WISE_INFO_HDL_ACTIVATE_CNF, "[AG][HDL] Profile %d activate cnf : status=%d")
TRC_MSG(BT_HFG_WISE_INFO_HDL_DEACTIVATE_CNF, "[AG][HDL] Profile %d deactivate cnf")
TRC_MSG(BT_HFG_WISE_INFO_HDL_CONNECT_CNF, "[AG][HDL] Profile %d connect cnf : status=%d")
TRC_MSG(BT_HFG_WISE_INFO_HDL_DISCONNECT_CNF, "[AG][HDL] Profile %d disconnect cnf")
TRC_MSG(BT_HFG_WISE_INFO_HDL_ACCEPT_CNF, "[AG][HDL] Profile %d accept cnf : status=%d")
TRC_MSG(BT_HFG_WISE_INFO_HDL_REJECT_CNF, "[AG][HDL] Profile %d reject cnf")
TRC_MSG(BT_HFG_WISE_INFO_HDL_SCO_CONNECT_CNF, "[AG][HDL] Profile %d sco connect cnf : status=%d")
TRC_MSG(BT_HFG_WISE_INFO_HDL_SCO_DISCONNECT_CNF, "[AG][HDL] Profile %d sco disconnect cnf")
TRC_MSG(BT_HFG_WISE_INFO_HDL_CONNECTED_IND, "[AG][HDL] Profile %d connected ind")
TRC_MSG(BT_HFG_WISE_INFO_HDL_DISCONNECTED_IND, "[AG][HDL] Profile %d disconnected ind")
TRC_MSG(BT_HFG_WISE_INFO_HDL_AUDIO_CONNECTED_IND, "[AG][HDL] Profile %d audio connected ind : status=%d")
TRC_MSG(BT_HFG_WISE_INFO_HDL_AUDIO_DISCONNECTED_IND, "[AG][HDL] Profile %d audio disconnected ind")
TRC_MSG(BT_HFG_WISE_INFO_HDL_AUTH_IND, "[AG][HDL] Profile %d auth ind : addr=0x%02X%02X%02X%02X%02X%02X")
TRC_MSG(BT_HFG_WISE_INFO_HDL_READ_INDICATOR_IND, "[AG][HDL] read indicator ind : svc=%d, call=%d, callsetup=%d, callheld=%d, batt=%d, signal=%d, roaming=%d")
TRC_MSG(BT_HFG_WISE_INFO_HDL_HF_FEATURE_IND, "[AG][HDL] Remote featur=0x%X")
TRC_MSG(BT_HFG_WISE_INFO_HDL_AUTO_REJECT, "[AG][HDL] Auto reject profile %d connection request")
TRC_MSG(BT_HFG_WISE_INFO_SUPPORTED_PB_LIST, "[AG][INFO] Supported PB list=0x%X")
TRC_MSG(BT_HFG_WISE_INFO_MSG_STO_SELECT_RESULT, "[AG][INFO] mem%d : used=%d, total=%d")
TRC_MSG(BT_HFG_WISE_INFO_MSG_STO_INFO, "[AG][INFO] mem%d : used=%d, total=%d")
TRC_MSG(BT_HFG_WISE_INFO_MSG_STATUS_LIST, "[AG][INFO] status list=%s")
TRC_MSG(BT_HFG_WISE_INFO_PROFILE_STATE_CHANGE, "[AG][INFO] profile %d : old state=%d, new state=%d")
TRC_MSG(BT_HFG_WISE_INFO_SET_ACTIVE_PROFILE, "[AG][INFO] active : profile=%d, context=0x%X")
TRC_MSG(BT_HFG_WISE_INFO_RING_TIMER_START, "[AG][INFO] Ring timer started")
TRC_MSG(BT_HFG_WISE_INFO_RING_TIMER_STOP, "[AG][INFO] Ring timer stopped")
TRC_MSG(BT_HFG_WISE_INFO_RING_TIMER_TRIGGERED, "[AG][INFO] Ring timer triggered")
TRC_MSG(BT_HFG_WISE_INFO_INVALID_RING_TIMER, "[AG][INFO] Invalid ring timer")
TRC_MSG(BT_HFG_WISE_INFO_RING_TIMER_INVALID_INDEX, "[AG][INFO] Ring timer indexc invalid : %d")
TRC_MSG(BT_HFG_WISE_WARN_ALREADY_ENABLED, "[AG][WARN] AG is already enabled")
TRC_MSG(BT_HFG_WISE_WARN_ALREADY_DISABLED, "[AG][WARN] AG is already disabled")
TRC_MSG(BT_HFG_WISE_WARN_NOT_IN_ACTIVATED, "[AG][WARN] Profile %d is not in activated state : state=%d")
TRC_MSG(BT_HFG_WISE_WARN_NOT_CONNECTED, "[AG][WARN] Profile %d is not connected : state=%d")
TRC_MSG(BT_HFG_WISE_WARN_NO_AUDIO_CONNECTION, "[AG][WARN] Profile %d has no audio connection : state=%d")
TRC_MSG(BT_HFG_WISE_ERR_ACTIVATE_FAIL, "[AG][ERR] profile=%d activate failed")
TRC_MSG(BT_HFG_WISE_ERR_UNEXPECTED_STATE, "[AG][ERR] Unexpected state : profile=%d, state=%d")
TRC_MSG(BT_HFG_WISE_ERR_UNEXPECTED_AG_STATE, "[AG][ERR] Unexpected AG state : state=%d, expected=%d")
TRC_MSG(BT_HFG_WISE_ERR_CONFIRM_FAIL, "[AG][ERR] Confirm failed : evt=%d, status=%d")
TRC_MSG(BT_HFG_WISE_ERR_NO_CONNECTION, "[AG][ERR] No connection")
TRC_MSG(BT_HFG_WISE_ERR_ALLOC_MEM_FAIL, "[AG][ERR] Allocate memory failed")
/* MBT OPP TRACE */
TRC_MSG(BT_OPP_WISE_API_SERVER_ENABLE , "[MBT][API] btmtk_opp_server_enable ")
TRC_MSG(BT_OPP_WISE_API_SERVER_DISABLE , "[MBT][API] btmtk_opp_server_disable ")
TRC_MSG(BT_OPP_WISE_API_SERVER_DISCONNECT, "[MBT][API] btmtk_opp_server_disconnect ")
TRC_MSG(BT_OPP_WISE_API_SERVER_ACCESS_RESPONSE, "[MBT][API] btmtk_opp_server_access_response rspcoe:(%d)")
TRC_MSG(BT_OPP_WISE_API_SERVER_CB, "[MBT][CB] bt_opps_ui_cb u4OPPUIEvent:(%d) ucdata:(%d) mbterr:(%d)")
TRC_MSG(BT_OPP_WISE_INFO_SERVER_ENABLE, "[MBT][CB] btmtk_opp_server_enable ok:(%d)")
TRC_MSG(BT_OPP_WISE_INFO_SERVER_DISABLE, "[MBT][CB] btmtk_opp_server_disable ok:(%d)")
TRC_MSG(BT_OPP_WISE_INFO_SERVER_AUTHORIZE_REQ, "[MBT][API] btmtk_opp_server_authorize_request")
TRC_MSG(BT_OPP_WISE_INFO_SERVER_PUSH_ACCESS, "[MBT][API] btmtk_opp_server_push_access_request format:(%d)")
TRC_MSG(BT_OPP_WISE_INFO_SERVER_PULL_ACCESS, "[MBT][API] btmtk_opp_server_pull_access_request format:(%d)")
TRC_MSG(BT_OPP_WISE_INFO_SERVER_PUSH_FINISH, "[MBT][CB] btmtk_opp_server_push_finish() ok:(%d) reason:(%d)")
TRC_MSG(BT_OPP_WISE_INFO_SERVER_PUSH_START, "[MBT][CB] btmtk_opp_server_push_start() ok:(%d) reason:(%d)")
TRC_MSG(BT_OPP_WISE_CHK_SERVER_STATE, "[MBT] check opp server state:(%d)")
TRC_MSG(BT_OPP_WISE_CHK_CLIENT_STATE, "[MBT] check opp server state:(%d)")
TRC_MSG(BT_OPP_WISE_API_OPP_IS_CONNECTED, "[MBT][API] btmtk_opp_is_connected l_ret:%d")
TRC_MSG(BT_OPP_WISE_API_OPP_IS_DEV_CONNECTED, "[MBT][API] btmtk_opp_is_dev_connected l_ret:%d")
TRC_MSG(BT_OPP_WISE_API_CLIENT_ENABLE, "[MBT][API] btmtk_opp_client_enable")
TRC_MSG(BT_OPP_WISE_API_CLIENT_DISABLE, "[MBT][API] btmtk_opp_client_disable")
TRC_MSG(BT_OPP_WISE_API_CLIENT_PUSHOBJECT , "[MBT][API] btmtk_opp_client_pushobject type:(%d)")
TRC_MSG(BT_OPP_WISE_API_CLIENT_PULLOBJECT , "[MBT][API] btmtk_opp_client_pullobject type:(%d)")
TRC_MSG(BT_OPP_WISE_API_CLIENT_EXCHOBJECT , "[MBT][API] btmtk_opp_client_exchobject pushtype:(%d) pulltype:(%d)")
TRC_MSG(BT_OPP_WISE_API_CLIENT_DISCONNECT, "[MBT][API] btmtk_opp_client_disconnect")
TRC_MSG(BT_OPP_WISE_API_POST_EVENT, "[MBT][CB] post event:(%d) idx:(%d)")
TRC_MSG(BT_OPP_WISE_API_SDC_STATUS, "[MBT][CB] sdcOppStatus oper:%d state:%d reason:%d ")
TRC_MSG(BT_OPP_WISE_API_CLIENT_CB, "[MBT][CB] bt_oppc_ui_cb u4OPPUIEvent:(%d) ucdata:(%d) mbterr:(%d)")
TRC_MSG(BT_OPP_WISE_API_SERVER_AUTHORIZE_RES, "[MBT][API] btmtk_opp_authorize_res authMode:(%d)")
TRC_MSG(BT_OPP_WISE_ERR_CLIENT_DISCONNECT, "[MBT][WRN] btmtk_opp_disconnect fail!")
TRC_MSG(BT_OPP_WISE_ERR_CLIENT_EXCHOBJECT, "[MBT][WRN] btmtk_opp_client_exchobject fail!")
TRC_MSG(BT_OPP_WISE_ERR_CLIENT_PULLOBJECT, "[MBT][WRN] btmtk_opp_client_pullobject fail!")
TRC_MSG(BT_OPP_WISE_ERR_CLIENT_PUSHOBJECT, "[MBT][WRN] btmtk_opp_client_pushobject fail!")
TRC_MSG(BT_OPP_WISE_INFO_CLIENT_PUSH_START, "[MBT][CB] btmtk_opp_client_push_start ok:(%d) reason:(%d) total:(%d)")
TRC_MSG(BT_OPP_WISE_INFO_CLIENT_PUSH_CONTINUE, "[MBT][CB] btmtk_opp_client_push_conti ok:(%d) reason:(%d) total:(%d)")
TRC_MSG(BT_OPP_WISE_INFO_CLIENT_PUSH_FINISH, "[MBT][CB] btmtk_opp_client_push_finish ok:(%d)")
TRC_MSG(BT_OPP_WISE_INFO_CLIENT_PULL_START, "[MBT][CB] btmtk_opp_client_pull_start ok:(%d) ")
TRC_MSG(BT_OPP_WISE_INFO_CLIENT_PULL_CONTINUE, "[MBT][CB] btmtk_opp_client_pull_continue ok:(%d) size:(%d) total:(%d)")
TRC_MSG(BT_OPP_WISE_INFO_CLIENT_PULL_FINISH, "[MBT][CB] btmtk_opp_client_pull_finish ok:(%d) reason:(%d)")
TRC_MSG(BT_OPP_WISE_INFO_CLIENT_EXCH_PUSH_CONTINUE, "[MBT][CB] btmtk_opp_client_exchange_push_continue ok:(%d) size:(%d)")
TRC_MSG(BT_OPP_WISE_INFO_CLIENT_EXCH_PUSH_FINISH, "[MBT][CB] ok:(%d) size:(%d) reason:(%d)")
TRC_MSG(BT_OPP_WISE_INFO_CLIENT_EXCH_PULL_CONTINUE, "[MBT][CB] btmtk_opp_client_exchange_pull_continue ok:(%d) size:(%d) reason:(%d)")
TRC_MSG(BT_OPP_WISE_INFO_CLIENT_EXCH_PULL_FINISH, "[MBT][CB] btmtk_opp_client_exchange_pull_finish ok:(%d) reason:(%d)")
TRC_MSG(BT_OPP_WISE_INFO_CLIENT_EXCH_START, "[MBT][CB] btmtk_opp_client_exchange_start ok:(%d)")
TRC_MSG(BT_OPP_WISE_INFO_CLIENT_EXCH_FINISH, "[MBT][CB] btmtk_opp_client_exchange_finish")
TRC_MSG(BT_OPP_WISE_INFO_CLIENT_ENABLE, "[MBT][CB] btmtk_opp_client_enable_result ok:(%d)")
TRC_MSG(BT_OPP_WISE_INFO_CLIENT_DISABLE, "[MBT][CB] btmtk_opp_client_enable_result ok:(%d)")
TRC_MSG(BT_OPP_WISE_INFO_CLIENT_ABORT_RESULT, "[MBT][CB] btmtk_opp_client_abort_result")
TRC_MSG(BT_OPP_WISE_INFO_CLIENT_DISCONNECT_RESULT, "[MBT][CB] cbtmtk_opp_lient_disconnect_result")
/* MBT SPP TRACE */
TRC_MSG(BT_SPP_MBT_ENABLE, "[BT_SPP_MBT] btmtk_spp_mbt_enable()")
TRC_MSG(BT_SPP_MBT_DISABLE, "[BT_SPP_MBT] btmtk_spp_mbt_disable()")
TRC_MSG(BT_SPP_MBT_CONNECT, "[BT_SPP_MBT] btmtk_spp_mbt_connect()")
TRC_MSG(BT_SPP_MBT_DISCONNECT, "[BT_SPP_MBT] btmtk_spp_mbt_disconnect(), port=%d")
TRC_MSG(BT_SPP_MBT_LISTEN, "[BT_SPP_MBT] btmtk_spp_mbt_listen(), UUID=%x")
TRC_MSG(BT_SPP_MBT_LISTENSTOP, "[BT_SPP_MBT] btmtk_spp_mbt_listenstop(), port=%d")
TRC_MSG(BT_SPP_MBT_SENDDATA, "[BT_SPP_MBT] btmtk_spp_mbt_senddata(), port=%d, length=%d")
TRC_MSG(BT_SPP_MBT_ISCONNECTED, "[BT_SPP_MBT] btmtk_spp_is_connected()")
TRC_MSG(BT_SPP_MBT_ISDEVCONNECTED, "[BT_SPP_MBT] btmtk_spp_is_dev_connected()")
TRC_MSG(BT_SPP_MBT_AUTHORIZE_RES, "[BT_SPP_MBT] btmtk_spp_authorize_res(), result=%d")
TRC_MSG(BT_SPP_MBT_CB_ENABLE_CNF, "[BT_SPP_MBT] btmtk_spp_mbt_cb_enable_cnf()")
TRC_MSG(BT_SPP_MBT_CB_DISABLE_CNF, "[BT_SPP_MBT] btmtk_spp_mbt_cb_disable_cnf()")
TRC_MSG(BT_SPP_MBT_CB_LISTEN_CNF, "[BT_SPP_MBT] btmtk_spp_mbt_cb_listen_cnf()")
TRC_MSG(BT_SPP_MBT_CB_LISTEN_STOP_CNF, "[BT_SPP_MBT] btmtk_spp_mbt_cb_listen_stop_cnf()")
TRC_MSG(BT_SPP_MBT_CB_CONNECT_CNF, "[BT_SPP_MBT] btmtk_spp_mbt_cb_connect_cnf()")
TRC_MSG(BT_SPP_MBT_CB_DISCONNECT_CNF, "[BT_SPP_MBT] btmtk_spp_mbt_cb_disconnect_cnf()")
TRC_MSG(BT_SPP_MBT_CB_SEND_DATA_CNF, "[BT_SPP_MBT] btmtk_spp_mbt_cb_send_data_cnf()")
TRC_MSG(BT_SPP_MBT_CB_RECEIVE_DATA_IND, "[BT_SPP_MBT] btmtk_spp_mbt_cb_receive_data_ind()")
TRC_MSG(BT_SPP_MBT_CB_CONNECT_IND_REQ, "[BT_SPP_MBT] btmtk_spp_mbt_cb_connect_ind_req()")
TRC_MSG(BT_SPP_MBT_CB_CONNECT_IND, "[BT_SPP_MBT] btmtk_spp_mbt_cb_connect_ind()")
TRC_MSG(BT_SPP_MBT_CB_DISCONNECT_IND, "[BT_SPP_MBT] btmtk_spp_mbt_cb_disconnect_ind()")
/* MBT SIMAP TRACE */
TRC_MSG(BT_SIMAP_MBT_ENABLE, "[BT_SIMAP_MBT] btmtk_simap_mbt_enable()")
TRC_MSG(BT_SIMAP_MBT_DISABLE, "[BT_SIMAP_MBT] btmtk_simap_mbt_disable()")
TRC_MSG(BT_SIMAP_MBT_SERVER_CONNECT_RESPONSE, "[BT_SIMAP_MBT] btmtk_simap_server_connect_response(), result=%d")
TRC_MSG(BT_SIMAP_MBT_DISCONNECT, "[BT_SIMAP_MBT] btmtk_simap_mbt_disconnet(), disconnect type=%d")
TRC_MSG(BT_SIMAP_MBT_IS_CONNECTED, "[BT_SIMAP_MBT] btmtk_simap_is_connected()")
TRC_MSG(BT_SIMAP_MBT_ISDEV_CONNECTED, "[BT_SIMAP_MBT] btmtk_simap_is_dev_connected()")
TRC_MSG(BT_SIMAP_MBT_AUTHORIZE_RES, "[BT_SIMAP_MBT] btmtk_simap_authorize_res(), result=%d")
TRC_MSG(BT_SIMAP_MBT_DEINIT, "[BT_SIMAP_MBT] btmtk_simap_deinit()")
TRC_MSG(BT_SIMAP_MBT_CB_ENABLE_CNF, "[BT_SIMAP_MBT] btmtk_simap_mbt_cb_enable_cnf()")
TRC_MSG(BT_SIMAP_MBT_CB_DISABLE_CNF, "[BT_SIMAP_MBT] btmtk_simap_mbt_cb_disable_cnf()")
TRC_MSG(BT_SIMAP_MBT_CB_AUTH_REQ, "[BT_SIMAP_MBT] btmtk_simap_mbt_cb_auth_req()")
TRC_MSG(BT_SIMAP_MBT_CB_CONNECT_IND, "[BT_SIMAP_MBT] btmtk_simap_mbt_cb_connect_ind()")
TRC_MSG(BT_SIMAP_MBT_CB_DISCONNECT_IND, "[BT_SIMAP_MBT] btmtk_simap_mbt_cb_disconnect_ind()")
TRC_MSG(BT_SIMAP_MBT_CB_DISCONNECT_CNF, "[BT_SIMAP_MBT] btmtk_simap_mbt_cb_disconnect_cnf()")
TRC_MSG(BT_SIMAP_MBT_CB_ATR_RSP_SENT_IND, "[BT_SIMAP_MBT] btmtk_simap_mbt_cb_atr_rsp_sent_ind()")
TRC_MSG(BT_SIMAP_MBT_CB_APDU_RSP_SENT_IND, "[BT_SIMAP_MBT] btmtk_simap_mbt_cb_apdu_rsp_sent_ind()")
TRC_MSG(BT_SIMAP_MBT_CB_SIM_ON_RSP_SENT_IND, "[BT_SIMAP_MBT] btmtk_simap_mbt_cb_sim_on_rsp_sent_ind()")
TRC_MSG(BT_SIMAP_MBT_CB_SIM_OFF_RSP_SENT_IND, "[BT_SIMAP_MBT] btmtk_simap_mbt_cb_sim_off_rsp_sent_ind()")
TRC_MSG(BT_SIMAP_MBT_CB_SIM_RESET_RSP_SENT_IND, "[BT_SIMAP_MBT] btmtk_simap_mbt_cb_sim_reset_rsp_sent_ind()")
TRC_MSG(BT_SIMAP_MBT_CB_CARD_STATUS_IND_SENT_IND, "[BT_SIMAP_MBT] btmtk_simap_mbt_cb_card_status_ind_sent_ind()")
TRC_MSG(BT_SIMAP_MBT_CB_CARD_READER_STATUS_RSP_SENT_IND, "[BT_SIMAP_MBT] btmtk_simap_mbt_cb_card_reader_status_rsp_sent_ind()")
TRC_MSG(BT_SIMAP_MBT_CB_SET_TRANSPORT_PROTOCOL_RSP_SENT_IND, "[BT_SIMAP_MBT] btmtk_simap_mbt_cb_set_transport_protocol_rsp_sent_ind()")
TRC_MSG(BT_SIMAP_MBT_CB_AUTH_REQ_TIMEOUT_RFCLOSE_IND, "[BT_SIMAP_MBT] btmtk_simap_mbt_cb_auth_req_timeout_rfclose_ind()")
TRC_MSG(BT_SIMAP_MBT_CB_SIM_CONNECT_FAILED_IND, "[BT_SIMAP_MBT] btmtk_simap_mbt_cb_sim_connect_failed_ind()")


TRC_MSG(BT_PBAP_MBT_REGISTER_REQ, "[BT_PBAP_MBT] btmtk_pbap_send_active_req()")
TRC_MSG(BT_PBAP_MBT_DEREGISTER_REQ, "[BT_PBAP_MBT] btmtk_pbap_send_deactive_req()")
TRC_MSG(BT_PBAP_MBT_DISCONNECT_REQ, "[BT_PBAP_MBT] btmtk_pbap_send_disconnect_req()")
TRC_MSG(BT_PBAP_MBT_AUTHORIZE_RSP, "[BT_PBAP_MBT] btmtk_pbap_send_authorize_rsp()")
TRC_MSG(BT_PBAP_MBT_CLIENT_CONNECT_RSP, "[BT_PBAP_MBT] btmtk_pbap_send_connect_rsp()")
TRC_MSG(BT_PBAP_MBT_CLIENT_AUTH_CHALLENGE_RSP, "[BT_PBAP_MBT] btmtk_pbap_send_obex_auth_challege_rsp()")
TRC_MSG(BT_PBAP_MBT_SET_PATH_RSP, "[BT_PBAP_MBT] btmtk_pbap_send_set_path_rsp()")
TRC_MSG(BT_PBAP_MBT_READ_ENTRY_RSP, "[BT_PBAP_MBT] btmtk_pbap_send_read_entry_rsp()")
TRC_MSG(BT_PBAP_MBT_READ_FOLDER_RSP, "[BT_PBAP_MBT] btmtk_pbap_send_read_folder_rsp()")
TRC_MSG(BT_PBAP_MBT_READ_LIST_RSP, "[BT_PBAP_MBT] btmtk_pbap_send_read_list_rsp()")
TRC_MSG(BT_PBAP_MBT_EXT_HANDLE_MESSAGE, "[BT_PBAP_MBT] pbap_external_adp_handle_message: message id = (%d)")
TRC_MSG(BT_PBAP_MBT_INT_HANDLE_MESSAGE, "[BT_PBAP_MBT] pbap_internal_adp_handle_message: message id = (%d)")
TRC_MSG(BT_PBAP_MBT_POST_EVENT, "[BT_PBAP_MBT]pbap_post_event: event id = (%d)")
TRC_MSG(BT_PBAP_MBT_STATA_ERR, "[BT_PBAP_MBT]pbap external adp recieve message at a error state")
TRC_MSG(BT_PBAP_MBT_SET_STATE, "[BT_PBAP_MBT]set state to (%d)")
TRC_MSG(BT_PBAP_MBT_RSP_WITH_FAIL, "[BT_PBAP_MBT]Sent Response to internal ADP wit h fail result")
TRC_MSG(BT_PBAP_MBT_WISE_ENABLE, "[BT_PBAP_MBT]btmtk_pbap_wise_server_enable")
TRC_MSG(BT_PBAP_MBT_WISE_DISABLE, "[BT_PBAP_MBT]btmtk_pbap_wise_server_disable")
TRC_MSG(BT_PBAP_MBT_WISE_AUTHENTICATE, "[BT_PBAP_MBT]btmtk_pbap_wise_server_authenticate")
TRC_MSG(BT_PBAP_MBT_WISE_CLOSE, "[BT_PBAP_MBT]btmtk_pbap_wise_server_close")
TRC_MSG(BT_PBAP_MBT_WISE_WRITEDATA, "[BT_PBAP_MBT]btmtk_pbap_wise_server_writedata")
TRC_MSG(BT_PBAP_MBT_GAP_AUTH_RES, "[BT_PBAP_MBT]btmtk_pbap_authorize_res")
TRC_MSG(BT_PBAP_MBT_FILE_PATH, "[BT_PBAP_MBT]SDC vcardout filepath:(%s)")
TRC_MSG(BT_PBAP_MBT_FILE_PATH_LEN, "[BT_PBAP_MBT]SDC vcardout filepath len:(%d)")

/* MBT MAP TRACE */
TRC_MSG(BTLOG_MBT_MAP_LOG_STRING, "[MBT][MAP] string log =%c%c%c%c%c%c%c%c%c%c")
TRC_MSG(BTLOG_MBT_MAP_SERVER_ENABLE, "[MBT][MAP] btmtk_map_server_enable")
TRC_MSG(BTLOG_MBT_MAP_SERVER_DISABLE, "[MBT][MAP] btmtk_map_server_disable")
TRC_MSG(BTLOG_MBT_MAP_SERVER_REGISTER, "[MBT][MAP] btmtk_map_server_register(instId=%d, msgType=%d)")
TRC_MSG(BTLOG_MBT_MAP_SERVER_DEREGISTER, "[MBT][MAP] btmtk_map_server_deregister(instId=%d)")
TRC_MSG(BTLOG_MBT_MAPS_AUTHORIZE_RES, "[MBT][MAP] btmtk_maps_authorize_res(%d)")
TRC_MSG(BTLOG_MBT_MAPS_ACCESS_RESPONSE, "[MBT][MAP] btmtk_map_server_access_response(addr=%02X:%02X:%02X:%02X:%02X:%02X, inst=%d, oper=%d, reply=%d)")
TRC_MSG(BTLOG_MBT_MAP_SERVER_SEND_EVENT, "[MBT][MAP] btmtk_map_server_send_event(inst=%d, notif=%d, handle=0x%x, msgType=0x%x)")
TRC_MSG(BTLOG_MBT_MAP_SERVER_MNS_DISCONNECT, "[MBT][MAP] btmtk_map_server_mns_disconnect(addr=%02X:%02X:%02X:%02X:%02X:%02X)")
TRC_MSG(BTLOG_MBT_MAP_SERVER_MAS_DISCONNECT, "[MBT][MAP] btmtk_map_server_mas_disconnect(addr=%02X:%02X:%02X:%02X:%02X:%02X, inst=%d)")
TRC_MSG(BTLOG_MBT_MAP_SERVER_DISCONNECT, "[MBT][MAP] btmtk_map_server_disconnect(inst=%d)")
TRC_MSG(BTLOG_MBT_MAP_INT_DUMP_CNTX, "[MBT][MAP] btmtk_map_int_dump_cntx(): op[%d] = %d")
TRC_MSG(BTLOG_MBT_MAP_INT_SET_CNTX, "[MBT][MAP] btmtk_map_int_set_cntx(%d)")
TRC_MSG(BTLOG_MBT_MAP_INT_RESET_CNTX, "[MBT][MAP] btmtk_map_int_reset_cntx(%d)")
TRC_MSG(BTLOG_MBT_MAP_INT_RESET_CLIENT_CNTX, "[MBT][MAP] btmtk_map_int_reset_client_cntx(%d)")
TRC_MSG(BTLOG_MBT_MAP_HANDLE_INT_MESSAGE, "[MBT][MAP] btmtk_map_handle_int_message: op=%d")
TRC_MSG(BTLOG_MBT_MAP_POST_EVENT, "[MBT][MAP] post event %d (index=%d)")
TRC_MSG(BTLOG_MBT_MAP_INT_SERVER_DISABLE, "[MBT][MAP] btmtk_map_int_server_disable: state=%d")
TRC_MSG(BTLOG_MBT_MAP_INT_SERVER_REGISTER_DUPLICATE, "[MBT][MAP] btmtk_map_int_server_register: Already registered")
TRC_MSG(BTLOG_MBT_MAP_INT_SERVER_REGISTER_CONFLICT, "[MBT][MAP] btmtk_map_int_server_register: Conlict with registered server")
TRC_MSG(BTLOG_MBT_MAP_INT_SERVER_DEREGISTER_DUPLICATE, "[MBT][MAP] btmtk_map_int_server_deregister: Same request already in progressing")
TRC_MSG(BTLOG_MBT_MAP_INT_DISCONNECT_IN_PROGRESS, "[MBT][MAP] btmtk_maps_int_disconnect: already in progress")
TRC_MSG(BTLOG_MBT_MAP_WRITE_XML_ERROR, "[MBT][MAP] Create XML failed (storageType=%d)")
TRC_MSG(BTLOG_MBT_MAP_WRITE_FILE_ERROR, "[MBT][MAP] Buffer to file failed (storageType=%d)")
TRC_MSG(BTLOG_MBT_MAP_WRITE_VCARD_ERROR, "[MBT][MAP] Create vCard failed (storageType=%d)")
TRC_MSG(BTLOG_MBT_MAP_PARSE_VCARD_ERROR, "[MBT][MAP] Parse vCard failed (storageType=%d)")
TRC_MSG(BTLOG_MBT_MAP_PARSE_VCARD_WRONG_STORAGE, "[MBT][MAP] Parse vCard wrong storageType=%d")
TRC_MSG(BTLOG_MBT_MAP_HANDLE_ACTIVATE_CNF, "[MBT][MAP] btmtk_maps_handle_activate_cnf: result=%d")
TRC_MSG(BTLOG_MBT_MAP_HANDLE_DEACTIVATE_CNF, "[MBT][MAP] btmtk_maps_handle_deactivate_cnf: result=%d")
TRC_MSG(BTLOG_MBT_MAP_HANDLE_REGISTER_CNF, "[MBT][MAP] btmtk_maps_handle_register_cnf: result=%d, MAS instance=%d")
TRC_MSG(BTLOG_MBT_MAP_HANDLE_DEREGISTER_CNF, "[MBT][MAP] btmtk_maps_handle_deregister_cnf: result=%d, MAS instance=%d")
TRC_MSG(BTLOG_MBT_MAP_HANDLE_AUTHORIZE_IND, "[MBT][MAP] btmtk_maps_handle_authorize_ind: %02X:%02X:%02X:%02X:%02X:%02X")
TRC_MSG(BTLOG_MBT_MAP_HANDLE_CONNECT_IND, "[MBT][MAP] btmtk_maps_handle_connect_ind: conn=%d, addr=%02X:%02X:%02X:%02X:%02X:%02X, MAS instance=%d")
TRC_MSG(BTLOG_MBT_MAP_HANDLE_SET_FOLDER_IND, "[MBT][MAP] btmtk_maps_handle_set_folder_ind: conn=%d, addr=%02X:%02X:%02X:%02X:%02X:%02X, flag=%d")
TRC_MSG(BTLOG_MBT_MAP_CONNECTION_NOT_FOUND, "[MBT][MAP] SDC entry not found")
TRC_MSG(BTLOG_MBT_MAP_FOLDER_NOT_FOUND, "[MBT][MAP] Folder not found")
TRC_MSG(BTLOG_MBT_MAP_HANDLE_GET_FOLDER_LIST_IND, "[MBT][MAP] btmtk_maps_handle_get_folder_listing_ind: MAS instance=%d, addr=%02X:%02X:%02X:%02X:%02X:%02X, offset=%d, size=%d")
TRC_MSG(BTLOG_MBT_MAP_HANDLE_GET_MSG_LIST_IND, "[MBT][MAP] btmtk_maps_handle_get_message_listing_ind: MAS instance=%d, addr=%02X:%02X:%02X:%02X:%02X:%02X, offset=%d, size=%d")
TRC_MSG(BTLOG_MBT_MAP_HANDLE_GET_MSG_IND, "[MBT][MAP] btmtk_maps_handle_get_message_ind: MAS instance=%d, addr=%02X:%02X:%02X:%02X:%02X:%02X, fraction=%d")
TRC_MSG(BTLOG_MBT_MAP_HANDLE_PUSH_MSG_IND, "[MBT][MAP] btmtk_maps_handle_push_message_ind: MAS instance=%d, addr=%02X:%02X:%02X:%02X:%02X:%02X")
TRC_MSG(BTLOG_MBT_MAP_HANDLE_SET_NOTIF_IND, "[MBT][MAP] btmtk_maps_handle_set_notif_registration_ind: MAS instance=%d, addr=%02X:%02X:%02X:%02X:%02X:%02X, enable=%d")
TRC_MSG(BTLOG_MBT_MAP_HANDLE_SET_MSG_STATUS_IND, "[MBT][MAP] btmtk_maps_handle_set_message_status_ind: MAS instance=%d, addr=%02X:%02X:%02X:%02X:%02X:%02X, status=%d")
TRC_MSG(BTLOG_MBT_MAP_HANDLE_UPDATE_INBOX_IND, "[MBT][MAP] btmtk_maps_handle_update_inbox_ind: MAS instance=%d, addr=%02X:%02X:%02X:%02X:%02X:%02X")
TRC_MSG(BTLOG_MBT_MAP_HANDLE_MNS_CONNECT_CNF, "[MBT][MAP] btmtk_maps_handle_mns_connect_cnf: result=%d, addr=%02X:%02X:%02X:%02X:%02X:%02X")
TRC_MSG(BTLOG_MBT_MAP_HANDLE_MNS_SEND_EVENT_CNF, "[MBT][MAP] btmtk_maps_handle_mns_send_event_cnf: result=%d, MAS instance=%d, addr=%02X:%02X:%02X:%02X:%02X:%02X")
TRC_MSG(BTLOG_MBT_MAP_HANDLE_MNS_DISCONNECT_IND, "[MBT][MAP] btmtk_maps_handle_mns_disconnect_ind: addr=%02X:%02X:%02X:%02X:%02X:%02X")
TRC_MSG(BTLOG_MBT_MAP_HANDLE_MNS_DISCONNECT_CNF, "[MBT][MAP] btmtk_maps_handle_mns_disconnect_cnf: result=%d, addr=%02X:%02X:%02X:%02X:%02X:%02X")
TRC_MSG(BTLOG_MBT_MAP_HANDLE_ABORT_CNF, "[MBT][MAP] btmtk_maps_handle_abort_cnf: result=%d, MAS instance=%d, addr=%02X:%02X:%02X:%02X:%02X:%02X")
TRC_MSG(BTLOG_MBT_MAP_HANDLE_DISCONNECT_CNF, "[MBT][MAP] btmtk_maps_handle_disconnect_cnf: result=%d, MAS instance=%d, addr=%02X:%02X:%02X:%02X:%02X:%02X")
TRC_MSG(BTLOG_MBT_MAP_HANDLE_DISCONNECT_IND, "[MBT][MAP] btmtk_maps_handle_disconnect_cnf: MAS instance=%d, addr=%02X:%02X:%02X:%02X:%02X:%02X")
TRC_MSG(BTLOG_MBT_MAP_WRITE_LIST, "[MBT][MAP] Write folder/message list: start entry=%d, writing num=%d")

TRC_MSG(BT_MBT_TRACE_END, "BT_MBT_TRACE_END") /* MBT LOG FILTER. DO NOT MODIFY */
/* MBT TRACE END */

/* BLE TRACE START */
TRC_MSG(BT_BLE_TRACE_START, "BT_BLE_TRACE_START") /* LOG FILTER. DO NOT MODIFY */
TRC_MSG(BT_LE_ADFLAG, "bdc->adFlag=0x%x, bdc->devType=%d")
TRC_MSG(BT_LE_CURRENT_INQUIRY_TYPE, "current inquiry type=0x%x")

TRC_MSG(BT_MEIF_ME_LE_INQUIRY, "ME_LE_Inquiry(): stackState=%d")
TRC_MSG(BT_MEIF_ME_LE_CANCELINQUIRY, "ME_LE_CancelInquiry(): stackState=%d")
TRC_MSG(BT_MEIF_ME_LE_GETREMOTEDEVICENAME, "ME_LE_GetRemoteDeviceName(): stackState=%d, tokenID=%d")
TRC_MSG(BT_MEIF_ME_LE_GETREMOTEDEVICENAME1, "cb=0x%x, isOnOpList=%d, isOnCmdList=%d")
TRC_MSG(BT_MEIF_ME_LE_CREATELINK, "ME_LE_CreateLink(): stackState=%d, privacy=%d")
TRC_MSG(BT_MEIF_ME_LE_CREATELINK1, "ME_LE_CreateLink(): remDev->state=0x%x")
TRC_MSG(BT_DEVICE_NOT_FOUND, "device not found, %d")
TRC_MSG(BT_MEIF_ME_LE_DISCLINK, "ME_LE_DiscLink(): stackState=%d, reason=0x%x")
TRC_MSG(BT_MEIF_ME_LE_ENCRYPTLINK, "ME_LE_EncryptLink(): stackState=%d, state=0x%x, authState=0x%x, encryptState=0x%x")
TRC_MSG(BT_MEIF_ME_LE_ENCRYPTLINK_RESTART, "ME_LE_EncryptLink(): restart")
TRC_MSG(BT_MEIF_ME_LE_SIGNDATA, "ME_LE_SignData(): stackState=%d")
TRC_MSG(BT_MEIF_ME_LE_SIGNDATA1, "signCounter=%d")
TRC_MSG(BT_MEIF_ME_LE_VERIFYSIGNDATA, "ME_LE_VerifySignedData(): stackState=%d")

TRC_MSG(BT_MELE_LEALLOCHCITOKEN, "LeAllocHciToken(): cmd=0x%x")
TRC_MSG(BT_MELE_LEUTILCOMPOSEADVERTISEDATA, "leUtilComposeAdvertiseData(): EirFlag=0x%x, nameLen=%d")
TRC_MSG(BT_MELE_LEHCISETEVENTMASK, "LeHciSetEventMask(): 0x%x, 0x%x, 0x%x, 0x%x, 0x%x, 0x%x, 0x%x, 0x%x")
TRC_MSG(BT_MELE_LEHCIREADBUFFERSIZE, "LeHciReadBufferSize()")
TRC_MSG(BT_MELE_LEHCIREADLOCALFEATURES, "LeHciReadLocalFeatures()")
TRC_MSG(BT_MELE_LEHCISETRANDOMADDRESS, "LeHciSetRandomAddress(): addr=0x%x, 0x%x, 0x%x, 0x%x, 0x%x, 0x%x")
TRC_MSG(BT_MELE_LEHCISETADVERTISEPARM, "LeHciSetAdvertiseParm(): INTmin=0x%x, INTmax=0x%x, adv==0x%x, OaddrType=%d, DaddrType=%d, map=0x%x, filter=0x%x")
TRC_MSG(BT_MELE_LEHCIREADADVERTISETXPOWER, "LeHciReadAdvertiseTxPower()")
TRC_MSG(BT_MELE_LEHCISETADVERTISEDATA, "LeHciSetAdvertiseData(): dataLen=%d")
TRC_MSG(BT_MELE_LEHCISETSCANRSPDATA, "LeHciSetScanRspData(): dataLen=%d")
TRC_MSG(BT_MELE_LEHCISETADVERTISEENABLE, "LeHciSetAdvertiseEnable(): enable=%d")
TRC_MSG(BT_MELE_LEHCISETSCANPARM, "LeHciSetScanParm(): type=0x%x, interval=0x%x, window=0x%x, OaddrType=0x%x, filter=0x%x")
TRC_MSG(BT_MELE_LEHCISETSCANENABLE, "LeHciSetScanEnable(): enable=%d, filterDup=%d")
TRC_MSG(BT_MELE_LEHCICREATECONNECTION, "LeHciCreateConnection(): INT=0x%x, WIN=0x%x, filter=0x%x, PaddrType=0x%x, OaddrType=0x%x")
TRC_MSG(BT_MELE_LEHCICREATECONNECTION2, "INTmin=0x%x, INTmax=0x%x, latency=0x%x, SupTO=0x%x, CEMin=0x%x, CEMax=0x%x")
TRC_MSG(BT_MELE_LEHCICREATECONNECTIONCANCEL, "LeHciCreateConnectionCancel()")
TRC_MSG(BT_MELE_LEHCIREADWHITELISTSIZE, "LeHciReadWhiteListSize()")
TRC_MSG(BT_MELE_LEHCICLEARWHITELIST, "LeHciClearWhiteList()")
TRC_MSG(BT_MELE_LEHCIADDTOWHITELIST, "LeHciAddToWhiteList(): addrType=0x%x, addr=0x%x, 0x%x, 0x%x, 0x%x, 0x%x, 0x%x")
TRC_MSG(BT_MELE_LEHCIREMOVEFROMWHITELIST, "LeHciRemoveFromWhiteList(): addrType=0x%x, addr=0x%x, 0x%x, 0x%x, 0x%x, 0x%x, 0x%x")
TRC_MSG(BT_MELE_LEHCIUPDATECONNECTION, "LeHciUpdateConnection(): handle=0x%x, INTmin=0x%x, INTmax=0x%x, latency=0x%x, sTimeout=0x%x, ceMin=0x%x, ceMax=0x%x")
TRC_MSG(BT_MELE_LEHCISETCHANNELMAP, "LeHciSetChannelMap(): map=0x%x, 0x%x, 0x%x, 0x%x, 0x%x")
TRC_MSG(BT_MELE_LEHCIREADCHANNELMAP, "LeHciReadChannelMap(): handle=0x%x")
TRC_MSG(BT_MELE_LEHCIREADREMOTEFEATURES, "LeHciReadRemoteFeatures(): handle=0x%x")
TRC_MSG(BT_MELE_LEHCIAES128ENCRYPT, "LeHciAES128Encrypt(): cb=0x%x")
TRC_MSG(BT_MELE_LEHCIRAND, "LeHciRand(): cb=0x%x")
TRC_MSG(BT_MELE_LEHCISTARTENCRYPTION, "LeHciStartEncryption(): handle=0x%x, random=0x%x, ediv=0x%x")
TRC_MSG(BT_MELE_LEHCILTKREQUESTREPLY, "LeHciLTKRequestReply(): handle=0x%x")
TRC_MSG(BT_MELE_LEHCILTKREQUESTNEGREPLY, "LeHciLTKRequestNegReply(): handle=0x%x")
TRC_MSG(BT_MELE_LEHCIREADSUPPORTEDSTATES, "LeHciReadSupportedStates()")
TRC_MSG(BT_MELE_LEHANDLEOP, "LeHandleOp(): event=0x%x, cmd=0x%x, parmLen=%d")
TRC_MSG(BT_MELE_LEHANDLEOP2, "errCode=0x%x")
TRC_MSG(BT_MELE_HANDLELEADVERTISEREPORT, "HandleLeAdvertiseReport(): len=%d, reportNo=%d")
TRC_MSG(BT_MELE_HANDLELEADVERTISEREPORT1, "advType=0x%x, size=%d")
TRC_MSG(BT_MELE_HANDLELEADVERTISEREPORT2, "addrType=0x%x, rssi=%d")
TRC_MSG(BT_MELE_HANDLELECONNECTCOMPLETE, "HandleLeConnectComplete(): status=0x%x, handle=0x%x 0x%x, role=%d, pAddrType=%d")
TRC_MSG(BT_MELE_HANDLELECONNECTCOMPLETE2, "handle=0x%x, role(m0s1)=%d, superTO=0x%x")
TRC_MSG(BT_MELE_HANDLELEREADREMOTEFEATURE, "HandleLeReadRemoteFeature(): status=0x%x, handle=0x%x")
TRC_MSG(BT_MELE_HANDLELELTKREQUEST, "HandleLeLTKRequest(): handle=0x%x")
TRC_MSG(BT_MELE_HANDLELELTKREQUEST1, "authState=0x%x")
TRC_MSG(BT_MELE_LEHANDLEEVENTS, "LeHandleEvents(): subevent=0x%x")
TRC_MSG(BT_MELE_LEHANDLECONNECTTIMEOUT, "LeHandleConnectTimeout()")
TRC_MSG(BT_MELE_LEHCIRECEIVERTEST, "LeHciReceiverTest(): rxFreq=0x%x")
TRC_MSG(BT_MELE_LEHCITRANSMITTERTEST, "LeHciTransmitterTest(): txFreq=0x%x, len=0x%x, payload=0x%x")
TRC_MSG(BT_MELE_LEHCITESTEND, "LeHciTestEnd()")

TRC_MSG(BT_SM_SM_INIT, "SM_Init()")
TRC_MSG(BT_SM_SM_HANDLEREQTIMEOUT, "SM_HandleReqTimeout()")
TRC_MSG(BT_SM_SM_GENLTK, "SM_GenLTK(): keySize=%d")
TRC_MSG(BT_SM_SM_GENEDIV, "SM_GenEDIV(): ediv=0x%x")
TRC_MSG(BT_SM_SM_GENCSRK, "SM_GenCSRK()")
TRC_MSG(BT_SM_SM_GENIRK, "SM_GenIRK()")
TRC_MSG(BT_SM_SM_GETSESSION_NOT_FOUND, "SM_GetSession(): not found")
TRC_MSG(BT_SM_SM_STARTSESSION, "SM_StartSession(): type(b0p1)=%d, addr=0x%x, 0x%x, 0x%x, 0x%x, 0x%x, 0x%x")
TRC_MSG(BT_SM_SM_UPDATESESSION, "SM_UpdateSession()")
TRC_MSG(BT_SM_SM_UPDATESESSIONFSM, "SM_UpdateSessionFSM(): GCstate=%d")
TRC_MSG(BT_SM_SM_ENDSESSION, "SM_EndSession(): status=0x%x, smState=%d")
TRC_MSG(BT_SM_SM_SETPAIRINFO, "SM_SetPairInfo(): type(b0p1)=%d, ioCap=%d, oob=%d, auth=0x%x, keySize=%d, initKey=0x%x, respKey=0x%x")
TRC_MSG(BT_SM_SM_BOND, "SM_Bond(): bdc->under_used=0x%x, addr=0x%x, 0x%x, 0x%x, 0x%x, 0x%x, 0x%x")
TRC_MSG(BT_SM_SM_PASSKEYENTRY, "SM_PasskeyEntry(): addr=0x%x, 0x%x, 0x%x, 0x%x, 0x%x, 0x%x, accept=%d, passkey=%d")
TRC_MSG(BT_SM_SM_SETOOBDATA, "SM_SetOobData(): addr=0x%x, 0x%x, 0x%x, 0x%x, 0x%x, 0x%x, accept=%d")
TRC_MSG(BT_SM_SM_PASSKEYENTRY1, "type(b0p1)=%d, smState=%d")
TRC_MSG(BT_SM_SM_HANDLEEVENT, "SM_HandleEvent(): event=%d, errCode=0x%x")
TRC_MSG(BT_SM_SM_PHASEFSM_SESSION_NOT_FOUND, "SM_Phase%dFSM(): session not found")
TRC_MSG(BT_SM_SM_PHASEFSM, "SM_PhaseFSM(): type(b0p1)=%d, smState=%d")
TRC_MSG(BT_SM_SM_PHASE3KEYRECEIVE, "SM_Phase3_KeyReceive(): event=%d, allKeys=0x%x")
TRC_MSG(BT_SM_SM_PHASE3KEYSEND, "SM_Phase3_KeySend(): sent=0x%x, allKeys=0x%x")
TRC_MSG(BT_SM_SM_CMACFSM, "SM_CMAC_FSM(): cmac state=%d")
TRC_MSG(BT_SM_SM_CMAC, "SM_CMAC(): mLen=%d, tLen=%d")
TRC_MSG(BT_SM_SM_CMACVERIFYCB, "SM_CMAC_VerifyCB(): errCode=0x%x")
TRC_MSG(BT_SM_SM_CMACVERIFY, "SM_CMAC_Verify()")
TRC_MSG(BT_SM_SM_RECVDATA, "SM_RecvData: PduType=0x%x, smState=%d, encryptState=0x%x")
TRC_MSG(BT_SM_SM_L2CAPCALLBACK, "SM_L2capCallback: l2cap event=%d, smState=%d")
TRC_MSG(BT_SM_SM_HANDLEDISCDELAYTIMEOUT, "SM_HandleDiscDelayTimeout(): to-be-sent=%d, delay=%d")

TRC_MSG(BT_SMP_SMP_INIT, "SMP_Init()")
TRC_MSG(BT_SMP_SM_GETPAIRMODELBYIO, "SM_GetPairModelByIo(): iIO=0x%x, rIO=0x%x")
TRC_MSG(BT_SMP_SM_GETPASSKEYROLE, "SM_GetPasskeyRole(): type(b0p1)=%d, iIO=0x%x, rIO=0x%x")
TRC_MSG(BT_SMP_SM_SENDPAIRREQ, "SM_SendPairReq(): io=0x%x, oob=%d, bond=%d, mitm=%d, keySize=%d, distKey=0x%x,  respKey=0x%x")
TRC_MSG(BT_SMP_SM_SENDPAIRRSP, "SM_SendPairRsp(): io=0x%x, oob=%d, bond=%d, mitm=%d, keySize=%d, distKey=0x%x,  respKey=0x%x")
TRC_MSG(BT_SMP_SM_SENDPAIRCONFIRM, "SM_SendPairConfirm()")
TRC_MSG(BT_SMP_SM_SENDPAIRRANDOM, "SM_SendPairRandom()")
TRC_MSG(BT_SMP_SM_SENDPAIRFAILED, "SM_SendPairFailed(): reason=0x%x")
TRC_MSG(BT_SMP_SM_SENDENCRYPTINFO, "SM_SendEncryptInfo()")
TRC_MSG(BT_SMP_SM_SENMASTERIDENTITY, "SM_SendMasterIdentity(): ediv=%d, rand=%ul")
TRC_MSG(BT_SMP_SM_SENDIDENTITYINFO, "SM_SendIdentityInfo()")
TRC_MSG(BT_SMP_SM_SENDIDENTITYADDRINFO, "SM_SendIdentityAddrInfo(): addrType=%d, addr=0x%x, 0x%x, 0x%x, 0x%x, 0x%x, 0x%x")
TRC_MSG(BT_SMP_SM_SENDSIGNINGINFO, "SM_SendSigningInfo()")
TRC_MSG(BT_SMP_SM_SENDSECURITYREQ, "SM_SendSecurityReq(): bond=%d, mitm=%d")
TRC_MSG(BT_SMP_SM_CALCPAIRCONFIRMFSM, "SM_CalcPairConfirm_FSM(): encryptCount=%d, errCode=0x%x")
TRC_MSG(BT_SMP_SM_CALCPAIRCONFIRM, "SM_CalcPairConfirm(): iat=%d, rat=%d, tk, rand, preq, pres")
TRC_MSG(BT_SMP_SM_CALCSTK, "SM_CalcSTK(): tk, srand, mrand")
TRC_MSG(BT_SMP_SM_RANDFSM, "SM_Rand_FSM(): len=%d, count=%d")
TRC_MSG(BT_SMP_SM_RAND, "SM_Rand(): len=%d")

/* BLE UTILITY START */
TRC_MSG(BLEUTILS_QUEREYGATTSERVICE, "[BleUtils] query gatt service")
TRC_MSG(BLEUTILS_GATTOPCALLBACK_EVENT, "[BleUtils] gatt callback event: 0x%x, flag: %d")
TRC_MSG(BLEUTILS_READ_CHAR_HANDLE, "[BleUtils] read characteristic handle: %d")
TRC_MSG(BLEUTILS_READ_LONG_CHAR_HANDLE, "[BleUtils] read long characteristic handle: %d, offset: %d")
TRC_MSG(BLEUTILS_FIND_ALLCHARDESC_INFO, "[BleUtils] find characteristic descriptor info, start handle: %d, end handle: %d")
TRC_MSG(BLEUTILS_READ_CHARDESC_HANDLE, "[BleUtils] read characteristic descriptor handle: %d")
TRC_MSG(BLEUTILS_READ_LONG_CHARDESC_HANDLE, "[BleUtils] read long characteristic descriptor handle: %d, offset: %d")
TRC_MSG(BLEUTILS_FINDPRIMARYSERVICE_UUID, "[BleUtils] find primary service callback, uuid: 0x%x%x")
TRC_MSG(BLEUTILS_FINDINCLUDESERVICES_UUID, "[BleUtils] find include service callback, size: %d, uuid: 0x%x")
TRC_MSG(BLEUTILS_FINDALLCHAR_UUID, "[BleUtils] find all char callback, size: %d, uuid: 0x%x")
TRC_MSG(BLEUTILS_FINDALLCHARDESC_UUID, "[BleUtils] find all char descriptor callback, size: %d, uuid: 0x%x")
TRC_MSG(BLEUTILS_FINDCHAR_DONE, "[BleUtils] find all characteristic callback, no characteristic defintion to be read!")
TRC_MSG(BLEUTILS_READ_CHAR, "[BleUtils] read characteristic, handle: %d")
TRC_MSG(BLEUTILS_READ_CHAR_DESCRIPTOR, "[BleUtils] no more characteristic to be read, continue to read descriptors...")
TRC_MSG(BLEUTILS_READCHAR_DONE, "[BleUtils] read characteristic complete!")
TRC_MSG(BLEUTILS_COMPAREUUID__NULL_UUID_UUID1P_UUID2P, "[BleUtils] CompareUuid : NULL uuid, uuid1=%p, uuid2=%p")
TRC_MSG(BLEUTILS_COMPAREUUID__INVALID_UUID_LEN_LEN1U_LEN2U, "[BleUtils] CompareUuid : invalid uuid len, len1=%u, len2=%u")
TRC_MSG(BLEUTILS_READ_DATABASE_START_HD_D_END_HD_D, "[BleUtils] read database, start hd: %d, end hd: %d")
TRC_MSG(BLEUTILS_READ_DATABASE_UUID_X_X, "[BleUtils] read database, uuid: %x, %x")
TRC_MSG(BLEUTILS_READ_DATABASE__HANDLE_D_VALUE_HANDLE_D, "[BleUtils] read database , handle: %d, value handle: %d")
TRC_MSG(BLEUTILS_VALUE_SIZE_D, "[BleUtils] value size: %d")
TRC_MSG(BLEUTILS_READ_DATABASE_DESCIPTOR_HANDLE_D, "[BleUtils] read database, desciptor handle: %d")
TRC_MSG(BLEUTILS_DESCRIPTOR_VALUE_SIZE_D, "[BleUtils] descriptor value size: %d")
TRC_MSG(BLEUTILS_POS_CUR_D, "[BleUtils] pos cur: %d")
TRC_MSG(BLEUTILS_WRITE_DATABASE__SERVICE_START_HD_D_END_HD_, "[BleUtils] write database , service start hd: %d, end hd: %d")
TRC_MSG(BLEUTILS_WRITE_DATABASE__HANDLE_D_VALUE_HANDLE_D, "[BleUtils] write database , handle: %d, value handle: %d")
TRC_MSG(BLEUTILS_WRITE_DATABASE_VALUE_SIZE_D, "[BleUtils] write database, value size: %d")
TRC_MSG(BLEUTILS_WRITE_DATABASE_CHAR_SIZE_D, "[BleUtils] write database, char_size: %d")
TRC_MSG(BLEUTILS_WRITE_DATABASE_DESCIPTOR_HANDLE_D, "[BleUtils] write database, desciptor handle: %d")
TRC_MSG(BLEUTILS_WRITE_DATABASE_DESCIPTOR_VALUE_SIZE_D, "[BleUtils] write database, desciptor value size: %d")
TRC_MSG(BLEUTILS_WRITE_DATABASE_CHAR_SIZE_D_DESC_SIZE_D, "[BleUtils] write database, char_size: %d, desc_size: %d")
TRC_MSG(BLEUTILS_WRITE_DATABASE_SERVICE_SIZE_D, "[BleUtils] write database, service_size: %d")
TRC_MSG(BLEUTILS_REMOVE_SERVICE_DATABASE_FROM_TABLE, "[BleUtils] Remove service database from table!")
TRC_MSG(BLEUTILS_QUERY_CALLBACK_STATUS_D, "[BleUtils] query callback, status: %d")
TRC_MSG(BLEUTILS_QUERY_CALLBACK_MORE_THAN_ONE_INSTANCE_SERVICE_, "[BleUtils] query callback, more than one instance service, start handle: %d, end handle: %d")
TRC_MSG(BLEUTILS_BLEREADCHARACTERISTICDEFINITION_VALUE_SIZE_D, "[BleUtils] BleReadCharacteristicDefinition, value_size: %d")
TRC_MSG(BLEUTILS_FIND_PRIMARY_SERVICE_START_HANDLE_D_END_HAND, "[BleUtils] find primary service, start handle: %d, end handle: %d")
TRC_MSG(BLEUTILS_FIND_ALL_CHAR_CB_HANDLE_D_PROP_D_VALUE_HA, "[BleUtils] find all char cb, handle: %d, prop: %d, value handle: %d")
TRC_MSG(BLEUTILS_FIND_ALL_CHARACTERISTICS_DESCRIPTOR__FIND_CHA, "[BleUtils] find all characteristics descriptor --> find char cb, start handle: %d, end handle: %d")
TRC_MSG(BLEUTILS_FIND_ALL_CHARACTERISTICS_DESCRIPTOR__FIND_DES, "[BleUtils] find all characteristics descriptor --> find descriptor cb, start handle: %d, end handle: %d")
TRC_MSG(BLEUTILS_READ_CHARACTERISTIC_MTU_D, "[BleUtils] read characteristic, MTU: %d")
TRC_MSG(BLEUTILS_READ_LONG_CHARACTERISTIC_CALLBACK_CONTINUE_LEN, "[BleUtils] read long characteristic callback continue, len: %d")
TRC_MSG(BLEUTILS_READSERVICE_STATUS_D, "[BleUtils] ReadService status: %d")
TRC_MSG(BLEUTILS_STOP_QUERY_SERVICE, "[BleUtils] Stop query service...")
TRC_MSG(BLEUTILS_VERIFYDB, "[BleUtils] VerifyDB")
/* BLE UTILITY END */

/* ATT START */
TRC_MSG(ATT_BT_ATT_HANDLERXREADY_OPCODED, "[ATT] BT_ATT_HandleRxReady(): opcode=%d")
TRC_MSG(ATT_BT_ATT_HANDLERXREADY_ERROR_CODE_D, "[ATT] BT_ATT_HandleRxReady(): error code =%d")
TRC_MSG(ATT_SM_BOND_STARTS, "[ATT] SM bond starts")
TRC_MSG(ATT_SM_STATUS02X, "[ATT] SM status:%02x")
TRC_MSG(ATT_BT_ATT_CONN_PACKET_08X, "[ATT] conn packet %08x")
TRC_MSG(ATT_BT_ATT_RETURN_CONN_PACKET_0_, "[ATT] return conn packet 0 ")
TRC_MSG(ATT_BT_ATT_RETURN_CONN_PACKET_1, "[ATT] return conn packet 1")
TRC_MSG(ATT_BT_ATT_RETURN_CONN_PACKET_2, "[ATT] return conn packet 2")
TRC_MSG(ATT_BT_ATT_HANDLERXREADY__INVALID_OPCODE_U, "[ATT] BT_ATT_HandleRxReady : Invalid opcode %u")
TRC_MSG(ATT_BT_ATT_SECURITYCHECKDONE_CONND, "[ATT] BT_ATT_SecurityCheckDone conn:%d")
TRC_MSG(ATT_BT_ATT_REPORTEVENT_EVENT_CODED, "[ATT] BT_ATT_ReportEvent(): event_code=%d")
TRC_MSG(ATT_BT_ATT_HANDLEERRORRESPONSE_OPCODE0XX_ERRCODE0XX, "[ATT] BT_ATT_HandleErrorResponse: opcode=0x%x, errCode=0x%x")
TRC_MSG(ATT_START__END_ERROR, "[ATT] Start > End, Error")
TRC_MSG(ATT_BT_ATT_HANDLEFINDBYTYPEVALUEREQUEST_0XX0XX_0XX_D, "[ATT] BT_ATT_HandleFindByTypeValueRequest(): 0x%x~0x%x, 0x%x, %d, 0x%x, 0x%x")
TRC_MSG(ATT_NEED_APPLICATION_RESPONSE, "[ATT] Need application response")
TRC_MSG(ATT_EVENT_WITH_ERROR_CODED, "[ATT] event with error code:%d")
TRC_MSG(ATT_NEED_WAIT_SECURITY_PROCEDURE, "[ATT] Need wait security procedure")
TRC_MSG(ATT_BT_ATT_HANDLEREADBYTYPEREQUEST_0XX0XX, "[ATT] BT_ATT_HandleReadByTypeRequest(): 0x%x~0x%x")
TRC_MSG(ATT_ATTHANDLEPREPAREWRITEREQUEST__ERROR_CODEU, "[ATT] AttHandlePrepareWriteRequest : error_code=%u")
TRC_MSG(ATT_PREPAREWRITEBUFFERU_IS_AVAILABLE, "[ATT] prepareWriteBuffer[%u] is available")
TRC_MSG(ATT_PREPAREWRITEBUFFERU_IS_AVAILABLE_HANDLE0XX, "[ATT] prepareWriteBuffer[%u] is available, handle=0x%x")
TRC_MSG(ATT_BT_ATT_CON_TIMEOUT, "[ATT] conn timeout")
TRC_MSG(ATT_BT_ATT_BT_ATT_HANDLEAPPLICATIONRESPONSE_STATUS, "[ATT] BT_ATT_HandleApplicationResponse status")
TRC_MSG(ATT_BT_ATTHANDLEAPPLICATIONRESPONSE, "[ATT] BT_ATTHandleApplicationResponse")
TRC_MSG(ATT_CAN_NOT_FIND_ANY_DEVICES, "[ATT] can not find any devices")
TRC_MSG(ATT_NO_COMMAND_WAITING_TO_RESPONSE, "[ATT] No command waiting to response??????????")
TRC_MSG(ATT_PREVIOUS_COMMAND_OPCODED, "[ATT] Previous command opcode:%d")
TRC_MSG(ATT_BT_ATT_HANDLESMCOMPLETEDD, "[ATT] BT_ATT_HandleSMCompleted:%d")
TRC_MSG(ATT_SM_COMPLED_BUT_FAILED, "[ATT] SM compled but failed.")
TRC_MSG(ATT_CONN08X, "[ATT] Conn:%08x")
TRC_MSG(ATT_CONNFREEPACKETLIST08X, "[ATT] conn->freePacketList:%08x")
TRC_MSG(ATT_CONNBUFFERPKT08X, "[ATT] conn->bufferPkt:%08x")
TRC_MSG(ATT_CONNBUFFERPKTNODE08X, "[ATT] conn->bufferPkt->node:%08x")
TRC_MSG(ATT_BT_ATT_HANDLERXREADY_OPCODE02X, "[ATT] BT_ATT_HandleRxReady(): opcode=%02x")
TRC_MSG(ATT_SM_CONN_BUFFER_PACKET08X, "[ATT] SM Conn buffer packet:%08x")
TRC_MSG(ATT_PACKET_HANDLED_BLE, "[ATT] Packet Handled BLE")
TRC_MSG(ATT_BUFFERPKT_NOT_EMPTY_ERROR, "[ATT] bufferPkt not empty, error")
TRC_MSG(ATT_PACKET_HANDLED_BREDR, "[ATT] Packet Handled BREDR")
TRC_MSG(ATT_CALLBACK_EVENTD, "[ATT] CALLBACK EVENT:%d")
TRC_MSG(ATT_BT_ATT_CLIENT_REQUEST_STATUSD, "[ATT] BT Att Client request status:%d")
TRC_MSG(ATT_CLIENT_REQUEST, "[ATT] Client request")
TRC_MSG(ATT_STATUSD, "[ATT] status:%d")
TRC_MSG(ATT_ATTDISCONNECTREQUEST_STATUSD, "[ATT] AttDisconnectRequest status:%d")
TRC_MSG(ATT_ATT_SDP_REGISTER_STATUS__BT_STATUS_SUCCESS, "[ATT] SDP register status != BT_STATUS_SUCCESS")
TRC_MSG(ATT_BT_ATT_SENDERRORRESPONSE_ERRCODE0XX, "[ATT] BT_ATT_SendErrorResponse(): errCode=0x%x")
TRC_MSG(ATT_RECORD04X_NOT_FOUND, "[ATT] Record:%04x not found")
TRC_MSG(ATT_ATTDEVICESDPDB_REGISTRATION, "[ATT] AttDeviceSdpDB_Registration()")
TRC_MSG(ATT_SDP_REGISTER_STATUS__BT_STATUS_SUCCESS, "[ATT] SDP register status != BT_STATUS_SUCCESS")
TRC_MSG(ATT_OP0XX_OPTYPED, "[ATT] op:0x%x opType:%d")
TRC_MSG(ATT_ATTDB_ADDRECORDCB_HANDLED_NOT_FOUND_, "[ATT] ATTDB_AddRecordCB(): handle(%d) not found ")
TRC_MSG(ATT_ATTDB_ADDGROUPRECORD_START0XX_END0XX_UUID, "[ATT] ATTDB_AddGroupRecord(): start(0x%x), end(0x%x), uuid(0x%x) ")
TRC_MSG(ATT_ATTDB_ADDGROUPRECORD_GROUP_UUID0XX_NOT_ALLOWED, "[ATT] ATTDB_AddGroupRecord(): group_uuid(0x%x) not allowed")
TRC_MSG(ATT_TOTAL_RECORD_NOD_MAX_RECORDD, "[ATT] total record no:%d, max record:%d")
TRC_MSG(ATT_DUMP_ATT_RECORD, "[ATT] ===DUMP ATT record===")
TRC_MSG(ATT_RECORD_INDEXD, "[ATT] Record index:%d")
TRC_MSG(ATT_RECORD_HANDLE08X, "[ATT] Record handle:%08x")
TRC_MSG(ATT_RECORD_VALUE_SIZE08X, "[ATT] Record value size:%08x")
TRC_MSG(ATT_RECORD_VALUE02X, "[ATT] Record value:%02x")
TRC_MSG(ATT_RECORD_VALUE02X02X, "[ATT] Record value:%02x,%02x")
TRC_MSG(ATT_RECORD_VALUE02X02X02X, "[ATT] Record value:%02x,%02x,%02x")
TRC_MSG(ATT_RECORD_VALUE02X02X02X02X, "[ATT] Record value:%02x,%02x,%02x,%02x")
TRC_MSG(ATT_START_A_PRIMARY_SERVICE, "[ATT] Start a primary service")
TRC_MSG(ATT_CHECK_MATCH_OF_HANDLE02X_02X, "[ATT] Check match of handle:%02x, %02x")
TRC_MSG(ATT_RECORD_SIZE_D, "[ATT] Record size: %d")
TRC_MSG(ATT_RECORD_VALUE_TYPE_D, "[ATT] Record value type: %d")
TRC_MSG(ATT_VARIABLE_VALUE_SIZE_D, "[ATT] variable value size: %d")
TRC_MSG(ATT_ATTDB_CHECKGATTDEFINEDPERMISSION_OP0XX_PROP0XX, "[ATT] ATTDb_CheckGattDefinedPermission: op=0x%x, prop=0x%x")
TRC_MSG(ATT_ATTDB_CHECKHANDLEPERMISSION_RESULT0XX_RECORDHANDLE0XX, "[ATT] ATTDb_CheckHandlePermission: result=0x%x, recordHandle=0x%x, op=%d")
TRC_MSG(ATT_ATTDB_FINDBYTYPEVALUE_STARTINGHANDLE08X, "[ATT] ATTDb_HandleGetFindByTypeValueReq: startingHandle=%08x")
TRC_MSG(ATT_ATTDB_FINDBYTYPEVALUE_ENDINGHANDLE08X, "[ATT] ATTDb_HandleGetFindByTypeValueReq: endingHandle:%08x")
TRC_MSG(ATT_ATTDB_FINDBYTYPEVALUE_RECORD_HDL08X, "[ATT] ATTDb_HandleGetFindByTypeValueReq: AttDatabaseHandle[i].record_hdl=%08x")
TRC_MSG(ATT_ATTDB_FINDBYTYPEVALUE_RECORDUUIDTYPE08X, "[ATT] ATTDb_HandleGetFindByTypeValueReq: recordUuidType=%08x")
TRC_MSG(ATT_ATTDB_FINDBYTYPEVALUE_CAN_NOT_WRITE, "[ATT] ATTDb_HandleGetFindByTypeValueReq: can not write")
TRC_MSG(ATT_ATTDB_FINDBYTYPEVALUE_RECORDUUIDTYPE_NOT_0X02, "[ATT] ATTDb_HandleGetFindByTypeValueReq: recordUuidType not 0x02")
TRC_MSG(ATT_ATTDB_FINDBYTYPEVALUE_PTRATTRIBUTETYPE_02X, "[ATT] ATTDb_HandleGetFindByTypeValueReq: attributeType=%02x")
TRC_MSG(ATT_ATTDB_FINDBYTYPEVALUE_CONTINUE, "[ATT] ATTDb_HandleGetFindByTypeValueReq: continue")
TRC_MSG(ATT_ATTDB_FINDBYTYPEVALUE_ATTRIBUTEVALUELEN__D, "[ATT] ATTDb_HandleGetFindByTypeValueReq: attributeValueLen=%d")
TRC_MSG(ATT_ATTDB_FINDBYTYPEVALUE_VALUE_SIZE__D, "[ATT] ATTDb_HandleGetFindByTypeValueReq: AttDatabaseHandle[i].value_size=%d")
TRC_MSG(ATT_ATTDB_FINDBYTYPEVALUE_MATCH_RESULT_FAILED, "[ATT] ATTDb_HandleGetFindByTypeValueReq: match result failed")
TRC_MSG(ATT_ATTDB_READMULTIPLEREQ_RECORD04X_NOT_FOUND, "[ATT] ATTDb_HandleReadMultipleReq: Record=%04x not found")
TRC_MSG(ATT_ATTDB_WRITEREQUEST_HANDLE__U, "[ATT] ATTDb_HandleWriteRequest: handle=%u")
TRC_MSG(ATT_ATTDB_WRITEREQUEST_ATTRIBUTE_FOUND_I__U, "[ATT] ATTDb_HandleWriteRequest: Attribute found i=%u")
TRC_MSG(ATT_ATTDB_WRITEREQUEST_CHECK_PERMISSION_FAILED__U, "[ATT] ATTDb_HandleWriteRequest: check permission failed %u")
/* ATT END */

/* GATT START */
TRC_MSG(GATT_INIT, "[GATT] init")
TRC_MSG(GATT_BT_GATT_DISCONNECTTIMEOUTHANDLER_MARKED_BY_YI_, "[GATT] BT_GATT_DisconnectTimeoutHandler marked by yi. ")
TRC_MSG(GATT_BT_GATT_ATT_CALLBACK_EVENTD, "[GATT] BT_Gatt_Att_Callback(): event=%d")
TRC_MSG(GATT_HANDLEOPERATION_GATTREQUESTCUROP0XX, "[GATT] GATT_HandleOperation(): gattRequestCurOp=0x%x")
TRC_MSG(GATT_HANDLEOPERATION_OLD_0XX, "[GATT] GATT_HandleOperation(): old 0x%x")
TRC_MSG(GATT_HANDLEOPERATION_0XX, "[GATT] GATT_HandleOperation(): 0x%x")
TRC_MSG(GATT_THE_REMOTE_DEVICE_RESPONSE_LENGTHD, "[GATT] The remote device response length:%d")
TRC_MSG(GATT_EVENTSTARTHANDLED, "[GATT] gatt_event.startHandle:%d")
TRC_MSG(GATT_EVENTENDHANDLED, "[GATT] gatt_event.endHandle:%d")
TRC_MSG(GATT_HANDLEFINDINCLUDESERVICEOP_EVENTD, "[GATT] GattHandleFindIncludeServiceOp event:%d")
TRC_MSG(GATT_EVENTATTRIBUTEHANDLED, "[GATT] gatt_event.attributeHandle:%d")
TRC_MSG(GATT_EVENTINCLUDESERVICEHANDLED, "[GATT] gatt_event.includeServiceHandle:%d")
TRC_MSG(GATT_EVENTENDGROUPHANDLED, "[GATT] gatt_event.endGroupHandle:%d")
TRC_MSG(GATT_EVENTSERVICEUUIDD, "[GATT] gatt_event.serviceUUID:%d")
TRC_MSG(GATT_POSSIBLE_MULTIPLE_INCLUDE_RESPONSE, "[GATT] Possible multiple include response")
TRC_MSG(GATT_PARMSTEMPDATA1D, "[GATT] parms->tempData1:%d")
TRC_MSG(GATT_PARMSTEMPDATA2D, "[GATT] parms->tempData2:%d")
TRC_MSG(GATT_PARMSTEMPDATA3D, "[GATT] parms->tempData3:%d")
TRC_MSG(GATT_EVENTCHARPROPERTYD, "[GATT] gatt_event.charProperty:%d")
TRC_MSG(GATT_EVENTCHARVALUEATTRIBUTEHANDLED, "[GATT] gatt_event.charValueAttributeHandle:%d")
TRC_MSG(GATT_EVENTCHARUUIDD, "[GATT] gatt_event.charUUID:%d")
TRC_MSG(GATT_UUID_IS_NOT_MATCH, "[GATT] UUID is not match")
TRC_MSG(GATT_EVENTUUID16D, "[GATT] gatt_event.uuid16:%d")
TRC_MSG(GATT_EVENTTYPED, "[GATT] gatt_event.type:%d")
TRC_MSG(GATT_EVENTLENGTHD, "[GATT] gatt_event.length:%d")
TRC_MSG(GATT_ERROR_RESPONSED, "[GATT] Error response:%d")
TRC_MSG(GATT_EVENTHANDLED, "[GATT] gatt_event.handle:%d")
TRC_MSG(GATT_PARMSOFFSETD, "[GATT] parms->offset:%d")
TRC_MSG(GATT_CONNATT_MTUD, "[GATT] conn->att_mtu:%d")
TRC_MSG(GATT_READ_EVENT_TYPE_CODE_IS_ERROR, "[GATT] read event type code is error")
TRC_MSG(GATT_BT_GATTUNREGISTERCONNECTEDEVENT__HDL0XX_IS_NOT_REGISTER, "[GATT] BT_GattUnregisterConnectedEvent : hdl(0x%x) is not registered")
TRC_MSG(GATT_BT_GATTCOMMONAPI_STATED_OPCODE0XX, "[GATT] BT_GattCommonAPI: state=%d, opcode=0x%x")
TRC_MSG(GATT_OP0XX_OPTYPED, "[GATT] op:0x%x opType:%d")
TRC_MSG(GATT_ERR_BT_GATTCOMMONAPI_CONN_IS_NULL, "[GATT][ERR] BT_GattCommonAPI conn is NULL!")
TRC_MSG(GATT_MEM_CREATE_SUCCESS, "[GATT][kal_adm_create] create adm buffer success!")
TRC_MSG(GATT_MEM_CREATE_FAIL, "[GATT][ERR][kal_adm_create] create adm buffer failed!")
TRC_MSG(GATT_MEM_ALLOC_SIZE, "[GATT][adm malloc] size:%d")
TRC_MSG(GATT_MEM_ALLOC_ERR, "[GATT][adm malloc][ERR] buffer is NULL!")
TRC_MSG(GATT_MEM_ALLOC_SUCCESS, "[GATT][adm malloc] ptr:%x, size:%d")
TRC_MSG(GATT_MEM_FREE, "[GATT][adm free] ptr:%x")
TRC_MSG(GATT_MEM_FREE_ERR1, "[GATT][adm free][ERR] ptr is NULL!")
TRC_MSG(GATT_MEM_FREE_ERR2, "[GATT][adm free][ERR] buffer is NULL!")
/* GATT END*/

/* GATT UTIL START */
TRC_MSG(GATTUTIL_DUMPATTUUID_INST__U, "[GATT][UTIL] dumpAttUUID: inst=%u")
TRC_MSG(GATTUTIL_DUMPSVCUUID_IS_PRIMARY__U, "[GATT][UTIL] dumpSvcUUID: is_primary=%u")
/* GATT UTIL END*/

/* GATTC START */
TRC_MSG(GATTCDBG_HANDLE_MSG_D, "[GATTC][DBG] Handle msg %d")
TRC_MSG(GATTCDBG_CHECKUSERBGCONN__USERP_ADDRP, "[GATTC][DBG] checkUserBgConn : user=%p, addr=%p")
TRC_MSG(GATTCDBG_CHECKUSERREGNOTI__USERP_USERREGNOTILISTP, "[GATTC][DBG] checkUserRegNoti : user=%p, &user->regNotiList=%p")
TRC_MSG(GATTCDBG_FINDCHARBYUUID__PSERVP_CHAR_UUIDP_INSTU, "[GATTC][DBG] findCharByUuid : pServ=%p, char_uuid=%p, inst=%u")
TRC_MSG(GATTCDBG_FINDDESCRBYUUID__PCHARP_DESCR_UUIDP_INSTU, "[GATTC][DBG] findDescrByUuid : pChar=%p, descr_uuid=%p, inst=%u")
TRC_MSG(GATTCDBG_ASYNCCONNAPIHANDLER__TYPEU, "[GATTC][DBG] asyncConnApiHandler : type=%u")
TRC_MSG(GATTCDBG_GATTC_REQ_TYPE_SERVICE_SEARCH__START, "[GATTC][DBG] GATTC_REQ_TYPE_SERVICE_SEARCH : start")
TRC_MSG(GATTCDBG_GATTC_REQ_TYPE_SERVICE_SEARCH__END, "[GATTC][DBG] GATTC_REQ_TYPE_SERVICE_SEARCH : end")
TRC_MSG(GATTCDBG_GATTC_REQ_TYPE_INCL_SERVICE_SEARCH__START, "[GATTC][DBG] GATTC_REQ_TYPE_INCL_SERVICE_SEARCH : start")
TRC_MSG(GATTCDBG_GATTC_REQ_TYPE_INCL_SERVICE_SEARCH__END, "[GATTC][DBG] GATTC_REQ_TYPE_INCL_SERVICE_SEARCH : end")
TRC_MSG(GATTCDBG_GATTC_REQ_TYPE_GET_CHAR__START, "[GATTC][DBG] GATTC_REQ_TYPE_GET_CHAR : start")
TRC_MSG(GATTCDBG_GATTC_REQ_TYPE_GET_CHAR__END, "[GATTC][DBG] GATTC_REQ_TYPE_GET_CHAR : end")
TRC_MSG(GATTCDBG_GATTC_REQ_TYPE_GET_DESCR__START, "[GATTC][DBG] GATTC_REQ_TYPE_GET_DESCR : start")
TRC_MSG(GATTCDBG_GATTC_REQ_TYPE_GET_DESCR__END, "[GATTC][DBG] GATTC_REQ_TYPE_GET_DESCR : end")
TRC_MSG(GATTCDBG_CHECKBGCONNECTION, "[GATTC][DBG] checkBgConnection")
TRC_MSG(GATTCDBG_FOUND_USERP_BGP, "[GATTC][DBG] Found user=%p, bg=%p")
TRC_MSG(GATTCDBG_NO_BG_FOUND, "[GATTC][DBG] No bg found")
TRC_MSG(GATTCDBG_CHECKSCANING, "[GATTC][DBG] checkScaning")
TRC_MSG(GATTCDBG_USER_P_REQUEST_SCANING, "[GATTC][DBG] user %p request scaning")
TRC_MSG(GATTCDBG_NO_USER_REQUEST_SCANING, "[GATTC][DBG] no user request scaning")
TRC_MSG(GATTCDBG_REPORTRSSIRESULT__REMDEVP_ERRU_RSSID, "[GATTC][DBG] reportRssiResult : remDev=%p, err=%u, rssi=%d")
TRC_MSG(GATTCDBG_USER_P_REQUEST_RSSI, "[GATTC][DBG] user %p request RSSI")
TRC_MSG(GATTCDBG_UPDATESCANINGSTATE__GATTCCFLAGU, "[GATTC][DBG] updateScaningState : GATTCC(flag)=%u")
TRC_MSG(GATTCDBG_MECALLBACK__EVENTU, "[GATTC][DBG] meCallBack : event=%u")
TRC_MSG(GATTCDBG_DB_IS_NOT_FOUND_TRY_TO_LOAD_FROM_FILE, "[GATTC][DBG] DB is not found try to load from file")
TRC_MSG(GATTCDBG_REPORTINDICATION__LOAD_CACHED_DB_FILE_FAILED, "[GATTC][DBG] reportIndication : Load cached db file failed.")
TRC_MSG(GATTCDBG_REPORTINDICATION__DB_IS_NULL_JUST_RETURN, "[GATTC][DBG] reportIndication : db is NULL, just return.")
TRC_MSG(GATTCDBG_GATTCAPCALLBACK__ETYPEU, "[GATTC][DBG] GattcAPCallBack : eType=%u")
TRC_MSG(GATTCDBG_BT_GATT_APP_EVENT_CONNECTED__USERLISTP_USERP, "[GATTC][DBG] BT_GATT_APP_EVENT_CONNECTED : userList=%p, user=%p")
TRC_MSG(GATTCDBG_USERP, "[GATTC][DBG] user=%p")
TRC_MSG(GATTCDBG_SEARCHALLPRIMARYSERVICE, "[GATTC][DBG] searchAllPrimaryService")
TRC_MSG(GATTCDBG_GATTSERVICESEARCHALLCALLBACKD, "[GATTC][DBG] gattServiceSearchAllCallBack():%d")
TRC_MSG(GATTCDBG_BGP, "[GATTC][DBG] bg(%p)")
TRC_MSG(GATTCDBG_BGP_FOUND, "[GATTC][DBG] bg(%p) found")
TRC_MSG(GATTCDBG_GATTCALLOCBGCONNUSERP_ADDRP, "[GATTC][DBG] GattcAllocBgConn(user=%p, addr=%p)")
TRC_MSG(GATTCDBG_GATTC_REQ_TYPE_READ_DESCR, "[GATTC][DBG] GATTC_REQ_TYPE_READ_DESCR")
TRC_MSG(GATTCDBG_ASYNCCONNAPILISTHANDLERCONNP, "[GATTC][DBG] asyncConnApiListHandler(conn=%p)")
TRC_MSG(GATTCDBG_ASYNCCONNAPIHANDLERCONNP_REQP_RETURN_D, "[GATTC][DBG] asyncConnApiHandler(conn=%p, req=%p) return %d")
TRC_MSG(GATTCDBG_GATTCCHANNELCALLBACK__EVENTU_ERRORU, "[GATTC][DBG] gattcChannelCallback : event=%u, error=%u")
TRC_MSG(GATTCDBG_REQUEST_ONGOING_WHEN_FREE_CONNECTION_SET_OP_C, "[GATTC][DBG] request ongoing when free connection. Set op context to NULL")
TRC_MSG(GATTCDBG_GETGATTCCONN__USERP_REMDEVP, "[GATTC][DBG] getGattcConn : user=%p, remDev=%p")
TRC_MSG(GATTCDBG_CONN_P_FOUND, "[GATTC][DBG] conn %p found")
TRC_MSG(GATTCDBG_GETGATTCCONNFROMHDL__USERP_CONNHDLP, "[GATTC][DBG] getGattcConnFromHdl : user=%p, connhdl=%p")
TRC_MSG(GATTCDBG_GATTCCONNECT_CONN_P_ALREADY_EXIST, "[GATTC][DBG] gattcConnect Conn %p already exist")
TRC_MSG(GATTCDBG_GATTCCONNECT_USERP_DIRECTU, "[GATTC][DBG] gattcConnect user=%p, direct=%u")
TRC_MSG(GATTCDBG_GATTCCONNECT_RETURN_D, "[GATTC][DBG] gattcConnect return %d")
TRC_MSG(GATTCDBG_START_GATTC_INIT, "[GATTC][DBG] start GATTC_Init")
TRC_MSG(GATTCDBG_GET_LE_SCAN_INDEX_U, "[GATTC][DBG] Get le scan index %u")
TRC_MSG(GATTCDBG_MEHANDLER_EMASK__U_HANDLERP_CBP, "[GATTC][DBG] meHandler eMask = %u, handler=%p, cb=%p")
TRC_MSG(GATTCDBG_END_GATTC_INIT, "[GATTC][DBG] end GATTC_Init")
TRC_MSG(GATTCDBG_START_GATTC_REGISTER__HANDLEP, "[GATTC][DBG] start GATTC_Register : handle=%p")
TRC_MSG(GATTCDBG_END_GATTC_REGISTER__STATUSD_HANDLEP, "[GATTC][DBG] end GATTC_Register : status=%d, handle=%p")
TRC_MSG(GATTCDBG_START_GATTC_DEREGISTER__HANDLEP, "[GATTC][DBG] start GATTC_Deregister : handle=%p")
TRC_MSG(GATTCDBG_END_GATTC_DEREGISTER__STATUSD_HANDLEP, "[GATTC][DBG] end GATTC_Deregister : status=%d, handle=%p")
TRC_MSG(GATTCDBG_START_GATTC_OPEN__USERP_ADDRP, "[GATTC][DBG] start GATTC_Open : user=%p, addr=%p")
TRC_MSG(GATTCDBG_FREE_BG_CONNECTION_FIRST, "[GATTC][DBG] Free bg connection first")
TRC_MSG(GATTCDBG_END_GATTC_OPEN__STATUSD, "[GATTC][DBG] end GATTC_Open : status=%d")
TRC_MSG(GATTCDBG_GATTC_READRSSI__USERP, "[GATTC][DBG] GATTC_ReadRssi : user=%p")
TRC_MSG(GATTCDBG_CAN_NOT_FIND_CONNECTED_DEVICE, "[GATTC][DBG] Can not find connected device")
TRC_MSG(GATTCDBG_BUSY_ON_READ_RSSI_OD_DEVICE_P, "[GATTC][DBG] Busy on read rssi od device %p")
TRC_MSG(GATTCDBG_UPDATEEIRRESPONSEP__BDCP, "[GATTC][DBG] updateEIRResponse(%p) : bdc=%p")
TRC_MSG(GATTCDBG_GATTCADVEVENTCALLBACK, "[GATTC][DBG] gattcAdvEventCallBack")
TRC_MSG(GATTCDBG_CHECK_BG_OF_USER_P, "[GATTC][DBG] Check bg of user %p")
TRC_MSG(GATTCDBG_FINDEXISTCHANNEL, "[GATTC][DBG] findExistChannel")
TRC_MSG(GATTCDBG_FIND_CHANNEL_P, "[GATTC][DBG] Find channel %p")
TRC_MSG(GATTCDBG_CAN_NOT_FIND_CHANNEL, "[GATTC][DBG] Can not find channel")
TRC_MSG(GATTCDBG_CALLBACKCHANNELEVENTCHANNELP_TYPEU, "[GATTC][DBG] callbackChannelEvent(channel=%p, type=%u)")
TRC_MSG(GATTCDBG_CHANNELSTATEMACHINE__CHANNELP_STATE_U_EV, "[GATTC][DBG] channelStateMachine : channel(%p) state %u. event=%u, registered=%u")
TRC_MSG(GATTCDBG_GATT_CHANNEL_EVENT_ATT_DISCONNECTED__STATEU, "[GATTC][DBG] GATT_CHANNEL_EVENT_ATT_DISCONNECTED : state=%u")
TRC_MSG(GATTCDBG_GATT_CHANNEL_EVENT_ATT_CONNECTED__STATEU, "[GATTC][DBG] GATT_CHANNEL_EVENT_ATT_CONNECTED : state=%u")
TRC_MSG(GATTCDBG_GATT_CHANNEL_EVENT_DISCOVER_COMPLETE__STATE, "[GATTC][DBG] GATT_CHANNEL_EVENT_DISCOVER_COMPLETE : state=%u, err=%u")
TRC_MSG(GATTCDBG_CHANNEL_STATE_IS_DISCONNECTED_INSERT_TO_FREE_, "[GATTC][DBG] Channel state is disconnected. Insert to free list")
TRC_MSG(GATTCDBG_CREATE_CHANNEL_FAILED_REINSERT_TO_FREE_CHANNE, "[GATTC][DBG] Create channel failed, reinsert to free channel list")
TRC_MSG(GATTCDBG_GATTCRELEASECHANNELHANDLERP, "[GATTC][DBG] GattcReleaseChannel(handler=%p)")
TRC_MSG(GATTCDBG_CHANNELHANDLERLIST_IS_NOT_EMPTY, "[GATTC][DBG] channel->handlerList is not empty")
TRC_MSG(GATTCDBG_HANDLER_IS_ON_RELEASEHANDLERLIST, "[GATTC][DBG] Handler is on releaseHandlerList")
TRC_MSG(GATTCDBG_GATTSERVICECONNECTIONCALLBACK_EVENTU_STATU, "[GATTC][DBG] GattServiceConnectionCallback. event=%u, status=%d")
TRC_MSG(GATTCDBG_RESULTFLAGD_HANDLE_0XX0XX_TYPED_UU, "[GATTC][DBG] result->flag:%d, handle 0x%x~0x%x, type=%d, uuid2=0x%x")
TRC_MSG(GATTCDBG_DISCOVERY_ALL_PRIMARY_SERVICE_DONE__U_PRIMAR, "[GATTC][DBG] Discovery all primary service done : %u primary services")

TRC_MSG(GATTCWARN_INVALID_CHANNEL_CALLBACK_EVENT, "[GATTC][WARN] Invalid channel callback event")
TRC_MSG(GATTCWARN_GATTC_UUID_COMPARE__NULL_UUID_UUID1P_UUI, "[GATTC][WARN] gattc_uuid_compare : NULL uuid, uuid1=%p, uuid2=%p")
TRC_MSG(GATTCWARN_GATTC_UUID_COMPARE__INVALID_UUID_LEN_LEN1, "[GATTC][WARN] gattc_uuid_compare : invalid uuid len, len1=%u, len2=%u")
TRC_MSG(GATTCWARN_GATTCCONNECT_CONN_P_ALREADY_EXIST, "[GATTC][WARN] gattcConnect Conn %p already exist")
TRC_MSG(GATTCWARN_INVALID_FLAG__U, "[GATTC][WARN] Invalid flag : %u")
TRC_MSG(GATTCWARN_GATTCREADCHARVALUECALLBACK__CONN_IS_NULL, "[GATTC][WARN] gattcReadCharvalueCallback : conn is NULL.")
TRC_MSG(GATTCWARN_GATTCWRITECHARVALUECALLBACK__CONN_IS_NULL, "[GATTC][WARN] gattcWriteCharvalueCallback : conn is NULL.")
TRC_MSG(GATTCWARN_GATTCREADDESCRCALLBACK__CONN_IS_NULL, "[GATTC][WARN] gattcReadDescrCallback : conn is NULL.")
TRC_MSG(GATTCWARN_GATTCWRITEDESCRCALLBACK__CONN_IS_NULL, "[GATTC][WARN] gattcWriteDescrCallback : conn is NULL.")
TRC_MSG(GATTCWARN_GATTCEXECWRITECALLBACK__CONN_IS_NULL, "[GATTC][WARN] gattcExecWriteCallback : conn is NULL.")
TRC_MSG(GATTCWARN_NO_CORRESPONDING_SERVICE_NODE_FOUND_FOR_HANDL, "[GATTC][WARN] No corresponding service node found for handle %u")
TRC_MSG(GATTCWARN_DESCRIPTOR_NOTIFICATION_NOT_SUPPORT, "[GATTC][WARN] Descriptor notification not support")
TRC_MSG(GATTCWARN_NO_RELATED_VALUE_NODE_FOUND, "[GATTC][WARN] No related value node found")
TRC_MSG(GATTCWARN_UNKNOWN_GATT_EVENT__D, "[GATTC][WARN] Unknown GATT event : %d")
TRC_MSG(GATTCWARN_UNSPECIFIED_ERROR_CODE_U, "[GATTC][WARN] Unspecified error code %u")
TRC_MSG(GATTCWARN_BLE_FINDSERVICEBYUUID_FAILED, "[GATTC][WARN] BLE_FindServiceByUuid failed")
TRC_MSG(GATTCWARN_INVALID_UUID_SIZE_U, "[GATTC][WARN] Invalid uuid size %u")
TRC_MSG(GATTCWARN_GATT_CHANNEL_EVENT_ACL_DISCONNECTED, "[GATTC][WARN] GATT_CHANNEL_EVENT_ACL_DISCONNECTED")
TRC_MSG(GATTCWARN_CHANNEL_IS_CLOSING_DUE_TO_ERROR_REJECT_ALLOC, "[GATTC][WARN] Channel is closing due to error. Reject alloc")
TRC_MSG(GATTCWARN_CHANNELPHOLD_USER_IS_0_WHEN_FREE_CONNECT, "[GATTC][WARN] channel(%p)->hold_user is 0 when free connection(%p)")
TRC_MSG(GATTCWARN_RELEASE_NULL_HANDLER, "[GATTC][WARN] Release NULL Handler")
TRC_MSG(GATTCWARN_UNEXPECTED_CMGR_EVENT__D, "[GATTC][WARN] Unexpected CMGR event : %d")
TRC_MSG(GATTCWARN_GATTQUERYSERVICEDEFINITIONCB_FAILED__STATUS_, "[GATTC][WARN] GattQueryServiceDefinitionCB failed : status = %d")
TRC_MSG(GATTCWARN_NO_PRIMARY_SERVICE_FOUND, "[GATTC][WARN] No primary service found.")

TRC_MSG(GATTCERR_UNKNOWN_GATTS_MESSAGE__D, "[GATTC][ERR] Unknown GATTS message : %d")
TRC_MSG(GATTCERR_INVALID_USER_CONTEXT_P, "[GATTC][ERR] Invalid user context %p")
TRC_MSG(GATTCERR_RUN_OUT_OF_REG_NOTIFICATION, "[GATTC][ERR] Run out of reg notification")
TRC_MSG(GATTCERR_INVALID_PARAMETERS_USERP_ADDRP_SVCP_C, "[GATTC][ERR] Invalid parameters user=%p, addr=%p, svc=%p, char=%p")
TRC_MSG(GATTCERR_RUN_OUT_OF_CONN_CONTEXT, "[GATTC][ERR] Run out of conn context")
TRC_MSG(GATTCERR_INVALID_USER_P, "[GATTC][ERR] Invalid user %p")
TRC_MSG(GATTCERR_INVALID_REQUEST_TYPE_U, "[GATTC][ERR] Invalid request type %u")
TRC_MSG(GATTCERR_INVALID_CONN_P, "[GATTC][ERR] Invalid conn %p")
TRC_MSG(GATTCERR_RUN_OUT_OF_USER_CONTEXT, "[GATTC][ERR] Run out of user context")
TRC_MSG(GATTCERR_OUT_OF_FREE_OP, "[GATTC][ERR] Out of free op")
TRC_MSG(GATTCERR_CAN_NOT_FIND_CONN, "[GATTC][ERR] Can not find conn")
TRC_MSG(GATTCERR_INVALID_PARAMETER_HANDLEP_CBP, "[GATTC][ERR] Invalid parameter handle=%p, cb=%p")
TRC_MSG(GATTCERR_CAN_NOT_SUCCESS_FULLY_CREATE_CONN_EVEN_THE_ATT, "[GATTC][ERR] Can not success fully create conn even the ATT conn is exist")
TRC_MSG(GATTCERR_FAIL_SEARCHING_SERVICE_DUE_TO_WRONG_CHANNEL_ST, "[GATTC][ERR] Fail searching service due to wrong channel state %u")
TRC_MSG(GATTCERR_INVALID_CHANNEL_EVENT_TYPE__U, "[GATTC][ERR] Invalid channel event type : %u")
TRC_MSG(GATTCERR_INVALID_CHANNEL_STATE, "[GATTC][ERR] Invalid channel state")
TRC_MSG(GATTCERR_INVALID_CHANNEL_P, "[GATTC][ERR] Invalid channel %p")
TRC_MSG(GATTCERR_CREATE_CHANNEL_FAILED_, "[GATTC][ERR] Create channel failed. ")
TRC_MSG(GATTCERR_RUN_OUT_OF_GATTC_CHANNEL, "[GATTC][ERR] Run out of GATTC channel")
TRC_MSG(GATTCERR_TRY_TO_FREE_INVALID_CHANNELP, "[GATTC][ERR] Try to free invalid channel(%p)")
TRC_MSG(GATTCERR_CHANNELP_IN_HANDLERP_INVALID, "[GATTC][ERR] channel(%p) in handler(%p) invalid")
TRC_MSG(GATTCERR_INVALID_CHANNELP, "[GATTC][ERR] Invalid channel(%p)")
TRC_MSG(GATTCERR_GATTQUERYSERVICEDEFINITIONCB__INVALID_CHANNEL, "[GATTC][ERR] GattQueryServiceDefinitionCB : Invalid channel %p")
TRC_MSG(GATTCERR_GATTSERVICESEARCHALLCALLBACK_CHANNEL_INVALID_, "[GATTC][ERR] gattServiceSearchAllCallBack: channel invalid %p")
TRC_MSG(GATTCERR_INVALID_PARAMETER, "[GATTC][ERR] Invalid parameter")
/* GATTC END */

/* GATTS START */
TRC_MSG(GATTSDBG_GATTSALLOCBGCONNUSERP_ADDRP, "[GATTS][DBG] GattsAllocBgConn(user=%p, addr=%p)")
TRC_MSG(GATTSDBG_GETGATTSCONN__USERP_REMDEVP, "[GATTS][DBG] getGattsConn : user=%p, remDev=%p")
TRC_MSG(GATTSDBG_CONN_P_FOUND, "[GATTS][DBG] conn %p found")
TRC_MSG(GATTSDBG_GETGATTSCONNFROMHDL__USERP_CONNHDLP, "[GATTS][DBG] getGattsConnFromHdl : user=%p, connhdl=%p")
TRC_MSG(GATTSDBG_GATTSCONNECT_CONN_P_ALREADY_EXIST, "[GATTS][DBG] gattsConnect Conn %p already exist")
TRC_MSG(GATTSDBG_GATTSCONNECT_RETURN_D, "[GATTS][DBG] gattsConnect return %d")
TRC_MSG(GATTSDBG_GET_LE_SCAN_INDEX_U, "[GATTS][DBG] Get le scan index %u")
TRC_MSG(GATTSDBG_START_GATTS_REGISTER__HANDLEP, "[GATTS][DBG] start GATTS_Register : handle=%p")
TRC_MSG(GATTSDBG_END_GATTS_REGISTER__STATUSD_HANDLEP, "[GATTS][DBG] end GATTS_Register : status=%d, handle=%p")
TRC_MSG(GATTSDBG_START_GATTS_DEREGISTER__HANDLEP, "[GATTS][DBG] start GATTS_Deregister : handle=%p")
TRC_MSG(GATTSDBG_END_GATTS_DEREGISTER__STATUSD_HANDLEP, "[GATTS][DBG] end GATTS_Deregister : status=%d, handle=%p")
TRC_MSG(GATTSDBG_START_GATTS_OPEN__USERP_ADDRP, "[GATTS][DBG] start GATTS_Open : user=%p, addr=%p")
TRC_MSG(GATTSDBG_END_GATTS_OPEN__STATUSD, "[GATTS][DBG] end GATTS_Open : status=%d")
TRC_MSG(GATTSDBG_IGNOE_THIS_EVENT_DUE_TO_SERVER_WILL_ALWAYS_RE, "[GATTS][DBG] Ignoe this event, due to server will always report device connected ind.")
TRC_MSG(GATTSDBG_GATTDBCALLBACKTYPEU_HANDLEU, "[GATTS][DBG] GattdbCallback(type=%u, handle=%u")
TRC_MSG(GATTSDBG_PREPARE_WRITE_OF_CONN_U__COUNT_IS_U, "[GATTS][DBG] prepare write of conn %u : count is %u")
TRC_MSG(GATTSDBG_EXECUTE_WRITE__COUNT_OF_U_CONN_IS_U, "[GATTS][DBG] execute write : count of %u conn is %u")
TRC_MSG(GATTSDBG_GATTS_RESPONSEHDLP_CONNP_HANDLEU_RESULTU_VALUE, "[GATTS][DBG] GATTS_Response(hdl=%p, conn=%p, handle=%u, result=%u, value_len=%u)")
TRC_MSG(GATTSDBG_GATTS_RESPONSE_OPD, "[GATTS][DBG] GATTS_Response op=%d")
TRC_MSG(GATTSDBG_GATTSAPCALLBACK__ETYPEU, "[GATTS][DBG] gattsAPCallback : eType=%u")
TRC_MSG(GATTSDBG_BT_GATT_APP_EVENT_CONNECTED__USERLISTP_USERP, "[GATTS][DBG] BT_GATT_APP_EVENT_CONNECTED : userList=%p, user=%p")
TRC_MSG(GATTSDBG_USERP, "[GATTS][DBG] user=%p")
TRC_MSG(GATTSDBG_FINDCONTAINEDSERVICENODEDBP_HANDLEU, "[GATTS][DBG] findContainedServiceNode(db=%p, handle=%u)")
TRC_MSG(GATTSDBG_SVCP_STARTU_ENDU, "[GATTS][DBG] svc=%p, start=%u, end=%u")
TRC_MSG(GATTSDBG_FINDDESCRNODECHARP_HANDLEU, "[GATTS][DBG] findDescrNode(char=%p, handle=%u)")
TRC_MSG(GATTSDBG_DESCRP_DESCR_HANDLEU, "[GATTS][DBG] descr=%p, descr handle=%u")
TRC_MSG(GATTSDBG_GETVALUENODEBYHANDLE__HANDLEU, "[GATTS][DBG] getValueNodeByHandle : handle=%u")
TRC_MSG(GATTSDBG_CHAR_NODE__P_HANDLEU_VALUE_HANDLEU, "[GATTS][DBG] char_node = %p, handle=%u, value handle=%u")
TRC_MSG(GATTSDBG_CONVERPERMISSIONPERM0XX, "[GATTS][DBG] converPermission(perm=0x%X)")
TRC_MSG(GATTSDBG_READWRITE, "[GATTS][DBG] Read/Write")
TRC_MSG(GATTSDBG_READ_ONLY, "[GATTS][DBG] Read Only")
TRC_MSG(GATTSDBG_WRITE_ONLY, "[GATTS][DBG] Write Only")
TRC_MSG(GATTSDBG_NO_READWRITE, "[GATTS][DBG] No Read/Write")
TRC_MSG(GATTSDBG_READ_ENCRYPT_REQUIRED, "[GATTS][DBG] Read Encrypt required")
TRC_MSG(GATTSDBG_READ_AUTH_REQUIRED, "[GATTS][DBG] Read auth required")
TRC_MSG(GATTSDBG_READ_ENCRYP_KEY_SIZE_U_REQUIRED, "[GATTS][DBG] Read encryp key size %u required")
TRC_MSG(GATTSDBG_WRITE_ENCRYPT_REQUIRED, "[GATTS][DBG] Write Encrypt required")
TRC_MSG(GATTSDBG_WRITE_AUTH_REQUIRED, "[GATTS][DBG] Write auth required")
TRC_MSG(GATTSDBG_WRITE_ENCRYP_KEY_SIZE_U_REQUIRED, "[GATTS][DBG] Write encryp key size %u required")
TRC_MSG(GATTSDBG_ADDDESCRRECORDP_DATAP__SIZEU, "[GATTS][DBG] addDescrRecord(%p, data=%p) : size=%u")
TRC_MSG(GATTSDBG_ADDCHARRECORDP_DATAP__SIZEU, "[GATTS][DBG] addCharRecord(%p, data=%p) : size=%u")
TRC_MSG(GATTSDBG_ADDINCLSERVICERECORDPDATAP__SIZEU, "[GATTS][DBG] addInclServiceRecord(%p,data=%p) : size=%u")
TRC_MSG(GATTSDBG_ADDSERVICERECORDP_DATAP__SIZEU, "[GATTS][DBG] addServiceRecord(%p, data=%p) : size=%u")
TRC_MSG(GATTSDBG_COMPOSEATTRECORDP, "[GATTS][DBG] composeAttRecord(%p)")
TRC_MSG(GATTSDBG_MOUNTATTRECORDCALLBACKSVCP_MOUNTU, "[GATTS][DBG] mountAttRecordCallback(svc=%p, mount=%u)")
TRC_MSG(GATTSDBG_MOUNTUNMOUNT_CHAR_P_HANDLE_U, "[GATTS][DBG] mount/unmount char %p, handle %u")
TRC_MSG(GATTSDBG_MOUNTUNMOUNT_DESCR_P_HANDLE_U, "[GATTS][DBG] mount/unmount descr %p, handle %u")
TRC_MSG(GATTSDBG_COMPOSESDPRECORDSVCP, "[GATTS][DBG] composeSDPRecord(svc=%p)")
TRC_MSG(GATTSDBG_UUID16, "[GATTS][DBG] uuid16")
TRC_MSG(GATTSDBG_UUID128, "[GATTS][DBG] uuid128")
TRC_MSG(GATTSDBG_INVALID_UUID_SIZE_JUST_RETURN, "[GATTS][DBG] Invalid uuid size. Just return")
TRC_MSG(GATTSDBG_GATTS_ADDSERVICE__HANDLEP_NUM_HANDLEU, "[GATTS][DBG] GATTS_AddService : handle=%p, num_handle=%u")
TRC_MSG(GATTSDBG_CAN_NOT_FIND_DB_CREATE_NEW, "[GATTS][DBG] Can not find DB. Create new")
TRC_MSG(GATTSDBG_ALLOC_SERVICE_P, "[GATTS][DBG] Alloc service %p")
TRC_MSG(GATTSDBG_GATTS_ADDCHARHANDLEU, "[GATTS][DBG] GATTS_AddChar(handle=%u)")
TRC_MSG(GATTSDBG_FIND_SVC_P_CONTAIN_HANDLE_U, "[GATTS][DBG] find svc %p contain handle %u")
TRC_MSG(GATTSDBG_GATTS_ADDDESCRHANDLEU_PERMISSIONU, "[GATTS][DBG] GATTS_AddDescr(handle=%u, permission=%u)")
TRC_MSG(GATTSDBG_FIND_CONTAINED_SERVICE_P, "[GATTS][DBG] Find contained service %p")
TRC_MSG(GATTSDBG_GATTS_STARTSERVICE__SVCP_PSVCRECORDP_SVCRECORDSIZE, "[GATTS][DBG] GATTS_StartService : svc=%p, pSvcRecord=%p, svcRecordSize=%u")
TRC_MSG(GATTSDBG_GATTSADPCALLBACK__HANDLEP_EVENTU, "[GATTS][DBG] gattsAdpCallback : handle=%p, event=%u")

TRC_MSG(GATTSWARN_INVALID_OP_U, "[GATTS][WARN] Invalid op %u")
TRC_MSG(GATTSWARN_INVALID_CHANNEL_CALLBACK_EVENT, "[GATTS][WARN] Invalid channel callback event")
TRC_MSG(GATTSWARN_UNKNOWN_GATT_EVENT__D, "[GATTS][WARN] Unknown GATT event : %d")
TRC_MSG(GATTSWARN_INVALID_FLAG__U, "[GATTS][WARN] Invalid flag : %u")
TRC_MSG(GATTSWARN_RUN_OUT_OF_AVAILABLE_SERVICE_RANGE, "[GATTS][WARN] Run out of available service range")
TRC_MSG(GATTSWARN_UNKNOWN_TYPE_U, "[GATTS][WARN] Unknown type %u")

TRC_MSG(GATTSERR_INVALID_CALLBACK_EVENT_U, "[GATTS][ERR] Invalid callback event %u")
TRC_MSG(GATTSERR_UNKNOWN_GATTS_MESSAGE__D, "[GATTS][ERR] Unknown GATTS message : %d")
TRC_MSG(GATTSERR_RUN_OUT_OF_CONN_CONTEXT, "[GATTS][ERR] Run out of conn context")
TRC_MSG(GATTSERR_INVALID_USER_P, "[GATTS][ERR] Invalid user %p")
TRC_MSG(GATTSERR_RUN_OUT_OF_USER_CONTEXT, "[GATTS][ERR] Run out of user context")
TRC_MSG(GATTSERR_CAN_NOT_FIND_CONN, "[GATTS][ERR] Can not find conn")
TRC_MSG(GATTSERR_INVALID_PARAMETER_HANDLEP_CBP, "[GATTS][ERR] Invalid parameter handle=%p, cb=%p")
TRC_MSG(GATTSERR_CAN_NOT_FIND_CONN_WITH_ATT_CONN_IDX_P, "[GATTS][ERR] Can not find conn with ATT conn idx %p")
TRC_MSG(GATTSERR_CAN_NOT_FIND_SERVICE_DB, "[GATTS][ERR] Can not find service DB")
TRC_MSG(GATTSERR_CAN_NOT_FIND_INCLUDED_SERVICE, "[GATTS][ERR] Can not find included service")
TRC_MSG(GATTSERR_CAN_NOT_FIND_SERVICE, "[GATTS][ERR] Can not find service")
TRC_MSG(GATTSERR_NO_ADDED_CHAR, "[GATTS][ERR] No added char")
/* GATTS END */

TRC_MSG(BT_BLE_TRACE_END, "BT_BLE_TRACE_END")  /* LOG FILTER. DO NOT MODIFY */
/* BLE TRACE END */

TRC_MSG(FTP_CLIENT_CREATE_BUFFER, "[GOEP] create Client:0x%x pl2capRawData:0x%x")
TRC_MSG(FTP_CLIENT_GOEP_CALLBACK, "[FTP][UTIL][CHECK] check_progress curr:%d total:%d last:%d ")
TRC_MSG(FTP_UTIL_READ_RESULT, "[FTP][M] Read - pre-read result:%d read:%d start:%d")
TRC_MSG(FTP_UTIL_OBSREAD_PARAM, "[FTPCFLOW] FTPOBS_Read obsh:0x%x ocx:0x%x maxlen:%d")
TRC_MSG(FTP_UTIL_OBSWRITE_PARAM, "[FTPCFLOW] FTPOBS_Write obsh:0x%x ocx:0x%x inputlen:%d")
TRC_MSG(FTP_UTIL_CHECK_PROGRESS, "[FTP][UTIL][CHECK] check_progress curr:%d total:%d last:%d ")
TRC_MSG(FTP_UTIL_GET_FILESIZE, "[FTP] btmtk_fs_get_filesize_ucs2 ret:%d size:%d")
TRC_MSG(FTP_UTIL_FLUSH, "[FTPCFLOW] FTPOBS_Flush obsh:0x%x ocx:0x%x ")
TRC_MSG(FTP_START_ABORT_TIMER, "[FTP] start a abort timer to disconnect 0x%x")
TRC_MSG(FTP_STOP_ABORT_TIMER, "[FTP] stop abortTimer 0x%x ")
TRC_MSG(FTP_ADP_CALLBACK, "[FTP] ftpsAdpCallback GOEP_Event:%d ")
TRC_MSG(FTP_GOEP_SERVER_CALLBACK, "[FTP] FtpGoepServerCallback GOEP_EVENT=%d, GOEP_OPER=%d, goep_conn_id=%d")
TRC_MSG(FTP_GOEP_CLIENT_CONTINUE_RESULT, "[SRM] GOEP_ClientContinue status:%d")
TRC_MSG(FTP_UTIL_CHECK_PROGRESS_RET, "[FTP][UTIL] check_progress curr:%d total:%d last:%d ret:%d")
TRC_MSG(FTP_RESERVED_15, "FTP_RESERVED_15")
TRC_MSG(FTP_RESERVED_16, "FTP_RESERVED_16")
TRC_MSG(FTP_RESERVED_17, "FTP_RESERVED_17")
TRC_MSG(FTP_RESERVED_18, "FTP_RESERVED_18")
TRC_MSG(FTP_RESERVED_19, "FTP_RESERVED_19")
TRC_MSG(FTP_RESERVED_20, "FTP_RESERVED_20")
TRC_MSG(GOEP_L2CAP_RAWDATA_BUFF, "[GOEP] RegisterClient pl2capRawDataAddr is 0x%x ")
TRC_MSG(GOEP_CLIENT_SRM_FLAG, "[OBEX:] OCC(srm_client):0x%x")
TRC_MSG(GOEP_L2CAP_CHANNEL_STATUS, "[GOEP] RegisterClient pl2capRawDataAddr is 0x%x ")
TRC_MSG(GOEP_SERVER_L2CAP_RAWDATA_BUFF, "[GOEP][SERV] RegisterServer pl2capRawDataAddr is 0x%x")
TRC_MSG(GOEP_CLIENT_SENDCOMMAND, "[OBEX][CLIENT] ClientSendCommand OCH(txLength)=%d OCC(txLength)=%d")
TRC_MSG(GOEP_SERVER_PROCESS_PUT_OPER, "GOEP_RESERVED_6")
TRC_MSG(GOEP_RESERVED_7, "GOEP_RESERVED_7")
TRC_MSG(GOEP_RESERVED_8, "GOEP_RESERVED_8")
TRC_MSG(GOEP_RESERVED_9, "GOEP_RESERVED_9")
TRC_MSG(GOEP_RESERVED_10, "GOEP_RESERVED_10")
TRC_MSG(GOEP_RESERVED_11, "GOEP_RESERVED_11")
TRC_MSG(GOEP_RESERVED_12, "GOEP_RESERVED_12")
TRC_MSG(GOEP_RESERVED_13, "GOEP_RESERVED_13")
TRC_MSG(GOEP_RESERVED_14, "GOEP_RESERVED_14")
TRC_MSG(GOEP_RESERVED_15, "GOEP_RESERVED_15")
TRC_MSG(GOEP_RESERVED_16, "GOEP_RESERVED_16")
TRC_MSG(GOEP_RESERVED_17, "GOEP_RESERVED_17")
TRC_MSG(GOEP_RESERVED_18, "GOEP_RESERVED_18")
TRC_MSG(GOEP_RESERVED_19, "GOEP_RESERVED_19")
TRC_MSG(GOEP_RESERVED_20, "GOEP_RESERVED_20")
TRC_MSG(L2CAP_CHANNEL_DUMP_INFO, "%d: localCid:%02x, remoteCid:%02x, channel state:%02x")
TRC_MSG(L2CAP_REGULAR_MOVE_AMP_PARAM, "a,b,c:%d,%d,%d,%d")
TRC_MSG(L2CAP_REGULAR_MOVE_AMP_TIMER, "L2Cap_StartRegularMoveAMPChannelTimer")
TRC_MSG(L2CAP_RESERVED_4, "L2CAP_RESERVED_4")
TRC_MSG(L2CAP_RESERVED_5, "L2CAP_RESERVED_5")
TRC_MSG(L2CAP_RESERVED_6, "L2CAP_RESERVED_6")
TRC_MSG(L2CAP_RESERVED_7, "L2CAP_RESERVED_7")
TRC_MSG(L2CAP_RESERVED_8, "L2CAP_RESERVED_8")
TRC_MSG(L2CAP_RESERVED_9, "L2CAP_RESERVED_9")
TRC_MSG(L2CAP_RESERVED_10, "L2CAP_RESERVED_10")
TRC_MSG(L2CAP_RESERVED_11, "L2CAP_RESERVED_11")
TRC_MSG(L2CAP_RESERVED_12, "L2CAP_RESERVED_12")
TRC_MSG(L2CAP_RESERVED_13, "L2CAP_RESERVED_13")
TRC_MSG(L2CAP_RESERVED_14, "L2CAP_RESERVED_14")
TRC_MSG(L2CAP_RESERVED_15, "L2CAP_RESERVED_15")
TRC_MSG(L2CAP_RESERVED_16, "L2CAP_RESERVED_16")
TRC_MSG(L2CAP_RESERVED_17, "L2CAP_RESERVED_17")
TRC_MSG(L2CAP_RESERVED_18, "L2CAP_RESERVED_18")
TRC_MSG(L2CAP_RESERVED_19, "L2CAP_RESERVED_19")
TRC_MSG(L2CAP_RESERVED_20, "L2CAP_RESERVED_20")
TRC_MSG(DDB_LINKKEY_RECORD, "linkkey:[%02x%02x%02x%02x%02x%02x]%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x")

TRC_MSG(BTLOG_ME_HCI_COMMAND, "HCI command : %MHciCommandType")
TRC_MSG(BTLOG_HCI_COMMAND_STATUS, "HCI command status event : status=%02x, cmd pkt=%02x, cmd=%MHciCommandType")

TRC_MSG(BT_SENDPALMESSAGE_FAILED_DUE_TO_PTR_IS_NULL, "BT_SendPalMessage failed due to ptr is NULL")
TRC_MSG(JSR82_ADP_DEINIT, "jsr82_adp_deinit")
TRC_MSG(BTCOREGETSYSTEMTICK3_RESET_10_RESET, "BTCoreGetSystemTick3_Reset 10 reset")
TRC_MSG(DAYLONG_D, "daylong :%d")
TRC_MSG(DAYLONG_AVGD, "daylong avg:%d")
TRC_MSG(BTADPCORECTXFWDUMP__U, "BTAdpCoreCtx.fwdump == %u")
TRC_MSG(BTCORESETNVRMBDADDR_P_NVRM_ADDR_EXISTU, "BTCoreSetNVRMBDAddr (%p), nvrm_addr_exist=%u")
TRC_MSG(NO_NVRM_ADDRESS_EXIST_ENABLE__DISABLE_DRIVER_TO_MAKE_ADDR, "No nvrm address exist. enable / disable driver to make address wrote to NVRM")
TRC_MSG(MTK_BT_OP_RETURN_STATUS_U_ISDEFAULT_ADDRU, "mtk_bt_op return status %u, isdefault addr=%u")
TRC_MSG(MTK_BT_ENABLE_FAILED, "mtk_bt_enable failed")
TRC_MSG(ROBUILDTYPE_NOT_FOUND, "ro.build.type not found")
TRC_MSG(BTCOREISENGLOAD__TYPE__D, "BTCoreIsEngLoad : type == %d")
TRC_MSG(BTCOREGETFWDUMP__U, "BTCoreGetFWDump : %u")
TRC_MSG(BTCOREFWDUMP_FAILED_DUE_TO_COMMPORT__0, "BTCoreFWDump failed due to commPort < 0")
TRC_MSG(BTCOREFWDUMP__STATUSU, "BTCoreFWDump : status=%u")
TRC_MSG(A2DP_SET_SCO_STATEU, "a2dp_set_sco_state(%u)")
TRC_MSG(MSG_ID_PAL_BT_READ_LOCAL_AMP_ASSOC_COMPLETE_EVENT_S, "MSG_ID_PAL_BT_READ_LOCAL_AMP_ASSOC_COMPLETE_EVENT")
TRC_MSG(MSG_ID_PAL_BT_CHNAGE_AMP_STATUS_EVENTD_D, "MSG_ID_PAL_BT_CHNAGE_AMP_STATUS_EVENT:%d, %d")
TRC_MSG(MSG_ID_PAL_BT_DISCONNECT_PHYSICAL_LINK_STATUS_EVENT_S, "MSG_ID_PAL_BT_DISCONNECT_PHYSICAL_LINK_STATUS_EVENT")
TRC_MSG(MSG_ID_PAL_BT_DISCONNECT_PHYSICAL_LINK_COMPLETE_EVENT_S, "MSG_ID_PAL_BT_DISCONNECT_PHYSICAL_LINK_COMPLETE_EVENT")
TRC_MSG(PAL_LOGICAL_COMPLETE_EVENTD, "pal logical complete event:%d")
TRC_MSG(MSG_ID_PAL_BT_DISCONNECT_LOGICAL_LINK_COMPLETE_EVENT_S, "MSG_ID_PAL_BT_DISCONNECT_LOGICAL_LINK_COMPLETE_EVENT")
TRC_MSG(MSG_ID_PAL_BT_DISCONNECT_LOGICAL_LINK_STATUS_EVENT_S, "MSG_ID_PAL_BT_DISCONNECT_LOGICAL_LINK_STATUS_EVENT")
TRC_MSG(UNKNOWN_MESSAGE_IDD, "Unknown message id:%d")
TRC_MSG(AVRCP_CHANGE_UINPUT_MODE, "[AVRCP] change uinput mode")
TRC_MSG(AVRCP_SDP_QUERY_IND_STATUSD_TG0XX_TGFEATURE0XX, "[AVRCP] sdp query ind status:%d tg:0x%x tgfeature:0x%x")
TRC_MSG(AVRCP_SDP_QUERY_IND_STATUSD_CT0XX_CTFEATURE0XX, "[AVRCP] sdp query ind status:%d ct:0x%x ctfeature:0x%x")
TRC_MSG(AVRCP_A2DP_STATED, "[AVRCP] a2dp state:%d")
TRC_MSG(AVRCPWRN_AVRCP_RECEIVE_TOO_MANY_DATA_THROW_IT, "[AVRCP][WRN] AVRCP receive too many data. Throw it!")
TRC_MSG(AVRCPWRN_AVRCP_IGNORE_PAUSERELEASE_KEY_, "[AVRCP][WRN] AVRCP ignore pause-release key ")
TRC_MSG(AVRCPWRN_AVRCP_IGNORE_PAUSEPRESSED_KEY_IN_PAUSE_STREAM, "[AVRCP][WRN] AVRCP ignore pause-pressed key in pause streaming")
TRC_MSG(AVRCP_AUTO_DO_SDP_QUERY_TO_REMOTE_AVRCP_SDP, "[AVRCP] auto do sdp query to remote avrcp sdp")
TRC_MSG(WARNING_IGNORE_THE_EVENTD, "warning ignore the event:%d")
TRC_MSG(BT_AVRCP_ACTIVATE_REQ_STRUCTSIZE_ISD, "bt_avrcp_activate_req_structsize is:%d")
TRC_MSG(AVRCP_FORWARD_CMD_, "[AVRCP] forward cmd ")
TRC_MSG(CHN_APP_CALLBACK_UNSUPPORTED_EVENT, "chn_app_callback: Unsupported event.")
TRC_MSG(TEST_L2CAP_LOOPTEST, "[TEST] l2cap looptest")
TRC_MSG(FWDUMP_SET_TO__X, "fwdump set to : %X")
TRC_MSG(FTP_JACOB_FTP_HANDLE_MESSAGE_D, "[FTP Jacob] ftp_handle_message(): %d")
TRC_MSG(DISPLAYNUMERICD, "displayNumeric:%d")
TRC_MSG(BTBMADPSSPNUMERICIND__WRONG_SSP_TYPEU, "BTBMAdpSSPNumericInd : wrong ssp_type=%u")
TRC_MSG(BTBMADPATTRIBUTESEARCHRESULT_SEND_MSG_ID_BT_BM_SEARCH_AT, "BTBMAdpAttributeSearchResult(): send MSG_ID_BT_BM_SEARCH_ATTRIBUTE_RESULT_IND")
TRC_MSG(BTADPHCISNOOPCFG_ENABLE_D, "BTAdpHciSnoopCfg(): enable %d\n")
TRC_MSG(GATTSADPCALLBACK__HANDLEP_EVENTU, "gattsAdpCallback : handle=%p, event=%u")
TRC_MSG(HDP_PRINT_CHANNEL, "hdp_print_channel")
TRC_MSG(INDEX_D, "index :%d")
TRC_MSG(STATE_D, "state :%d")
TRC_MSG(BDARR_X_X_X, "BDARR: %x %x %x")
TRC_MSG(L2CAP_ID_D, "l2cap id :%d")
TRC_MSG(MDEPID_D, "mdepId :%d")
TRC_MSG(MDLID_D, "mdlId :%d")
TRC_MSG(HDPADPFAIL_TO_GET_L2CAP_CHANNEL_ID, "[HDP][ADP]fail to get l2cap channel id")
TRC_MSG(FAIL_TO_REGISTER_INSTANCE, "fail to register instance")
TRC_MSG(HDPDEREGISTER_INSTANCE_D, "[HDP]deregister instance: %d")
TRC_MSG(HDPFAIL_TO_DEREGISTER_INSTANCE_D, "[HDP]fail to deregister instance: %d")
TRC_MSG(HDPADPERR_NO_INSTANCE_IS_FOUND, "[HDP][ADP]Err No instance is found")
TRC_MSG(HDPADPERR_NO_AVAILABLE_CHANNEL_IS_FOUND, "[HDP][ADP]Err No available channel is found")
TRC_MSG(HDPADP_HDP_ADP_CONNECT_RSP, "[HDP][ADP] hdp_adp_connect_rsp")
TRC_MSG(HDPNO_CHANNEL_FOR_THIS_CONNECTION_RESPONSE, "[HDP]no channel for this connection response")
TRC_MSG(HDPADP_HDP_ADP_SEND_DATA_REQ, "[HDP][ADP] hdp_adp_send_data_req")
TRC_MSG(HDPADPFAIL_TO_DISCONNECT_WITH_REMOTE_DEVICE, "[HDP][ADP]fail to disconnect with remote device")
TRC_MSG(HDPADP_HDP_ADP_REMOVE_CONNECTION_TYPED_DATA_CHN_IN, "[HDP][ADP] hdp_adp_remove_connection, type[%d], data_chn_index[%d]")
TRC_MSG(HDPADP_INVALID_DATA_CHANNEL_TYPE, "[HDP][ADP] invalid data channel type")
TRC_MSG(HDPADP_THERE_IS_NO_MATCHED_CHANNEL, "[HDP][ADP] there is no matched channel")
TRC_MSG(HDPADP_MATCHED_CHANNEL_IS_NOT_CONNECTED_STATE_IS_D, "[HDP][ADP] matched channel is not connected, state is %d")
TRC_MSG(HDPADP_MATCHED_CHANNEL_L2CAP_ID_IS_D, "[HDP][ADP] matched channel l2cap id is %d")
TRC_MSG(HDPADP_INVALID_CONN_TYPE_D, "[HDP][ADP] invalid conn type %d")
TRC_MSG(HDPADP_HDP_ADP_REOPEN_CONNECTION_TYPE__D_VALUE_D, "[HDP][ADP] hdp_adp_reopen_connection: type = %d, value= %d")
TRC_MSG(HDPADP_INVALID_REOPEN_TYPE, "[HDP][ADP] invalid reopen type")
TRC_MSG(HDPADP_MATCHED_CHANNEL_HAS_BEEN_CONNECTED_D, "[HDP][ADP] matched channel has been connected, %d")
TRC_MSG(HDP_HDP_ADP_SEND_DATA_CHANNEL_WATERMARK_IS_D, "[HDP] hdp_adp_send_data: channel watermark is %d")
TRC_MSG(HDP_FAIL_TO_FIND_CHANNEL, "[HDP] fail to find channel")
TRC_MSG(HDP_HDP_ADP_GET_CHANNEL_ID_ADDR_IS_0XX__0XX0XX_MDL, "[HDP] hdp_adp_get_channel_id: addr is 0x%x : 0x%x:0x%x, mdl id is %d")
TRC_MSG(HDP_HDP_ADP_ECHO_ADDR_IS_0XX__0XX0XX_ROLE_IS_D, "[HDP] hdp_adp_echo: addr is 0x%x : 0x%x:0x%x, role is %d")
TRC_MSG(HDPADPHDP_ADP_CONNECT_CNF_DEVICE_ADDR__XXXXX, "[HDP][ADP]hdp_adp_connect_cnf: device addr = %x:%x:%x:%x:%x:%x, mdepId is %d, mdlId is %d")
TRC_MSG(HDPADP_REMODE_DEVICE_X_X_X, "[HDP][ADP] remode device: %x %x %x")
TRC_MSG(HDPADPNO_CONNECTING_CHANNEL_IS_FOUND, "[HDP][ADP]no connecting channel is found")
TRC_MSG(HDPADPHDP_ADP_DISCONNECT_CNF_DEVICE_ADDR__XXXX, "[HDP][ADP]hdp_adp_disconnect_cnf: device addr = %x:%x:%x:%x:%x:%x, mdepId is %d, mdlId is %d")
TRC_MSG(NO_CONNECTING_CHANNEL_IS_FOUND, "no connecting channel is found")
TRC_MSG(HDP_FAIL_TO_DISCONNECT, "[HDP] fail to disconnect")
TRC_MSG(HDPADPHDP_ADP_CHANNEL_OPENED_IND_DEVICE_ADDR__XXX, "[HDP][ADP]hdp_adp_channel_opened_ind: device addr = %x%x%x%x%x%x, mdepId is %d, mdlId is %d, l2cap id is %d")
TRC_MSG(NO_INSTANCE_IS_FOUND, "no instance is found")
TRC_MSG(HDPERR_TO_OPEN_HDP_CHANNEL, "[HDP]Err to open hdp channel")
TRC_MSG(HDPADP_NO_RELATED_CHANNEL_IS_FOUND_SO_ADD_A_NEW_CHANNE, "[HDP][ADP] No related channel is found, so add a new channel to list")
TRC_MSG(NO_CHANNEL_RESOURCE_IS_FOUND, "no channel resource is found")
TRC_MSG(HDPADPTHE_MDL_CHANNEL_IS_THE_FIRST_CONNECTION_FOR_THE_D, "[HDP][ADP]the mdl channel is the first connection for the device")
TRC_MSG(HDP_ERR_THE_CHANNEL_IS_BEING_MAPPED_TO_TWO_INTANCES, "[HDP] Err: the channel is being mapped to two intances.")
TRC_MSG(HDPADPHDP_ADP_CHANNEL_CLOSED_IND_DEVICE_ADDR__XXX, "[HDP][ADP]hdp_adp_channel_closed_ind: device addr = %x%x%x%x%x%x, mdepId is %d, mdlId is %d, l2cap id is %d")
TRC_MSG(NO_CHANNEL_IS_FOUND, "no channel is found")
TRC_MSG(HDP_CLEAR_CHANNEL_CACHE, "[HDP] clear channel cache")
TRC_MSG(HDPADPNO_INSTANCE_IS_FOUND, "[HDP][ADP]no instance is found")
TRC_MSG(HDP_ADP_DATA_IND_L2CAP_IDD, "hdp_adp_data_ind: l2cap id->%d")
TRC_MSG(INVALID_DATA_IS_RECEIVED, "invalid data is received")
TRC_MSG(HDPADPHDP_ADP_CALLBACK_EVENT_D_STATUS_D, "[HDP][ADP]hdp_adp_Callback: event-> %d, status-> %d")
TRC_MSG(HDPADPINVALID_EVENT_D, "[HDP][ADP]invalid event: %d")
TRC_MSG(HDPHDP_SESSION_DETACHED_ID8X, "[HDP]hdp_session_detached: id[%8x]")
TRC_MSG(HDPNO_CHANNEL_MATCH_THIS_ID, "[HDP]no channel match this id")
TRC_MSG(HDPFAIL_TO_ALLOCATE_MEMORY, "[HDP]fail to allocate memory")
TRC_MSG(HDPHDP_SESSION_UPPER_DATA_INCOMING_SESSION_ID8X, "[HDP]hdp_session_upper_data_incoming: session id[%8x]")
TRC_MSG(HDPNO_SESSION_IS_FOUND, "[HDP]no session is found")
TRC_MSG(HFGDEACTIVATEOTHERCONTEXT__BHEADSETU_CONTEXTP, "hfgDeactivateOtherContext : bHeadset=%u, context=%p")
TRC_MSG(SH_REMOVE_AND_FREE_HFGADPCHANNEL__P, "[SH] remove and free HfgAdpChannel : %p")
TRC_MSG(IOT_REMDEVXXXXXX, "[IOT] remDev=%X%X%X%X%X%X")
TRC_MSG(HFGA_APP_CALLBACK_UNSUPPORTED_EVENT, "hfga_app_callback: Unsupported event.")
TRC_MSG(HTP_ADP_CALLBACK_EVENT_0XX_, "[HTP ADP] callback event: 0x%x ")
TRC_MSG(JSR82THE_CONTEXT_HAS_BEEN_INITIALIZED, "[JSR82]the context has been initialized")
TRC_MSG(JSR82ADPBTADP_JSR82_CONNECT_REQ_SESSIONID8X, "[JSR82][ADP]btadp_jsr82_connect_req: sessionid[%8x]")
TRC_MSG(JSR82ADPIDETIFY_CONFLICTS_WITH_EXISTING_CONTEXT_D, "[JSR82][ADP]idetify conflicts with existing context: %d")
TRC_MSG(JSR82_NO_AVAILABLE_SESSION_CONTEXT, "[JSR82] no available session context")
TRC_MSG(JSR82FAIL_TO_FIND_SERVER_SESSION_CONTEXT, "[JSR82]fail to find server session context")
TRC_MSG(JSR82ADPBTADP_JSR82_DISCONNECT_REQ_WITH_INVALID_PARAMET, "[JSR82][ADP]btadp_jsr82_disconnect_req with invalid parameters")
TRC_MSG(JSR82ADPBTADP_JSR82_ENABLE_SERVICE_REQ_SESSIONID8X, "[JSR82][ADP]btadp_jsr82_enable_service_req: sessionid[%8x]")
TRC_MSG(JSR82_BT_JSR82_SESSIONAPTXREADYIND_NE_SESSION_CONTEXT_FO, "[JSR82] bt_jsr82_SessionApTxReadyInd: ne session context for index[%d]")
TRC_MSG(JSR82_BTADP_JSR82_SEND_DATA_REQ_NO_SESSION_CONTEXT_FOR_I, "[JSR82] btadp_jsr82_send_data_req: no session context for index[%d]")
TRC_MSG(JSR82_BTADP_JSR82_RECEIVE_DATA_IND_NE_SESSION_CONTEXT_FO, "[JSR82] btadp_jsr82_receive_data_ind: ne session context for index[%d]")
TRC_MSG(JSR82_ERROR_NO_SESSION_CONTEXT_FOR_IDENTIFYD, "[JSR82] error: no session context for identify[%d]")
TRC_MSG(JSR82_WARNINGTHE_CHANNEL_HAS_BEEN_CONNECTED, "[JSR82] warning:the channel has been connected")
TRC_MSG(JSR82_CAN_NOT_FIND_SESSION_CONTEXT_FOR_INDEX_D, "[JSR82] can not find session context for index %d")
TRC_MSG(JSR82_BT_JSR82_SESSIONAPRXIND_NE_SESSION_CONTEXT_FOR_IND, "[JSR82] bt_jsr82_SessionApRxInd: ne session context for index[%d]")
TRC_MSG(JSR82BT_JSR82_SESSIONPUTBYTESCNF, "[JSR82]bt_jsr82_SessionPutBytesCNF")
TRC_MSG(JSR82JSR82_SESSION_SENDDATA, "[JSR82]jsr82_session_sendData")
TRC_MSG(JSR82_BT_JSR82_DATAAVAILABLEIND_NE_SESSION_CONTEXT_FOR_I, "[JSR82] bt_jsr82_DataAvailableInd: ne session context for index[%d]")
TRC_MSG(JSR82INVALID_EVENT_D, "[jsr82]invalid event: %d")
TRC_MSG(JSR82_TASK_LIST_IS_FULL, "[JSR82] task list is full")
TRC_MSG(JSR82ADPUNEXPECTED_EVENT_D, "[JSR82][ADP]unexpected event %d")
TRC_MSG(JSR82SEND_DATA_IMCOMPLETELY_TOTALD_ACTUALD, "[JSR82]send data imcompletely total[%d], actual[%d]")
TRC_MSG(JSR82RECEIVE_DATA_WITH_WRONG_SIZED, "[JSR82]receive data with wrong size[%d]")
TRC_MSG(JSR82BTADP_JSR82_SESSION_SEND, "[JSR82]btadp_jsr82_session_send")
TRC_MSG(JSR82SR_E_INVALID_PARAM, "[JSR82]SR_E_INVALID_PARAM")
TRC_MSG(JSR82FAIL_TO_ADD_PENDING_TASK, "[JSR82]fail to add pending task")
TRC_MSG(JSR82NO_FREE_SPACE_IN_TX_BUFFER_D, "[JSR82]no free space in TX buffer: %d")
TRC_MSG(JSR82READ_FAIL_D, "[JSR82]read fail %d")
TRC_MSG(JSR82WARNINGONLY_PARTIAL_DATA_IS_SENT_TO_LOWER_LAYER, "[JSR82][warning]only partial data is sent to lower layer")
TRC_MSG(JSR82BTADP_JSR82_SESSION_RECEIVE, "[JSR82]btadp_jsr82_session_receive")
TRC_MSG(JSR82_BTADP_JSR82_SESSION_DEINIT, "[JSR82] btadp_jsr82_session_deinit")
TRC_MSG(JSR82BTADP_JSR82_CHANNEL_CONNECTED_ID4X_CONN_IDD, "[JSR82]btadp_jsr82_channel_connected :id[%4x], conn_id[%d], identify[%d]")
TRC_MSG(JSR82_SEND_INCOMPLETE_D_ID8X, "[JSR82] send incomplete: %d, id[%8x]")
TRC_MSG(JSR82_SEND_INCOMPLETE_ACTUALD_REQUIREDD, "[JSR82] send incomplete actual(%d), required(%d)")
TRC_MSG(JSR82BTADP_JSR82_SESSION_DISCONNECTED_ID4X_CONN_ID, "[JSR82]btadp_jsr82_session_disconnected :id[%4x], conn_id[%d], identify[%d]")
TRC_MSG(JSRNO_MATCHING_FOR_THIS_SESSIONINDEXD, "[JSR]no matching for this session:index[%d]")
TRC_MSG(JSR82BT_SESSION_ATTACHED_ID8X, "[JSR82]bt_session_attached: id[%8x]")
TRC_MSG(JSR82_NO_RESOURCE, "[JSR82] No resource")
TRC_MSG(JSR82BT_SESSION_DETACHED_ID8X, "[JSR82]bt_session_detached: id[%8x]")
TRC_MSG(JSR82NO_SESSION_CONTENXT_IS_FOUND, "[JSR82]no session contenxt is found")
TRC_MSG(JSR82CHANNEL_HAS_ALREADY_BEEN_BEING_DISCONNECTING, "[JSR82]channel has already been being disconnecting")
TRC_MSG(JSR82BT_SESSION_UPPER_DATA_INCOMING_SESSION_ID8X, "[JSR82]bt_session_upper_data_incoming: session id[%8x]")
TRC_MSG(JSR82NO_SESSION_IS_FOUND, "[JSR82]no session is found")
TRC_MSG(JSR82BT_SESSION_UPPER_BUFFER_WRITABLE_ID8X, "[JSR82]bt_session_upper_buffer_writable: id[%8x]")
TRC_MSG(MAP_ADP_INIT, "map_adp_init")
TRC_MSG(PANPAN_ADP_INIT, "[PAN]pan adp init")
TRC_MSG(PANPAN_RECEIVED_A_IN_USED_CONNECTION_REQUESTIGNORE_IT, "[PAN]Pan received a in used connection request.Ignore it.")
TRC_MSG(PANBEFORE_CONNECTION_SETUP_PAN_HANDLE_CONTROL_IND_TYPE_, "[PAN]Before connection setup pan handle control ind type: %d status: %x")
TRC_MSG(PANPAN_HANDLE_CONTROL_IND_TYPE_D_STATUS_X_ACTIVE_D, "[PAN]pan handle control ind type: %d status: %x active: %d")
TRC_MSG(PANPAN_DISCONNECTED_BTADDR_X_X_X, "[PAN]pan disconnected btaddr: %x %x %x")
TRC_MSG(PANPAN_DISCONNECTED_CNTX_X, "[PAN]pan disconnected cntx: %x")
TRC_MSG(PANPAN_HANDLE_DATA_COMPLETE_X_D, "[PAN]pan handle data complete: %x %d")
TRC_MSG(PANPAN_CONNECT_REQUEST_SERVICE_D, "[PAN]pan connect request. service: %d")
TRC_MSG(PANPAN_RECEIVE_IPV6_PACKET_IGNORE, "[PAN]pan receive ipv6 packet ignore")
TRC_MSG(PANPAN_DSTMAC_X_X_X_X_X_X, "[PAN]pan dstmac: %x %x %x %x %x %x")
TRC_MSG(PANPAN_SRCMAC_X_X_X_X_X_X, "[PAN]pan srcmac: %x %x %x %x %x %x")
TRC_MSG(PANPAN_PENDING_LIST_IS_EMPTY, "[PAN]pan pending list is empty.")
TRC_MSG(PANPAN_SEND_PENDING_PACKET_X_STATUS_D, "[PAN]pan send pending packet: %x status: %d")
TRC_MSG(PANPAN_SEND_PENDING_PACKET_X_RETRANSMISSION_COUNT_D, "[PAN]pan send pending packet: %x retransmission count: %d")
TRC_MSG(PANPAN_PTS_SEND_PACKET_TYPE_X, "[PAN]pan pts send packet type: %x")
TRC_MSG(PANPAN_INT_ADP_HANDLE_MESSAGE, "[PAN]pan int adp handle message")
TRC_MSG(PANPAN_INT_ADP_HANDLE_MESSAGE_PTS_SEND_PACKET, "[PAN]pan int adp handle message pts send packet")
TRC_MSG(PANPAN_SEND_PENDING_PKT_FIRST_ADD_PKTX_TO_PENDING_LIST, "[PAN]pan send pending pkt first. Add pkt:%x to pending list")
TRC_MSG(PANPAN_SEND_PACKET_X_STATUS_D, "[PAN]pan send packet: %x status: %d")
TRC_MSG(PANPAN_IP_WRITE_PACKET_LEN_D, "[PAN]pan ip write packet len: %d")
TRC_MSG(PANPAN_IP_READ_PACKET_LEN_D, "[PAN]pan ip read packet len: %d")
TRC_MSG(PANPAN_IP_READ_PACKET_DATA_X_X_X, "[PAN]pan ip read packet data: %x %x %x")
TRC_MSG(PBAP_SET_PATH_IND, "[PBAP] Set path ind")
TRC_MSG(PBAP_LIST_FOLDER, "[PBAP] list folder")
TRC_MSG(PBAP_READ_FOLDER, "[PBAP] read folder")
TRC_MSG(PBAP_READ_ENTRY, "[PBAP] read entry")
TRC_MSG(PBAP_INIT_BUFFER_SEND_EMPTY_DATA_FIRST, "[PBAP] init buffer send empty data first")
TRC_MSG(PBAPPBAP_SEND_DATA_SIZE_D, "[PBAP]pbap send data size: %d")
TRC_MSG(PBAPPBAP_UCS2_SWAPCPY_ENTER, "[PBAP]pbap_ucs2_swapcpy enter")
TRC_MSG(PBAPPBAP_UCS2_SWAPCPY_RETURN_D, "[PBAP]pbap_ucs2_swapcpy return %d")
TRC_MSG(PRXWRN_HAS_BEEN_REGISTER, "[PRX][WRN] has been register")
TRC_MSG(PRXWRN_PRXR_DISCONNECT_STATUS_D, "[PRX][WRN] PRXR_Disconnect status %d")
TRC_MSG(PRXERR_PRXR_DEREGISTER_STATUS_D, "[PRX][ERR] PRXR_Deregister status %d")
TRC_MSG(PRXWRN_BT_PRXR_AUTHORIZE_RSP_STRUCT_IGNORE_D, "[PRX][WRN] bt_prxr_authorize_rsp_struct ignore %d")
TRC_MSG(PRXERR_PRXR_ACCEPTINCOMING_STATUS_D, "[PRX][ERR] PRXR_AcceptIncoming status %d")
TRC_MSG(PRXINFO_PRXR_DISCONNECT_REQ_HNDL_APP_0XX, "[PRX][INFO] prxr_disconnect_req_hndl app 0x%x")
TRC_MSG(PRXWRN_PRXR_ISDISCONNECTING_IGNORE, "[PRX][WRN] PRXR_IsDisconnecting ignore")
TRC_MSG(PRXINFO_ADPPRXRCALLBACK_EVENT_D_APDATA_0XX_ID_D, "[PRX][INFO] adpprxrcallback event %d apdata 0x%x id %d")
TRC_MSG(PRXINFO_PRXRE_GETTXPOWER, "[PRX][INFO] PRXRE_GETTXPOWER")
TRC_MSG(PRXINFO_PRXRE_SETLINKLOSS_NEW_LEVEL_D, "[PRX][INFO] PRXRE_SETLINKLOSS new level %d")
TRC_MSG(PRXWRN_PRXRE_GETRSSI_NOT_IMPLEMENT_YET, "[PRX][WRN] PRXRE_GETRSSI not implement yet")
TRC_MSG(PRXWRN_ADPPRXRCALLBACK_UNKOWN_EVENT_D, "[PRX][WRN] adpprxrcallback unkown event %d")
TRC_MSG(PRXMMI_RESETPRXMFREEINDEX, "[PRX]mmi resetPRXMfreeIndex")
TRC_MSG(PRXMMI_GETPRXMFREEINDEX_D_RETURN_D, "[PRX]mmi getPRXMfreeIndex %d return %d")
TRC_MSG(PRXERRWRNMMI_GETPRXMINTERNALINDEX_GETFREEINDEX_TOO_LA, "[PRX][ERR][WRN]mmi getPRXMInternalIndex_getfreeIndex too large %d")
TRC_MSG(PRXMMI_FREEPRXMINTERNALINDEX_ID_INTERNAL_D, "[PRX]mmi freePRXMInternalIndex i:%d Internal %d")
TRC_MSG(PRXERRWRNMMI_FREEPRXMINTERNALINDEX_FAIL_, "[PRX][ERR][WRN]mmi freePRXMInternalIndex fail !")
TRC_MSG(PRXMMI_FIND_MMI_ATD_INTERNALD_MMID, "[PRX]mmi find MMI at:%d internal:%d MMI:%d")
TRC_MSG(PRXWRNMMI_CANNOT_FIND_MMI_INDEXD, "[PRX][WRN]mmi cannot find MMI index:%d")
TRC_MSG(PRXMMI_GETPRXMINTERNALINDEX_D_RETURN_D, "[PRX]mmi getPRXMInternalIndex %d return %d")
TRC_MSG(PRXERRWRNMMI_GETPRXMINTERNALINDEX_TOO_LARGE_MMIINDEX, "[PRX][ERR][WRN]mmi getPRXMInternalIndex too large mmiIndex:%d")
TRC_MSG(PRXWRN_SEND_PRXM_GET_CAPABILITY_CNF_RETURN_SUPPORT_, "[PRX][WRN] send_prxm_get_capability_cnf return support !")
TRC_MSG(PRXERR_PRXM_CONNECT_REQ_HNDL_STATE_D, "[PRX][ERR] prxm_connect_req_hndl state %d")
TRC_MSG(PRXINFO_PRXM_CONNECT_REQ_HNDL_IDX_D_AP_0XX, "[PRX][INFO] prxm_connect_req_hndl idx %d ap 0x%x")
TRC_MSG(PRXINFO_PRXM_DISCONNECT_REQ_HNDL_IDX_D_AP_0XX, "[PRX][INFO] prxm_disconnect_req_hndl idx %d ap 0x%x")
TRC_MSG(PRXWRN_PRXM_ISDISCONNECTING_IGNORE, "[PRX][WRN] PRXM_IsDisconnecting ignore")
TRC_MSG(PRXWRN_PRXM_DISCONNECT_STATUS_D, "[PRX][WRN] PRXM_Disconnect status %d")
TRC_MSG(PRXINFO_PRXM_GET_CAPABILITY_REQ_HNDL_AP_0XX, "[PRX][INFO] prxm_get_capability_req_hndl ap 0x%x")
TRC_MSG(PRXINFO_PRXM_GET_REMOTE_TXPOWER_HNDL_AP_0XX, "[PRX][INFO] prxm_get_remote_txpower_hndl ap 0x%x")
TRC_MSG(PRXINFO_PRXM_SET_PATHLOSS_REQ_HNDL_AP_0XX, "[PRX][INFO] prxm_set_pathloss_req_hndl ap 0x%x")
TRC_MSG(PRXINFO_PRXM_GET_REMOTE_LINKLOSS_HNDL_AP_0XX, "[PRX][INFO] prxm_get_remote_linkloss_hndl ap 0x%x")
TRC_MSG(PRXINFO_PRXM_SET_LINKLOSS_REQ_HNDL_AP_0XX, "[PRX][INFO] prxm_set_linkloss_req_hndl ap 0x%x")
TRC_MSG(PRXINFO_PRXM_GET_RSSI_REQ_HNDL_AP_0XX, "[PRX][INFO] prxm_get_rssi_req_hndl ap 0x%x")
TRC_MSG(PRXINFO_ADPPRXMCALLBACK_EVENT_0XX_DATA_0XX_AP_0XX, "[PRX][INFO] adpprxmCallback event 0x%x data 0x%x ap 0x%x")
TRC_MSG(PRXWRN_ADPPRXMCALLBACK_UNKOWN_EVENT_D, "[PRX][WRN] adpprxmCallback unkown event %d")
TRC_MSG(PRX_BTMTK_PRX_HANDLE_MESSAGE_ILM_PTRD, "[PRX] btmtk_prx_handle_message ilm_ptr:%d")
TRC_MSG(PRX_PRX_ADP_INIT_D_D, "[PRX] prx_adp_init %d %d")
TRC_MSG(BT_SIMAPBTMTK_ADP_SIMAP_INT_EVENT_CALLBACK_EVENTD, "[BT SIMAP]btmtk_adp_simap_int_event_callback, event=%d")
TRC_MSG(SPP_INTERNAL_ADP_UNSUPPORTED_CASE, "[SPP] Internal ADP: unsupported case.")
TRC_MSG(SPPADPDISCONNECTIND_DSTMODD, "SPPAdpDisconnectInd dstmod=%d")
TRC_MSG(SPP_APP_CALLBACK_DSTMODD, "spp_app_callback dstmod=%d")
TRC_MSG(TIME_INVALID_MSG_ID_D, "[Time] Invalid msg_id: %d")
TRC_MSG(TIME_UNKONWN_CLIENT_EVENT_D, "[Time] Unkonwn client event: %d")
TRC_MSG(TIME_DUPLICATED_CLIENT_REGISTER_REQUEST, "[Time] Duplicated client register request")
TRC_MSG(TIME_TIMEC_INIT_FAILED, "[Time] TIMEC_Init() failed.")
TRC_MSG(TIME_TIMEC_CONNECT_FAILED, "[Time] TIMEC_Connect() failed.")
TRC_MSG(TIME_TIMES_ADP_INIT, "[Time] times_adp_init")
TRC_MSG(TIME_UNKNOWN_SERVER_EVENT_D, "[Time] Unknown server event: %d")
TRC_MSG(TIME_DUPLICATED_REGISTER_REQUEST_INDEX_D, "[Time] Duplicated register request, index: %d")
TRC_MSG(TIME_FAILED_TO_DEREGISTER_SERVER_STATUS_D, "[Time] Failed to deregister server, status: %d")
TRC_MSG(TIME_INVALID_INDEX_FOR_AUTHORIZATION_RESPONSE_D, "[Time] Invalid index for authorization response: %d")
TRC_MSG(TIME_NO_SERVICE_FOR_CONNECT_REQUEST_INDEX_D, "[Time] No service for connect request, index: %d")
TRC_MSG(TIME_INVALID_INDEX_FOR_DISCONNECT_REQUEST_D, "[Time] Invalid index for disconnect request: %d")
TRC_MSG(TIME_NO_SERVICE_FOR_DISCONNECT_REQUEST_INDEX_D, "[Time] No service for disconnect request, index: %d")
TRC_MSG(TIME_INVALID_INDEX_FOR_UPDATING_CTTIME_REQUEST_D, "[Time] Invalid index for updating cttime request: %d")
TRC_MSG(TIME_INVALID_INDEX_FOR_SETTING_LOCAL_TIME_INFO_REQUEST_, "[Time] Invalid index for setting local time info request: %d")
TRC_MSG(TIME_INVALID_INDEX_FOR_SETTING_REF_TIME_INFO_REQUEST_D, "[Time] Invalid index for setting ref time info request: %d")
TRC_MSG(TIME_INVALID_INDEX_FOR_SETTING_DST_REQUEST_D, "[Time] Invalid index for setting dst request: %d")
TRC_MSG(TIME_INVALID_INDEX_FOR_RESPONDING_UPDATE_STATUS_D, "[Time] Invalid index for responding update status: %d")
TRC_MSG(A2DPA2DPSTREAMRECONFIGREQNO_MATCHED_CODEC_SETTINGS, "[A2DP][A2DPStreamReconfigReq]no matched codec settings---")
TRC_MSG(FM_OVER_BT_A2DP_GETPREFERREDPAYLOADSIZE_START, "[FM over BT] A2DP_GetPreferredPayloadSize start")
TRC_MSG(FM_OVER_BT_A2DP_GETPREFERREDPAYLOADSIZE_END, "[FM over BT] A2DP_GetPreferredPayloadSize end")
TRC_MSG(FM_OVER_BT_L2CAP_GETL2CAPREMOTECID_START, "[FM over BT] L2CAP_GetL2CAPRemoteCid start")
TRC_MSG(FM_OVER_BT_L2CAP_GETL2CAPREMOTECID_END, "[FM over BT] L2CAP_GetL2CAPRemoteCid end")
TRC_MSG(FM_OVER_BT_AVDTP_MEDIAGETCHANNELID_START, "[FM over BT] AVDTP_MediaGetChannelId start")
TRC_MSG(FM_OVER_BT_AVDTP_MEDIAGETCHANNELID_END, "[FM over BT] AVDTP_MediaGetChannelId end")
TRC_MSG(FM_OVER_BT_MEWRITEENABLEFMOVERSBC_START, "[FM over BT] MeWriteEnableFMoverSBC start")
TRC_MSG(MEWRITEENABLEFMOVERSBC_END, "MeWriteEnableFMoverSBC end")
TRC_MSG(DLIGHT_CHECK_MATCH_OF_HANDLE02X_02X, "Dlight check match of handle:%02x, %02x")


TRC_MSG(CHECK_PERMISSION_FAILED__U, "check permission failed : %u")
TRC_MSG(RETURN_STATUS_1, "Return status 1")
TRC_MSG(RETURN_STATUS_2, "Return status 2")
TRC_MSG(RETURN_STATUS_3, "Return status 3")
TRC_MSG(RETURN_STATUS_4, "Return status 4")
TRC_MSG(RETURN_STATUSD, "Return status:%d")
TRC_MSG(AVRCP_AVRCP_V14, "[AVRCP] AVRCP_V14")
TRC_MSG(AVRCP_AVRCP_V13, "[AVRCP] AVRCP_V13")
TRC_MSG(AVRCP_AVCTPCB_AVCTP_EVENTD, "[AVRCP] AvrcpAvctpCallback EVENT:%d")
TRC_MSG(AVRCP_AVCTPCB_STATED_RETRYCOUNTD_RETRYFLAGD, "[AVRCP] avctpCB state:%d retryCount:%d retryFlag:%d")
TRC_MSG(AVRCP_RETRY_TIMER_SUCCCESS_WAIT_RESPONSE_, "[AVRCP] retry timer succcess! wait response ")
TRC_MSG(AVRCP_REMOVEDATALINK_IN_CALLBACK, "AVRCP: removeDataLink in Callback")
TRC_MSG(AVRCP_REMOTE_0XX_0XX_0XX_0XX, "[AVRCP] Remote 0x%x 0x%x 0x%x 0x%x")
TRC_MSG(AVRCP_REMOTE_NAME_IS_NOT_READY_SKIP_REJECTCHECK_, "[AVRCP] Remote name is not ready. skip reject-check ")
TRC_MSG(AVRCP_REMOTE_IS_PTS_SKIP_REJECTCHECK, "[AVRCP] Remote is PTS. skip reject-check")
TRC_MSG(AVRCP_WARNING_NO_REMOTE_DEV_NAME, "[AVRCP] warning no remote dev_name")
TRC_MSG(AVRCP_REJECT_CONNECT_IND_DUE_TO_A2DP_DISCONNECTED, "AVRCP: reject connect ind due to a2dp disconnected")
TRC_MSG(AVRCP_AVRCP_SAVE_CONNECTED_ADDR_0XX_0XX_0XX_0XX_0XX_0, "AVRCP: avrcp save connected addr 0x%x 0x%x 0x%x 0x%x 0x%x 0x%x")
TRC_MSG(AVRCP_REGISTER_ACTIVEVERSIOND, "AVRCP register activeVersion:%d")
TRC_MSG(AVRCP_CONNECT_TO_LATEST_ADDR_0XX_0XX_0XX_0XX_0XX_0XX, "AVRCP: connect to latest addr 0x%x 0x%x 0x%x 0x%x 0x%x 0x%x")
TRC_MSG(AVRCP_AVRCP_CONNECTRETRY_STATUSD_REMDEV0XX, "[AVRCP] AVRCP_ConnectRetry status:%d remDev:0x%x")
TRC_MSG(AVRCP_SBUNIT_TYPED_IDD, "avrcp: sbunit type:%d id%d")
TRC_MSG(AVRCP_REMOVE_LINK_HANDLER, "[AVRCP] remove link handler")
TRC_MSG(AVRCPCMGRCALLBACK_STATUSD, "AvrcpCmgrCallback status:%d")
TRC_MSG(AVRCP_AVRCP_HANDLEA2DPINFO_INFOD_DATA0XX, "AVRCP: AVRCP_HandleA2DPInfo info:%d data:0x%x")
TRC_MSG(AVRCPADDR_A_02X02X02X02X02X02X, "AVRCP:[addr] a %02x:%02x:%02x:%02x:%02x:%02x")
TRC_MSG(AVRCPADDR_B_02X02X02X02X02X02X, "AVRCP:[addr] b %02x:%02x:%02x:%02x:%02x:%02x")
TRC_MSG(AVRCP_NO_AVRCP_ADDR_IGNORE_COMPARE, "AVRCP: no avrcp addr. ignore compare")
TRC_MSG(AVRCP_DISCONNECT_BECAUSE_A2DP_IS_CONNECTED_WITH_OTHER_DEVI, "AVRCP: disconnect because a2dp is connected with other device")
TRC_MSG(AVRCP_DISCONNECT_BECAUSE_A2DP_IS_LOST, "AVRCP: disconnect because a2dp is lost")
TRC_MSG(AVRCP_FFTIMER_CHECK_FFKEYD_FFPRESSEDD, "avrcp: fftimer check ffKey:%d ffPressed:%d")
TRC_MSG(AVRCP_FFTIMER_EXPIRE_TO_UPPER_LAYER, "avrcp: fftimer expire to upper layer")
TRC_MSG(AVRCP_FFTIMER_FFKEYD_FFPRESSEDD, "avrcp: fftimer ffKey:%d ffPressed:%d")
TRC_MSG(AVRCP_FFTIMER_HANDLEFFCMD, "avrcp: fftimer handleFFCmd")
TRC_MSG(AVRCP_FFTIMER_HANDLEFFCMDRELEASE_, "avrcp: fftimer handleFFCmd-release ")
TRC_MSG(AVRCP_FFTIMER_HANDLEFFCMDPRESS_FFKEY0XX_TRANSIDD_, "avrcp: fftimer handleFFCmd-press ffKey:0x%x transId:%d ")
TRC_MSG(AVRCP_FFTIMER_KEYCODE0XX_, "avrcp: fftimer keyCode:0x%x ")
TRC_MSG(AVRCP_COULDNT_SEND_COMMAND, "AVRCP: Couldn't send command.\n")
TRC_MSG(AVRCP_INVALID_RESPONSE_CODE_D_CHANGING_TO_REJECTED, "AVRCP: Invalid response code %d, changing to REJECTED\n")
TRC_MSG(AVRCP_COULDNT_SEND_RESPONSE, "AVRCP: Couldn't send response.\n")
TRC_MSG(AVRCP_REGISTER_TG_STATUSD, "[AVRCP] register TG status:%d")
TRC_MSG(AVRCP_REGISTER_CT_STATUSD, "[AVRCP] register CT status:%d")
TRC_MSG(AVRCP_DEREGISTERSDP_STATUSD, "AVRCP DeregisterSDP status:%d")
TRC_MSG(AVRCP_SDP_ERROR_STATUSD, "[AVRCP] SDP error status:%d")
TRC_MSG(AVRCP_SDP_CTVERSIOND, "[AVRCP] SDP ctVersion:%d")
TRC_MSG(AVRCP_STATUSD, "[AVRCP] status:%d")
TRC_MSG(AVRCP_VERD_SDPEFATURED, "AVRCP ver:%d sdpefature:%d")
TRC_MSG(AVRCP_AVRCP_ACTIVATE_VERSIOND, "[AVRCP] AVRCP activate version:%d")
TRC_MSG(AVRCP_AVRCP_V14_COMPILED, "[AVRCP] AVRCP V14 compiled")
TRC_MSG(AVRCP_AVRCP_V13_COMPILED, "[AVRCP] AVRCP V13 compiled")
TRC_MSG(AVRCP_AVRCP_V10_COMPILED, "[AVRCP] AVRCP V10 compiled")
TRC_MSG(WRONG_CHNL_NUMD, "wrong chnl_num:%d")
TRC_MSG(AVRCP_RETRYD_FLAGD, "[AVRCP] retry:%d Flag:%d")
TRC_MSG(AVRCP_TRANSIDD, "[AVRCP] transId:%d")
TRC_MSG(AVRCP__AVRCP_RELEASE_KEY0XX, "[AVRCP] _AVRCP release key:0x%x")
TRC_MSG(AVRCP__AVRCP_IGNORE_THE_PASSTHROUGH_RESPONSE, "[AVRCP] _AVRCP ignore the passthrough response")
TRC_MSG(AVRCP__AVRCP_LEND_0XX_0XX_FFKEY0XX, "[AVRCP] _AVRCP len:%d 0x%x 0x%x ffKey:0x%x")
TRC_MSG(WRN_AVRCP_IGNORE_THE_FAIL_TO_SEND_FRAME_IND_RSP, "WRN! AVRCP ignore the fail to send frame_ind_rsp")
TRC_MSG(AVRCP_DISCONNECTBROWSE_STATUSD_, "AVRCP_DisconnectBrowse status:%d ")
TRC_MSG(AVRCP_TOO_MANY_DATA_BUFFER_LEND_NEXTATTRIBD_MAXD, "[AVRCP] too many data buffer_len:%d next-attrib:%d max:%d")
TRC_MSG(AVRCP_CHANGE_COUNTD_TO_ID_BUFFER_LEND, "[AVRCP] change count:%d to i:%d buffer_len:%d")
TRC_MSG(AVRCP_NO_ELEMENT__REGARDING_TO_SPEC_APPEND_A_1LENGTH_E, "[AVRCP] no element ! regarding to spec. append a 1-length empty space song title return ")
TRC_MSG(AVRCP_CHARSET_TO_0X6A, "AVRCP: charset to 0x6a")
TRC_MSG(AVRCP_CHARSET_TO_AUDIO_TYPE, "AVRCP: charset to audio type")
TRC_MSG(AVRCP_SDP_QUERY_REQ_CHNL_NUMD_QUERY_ROLED, "[AVRCP] SDP_Query_Req chnl_num:%d query_role:%d")
TRC_MSG(AVRCP_SDP_QUERY_REQ_MULTI_STATUSD, "[AVRCP] SDP_Query_Req multi status:%d")
TRC_MSG(AVRCP_SDP_QUERY_REQ_WARNING_STATED, "[AVRCP] SDP_Query_Req warning state:%d")
TRC_MSG(AVRCP_SDP_QUERY_REQ_ERROR__NO_CHNL, "[AVRCP] SDP_Query_Req error ! no Chnl")
TRC_MSG(AVRCP_AVRCP_NUM_TX_PACKETSD_AVRCP_MAX_PACKET_LEND, "[AVRCP] AVRCP_NUM_TX_PACKETS:%d AVRCP_MAX_PACKET_LEN:%d")
TRC_MSG(WARNING_UNKNOW_RESPONSE_OPCODE, "warning! unknow response opcode")
TRC_MSG(AVRCPWRN_INVALIDE_EVENT_IDD_REJECT_IT_, "[AVRCP][WRN] Invalide event_id:%d reject it !")
TRC_MSG(AVRCP_AVRCPHANDLECBAVRCPBROWSECMDIND_DISPATCHER_PDU_IDD, "[AVRCP] AvrcpHandleCBAVRCPBrowseCmdInd_Dispatcher pdu_id:%d parm_len:%d")
TRC_MSG(AVRCP_GET_FOLDERITEMS_0D_8D_9D, "[AVRCP] get_folderitems 0:%d 8:%d 9:%d")
TRC_MSG(AVRCP_GET_FOLDERITEMS_OFFSETD_COUNTD, "[AVRCP] get_folderitems offset:(%d) count:(%d)")
TRC_MSG(WARNING__REJECT_THE_INVALID_CMD, "warning ! Reject the invalid cmd")
TRC_MSG(AVRCPUTIL_CMDFRAME0XX_CNTXCMD0XX_CNTXCHNLCMD0X, "[AVRCP][UTIL] cmdFrame:0x%x cntx.cmd:0x%x cntx.chnl.cmd:0x%x")
TRC_MSG(AVRCPUTIL_RSPFRAME0XX_CNTXRSP0XX_CNTXCHNLRSP0X, "[AVRCP][UTIL] rspFrame:0x%x cntx.rsp:0x%x cntx.chnl.rsp:0x%x")
TRC_MSG(WARNING_UNKNOW_REQUEST_, "warning unknow request !")
TRC_MSG(BLEDB_UPDATE_RECORD_IN_FILE_SEEK_OFFSET_D, "[BleDB] Update record in file, seek offset: %d")
TRC_MSG(BLEDB_REMOVE_RECORD_NOT_FOUND, "[BleDB] Remove record, NOT FOUND!")
TRC_MSG(BLEDB_REMOVE_RECORD_DELETE_FILE_DIRECTLY, "[BleDB] Remove record, delete file directly...")
TRC_MSG(BLEDB_POS_CUR_D_POS_END_D, "[BleDB] pos cur: %d, pos end: %d")
TRC_MSG(BLEDB_NEW_RECORD_BONDING_STATUS_0XX, "[BleDB] new record, bonding status: 0x%x")
TRC_MSG(BLEDB_REMOVE_UNBONDED_DEVICE_RECORD_FROM_LIST, "[BleDB] Remove unbonded device record from list")
TRC_MSG(BLEDB_BONDING_CALLBACK_STATUS_0XX, "[BleDB] bonding callback, status: 0x%x")
TRC_MSG(BLEDB_LOADING_RECORD, "[BleDB] Loading record...")
TRC_MSG(BLECTSCTXREGISTERCOUNT_IN_CTSACTIVATESERVICED, "BleCtsCtx(registerCount) in CtsActivateService:%d")
TRC_MSG(BLECTSCTXREGISTERCOUNT_IN_CTSDEACTIVATESERVICED, "BleCtsCtx(registerCount) in CtsDeactivateService:%d")
TRC_MSG(BLEDISCTXREGISTERCOUNT_IN_DISACTIVATESERVICED, "BleDisCtx(registerCount) in DisActivateService:%d")
TRC_MSG(BLEDISCTXREGISTERCOUNT_IN_DISDEACTIVATESERVICED, "BleDisCtx(registerCount) in DisDeactivateService:%d")
TRC_MSG(HTS_READ_TEMPERATURE_DESCRIPTOR_DD, "[HTS] read temperature descriptor: %d,%d")
TRC_MSG(HTS_WRITE_TEMPERATURE_DESCRIPTOR_DD, "[HTS] write temperature descriptor: %d,%d")
TRC_MSG(HTS_READ_IMTERMEDIATE_TEMPERATURE_DESCRIPTOR_DD, "[HTS] read imtermediate temperature descriptor: %d,%d")
TRC_MSG(HTS_WRITE_IMTERMEDIATE_TEMPERATURE_DESCRIPTOR_DD, "[HTS] write imtermediate temperature descriptor: %d,%d")
TRC_MSG(BLEHTSCTXREGISTERCOUNT_IN_HTSACTIVATESERVICED, "BleHtsCtx(registerCount) in HtsActivateService:%d")
TRC_MSG(BLEHTSCTXREGISTERCOUNT_IN_HTSDEACTIVATESERVICED, "BleHtsCtx(registerCount) in HtsDeactivateService:%d")
TRC_MSG(IAS_ALERT_LEVEL_CALLBACK, "[IAS] alert level callback")
TRC_MSG(IAS_ALERT_LEVEL_CALLBACK_TO_PROFILE, "[IAS] alert level callback to profile")
TRC_MSG(BLEIASCTXREGISTERCOUNT_IN_IASACTIVATESERVICED, "BleIasCtx(registerCount) in IasActivateService:%d")
TRC_MSG(BLEIASCTXREGISTERCOUNT_IN_IASDEACTIVATESERVICED, "BleIasCtx(registerCount) in IasDeactivateService:%d")
TRC_MSG(BLELLSCTXREGISTERCOUNT_IN_LLSACTIVATESERVICED, "BleLlsCtx(registerCount) in LlsActivateService:%d")
TRC_MSG(LL2_ACTIVE_DONE, "LL2 active done")
TRC_MSG(BLELLSCTXREGISTERCOUNT_IN_LLSDEACTIVATESERVICED, "BleLlsCtx(registerCount) in LlsDeactivateService:%d")
TRC_MSG(BLENDCSCTXREGISTERCOUNT_IN_NDCSACTIVATESERVICED, "BleNdcsCtx(registerCount) in NdcsActivateService:%d")
TRC_MSG(BLENDCSCTXREGISTERCOUNT_IN_NDCSDEACTIVATESERVICED, "BleNdcsCtx(registerCount) in NdcsDeactivateService:%d")
TRC_MSG(BLERTUSCTXREGISTERCOUNT_IN_RTUSACTIVATESERVICED, "BleRtusCtx(registerCount) in RtusActivateService:%d")
TRC_MSG(BLERTUSCTXREGISTERCOUNT_IN_RTUSDEACTIVATESERVICED, "BleRtusCtx(registerCount) in RtusDeactivateService:%d")
TRC_MSG(BLETPSCTXREGISTERCOUNT_IN_TPSACTIVATESERVICED, "BleTpsCtx(registerCount) in TpsActivateService:%d")
TRC_MSG(BLETPSCTXREGISTERCOUNT_IN_TPSDEACTIVATESERVICED, "BleTpsCtx(registerCount) in TpsDeactivateService:%d")
TRC_MSG(BLE_COMPAREUUID__NULL_UUID_UUID1P_UUID2P, "BLE_CompareUuid : NULL uuid, uuid1=%p, uuid2=%p")
TRC_MSG(BLE_COMPAREUUID__INVALID_UUID_LEN_LEN1U_LEN2U, "BLE_CompareUuid : invalid uuid len, len1=%u, len2=%u")

TRC_MSG(BLE_VERIFYDB, "BLE_VerifyDB")
TRC_MSG(BPPWARNING_PDU_PTR_IS_ALREADY_NULL, "[BPP]Warning: PDU ptr is already NULL.")
TRC_MSG(CHNAPI__CHN_INIT, "[CHN][API] + chn_init")
TRC_MSG(CHNAPI__CHN_REGISTERCHANNEL0XX_CALLBACK0XX, "[CHN][API] + chn_register(Channel=0x%X, Callback=0x%X)")
TRC_MSG(CHN_REGISTER_CHNREGISTERSDPSERVICES_RESULT_FAILED_D, "chn_register: ChnRegisterSdpServices result failed. (%d).")
TRC_MSG(CHN_REGISTER_SEC_REGISTER_RESULT_FAILED_D, "chn_register: SEC_Register result failed. (%d).")
TRC_MSG(CHN_REGISTER_NO_CHANNELS_LEFT_TO_REGISTER, "chn_register: No channels left to register.")
TRC_MSG(CHNAPI__CHN_REGISTER__RETURN_STATUSD, "[CHN][API] - chn_register : return status=%d")
TRC_MSG(CHNAPI__CHN_DEREGISTERCHANNEL0XX, "[CHN][API] + chn_deregister(Channel=0x%X)")
TRC_MSG(CHN_DEREGISTER_CHNFREERFCHANNEL_FAILED_STATUSD, "chn_deregister: ChnFreeRfChannel failed. status=%d.")
TRC_MSG(CHN_DEREGISTER_CHANNEL_IS_NOT_REGISTERED, "chn_deregister: Channel is not registered.")
TRC_MSG(CHNAPI__CHN_DEREGISTER__RETURN_STATUSD, "[CHN][API] - chn_deregister : return status=%d")
TRC_MSG(CHNAPI__CHN_CREATE_SERVICE_LINKCHANNELOXX_ADDR0X, "[CHN][API] + chn_create_service_link(Channel=ox%X, Addr=0x%02X%02X%02X%02X%02X%02X)")
TRC_MSG(CHNAPI__CHN_CREATE_SERVICE_LINK__RETURN_STATUSD, "[CHN][API] - chn_create_service_link : return status=%d")
TRC_MSG(CHNAPI__CHN_DISCONNECT_SERVICE_LINKCHANNEL0XX, "[CHN][API] + chn_disconnect_service_link(Channel=0x%X)")
TRC_MSG(CHNAPI__CHN_DISCONNECT_SERVICE_LINK__RETURN_STATUSD, "[CHN][API] - chn_disconnect_service_link : return status=%d")
TRC_MSG(CHNAPI__CHN_CREATE_AUDIO_LINKCHANNEL0XX, "[CHN][API] + chn_create_audio_link(Channel=0x%X)")
TRC_MSG(CHN_CREATE_AUDIO_LINK_AUDIO_CONNECTION_ALREADY_EXISTS, "chn_create_audio_link: Audio connection already exists.")
TRC_MSG(CHNFLOW_CREATE_AUDIO_CHANNEL__D, "[CHN][FLOW] Create Audio channel : %d")
TRC_MSG(CHN_CREATE_AUDIO_LINK_AUDIO_CREATION_IS_ONGOING, "chn_create_audio_link: Audio creation is ongoing.")
TRC_MSG(CHNFLOW_RETURN_IN_PROGRESS, "[CHN][FLOW] Return in progress")
TRC_MSG(CHN_CREATE_AUDIO_LINK_AUDIO_DISCONNECTION_ONGOING, "chn_create_audio_link: Audio disconnection ongoing.")
TRC_MSG(CHNFLOW_RETURN_FAIL, "[CHN][FLOW] Return Fail")
TRC_MSG(CHN_CREATE_AUDIO_LINK_NO_CONNECTION, "chn_create_audio_link: No connection.")
TRC_MSG(CHNAPI__CHN_CREATE_AUDIO_LINK__RETURN_STATUSD, "[CHN][API] - chn_create_audio_link : return status=%d")
TRC_MSG(CHNAPI__CHN_DISCONNECT_AUDIO_LINKCHANNEL0XX, "[CHN][API] + chn_disconnect_audio_link(Channel=0x%X)")
TRC_MSG(CHN_DISCONNECT_AUDIO_LINK_NO_AUDIO_CONNECTION, "chn_disconnect_audio_link: No audio connection.")
TRC_MSG(CHN_DISCONNECT_AUDIO_LINK_REMOVE_AUDIO_LINK, "chn_disconnect_audio_link: Remove audio link.")
TRC_MSG(CHNFLOW_CLOSE_AUDIO_CHANNEL__D, "[CHN][FLOW] Close Audio channel : %d")
TRC_MSG(CHN_DISCONNECT_AUDIO_LINK_AUDIO_DISCONNECTION_IN_PROGRESS, "chn_disconnect_audio_link: Audio disconnection in progress.")
TRC_MSG(CHN_DISCONNECT_AUDIO_LINK_AUDIO_CONNECTION_IN_PROGRESS_SO, "chn_disconnect_audio_link: Audio connection in progress, so return fail.")
TRC_MSG(CHN_DISCONNECT_AUDIO_LINK_NO_CONNECTION_OR_BUSY, "chn_disconnect_audio_link: No connection or Busy.")
TRC_MSG(CHNAPI__CHN_DISCONNECT_AUDIO_LINK__RETURN_STATUSD, "[CHN][API] - chn_disconnect_audio_link : return status=%d")
TRC_MSG(CHNAPI__CHN_ACCEPT_CONNECTCHANNEL0XX, "[CHN][API] + chn_accept_connect(Channel=0x%X)")
TRC_MSG(CHNFLOW_ACCEPT_RFCOMM_CHANNEL__D, "[CHN][FLOW] Accept RFCOMM channel : %d")
TRC_MSG(CHN_ACCEPT_CONNECT_OPEN_CHANNEL_FAILED_TRY_TO_REJECT_THE_, "chn_accept_connect: Open channel failed. Try to reject the RF channel.")
TRC_MSG(CHNAPI__CHN_ACCEPT_CONNECT__RETURN_STATUSD, "[CHN][API] - chn_accept_connect : return status=%d")
TRC_MSG(CHNAPI__CHN_REJECT_CONNECTCHANNEL0XX, "[CHN][API] + chn_reject_connect(Channel=0x%X)")
TRC_MSG(CHNAPI__CHN_REJECT_CONNECT__RETURN_STATUSD, "[CHN][API] - chn_reject_connect : return status=%d")
TRC_MSG(CHNFLOW_HFREGISTERSDPSERVICES, "[CHN][FLOW] HfRegisterSdpServices")
TRC_MSG(CHNREGISTERSDPSERVICES_CHANNELCHNSDPRECORDNUM__0_D, "ChnRegisterSdpServices: Channel->chnSdpRecord.num <= 0 (%d)")
TRC_MSG(_CHNREGISTERSDPSERVICES_STATUSD, "- ChnRegisterSdpServices: status=%d")
TRC_MSG(CHNFLOW_CHNDEREGISTERSDPSERVICES, "[CHN][FLOW] ChnDeregisterSdpServices")
TRC_MSG(_CHNDEREGISTERSDPSERVICES_STATUSD, "- ChnDeregisterSdpServices: status=%d")
TRC_MSG(_CHNSTARTSERVICEQUERY_MODED, "+ ChnStartServiceQuery: mode=%d")
TRC_MSG(CHNFLOW_START_SDP_QUERY__D, "[CHN][FLOW] Start SDP query : %d")
TRC_MSG(_CHNSTARTSERVICEQUERY_STATUSD, "- ChnStartServiceQuery: status=%d")
TRC_MSG(CHNCHNQUERYCALLBACK_RESULTD_ATTRIBUTE_INDEXXX_A, "[CHN][ChnQueryCallback] result==%d, attribute_index==x%X, attribute==0x%X")
TRC_MSG(CHNEVENT_SDP_CALLBACK__AID_PROTOCOL_DESC_LIST_SERVER_, "[CHN][EVENT] SDP callback : AID_PROTOCOL_DESC_LIST, server channel=%d")
TRC_MSG(CHNEVENT_SDP_CALLBACK__BT_STATUS_CONNECTION_FAILED, "[CHN][EVENT] SDP callback : BT_STATUS_CONNECTION_FAILED")
TRC_MSG(CHNEVENT_SDP_CALLBACK__BT_STATUS_FAILED, "[CHN][EVENT] SDP callback : BT_STATUS_FAILED")
TRC_MSG(CHNEVENT_SDP_CALLBACK__BT_STATUS_NOSERVICES, "[CHN][EVENT] SDP callback : BT_STATUS_NOSERVICES")
TRC_MSG(CHNEVENT_SDP_CALLBACK__UNKNOWN_RESULT__D, "[CHN][EVENT] SDP callback : unknown result : %d")
TRC_MSG(CHNCHNQUERYCALLBACK_SDP_QUERY_COMPLETE, "[CHN][ChnQueryCallback] SDP query complete")
TRC_MSG(CHNFLOW_OPEN_RFCOMM_CHANNEL__D, "[CHN][FLOW] Open RFCOMM channel : %d")
TRC_MSG(_CHNQUERYCALLBACK, "- ChnQueryCallback.")
TRC_MSG(CHNCHNRFCALLBACK_RFCHANNELXX_RFEVENT0XX, "[CHN][ChnRfCallback] +rfChannel==x%X, RfEvent==0x%X")
TRC_MSG(CHNEVENT_RFCOMM_EVENT__RFEVENT_OPEN_IND, "[CHN][EVENT] RFCOMM Event : RFEVENT_OPEN_IND.")
TRC_MSG(CHNRFCALLBACK_ONLY_IN_C1_THE_SERVER_CHANNEL_IS_REGISTERED, "ChnRfCallback: Only in C1, the server channel is registered.")
TRC_MSG(CHNRFCALLBACK_RFEVENT_OPEN_IND_HFP_SHALL_NEVER_GET_INTO_T, "ChnRfCallback: RFEVENT_OPEN_IND: HFP shall never get into this case.")
TRC_MSG(CHNRFCALLBACK_RFCOMM_HF_CONNECTION_ESTABLISHED, "ChnRfCallback: RFCOMM HF connection established.")
TRC_MSG(CHNRFCALLBACK_RFEVENT_OPENCHN_SHALL_NOT_GET_INTO_THIS_CAS, "ChnRfCallback: RFEVENT_OPEN:CHN shall not get into this case.")
TRC_MSG(CHNEVENT_RFCOMM_EVENT__RFEVENT_DATA_IND, "[CHN][EVENT] RFCOMM Event : RFEVENT_DATA_IND.")
TRC_MSG(CHNRFCALLBACK_RFCOMM_HF_DATA_RECEIVED, "ChnRfCallback: RFCOMM HF data received.")
TRC_MSG(CHNEVENT_RFCOMM_EVENT__RFEVENT_PACKET_HANDLED_STATUS, "[CHN][EVENT] RFCOMM Event : RFEVENT_PACKET_HANDLED, Status=%d")
TRC_MSG(CHNAT_RFEVENT_PACKET_HANDLED__FAIL, "[CHN][AT] RFEVENT_PACKET_HANDLED : Fail")
TRC_MSG(CHNAT_BYTESTOSENDD, "[CHN][AT] Bytestosend=%d")
TRC_MSG(CHN_CHNSENDTXBUFFER_RETURN_PENDING, "[CHN] ChnSendTxBuffer return Pending")
TRC_MSG(CHNRFCALLBACK_RFEVENT_PACKET_HANDLED_NO_CHN_CHANNEL, "ChnRfCallback: RFEVENT_PACKET_HANDLED: No CHN channel.")
TRC_MSG(CHNEVENT_RFCOMM_EVENT__RFEVENT_CLOSED, "[CHN][EVENT] RFCOMM Event : RFEVENT_CLOSED")
TRC_MSG(CHNEVENT_RFCOMM_IGNORE_OTHER_EVENTS__D, "[CHN][EVENT] RFCOMM ignore other events : %d")
TRC_MSG(_CHNRFCALLBACK, "- ChnRfCallback.")
TRC_MSG(_CHNSERVICECONNECTIONCALLBACK_EVENTD_STATUSD, "+ ChnServiceConnectionCallback: Event=%d, Status=%d.")
TRC_MSG(CHNEVENT_CMGR_EVENT__CMEVENT_DATA_LINK_CON_CNF_STATUS, "[CHN][EVENT] CMGR Event : CMEVENT_DATA_LINK_CON_CNF, Status=%d.")
TRC_MSG(CHNEVENT_CMGR_EVENT__CMEVENT_DATA_LINK_DIS_STATUSD, "[CHN][EVENT] CMGR Event : CMEVENT_DATA_LINK_DIS, Status=%d.")
TRC_MSG(CHNEVENT_CMGR_EVENT__CMEVENT_AUDIO_LINK_CON_STATUSD, "[CHN][EVENT] CMGR Event : CMEVENT_AUDIO_LINK_CON, Status=%d.")
TRC_MSG(CHNEVENT_CMGR_EVENT__CMEVENT_AUDIO_LINK_DIS_STATUSD, "[CHN][EVENT] CMGR Event : CMEVENT_AUDIO_LINK_DIS, Status=%d.")
TRC_MSG(CHNEVENT_CMGR_EVENT__CMEVENT_AUDIO_DATA_STATUSD, "[CHN][EVENT] CMGR Event : CMEVENT_AUDIO_DATA, Status=%d.")
TRC_MSG(CHNEVENT_CMGR_EVENT__CMEVENT_AUDIO_DATA_SENT_STATUS, "[CHN][EVENT] CMGR Event : CMEVENT_AUDIO_DATA_SENT, Status=%d.")
TRC_MSG(CHNFLOW_REGISTER_SCO_HANDLER__D, "[CHN][FLOW] Register SCO handler : %d")
TRC_MSG(CHNFLOW__CHANGE_STATE_FROM_0XX_TO_0XX, "[CHN][FLOW]  Change state from 0x%X to 0x%X")
TRC_MSG(CHNFLOW_REGISTER_SERVER_CHANNEL__D, "[CHN][FLOW] Register server channel : %d")
TRC_MSG(CHNCHNREGISTERSERVERCHANNEL___RETURN_STATUSXX, "[CHN][ChnRegisterServerChannel]  - return status==x%X")
TRC_MSG(CHNFLOW_DEREGISTER_SERVER_CHANNEL__D, "[CHN][FLOW] Deregister server channel : %d")
TRC_MSG(CHNCHNDEREGISTERSERVERCHANNEL___RETURN_STATUSXX, "[CHN][ChnDeregisterServerChannel]  - return status==x%X")
TRC_MSG(CHNFLOW_DISCONNECTING__SUBSTATE0XX, "[CHN][FLOW] Disconnecting : substate=0x%X")
TRC_MSG(CHNFLOW_SDP_QUERY_ONGOING, "[CHN][FLOW] SDP query ongoing")
TRC_MSG(CHNFLOW_SCO_CONNECTING_ONGOING, "[CHN][FLOW] SCO connecting ongoing")
TRC_MSG(CHNFLOW_SCO_DISCONNECTING_ONGOING, "[CHN][FLOW] SCO disconnecting ongoing")
TRC_MSG(CHNFLOW_SUBSTATE_IS_I2O3_WAITING_RFCOMM_CONFIRM, "[CHN][FLOW] Substate is I2/O3. Waiting RFCOMM confirm")
TRC_MSG(CHNFLOW_SUBSTATE_IS_O1_WAITING_CMGR_DATA_LINK_CONFIRM, "[CHN][FLOW] Substate is O1. Waiting CMGR data link confirm")
TRC_MSG(CHNFLOW_SUBSTATE_IS_NOT_D1, "[CHN][FLOW] Substate is not D1.")
TRC_MSG(CHNFLOW_SCO_CONNECTION_EXISTED, "[CHN][FLOW] SCO connection existed")
TRC_MSG(CHNCHNDISCONNECTING_REMOVE_AUDIO_LINK__RETURN_D, "[CHN][ChnDisconnecting] Remove audio link : return %d")
TRC_MSG(CHNFLOW_DEREGISTER_SCO_HANDLER, "[CHN][FLOW] Deregister SCO handler")
TRC_MSG(CHNFLOW_RFCOMM_CHANNEL_EXISTED, "[CHN][FLOW] RFCOMM channel existed")
TRC_MSG(CHNFLOW_CLOSE_RFCOMM_CHANNEL__D, "[CHN][FLOW] Close RFCOMM channel : %d")
TRC_MSG(CHNFLOW_DISCONNECTING_RETURN__D, "[CHN][FLOW] Disconnecting return : %d")
TRC_MSG(CHNCALLBACK_EVENTD_STATUSD_DATA0XX_ERRCODED, "[CHN][CALLBACK] Event=%d, Status=%d, data=0x%X, errCode=%d")
TRC_MSG(CHNCHNREPORTSERVICECONNECTED__CHANNELXX, "[CHN][ChnReportServiceConnected]  +Channel==x%X")
TRC_MSG(CHNFLOW_DISASSOCIATE_ACL_LINK__D, "[CHN][FLOW] Disassociate ACL link : %d")
TRC_MSG(CHNFLOW_ASSOCIATE_ACL_LINK__D, "[CHN][FLOW] Associate ACL link : %d")
TRC_MSG(CHNCHNOPENCHANNEL__RETURN_STATUSXX, "[CHN][ChnOpenChannel] - return status==x%X")
TRC_MSG(CHNCHNFINDREGISTEREDCHANNEL_RFCHANNELXX, "[CHN][ChnFindRegisteredChannel] +RfChannel==x%X")
TRC_MSG(CHNCHNFINDREGISTEREDCHANNEL__RETURN_CHNCHANNELXX, "[CHN][ChnFindRegisteredChannel] - return ChnChannel==x%X")
TRC_MSG(_CHNALLOCRFCHANNEL, "+ ChnAllocRfChannel.")
TRC_MSG(_CHNFREERFCHANNEL, "+ ChnFreeRfChannel.")
TRC_MSG(FMP_GET_PACKET_X, "[FMP] get packet: %x")
TRC_MSG(FMP_RELEASE_PACKET_X, "[FMP] release packet: %x")
TRC_MSG(FMP_READ_SERVICE_DB_ADDR_0XX_0XX_0XX_0XX_0XX_0XX, "[FMP] read service db, addr: 0x%x 0x%x 0x%x 0x%x 0x%x 0x%x")
TRC_MSG(FMP_READ_SERVICE_DB_HANDLE_0XX_0XX_0XX_, "[FMP] read service db, handle: 0x%x 0x%x 0x%x ")
TRC_MSG(FMP_WRITE_SERVICE_DB_ADDR_0XX_0XX_0XX_0XX_0XX_0XX, "[FMP] write service db, addr: 0x%x 0x%x 0x%x 0x%x 0x%x 0x%x")
TRC_MSG(FTP_WRN_DISABLE_SRM_BEACUASE_HEAVY, "ftp: wrn disable srm beacuase heavy")
TRC_MSG(FTP_ABORTFILE_TIMEOUT_CNTX0XX, "[FTP] abortfile timeout cntx:0x%x")
TRC_MSG(FTP_STATUSD, "[FTP] status:%d")
TRC_MSG(FTP_CLIENT_0XX_IDD, "[FTP] client 0x%x id:%d")
TRC_MSG(FTP_SRM_CLIENTD_ABORTSTATUSD, "[FTP] srm_client:%d abortstatus:%d")
TRC_MSG(FTP_START_A_ABORT_TIMER_TO_DISCONNECT, "[FTP] start a abort timer to disconnect")
TRC_MSG(FTP_STOP_ABORTTIMER, "[FTP] stop abortTimer")
TRC_MSG(FTPSERV_PREPARE_THE_L2DATA_BUFFER, "[FTP][SERV] prepare the l2data buffer")
TRC_MSG(HIGHSPEED_IS_SWITCHED_OFF_CHANGE_TPTYPE_TO_RFCOMM_ONLY, "HighSpeed is switched off. change tptype to rfcomm only")
TRC_MSG(GOEPWRN_S_INTERNAL_STOP_RSP1D_RSP2D, "[GOEP][WRN] s internal stop rsp1:%d rsp2:%d")
TRC_MSG(GOEPERR_CANNOT_FIND_SERVICE_D, "[GOEP][ERR] Cannot find service %d")
TRC_MSG(OBEXQ_CONNECT_TRANSPORT_SHINK_MAXPDUSIZE_IS_D__, "[OBEX][Q] Connect transport shink maxPduSize is %d --- ")
TRC_MSG(FTPM_USE_MEMD_SIZED_BUFF0XX, "[FTP][M] Use mem:%d size:%d buff:0x%x")
TRC_MSG(FTPC_OBSFTPOBS_NEW_OUT_OF_ENTRIES, "[FTPC OBS]FTPOBS_New: Out of entries\n")
TRC_MSG(FTPM_CREATEMEMBUFFER_USE_FAKE_JUST_RETURN, "[FTP][M] CreateMemBuffer use fake. just return")
TRC_MSG(FTPM_CREATEMEMBUFFER_ALREADY_HAS, "[FTP][M] CreateMemBuffer already has")
TRC_MSG(FTPM_CREATEMEMBUFFER_FILESIZED_TOO_SMALL_IGNORE_IT, "[FTP][M] CreateMemBuffer filesize:%d too small. ignore it")
TRC_MSG(FTPM_CREATEMEMBUFFER_FILESIZED_SIZED_BUFF0XX, "[FTP][M] CreateMemBuffer filesize:%d size:%d buff:0x%x")
TRC_MSG(FTOBS_OPEN_FLAGD, "[FT][OBS] OPEN flag:%d!")
TRC_MSG(FTP_ENTER_TESTCODE, "[FTP] enter TestCode")
TRC_MSG(FTP_TESTCODE_FAIL_SRETD_WRITED, "[FTP] TESTCODE fail sRet:%d write:%d")
TRC_MSG(FTP_TESTCODE_WBLOCKSIZEDFILESIZEDDIFFDENDDSP, "[FTP] TESTCODE w,blocksize,%d,filesize,%d,diff,%d,end,%d,speed,%d,")
TRC_MSG(FTP_TESTCODE_FAIL_SRETD_READD, "[FTP] TESTCODE fail sRet:%d read:%d")
TRC_MSG(FTP_TESTCODE_RBLOCKSIZEDFILESIZEDDIFFDENDDSP, "[FTP] TESTCODE r,blocksize,%d,filesize,%d,diff,%d,end,%d,speed,%d,")
TRC_MSG(INST__U, "inst : %u")
TRC_MSG(IS_PRIMARY__U, "is_primary : %u")
TRC_MSG(CHECKUSERREGNOTI__USERP_USERREGNOTILISTP, "checkUserRegNoti : user=%p, &user->regNotiList=%p")
TRC_MSG(FINDCHARBYUUID__PSERVP_CHAR_UUIDP_INSTU, "findCharByUuid : pServ=%p, char_uuid=%p, inst=%u")
TRC_MSG(FINDDESCRBYUUID__PCHARP_DESCR_UUIDP_INSTU, "findDescrByUuid : pChar=%p, descr_uuid=%p, inst=%u")
TRC_MSG(ASYNCCONNAPIHANDLER__TYPEU, "asyncConnApiHandler : type=%u")
TRC_MSG(GATTC_REQ_TYPE_SERVICE_SEARCH__START, "GATTC_REQ_TYPE_SERVICE_SEARCH : start")
TRC_MSG(GATTC_REQ_TYPE_SERVICE_SEARCH__END, "GATTC_REQ_TYPE_SERVICE_SEARCH : end")
TRC_MSG(GATTC_REQ_TYPE_INCL_SERVICE_SEARCH__START, "GATTC_REQ_TYPE_INCL_SERVICE_SEARCH : start")
TRC_MSG(GATTC_REQ_TYPE_INCL_SERVICE_SEARCH__END, "GATTC_REQ_TYPE_INCL_SERVICE_SEARCH : end")
TRC_MSG(GATTC_REQ_TYPE_GET_CHAR__START, "GATTC_REQ_TYPE_GET_CHAR : start")
TRC_MSG(GATTC_REQ_TYPE_GET_CHAR__END, "GATTC_REQ_TYPE_GET_CHAR : end")
TRC_MSG(GATTC_REQ_TYPE_GET_DESCR__START, "GATTC_REQ_TYPE_GET_DESCR : start")
TRC_MSG(GATTC_REQ_TYPE_GET_DESCR__END, "GATTC_REQ_TYPE_GET_DESCR : end")
TRC_MSG(CHECKBGCONNECTION, "checkBgConnection")
TRC_MSG(FOUND_USERP_BGP, "Found user=%p, bg=%p")
TRC_MSG(NO_BG_FOUND, "No bg found")
TRC_MSG(CHECKSCANING, "checkScaning")
TRC_MSG(USER_P_REQUEST_SCANING, "user %p request scaning")
TRC_MSG(NO_USER_REQUEST_SCANING, "no user request scaning")
TRC_MSG(REPORTRSSIRESULT__REMDEVP_ERRU_RSSID, "reportRssiResult : remDev=%p, err=%u, rssi=%d")
TRC_MSG(USER_P_REQUEST_RSSI, "user %p request RSSI")
TRC_MSG(UPDATESCANINGSTATE__GATTCCFLAGU, "updateScaningState : GATTCC(flag)=%u")
TRC_MSG(MECALLBACK__EVENTU, "meCallBack : event=%u")
TRC_MSG(DB_IS_NOT_FOUND_TRY_TO_LOAD_FROM_FILE, "DB is not found try to load from file")
TRC_MSG(REPORTINDICATION__LOAD_CACHED_DB_FILE_FAILED, "reportIndication : Load cached db file failed.")
TRC_MSG(REPORTINDICATION__DB_IS_NULL_JUST_RETURN, "reportIndication : db is NULL, just return.")
TRC_MSG(GATTCAPCALLBACK__ETYPEU, "GattcAPCallBack : eType=%u")
TRC_MSG(BT_GATT_APP_EVENT_CONNECTED__USERLISTP_USERP, "BT_GATT_APP_EVENT_CONNECTED : userList=%p, user=%p")
TRC_MSG(USERP, "user=%p")
TRC_MSG(SEARCHALLPRIMARYSERVICE, "searchAllPrimaryService")
TRC_MSG(GATTSERVICESEARCHALLCALLBACKD, "gattServiceSearchAllCallBack():%d")
TRC_MSG(GATTS_RESPONSEHDLP_CONNP_HANDLEU_RESULTU_VALUE, "GATTS_Response(hdl=%p, conn=%p, handle=%u, result=%u, value_len=%u)")
TRC_MSG(OPD, "op=%d")
TRC_MSG(GATTSAPCALLBACK__ETYPEU, "gattsAPCallback : eType=%u")
TRC_MSG(FINDCONTAINEDSERVICENODEDBP_HANDLEU, "findContainedServiceNode(db=%p, handle=%u)")
TRC_MSG(SVCP_STARTU_ENDU, "svc=%p, start=%u, end=%u")
TRC_MSG(FINDDESCRNODECHARP_HANDLEU, "findDescrNode(char=%p, handle=%u)")
TRC_MSG(DESCRP_DESCR_HANDLEU, "descr=%p, descr handle=%u")
TRC_MSG(GETVALUENODEBYHANDLE__HANDLEU, "getValueNodeByHandle : handle=%u")
TRC_MSG(CHAR_NODE__P_HANDLEU_VALUE_HANDLEU, "char_node = %p, handle=%u, value handle=%u")
TRC_MSG(CONVERPERMISSIONPERM0XX, "converPermission(perm=0x%X)")
TRC_MSG(READWRITE, "Read/Write")
TRC_MSG(READ_ONLY, "Read Only")
TRC_MSG(WRITE_ONLY, "Write Only")
TRC_MSG(NO_READWRITE, "No Read/Write")
TRC_MSG(READ_ENCRYPT_REQUIRED, "Read Encrypt required")
TRC_MSG(READ_AUTH_REQUIRED, "Read auth required")
TRC_MSG(READ_ENCRYP_KEY_SIZE_U_REQUIRED, "Read encryp key size %u required")
TRC_MSG(WRITE_ENCRYPT_REQUIRED, "Write Encrypt required")
TRC_MSG(WRITE_AUTH_REQUIRED, "Write auth required")
TRC_MSG(WRITE_ENCRYP_KEY_SIZE_U_REQUIRED, "Write encryp key size %u required")
TRC_MSG(ADDDESCRRECORDP_DATAP__SIZEU, "addDescrRecord(%p, data=%p) : size=%u")
TRC_MSG(ADDCHARRECORDP_DATAP__SIZEU, "addCharRecord(%p, data=%p) : size=%u")
TRC_MSG(ADDINCLSERVICERECORDPDATAP__SIZEU, "addInclServiceRecord(%p,data=%p) : size=%u")
TRC_MSG(ADDSERVICERECORDP_DATAP__SIZEU, "addServiceRecord(%p, data=%p) : size=%u")
TRC_MSG(COMPOSEATTRECORDP, "composeAttRecord(%p)")
TRC_MSG(MOUNTATTRECORDCALLBACKSVCP_MOUNTU, "mountAttRecordCallback(svc=%p, mount=%u)")
TRC_MSG(MOUNTUNMOUNT_CHAR_P_HANDLE_U, "mount/unmount char %p, handle %u")
TRC_MSG(MOUNTUNMOUNT_DESCR_P_HANDLE_U, "mount/unmount descr %p, handle %u")
TRC_MSG(COMPOSESDPRECORDSVCP, "composeSDPRecord(svc=%p)")
TRC_MSG(UUID16, "uuid16")
TRC_MSG(UUID128, "uuid128")
TRC_MSG(INVALID_UUID_SIZE_JUST_RETURN, "Invalid uuid size. Just return")
TRC_MSG(GATTS_ADDSERVICE__HANDLEP_NUM_HANDLEU, "GATTS_AddService : handle=%p, num_handle=%u")
TRC_MSG(CAN_NOT_FIND_DB_CREATE_NEW, "Can not find DB. Create new")
TRC_MSG(ALLOC_SERVICE_P, "Alloc service %p")
TRC_MSG(GATTS_ADDCHARHANDLEU, "GATTS_AddChar(handle=%u)")
TRC_MSG(FIND_SVC_P_CONTAIN_HANDLE_U, "find svc %p contain handle %u")
TRC_MSG(GATTS_ADDDESCRHANDLEU_PERMISSIONU, "GATTS_AddDescr(handle=%u, permission=%u)")
TRC_MSG(FIND_CONTAINED_SERVICE_P, "Find contained service %p")
TRC_MSG(GATTS_STARTSERVICE__SVCP_PSVCRECORDP_SVCRECORDSIZE, "GATTS_StartService : svc=%p, pSvcRecord=%p, svcRecordSize=%u")
TRC_MSG(GOEPID_D_0XX_D, "goep:id %d 0x%x %d")
TRC_MSG(SERVER_ALREADY_PENDING, "[SERVER] already pending")
TRC_MSG(GOEP_ERROR__HAS_A_PRIVIOUS_REGISTERED_SERVICE_TYPED_ID, "[GOEP] error ! has a privious registered service_type:%d id:%d client")
TRC_MSG(GOEP_GET_A_FREE_IDD_CLIENTTYPED, "[GOEP] get a free id:%d Client->type:%d")
TRC_MSG(GOEP_CONNIDD_HAS_CONNCOUNTD_, "GOEP: connId:%d has connCount:%d ")
TRC_MSG(OBEX_CLEARN_FIRST_PACKET_RECEIVEDD, "[OBEX] clearn first_packet_received:%d")
TRC_MSG(GOEP_ENTER_CHECK_SERVICE_TYPED_ROLE_TYPED, "GOEP: enter check service_type:%d role_type:%d")
TRC_MSG(GOEP_ENTER_LOOP_ID_CONNCOUNTD_GOEP_SERVICE_TYPED, "GOEP: enter loop i:%d connCount:%d goep_service_type:%d")
TRC_MSG(GOEP_SKIP_PRIVOUS_REGISTER_CHECK_SERVICE_TYPED, "GOEP: skip privous register check service_type:%d")
TRC_MSG(ERR_GOEP_APPROFILE_HANDLER_NO_HANDLE_MSG_IDD_, "[ERR] goep_approfile_handler no handle msg_id:%d ")
TRC_MSG(GOEP_FIND_FREE_PARAM_ISCLIENTD_UUID_LEND_L_UUID320XX, "goep: find_free param isclient:%d uuid_len:%d l_uuid32:0x%x")
TRC_MSG(GOEP_FIND_FREE_ISCLIENTD_UUID_LEND_L_UUID320XX_RET, "goep: find_free isclient:%d uuid_len:%d l_uuid32:0x%x ret:%d")
TRC_MSG(GOEP_FIND_FREE_ISCLIENTD_RET2D, "goep: find_free isclient:%d ret2:%d")
TRC_MSG(GOEP_FIND_FREE_NOT_AVAILABLE_ID, "goep: find_free not available i:%d")
TRC_MSG(GOEPCLIENT_RELEASECONNID_FIRST, "[GOEP]client ReleaseConnID: first")
TRC_MSG(GOEP_SERVICECM_CONN_ID_HAS_ALLOCED_BEFORE, "[GOEP] Service->cm_conn_id has alloced before!")
TRC_MSG(OBEX_CLIENTCONNSTATE_IS_D, "[OBEX] client->connState is %d")
TRC_MSG(GOEP_GOEP_MAIN_IGNORE_THE_WRONG_GOEP_CONN_ID_D, "goep: goep_main ignore the wrong goep_conn_id %d")
TRC_MSG(GOEP_GOEP_MAIN_DEREGISTER_D, "goep: goep_main deregister %d")
TRC_MSG(GOEP_AUTH_REQ_HDLR_GOEP_SERVERAUTHENTICATE_STATUS_D, "goep_auth_req_hdlr: GOEP_ServerAuthenticate status %d\n")
TRC_MSG(GOEP_AUTH_REQ_HDLR_GOEP_SERVERCONTINUE_STATUS_D, "goep_auth_req_hdlr: GOEP_ServerContinue status %d\n")
TRC_MSG(GOEP_CREATE_CLIENT0XX_PL2CAPRAWDATA0XX, "[GOEP] create Client:0x%x pl2capRawData:0x%x")
TRC_MSG(GOEP_CONNECT_REQ_HDLR_PENDING_TO_WAIT_FOR_AUTHENTICATE_REQ, "goep_connect_req_hdlr: Pending to wait for authenticate request\n")
TRC_MSG(GOEP_GOEP_DISCONNECT_REQ_HDLR_FAIL_TO_FIND_GOEPCLIENTAPP_, "[GOEP] goep_disconnect_req_hdlr fail to find GoepclientApp goep_conn_id:%d")
TRC_MSG(GOEP_BEFORE_GOEP_API_CONNSTATED, "[GOEP] before GOEP API connState:%d")
TRC_MSG(GOEP_AFTER_GOEP_API_CONNSTATED, "[GOEP] after GOEP API connState:%d")
TRC_MSG(GOEP_GOEP_DISCONNECT_REQ_HDLR_TO_CALL_GOEP_DISCONNECT_, "[GOEP] goep_disconnect_req_hdlr to call GOEP_Disconnect ")
TRC_MSG(GOEP_IGNORE_DISCONNECT_TWICE, "[GOEP] ignore disconnect twice")
TRC_MSG(GOEP_AUTH_RSP_HDLR_GOEP_SERVERAUTHENTICATE_STATUS_D, "goep_auth_rsp_hdlr: GOEP_ServerAuthenticate status %d\n")
TRC_MSG(GOEP_AUTH_RSP_HDLR_GOEP_SERVERCONTINUE_STATUS_D, "goep_auth_rsp_hdlr: GOEP_ServerContinue status %d\n")
TRC_MSG(GOEP_AUTH_RSP_HDLR_CAN_NOT_FIND_CLIENT_BY_GOEP_CONN_IDD, "goep_auth_rsp_hdlr: can not find client by goep_conn_id:%d")
TRC_MSG(GOEP_AUTH_RSP_HDLR_CAN_NOT_FIND_CLIENT_BY_GOEP_CONN_ID_, "goep_auth_rsp_hdlr: can not find client by goep_conn_id ")
TRC_MSG(GOEP_GOEP_TPDISCONNECT_REQ_HDLR_, "[GOEP] +goep_TpDisconnect_req_hdlr ")
TRC_MSG(GOEP_CLIENT_IS_ALREADY_CS_DISCONNECTING, "[GOEP] client is already CS_DISCONNECTING!")
TRC_MSG(GOEP_GOEP_DEINIT, "[GOEP] goep_deinit")
TRC_MSG(GOEP_GOEP_DEINIT_SERVER_ID, "[GOEP] goep_deinit server i:%d")
TRC_MSG(GOEP_GOEP_DEINIT_CLIENT_ID, "[GOEP] goep_deinit client i:%d")
TRC_MSG(HDPHDP_TP_CONNECT, "[HDP]hdp_tp_connect")
TRC_MSG(HDPHDP_TP_CONNECT_RESULT_D, "[HDP]hdp_tp_connect result %d")
TRC_MSG(HDPHDP_MCL_CONNECT, "[HDP]hdp_mcl_connect:")
TRC_MSG(HDPHDP_MCL_CONNECT_RESULTD, "[HDP]hdp_mcl_connect result:%d")
TRC_MSG(HDPERR_INVALID_STATE, "[HDP]Err: invalid state")
TRC_MSG(HDPHDP_MDL_DISCONNECT, "[HDP]hdp_mdl_disconnect")
TRC_MSG(HDPERR_IN_OPENING_ACL_CONNECTION, "[HDP]ERR in opening ACL connection")
TRC_MSG(HDPHDP_MDL_SEND_DATA_DATA_LEN_D, "[HDP]hdp_mdl_send_data: data len %d")
TRC_MSG(HDPHDP_CONNECT_CHANNEL_REOPEN__D, "[HDP]hdp_connect_channel: reopen ? %d")
TRC_MSG(HDP_ERR_FAIL_TO_REOPEN_CHANNEL_SO_DESTROY_IT_FOR_EVER, "[HDP] Err, fail to reopen channel, so destroy it for ever")
TRC_MSG(HDPHDP_CREATE_CHANNEL, "[HDP]hdp_create_channel")
TRC_MSG(HDPINSTANCE_IS_NULL, "[HDP]instance is NULL")
TRC_MSG(HDP_INVALID_L2CAP_MODE_S, "[HDP] invalid l2cap mode")
TRC_MSG(HDP_INVALID_REMOTE_DEVICE_UUID, "[HDP] invalid remote device uuid")
TRC_MSG(HDPHDP_DESTROY_CHANNEL_D, "[HDP]hdp_destroy_channel: %d")
TRC_MSG(HDPHDP_HANDLE_PACKET, "[HDP]hdp_handle_packet:")
TRC_MSG(HDPNO_PENDING_PACKET_IS_IN_LIST, "[HDP]No pending packet is in list")
TRC_MSG(HDPTHE_PACKET_LOSES_ITS_CHANNEL_INFO_WHAT_A_PITY, "[HDP]The packet loses its channel info, what a pity")
TRC_MSG(HDPERR_CONFIG_IS_NULL_D_ID_IS_D, "[HDP]Err, config is null? %d, id is %d")
TRC_MSG(HDPIT_FAILS_TO_ADD_INSTANCE_TO_SDP, "[HDP]it fails to add instance to SDP")
TRC_MSG(HDPINSTANCE_ID_IS_D, "[HDP]instance id is %d")
TRC_MSG(HDPHDP_REGISTER_ECHO, "[HDP]hdp_register_echo")
TRC_MSG(HDP_DEREGISTER_D, "hdp_deregister: %d")
TRC_MSG(HDP_THE_RESULT_TO_REMOVE_FEATURE_FROM_SDP_IS_D, "[HDP] the result to remove feature from SDP is %d")
TRC_MSG(HDPHDP_OPEN_CHANNELID_D_ADDR_0XX0XX0XX0XX0XX, "[HDP]hdp_open_channel:id %d, addr 0x%x:0x%x:0x%x:0x%x:0x%x:0x%x")
TRC_MSG(HDPHDP_REOPEN_CHANNEL_ADDRESS_IS_0XX_0XX_0XX_0XX_0X, "[HDP]hdp_reopen_channel: address is 0x%x 0x%x 0x%x 0x%x 0x%x 0x%x, mdl id is %d")
TRC_MSG(HDPHDP_CLOSE_CHANNEL, "[HDP]hdp_close_channel")
TRC_MSG(HDP_HDP_CLOSE_CHANNEL_ALL_ID_D, "[HDP] hdp_close_channel_all: id %d")
TRC_MSG(HDP_CHANNEL_LIST_IS_EMPTY, "[HDP] channel list is empty")
TRC_MSG(HDP_RET_D, "[HDP] ret %d")
TRC_MSG(HDPHDP_REMOVE_CONNECTION_0XX_0XX_0XX_0XX_0XX_0XX, "[HDP]hdp_remove_connection: 0x%x 0x%x 0x%x 0x%x 0x%x 0x%x")
TRC_MSG(NO_MCL_IS_FOUND_FOR_THE_DEVICE_WHICH_INDICATE_SUCCESS, "No mcl is found for the device, which indicate success")
TRC_MSG(MCAP_MCL_RECORD_IS_NULL_MAYBE_PREVIOUS_OPERATION_IS_ABNORM, "MCAP mcl record is null, maybe previous operation is abnormal")
TRC_MSG(HDPHDP_ECHOADDR_0XX0XX0XX0XX0XX0XX_ROLE_IS_, "[HDP]hdp_echo:addr 0x%x:0x%x:0x%x:0x%x:0x%x:0x%x, role is %d")
TRC_MSG(HDPHDP_SEND_DATAMDL_ID_IS_D_DATA_LEN_D, "[HDP]hdp_send_data:mdl id is %d, data len %d")
TRC_MSG(DATA_IS_NULL_OR_LEN_IS_ZERO, "data is null or len is zero")
TRC_MSG(HDPERRCHANNEL_IS_NULL_OR_NOT_IN_CONNECTED_STATE, "[HDP]err:channel is null or not in connected state")
TRC_MSG(HDP_FAIL_TO_ADD_NEW_PACKET_TO_POOL, "[HDP] fail to add new packet to pool")
TRC_MSG(HDPHDP_INIT, "[HDP]hdp_init")
TRC_MSG(HDPHDP_DEINIT, "[HDP]hdp_deinit")
TRC_MSG(HDPHDP_HAS_BEEN_DEINITIATED, "[HDP]hdp has been deinitiated")
TRC_MSG(HDPTHE_RESULT_IS_D_TO_DEINIT_HDP, "[HDP]the result is %d to deinit HDP")
TRC_MSG(HDPHDP_ADP_CALLBACK_EVENT_IS_D_STATUS_IS_D, "[hdp]hdp_adp_callback, event is %d, status is %d")
TRC_MSG(HDPEVENTINVALID_CALL_BACK_EVENT_D, "[HDP][EVENT]invalid call back event: %d")
TRC_MSG(HDPHDP_PROCESS_ONGOING_OPERATION, "[HDP]hdp_process_ongoing_operation")
TRC_MSG(HDPHDP_CMGR_CALLBACKEVENT_D_STATUS_D, "[HDP]hdp_cmgr_callback:Event %d, status %d")
TRC_MSG(HDPCHANNEL_IS_NULL_OR_NOT_IN_CHANNEL_LIST, "[HDP]channel is null or not in channel list")
TRC_MSG(HDPINVALID_STATE, "[HDP]invalid state")
TRC_MSG(HDPWARNING_THE_ORIGNAL_MCL_EXIST_BUT_NEW_MCL_OPENDED_I, "[HDP][WARNING] the orignal mcl exist, but new mcl opended indication is recevied")
TRC_MSG(HDPRELEASE_MCL_MEMORY, "[HDP]release mcl memory")
TRC_MSG(HDPPARMSMDL_IS_NULL, "[HDP]parms->mdl is null")
TRC_MSG(HDPMTU_IS_D, "[HDP]mtu is %d")
TRC_MSG(HDPERR_INVALID_MDEPID_OR_INVALID_CHANNEL, "[HDP]ERR: invalid mdepid or invalid channel")
TRC_MSG(HDPMCAPEVENT_MDLOPENED_IND_L2CAP_CHANNEL_ID_D, "[HDP]MCAPEVENT_MDLOPENED_IND: l2cap channel id %d")
TRC_MSG(HDPNO_CHANNEL_IS_FOUND_FOR_THE_MDL_ID_D, "[HDP]No channel is found for the mdl id %d")
TRC_MSG(HDPINVALID_MDEPID, "[HDP]invalid mdepid")
TRC_MSG(HDPREMOTE_CONFIG_MISMATCH_LOCAL_ROLE_D_CHANNEL_TYPE_D, "[HDP]remote config mismatch: local role %d, channel type %d, but remote config is %d")
TRC_MSG(HDPWARNIG_INTANCE_IN_THE_CHANNEL_IS_NULL, "[HDP]WARNIG: intance in the channel is null")
TRC_MSG(HDPERR_ANOTHER_CHANNEL_IN_USE_CONFLICT_WITH_THE_CURRENT_, "[HDP]Err: Another channel in use conflict with the current channel request ")
TRC_MSG(HDPERROR_NO_CHANNEL_IS_FOUND, "[HDP]error: no channel is found")
TRC_MSG(HDPRESULT_IS_D_LOCAL_TYPE_IS_D, "[HDP]result is %d, local type is %d")
TRC_MSG(HDPINVALID_MCAP_CALL_PARMS, "[HDP]invalid mcap call parms")
TRC_MSG(HDPNO_INSTANCE_IS_FOUND, "[HDP]no instance is found")
TRC_MSG(HDP_REMOTE_CONFIG_REPONSE_DOES_NOT_MATCH_LOCAL_ROLE_IS_, "[HDP] remote config reponse does not match, local role is %d, registered type is %d, current type is %d, but remote config is %d")
TRC_MSG(HDPERRORTHE_TXPKT_RETURNED_FROM_MCAP_IS_EMPTY_CHECK_IT_, "[HDP]Error:the txPkt returned from MCAP is empty, check it right now")
TRC_MSG(HDPWARNINGTHE_DATA_PACKET_RETURNED_FROM_MCAP_IS_EMPTY, "[HDP]Warning:the data packet returned from MCAP is empty")
TRC_MSG(HDPERR_NO_CHANNEL_IS_FOUND, "[HDP]Err, no channel is found")
TRC_MSG(HDPHDP_MCAP_CALLBACKEVENT_D_STATUS_D, "[HDP]hdp_mcap_callback:Event %d, status %d")
TRC_MSG(HDPSDPHDP_SDP_PARSE_NEW_FEATURETOTAL_LEN_IS_0XX, "[HDP][SDP]hdp_sdp_parse_new_feature:total len is 0x%x")
TRC_MSG(MDEPID_IS__0X2X, "mdepId is : 0x%2x")
TRC_MSG(FEATURE_INDEX_D_IS_INVALID_0X2X, "feature index %d is invalid: 0x%2x")
TRC_MSG(DATATYPE_IS__0X4X, "dataType is : 0x%4x")
TRC_MSG(ROLE_IS__0X2X_DATA_IS_D, "role is : 0x%2x, data is %d")
TRC_MSG(DESCDATA_IS_D_INDEX_IS_D_OFFSET_IS_D, "desc:data is %d, index is %d, offset is %d")
TRC_MSG(HDPSDP_ERR_SUPPORTED_FEATURES_LEN_IS_ZERO, "[HDP][SDP] ERR: supported features len is zero")
TRC_MSG(HDPHDP_SDP_PARSE_FEATURES_LEN_IS_D, "[HDP]hdp_sdp_parse_features, len is %d")
TRC_MSG(ERR_PARSE_FEATURE, "[err] parse feature")
TRC_MSG(HDPSDPHDP_SDP_PARSE_ATTRIBUTE_ATTRIBUTE_IS_0XX, "[HDP][SDP]hdp_sdp_parse_attribute, attribute is 0x%x")
TRC_MSG(HDPSDP_INVALID_ATTRIBUTE_D, "[HDP][SDP] invalid attribute %d")
TRC_MSG(HDPHDP_SDP_QUERY_RM_DEVICE_IS_D_RM_UUID_IS_D, "[HDP]hdp_sdp_query, rm device is %d, rm uuid is %d")
TRC_MSG(HDPERR_SDAP_SERVICESEARCHMULTIPLEATTRIBUTE__D, "[HDP][ERR] SDAP_ServiceSearchMultipleAttribute : %d")
TRC_MSG(HDPSHOW_SDP, "[HDP]show_sdp")
TRC_MSG(CONTROL_CHANNEL_IS_0XX, "control channel is 0x%x")
TRC_MSG(DATA_CHANNEL_IS_0XX, "data channel is 0x%x")
TRC_MSG(RM_MDEPID_IS_0XX, "rm mdepid is 0x%x")
TRC_MSG(HDPSDPHDP_SDP_CALLBACK_RESULT_IS_D_ATTRIBUTE_INDEX_I, "[HDP][SDP]hdp_sdp_callback, result is %d, attribute_index is %d, channel is %d")
TRC_MSG(HDPSDPNO_CHANNEL_IS_FOUND_FOR_THE_SDP_QUERY_TOKEN, "[HDP][SDP]no channel is found for the SDP query token")
TRC_MSG(HDPSHOW_ADDRESS_X_X_X_X_X_X, "[HDP]show_address: %x, %x, %x, %x, %x, %x")
TRC_MSG(HDPHDP_FIND_MCL, "[HDP]hdp_find_mcl")
TRC_MSG(HDPMCL_LIST_IS_NULL, "[HDP]mcl list is null")
TRC_MSG(HDPHDP_MCL_NEW_D, "[HDP]hdp_mcl_new: %d")
TRC_MSG(HDPHDP_MCL_DELETE_D, "[HDP]hdp_mcl_delete: %d")
TRC_MSG(HDPTHE_MCL_IS_NOT_IN_LIST, "[HDP]the MCL is not in list")
TRC_MSG(HDPHDP_FIND_CHANNEL_BY_MDLID_ID__D, "[HDP]hdp_find_channel_by_mdlId: id  %d")
TRC_MSG(HDP_CHANNEL_DOES_NOT_INIT, "hdp channel does not init")
TRC_MSG(HDPDUMP_CHANNEL, "[HDP]dump_channel")
TRC_MSG(HDPCHANNELP_STATEDL2CAPIDD_MDLD_ADDRX, "[HDP]channel[%p], state[%d],l2capid[%d], mdl[%d], addr[%x]")
TRC_MSG(HDPHDP_FIND_CHANNEL_BY_STATE_STATE__D, "[HDP]hdp_find_channel_by_state: state  %d")
TRC_MSG(HDPHDP_FIND_CHANNEL_BY_MDEP_ID_STATE__D, "[HDP]hdp_find_channel_by_mdep_id: state  %d")
TRC_MSG(HDP_CHANNEL_IS_EMPTY, "hdp channel is empty")
TRC_MSG(HDPUTIL_HDP_POOL_PKT_ADD_ISNODEONLIST_D, "[HDP][UTIL] hdp_pool_pkt_add: IsNodeOnList %d")
TRC_MSG(HDPUTILFAIL_TO_ADD_PKT_TO_LIST, "[HDP][UTIL]fail to add pkt to list")
TRC_MSG(HDPUTIL_ISLISTEMPTY_D, "[HDP][UTIL] IsListEmpty %d")
TRC_MSG(HDPUTILHDP_POOL_PKT_REMOVE_PKTPOOL_IS_EMPTY, "[HDP][UTIL]hdp_pool_pkt_remove: pktPool is empty")
TRC_MSG(HDPUTILHDP_DATA_PACKAT_LIST_ADD_ADDR_IS_D, "[HDP][UTIL]hdp_data_packat_list_add: addr is %d")
TRC_MSG(HDPUTILHDP_DATA_PACKAT_DELETE_ADDR_IS_D_FORCE_TO_DEL, "[HDP][UTIL]hdp_data_packat_delete: addr is %d, force to Delete? %d")
TRC_MSG(HDPUTILTHE_PACKET_CONTENT_IS_STILL_ALIVE, "[HDP][UTIL]The packet content is still alive")
TRC_MSG(HDPUTILHDP_DATA_PACKAT_LIST_REMOVE_BY_CHANNEL_MDL_ID_I, "[HDP][UTIL]hdp_data_packat_list_remove_by_channel: mdl id is %d")
TRC_MSG(PACKET_LIST_IS_EMPTY, "packet list is empty")
TRC_MSG(HDPUTILHDP_PACKET_IS_FOUND, "[HDP][UTIL]HDP packet is found")
TRC_MSG(HFGERR_CHANNEL_IS_SUSPENDED__DD, "[HFG][ERR] Channel is suspended - (%d,%d)")
TRC_MSG(HFGFLOW_REMOVE_AUDIO_CHANNEL__D, "[HFG][FLOW] Remove Audio channel : %d")
TRC_MSG(HFGFLOW_RFCOMM_ACCEPT_CHANNEL__D, "[HFG][FLOW] RFCOMM Accept Channel : %d")
TRC_MSG(HFGINFO_HFG_ACCEPT_CONNECT_OPEN_CHANNEL_FAILED_TRY_TO, "[HFG][INFO] hfg_accept_connect: Open channel failed. Try to reject the RF channel.")
TRC_MSG(HFGAT_SET_ONGOING_FLAG, "[HFG][AT] Set ongoing flag")
TRC_MSG(HFGAT_CLEAR_AT_FLAG, "[HFG][AT] Clear AT flag")
TRC_MSG(HFGAT_AUTO_OK_RESPONSE__YES, "[HFG][AT] Auto OK response : Yes")
TRC_MSG(HFGAT_SET_AUTO_OK_FLAG, "[HFG][AT] Set auto OK flag")
TRC_MSG(HFGAT_AUTO_OK_RESPONSE__NO, "[HFG][AT] Auto OK response : No")
TRC_MSG(DB_HFGINITSDPDB, "[DB] HfgInitSDPDB")
TRC_MSG(DB_OPEN_HFG_DB_FAILED, "[DB] open HFG DB failed")
TRC_MSG(DB_OPEN_HSG_DB_FAILED, "[DB] open HSG DB failed")
TRC_MSG(DB_HFGCLOSESDPDB, "[DB] HfgCloseSDPDB")
TRC_MSG(DB_CLOSE_HFG_DB_FAILED, "[DB] close HFG DB failed")
TRC_MSG(DB_HFGADDSDPRECORD, "[DB] HfgAddSDPRecord")
TRC_MSG(DB_CHANNELU_VERSION0XX_FEATURE0XX, "[DB] channel=%u, version=0x%x, feature=0x%x")
TRC_MSG(DB_HFGADDSDPRECORD_FAILED, "[DB] HfgAddSDPRecord failed")
TRC_MSG(DB_DDB_FLUSHDB_FAILED, "[DB] DDB_FlushDB failed")
TRC_MSG(DB_HFGFINDSDPRECORD, "[DB] HfgFindSDPRecord")
TRC_MSG(DB_RECORD_FIND__CHANNELU_VERSION0XX_FEATURE0XX, "[DB] record find : channel=%u, version=0x%x, feature=0x%x")
TRC_MSG(DB_HFGDELSDPRECORD, "[DB] HfgDelSDPRecord")
TRC_MSG(DB_HFG_RECORD_DELETED, "[DB] HFG record deleted")
TRC_MSG(DB_HSG_RECORD_DELETED, "[DB] HSG record deleted")
TRC_MSG(HFGFLOW_FIND_SDP_RECORD_USE_CACHED_RECORD, "[HFG][FLOW] Find SDP record. Use cached record")
TRC_MSG(HFGFLOW_CACHE_TYPEU_START_SDP_QUERY, "[HFG][FLOW] cache type=%u. Start SDP query")
TRC_MSG(HFGFLOW_START_SDP_QUERY__D, "[HFG][FLOW] Start SDP query : %d")
TRC_MSG(HFGEVENT_SDP_CALLBACK__AID_PROTOCOL_DESC_LIST_SERVER_, "[HFG][EVENT] SDP callback : AID_PROTOCOL_DESC_LIST, server channel=%d")
TRC_MSG(HFGEVENT_SDP_CALLBACK__AID_BT_PROFILE_DESC_LIST_VERSI, "[HFG][EVENT] SDP callback : AID_BT_PROFILE_DESC_LIST, version=0x%X")
TRC_MSG(HFGEVENT_SDP_CALLBACK__AID_SUPPORTED_FEATURES_HF_FEAT, "[HFG][EVENT] SDP callback : AID_SUPPORTED_FEATURES, HF features=0x%X")
TRC_MSG(HFGEVENT_SDP_CALLBACK__BT_STATUS_CONNECTION_FAILED, "[HFG][EVENT] SDP callback : BT_STATUS_CONNECTION_FAILED")
TRC_MSG(HFGEVENT_SDP_CALLBACK__BT_STATUS_FAILED, "[HFG][EVENT] SDP callback : BT_STATUS_FAILED")
TRC_MSG(HFGEVENT_SDP_CALLBACK__BT_STATUS_NOSERVICES, "[HFG][EVENT] SDP callback : BT_STATUS_NOSERVICES")
TRC_MSG(HFGEVENT_SDP_CALLBACK__UNKNOWN_RESULT__D, "[HFG][EVENT] SDP callback : unknown result : %d")
TRC_MSG(HFGADDSDPRECORD_FAILED, "HfgAddSDPRecord failed")
TRC_MSG(HFGAPI_HFGPACKETHLDR_DEFINE_USE_EXT_AT_PARSER_EVENT, "[HFG][API] HfgPacketHldr (define USE_EXT_AT_PARSER): Event=%d.")
TRC_MSG(HFGINFO_HFGPACKETHLDR_EVENT_AT_DATA_CASE_PARMSTYPE, "[HFG][INFO] HfgPacketHldr: EVENT_AT_DATA case, Parms->type=%d.")
TRC_MSG(HFGFLOW_ATBRSF_IS_NOT_RECEIVED, "[HFG][FLOW] AT+BRSF is not received")
TRC_MSG(HFGINFO_HFGPACKETHLDR_UNEXPECTED_CASE_IN_AT_INDICATOR, "[HFG][INFO] HfgPacketHldr: Unexpected case in (AT_INDICATORS | AT_READ).")
TRC_MSG(HFGINFO_HFGPACKETHLDR_EVENT_RF_PACKET_SENT_CASE, "[HFG][INFO] HfgPacketHldr: EVENT_RF_PACKET_SENT case.")
TRC_MSG(HFGAPI_HFGPACKETHLDR_NOT_DEFINE_USE_EXT_AT_PARSER_EV, "[HFG][API] HfgPacketHldr (not define USE_EXT_AT_PARSER): Event=%d.")
TRC_MSG(HFGFLOW_NEGOTIATION_DONE, "[HFG][FLOW] Negotiation done")
TRC_MSG(HFGFLOW_NEGOTIATION_DONE_IN_STATE_HFG_SUBSTATE_OPEN_W4S, "[HFG][FLOW] Negotiation done in state HFG_SUBSTATE_OPEN_W4SDP")
TRC_MSG(HFGINFO_HFGPACKETHLDR_UNEXPECTED_STATE_D_WHEN_SLC_I, "[HFG][INFO] HfgPacketHldr: Unexpected state (%d) when SLC is up.")
TRC_MSG(HFGINFO_HFGPACKETHLDR_UNSUPPORTED_CASE, "[HFG][INFO] HfgPacketHldr: Unsupported case.")
TRC_MSG(HFGEVENT_RFCOMM_EVENT__RFEVENT_OPEN_IND, "[HFG][EVENT] RFCOMM Event : RFEVENT_OPEN_IND.")
TRC_MSG(HFGINFO_HFGRFCALLBACK_ONLY_IN_CLOSED_THE_SERVER_CHANN, "[HFG][INFO] HfgRfCallback: Only in Closed, the server channel is registered.")
TRC_MSG(HFGINFO_HFGRFCALLBACK_RFEVENT_OPEN_IND_HFP_SHALL_NEVE, "[HFG][INFO] HfgRfCallback: RFEVENT_OPEN_IND: HFP shall never get into this case.")
TRC_MSG(HFGERR_UNEXPECTED_SUBSTATE0XX__DD, "[HFG][ERR] Unexpected substate=0x%X - (%d,%d)")
TRC_MSG(HFGINFO_HFGRFCALLBACK_RFCOMM_HF_CONNECTION_ESTABLISHED, "[HFG][INFO] HfgRfCallback: RFCOMM HF connection established.")
TRC_MSG(HFGINFO_HFGRFCALLBACK_RFEVENT_OPEN_HFG_SHALL_NOT_GET_, "[HFG][INFO] HfgRfCallback: RFEVENT_OPEN: HFG shall not get into this case.")
TRC_MSG(HFGEVENT_RFCOMM_EVENT__RFEVENT_DATA_IND, "[HFG][EVENT] RFCOMM Event : RFEVENT_DATA_IND.")
TRC_MSG(HFGINFO_HFGRFCALLBACK_RFCOMM_HF_DATA_RECEIVED, "[HFG][INFO] HfgRfCallback: RFCOMM HF data received.")
TRC_MSG(HFGAT_REMAIN_DATA__0_REMAIN_LEND, "[HFG][AT] Remain data > 0. Remain len=%d")
TRC_MSG(HFGEVENT_RFCOMM_EVENT__RFEVENT_PACKET_HANDLED_STATUS, "[HFG][EVENT] RFCOMM Event : RFEVENT_PACKET_HANDLED, Status=%d")
TRC_MSG(HFGAT_RFEVENT_PACKET_HANDLED__FAIL, "[HFG][AT] RFEVENT_PACKET_HANDLED : Fail")
TRC_MSG(HFGAT_RSPQUEUE_EMPTY__YES, "[HFG][AT] rspQueue empty : Yes")
TRC_MSG(HFGAT_RSPQUEUE_EMPTY__NO, "[HFG][AT] rspQueue empty : No")
TRC_MSG(HFGINFO_HFGRFCALLBACK_RFEVENT_PACKET_HANDLED_NO_HFG_C, "[HFG][INFO] HfgRfCallback: RFEVENT_PACKET_HANDLED: No HFG channel.")
TRC_MSG(HFGEVENT_RFCOMM_EVENT__RFEVENT_CLOSED, "[HFG][EVENT] RFCOMM Event : RFEVENT_CLOSED")
TRC_MSG(HFGEVENT_RFCOMM_IGNORE_OTHER_EVENTS__D, "[HFG][EVENT] RFCOMM ignore other events : %d")
TRC_MSG(HFGEVENT_CMGR_EVENT__CMEVENT_DATA_LINK_CON_CNF_STATUS, "[HFG][EVENT] CMGR Event : CMEVENT_DATA_LINK_CON_CNF, Status=%d.")
TRC_MSG(HFGEVENT_UNEXPECTED_CMEVENT_DATA_LINK_DIS_OF_ADDRESS__, "[HFG][EVENT] Unexpected CMEVENT_DATA_LINK_DIS of address : %x:%x:%x:%x:%x:%x")
TRC_MSG(HFGEVENT_CMGR_EVENT__CMEVENT_DATA_LINK_DIS_STATUSD, "[HFG][EVENT] CMGR Event : CMEVENT_DATA_LINK_DIS, Status=%d.")
TRC_MSG(HFGEVENT_CMGR_EVENT__CMEVENT_AUDIO_LINK_CON_STATUSD, "[HFG][EVENT] CMGR Event : CMEVENT_AUDIO_LINK_CON, Status=%d.")
TRC_MSG(HFGEVENT_CMGR_EVENT__CMEVENT_AUDIO_LINK_DIS_STATUSD, "[HFG][EVENT] CMGR Event : CMEVENT_AUDIO_LINK_DIS, Status=%d.")
TRC_MSG(HFGEVENT_CMGR_EVENT__CMEVENT_AUDIO_DATA_STATUSD, "[HFG][EVENT] CMGR Event : CMEVENT_AUDIO_DATA, Status=%d.")
TRC_MSG(HFGEVENT_CMGR_EVENT__CMEVENT_AUDIO_DATA_SENT_STATUS, "[HFG][EVENT] CMGR Event : CMEVENT_AUDIO_DATA_SENT, Status=%d.")
TRC_MSG(HFGFLOW_REGISTER_SCO_HANDLER__D, "[HFG][FLOW] Register SCO handler : %d")
TRC_MSG(HFGFLOW_REGISTER_SERVER_CHANNEL__D, "[HFG][FLOW] Register server channel : %d")
TRC_MSG(HFGFLOW_DEREGISTER_SERVER_CHANNEL__D, "[HFG][FLOW] Deregister server channel : %d")
TRC_MSG(HFGFLOW_FLUSH_RESPONSE_QUEUE__FLUSH_D_ENTRY, "[HFG][FLOW] Flush response queue : flush %d entry")
TRC_MSG(HFGFLOW_DISCONNECTING__SUBSTATE0XX, "[HFG][FLOW] Disconnecting : substate=0x%X")
TRC_MSG(HFGFLOW_SUBSTATE_IS_NOT_DISC, "[HFG][FLOW] Substate is not DISC.")
TRC_MSG(HFGAT_CMD_LEN__HFG_RECV_BUFFER_SIZE, "[HFG][AT] CMD len > HFG_RECV_BUFFER_SIZE.")
TRC_MSG(HFGAT_COMPLETE_CMD, "[HFG][AT] Complete CMD")
TRC_MSG(HFGCALLBACK_EVENTD_STATUSD_DATA0XX_ERRCODED, "[HFG][CALLBACK] Event=%d, Status=%d, data=0x%X, errCode=%d")
TRC_MSG(HFGAT_REMOVE_RSPQUEUE, "[HFG][AT] Remove rspQueue.")
TRC_MSG(HFGAT_CALLBACK_TO_ADP__CMDD, "[HFG][AT] Callback to ADP : CMD=%d")
TRC_MSG(HFGAT_SELF_HANDLED_FLAG_SET__YES, "[HFG][AT] Self handled flag set : Yes")
TRC_MSG(HFGAT_SELF_HANDLED_FLAG_SET__NO, "[HFG][AT] Self handled flag set : No")
TRC_MSG(HFGINFO_HFGSETUPINDICATORTESTRSP_ADD_D_INDICATORS, "[HFG][INFO] HfgSetupIndicatorTestRsp Add %d indicators")
TRC_MSG(HFGFLOW_DISASSOCIATE_ACL_LINK__D, "[HFG][FLOW] Disassociate ACL link : %d")
TRC_MSG(HFGINFO_HFGFINDREGISTEREDCHANNEL_RFCHANNEL0XX, "[HFG][INFO] HfgFindRegisteredChannel +RfChannel=0x%X")
TRC_MSG(HFGINFO_HFGFINDREGISTEREDCHANNEL__RETURN_HFGCHANNEL0X, "[HFG][INFO] HfgFindRegisteredChannel - return HfgChannel=0x%X")
TRC_MSG(HFGINFO__HFGENABLESNIFFTIMERMODE, "[HFG][INFO] + HfgEnableSniffTimerMode.")
TRC_MSG(HFGINFO__HFGDISABLESNIFFTIMERMODE, "[HFG][INFO] + HfgDisableSniffTimerMode.")
TRC_MSG(HFGINFO_HFGCHECKNEGOTIATEDONE, "[HFG][INFO] HfgCheckNegotiateDone")
TRC_MSG(HFGFLOW_OPEN_RFCOMM_CHANNEL__D, "[HFG][FLOW] Open RFCOMM channel : %d")
TRC_MSG(HFGINFO_HFGCLEARAVAILCODEC, "[HFG][INFO] HfgClearAvailCodec")
TRC_MSG(HFGINFO_HFGADDCODECRETRYCOUNT_CODECRETRYCOUNTD, "[HFG][INFO] HfgAddCodecRetryCount: codecRetryCount=%d")
TRC_MSG(HFGINFO_HFGRESETCODECRETRYCOUNT, "[HFG][INFO] HfgResetCodecRetryCount")
TRC_MSG(HFGINFO_HFGCODECNEGOTIATION, "[HFG][INFO] HfgCodecNegotiation")
TRC_MSG(HFGWARN_REACH_MAX_RETRY_COUNT_D_FOR_CODEC_NEGOTIATIO, "[HFG][WARN] Reach max retry count (%d) for codec negotiation - (%d,%d)")
TRC_MSG(HFGALLOC, "+ HfgAlloc.")
TRC_MSG(HID_HOST_QUERY_DEVICE, "[HID] host query device...")
TRC_MSG(HID_HOST_QUERY_DEVICE_ONGOING, "[HID] host query device ongoing...")
TRC_MSG(HID_SERVICE_RECORD_ALREADY_OBTAINED, "[HID] service record already obtained!")
TRC_MSG(HIDADV_HIDSCANDEVICECALLBACK, "[HID][ADV] HidScanDeviceCallback")
TRC_MSG(HIDADV_HIDSCANDEVICECALLBACK_ADDRESS_02X02X02X02, "[HID][ADV] HidScanDeviceCallback Address %02x,%02x,%02x,%02x,%02x,%02x,")
TRC_MSG(HIDADV_HIDSCANDEVICECALLBACK_THE_SAME_ADDRESS_IN_TABLE, "[HID][ADV] HidScanDeviceCallback The same address in table")
TRC_MSG(HIDADV_HIDSCANDEVICECALLBACK_QUERY_SERVICE_STATUS_D, "[HID][ADV] HidScanDeviceCallback, query service status: %d")
TRC_MSG(HIDADVHIDSETWHITELIST_IDLESCANADVWHITELISTNOD, "[HID][ADV]HidSetWhiteList idLeScanAdv(whiteListNo):%d")
TRC_MSG(HIDADV_HIDSETWHITELIST_ADDRESS_02X02X02X02X02X, "[HID][ADV] HidSetWhiteList Address %02x,%02x,%02x,%02x,%02x,%02x,")
TRC_MSG(HIDADV_HIDSETWHITELIST_ADDRESS_IN_WL_02X02X02X02, "[HID][ADV] HidSetWhiteList Address in WL %02x,%02x,%02x,%02x,%02x,%02x,")
TRC_MSG(HIDADV_THE_SAME_ADDRESS_IN_TABLE, "[HID][ADV] The same address in table")
TRC_MSG(HIDADV_HIDREMOVEWHITELIST_IDLESCANADVWHITELISTNOD, "[HID][ADV] HidRemoveWhiteList idLeScanAdv(whiteListNo):%d")
TRC_MSG(HIDADV_HIDREMOVEWHITELIST_ADDRESS_IN_WL_02X02X02X, "[HID][ADV] HidRemoveWhiteList Address in WL %02x,%02x,%02x,%02x,%02x,%02x,")
TRC_MSG(HIDADV_HIDSCANADVINIT_SIZE_D, "[HID][ADV] HidScanAdvInit, size: %d")
TRC_MSG(HIDADV_SET_HIDSCANADVENABLE, "[HID][ADV] Set HidScanAdvEnable")
TRC_MSG(HIDADV_SET_HIDSCANADVDISABLE, "[HID][ADV] Set HidScanAdvDisable")
TRC_MSG(HID_INTERRUPT_DATA_LEN_D_REPORT_ID_D_REPORT_TYPE_, "[HID] interrupt data, len: %d, report id: %d, report type: %d, handle: %d, service instance: %d")
TRC_MSG(HID_INTERRUPT_DATA_REPORT_X, "[HID] interrupt data, report: %x")
TRC_MSG(HID_UNEXPECTED_GATT_CONNECTION, "[HID] unexpected GATT connection!")
TRC_MSG(CHANNELFLASG02X, "Channel->flasg:%02x")
TRC_MSG(HIDSTARTGATTSERVICEQUERY_STATUS_D, "HidStartGattServiceQuery status: %d")
TRC_MSG(HID_HIDWRITEWITHOUTRESPONSECALLBACK_REQUEST_D, "[HID] HidWriteWithoutResponseCallback, request: %d")
TRC_MSG(HID_GATT_WRITE_DONE_COUNT_D, "[HID] GATT Write done, count: %d")
TRC_MSG(HID_DESCRIPTOR_LEN_D, "[HID] descriptor len, %d")
TRC_MSG(HID_DESCRIPTOR_FROM_GATT_X_X_X_X_X, "[HID] descriptor from gatt, %x, %x, %x, %x, %x")
TRC_MSG(HID_REMOTEWAKEUP_D_NORMCONN_D, "[HID] remoteWakeup: %d, normConn: %d")
TRC_MSG(HID_BATTERY_POWER_STATE_D_LEN_D, "[HID] Battery power state: %d, len: %d")
TRC_MSG(HID_MORE_HID_INSTANCES_CONTINUE_TO_QUERY, "[HID] more hid instances, continue to query...")
TRC_MSG(HID_QUERY_RESULT_D, "[HID] query result: %d")
TRC_MSG(HID_HIDSTARTGATTSERVICEQUERY, "[HID] HidStartGattServiceQuery...")
TRC_MSG(HID_IT_IS_FIRST_TIME_QUERY_NEED_TO_QUERY_ALL, "[HID] It is first time query, need to query all!")
TRC_MSG(HID_SERVICE_X_NOT_SUPPORTED_ON_REMOTE_SKIP_IT, "[HID] service %x not supported on remote, skip it...")
TRC_MSG(HID_MORE_THAN_ONE_INSTANCE_UUID_X, "[HID] More than one instance, uuid: %x")
TRC_MSG(HID_QUERY_SERVICE_COUNT_D, "[HID] query service count: %d")
TRC_MSG(HIDHID_TRANS_SET_REPORT_REPORTIDD_REPORTTYPED_SERV, "[HID]HID_TRANS_SET_REPORT: reportId=%d, reportType=%d, serviceInstance=%d")
TRC_MSG(HID_GATTCLIENTCONNECT_RET_D, "[HID] GattClientConnect ret: %d")
TRC_MSG(HTP_HTP_OPEN_CHANNEL_X_HANDLER_X, "[HTP] htp open, channel: %x, handler: %x")
TRC_MSG(HTP_GET_CLIENT_CONFIG_HANDLE_0XX_D_D, "[HTP] get client config, handle, 0x%x, %d, %d")
TRC_MSG(HTP_FIND_DESCRIPTOR_RESULT_HANDLE_0XX_PARAM_HANDLE_0, "[HTP] find descriptor, result handle: 0x%x, param handle: 0x%x")
TRC_MSG(HTP_FIND_DESCRIPTOR_CHAR__0XX, "[HTP] find descriptor, char : 0x%x")
TRC_MSG(HTPCHANDLEREADAUTHENCATIONFAILED_RETRY_COUNTD, "HtpcHandleReadAuthencationFailed retry count:%d")
TRC_MSG(HTP_READ_CHARACTERISTIC_DESCRIPTOR_ERROR_HANDLE, "[HTP] read characteristic descriptor error handle!")
TRC_MSG(HTP_WRITE_CHARACTERISTIC_DESCRIPTOR_ERROR_HANDLE, "[HTP] write characteristic descriptor error handle!")
TRC_MSG(HTP_HANDLE_NOTIFICAITON_CALLBACK_HANDLE_0XX_, "[HTP] handle notificaiton callback, handle: 0x%x ")
TRC_MSG(HTP_TEMPERATURE_INDICATION_0XX_0XX_0XX_0XX, "[HTP] temperature indication, 0x%x, 0x%x, 0x%x, 0x%x")
TRC_MSG(HTP_GET_PACKET_X, "[HTP] get packet: %x")
TRC_MSG(HTP_RELEASE_PACKET_X, "[HTP] release packet: %x")
TRC_MSG(HTP_WRITE_SERVICE_DATABASE_TO_FILE_SIZE_D, "[HTP] write service database to file, size: %d")
TRC_MSG(HTP_START_HANDLE_D_END_HANDLE_D, "[HTP] start handle: %d, end handle: %d")
TRC_MSG(HTP_READ_SERVICE_DB_SIZE_D_FEATURE_0XX, "[HTP] read service db, size: %d, feature: 0x%x")
TRC_MSG(HTP_POS_START_D, "[HTP] pos start: %d")
TRC_MSG(HTP_POS_CURRENT_D, "[HTP] pos current: %d")
TRC_MSG(HTP_POS_START_D_POS_END_D_FILE_END_D, "[HTP] pos start: %d, pos end: %d, file end: %d")
TRC_MSG(JSR82JSR82_SESSION_PUTBYTES, "[JSR82]jsr82_session_PutBytes")
TRC_MSG(JSR82_JSR82_SESSION_FETCHTXPACKET_D, "[JSR82] jsr82_session_fetchTxPacket %d")
TRC_MSG(JSR82_JSR82_SESSION_RETURNTXPACKET_D, "[JSR82] jsr82_session_returnTxPacket %d")
TRC_MSG(JSR82_INVALID_ADDRESS_D, "[JSR82] invalid address %d")
TRC_MSG(JSR82JSR82SDPQUERYCALLBACK_RESULTD_ATTR_IDD, "[JSR82]Jsr82SdpQueryCallback result[%d], attr id[%d]")
TRC_MSG(JSR82SDP_NO_CHANNEL_CONTEXT_FOR_THIS_QUERY_CALLBACK, "[JSR82][SDP] no channel context for this query callback")
TRC_MSG(JSR82SDPINVALID_ATTRIBUTE, "[JSR82][SDP]invalid attribute")
TRC_MSG(JSR82JSR82_SDP, "[JSR82]jsr82_sdp")
TRC_MSG(JSR82SDP_FAILED_D, "[JSR82][SDP] failed %d")
TRC_MSG(JSR82BT_JSR82_RFCOMM_CONNECT, "[JSR82]bt_jsr82_rfcomm_connect")
TRC_MSG(JSR82INVALID_SESSION_CONTEXT, "[JSR82]invalid session context")
TRC_MSG(JSR82INVALID_CHANNLE_NUMBER_X, "[JSR82]invalid channle number %x")
TRC_MSG(JSR82BT_JSR82_RFCOMM_CLOSED_CONTEXT_ADDR_IS_X, "[JSR82]bt_jsr82_Rfcomm_closed, context addr is %x")
TRC_MSG(JSR82_CONTEXT_ADDR_IS_X, "[JSR82] context addr is %x")
TRC_MSG(JSR82_BT_IS_POWERING_OFF_OR_POWER_OFF_OR_NO_ANY_DATA_IN_B, "[JSR82] bt is powering off or power off or no any data in buffer(tx/rx)")
TRC_MSG(JSR82_SESSION_BUFFER_P_SESSION_P_UUIDXX, "[JSR82] session buffer [%p], session [%p], uuid[%x][%x]")
TRC_MSG(JSR82SESSION_BUFFER_IS_NULL, "[JSR82]session buffer is NULL")
TRC_MSG(JSR82NO_CHANNEL_IS_AVAILABLE, "[JSR82]no channel is available")
TRC_MSG(JSR82CMGR_CREATEDATALINK_D, "[JSR82]CMGR_CreateDataLink %d")
TRC_MSG(JSR82_RF_SEND_STATUS_D, "[JSR82] RF send status %d")
TRC_MSG(MAPERR_NO_AVAILABLE_SERVER_RESOURCE_TO_REGISTER, "[MAP]Err: no available server resource to register")
TRC_MSG(MAPS_MNS_REGISTER_CLIENT_GOEP_REGISTERCLIENT_STATUSD, "maps_mns_register_client GOEP_RegisterClient status:%d")
TRC_MSG(OBEX_RESPONSE0XX, "[OBEX:] response:0x%x")
TRC_MSG(OBEX_IGNORE_ABORT_RSP_NOT_FINALBIT_, "[OBEX:] ignore abort_rsp not final-bit ")
TRC_MSG(OBEXTIMERWRN_OBEX_CLIENTREQUESTTIMEOUT_THE_HF_PARAM_I, "[OBEX][TIMER][WRN] OBEX_ClientRequestTimeout the hf_param is NULL !")
TRC_MSG(OBEX_OBPRXLEND_OBPHEADERLEND_OBPCURPACKETLEND, "OBEX: obp->rxLen:%d obp->headerLen:%d obp->curPacketLen:%d")
TRC_MSG(OBEX_SERVER_FLUSH_, "[OBEX] server flush +")
TRC_MSG(HIGHSPEED_CHECK_NO_A2MPCONN, "highspeed check. No a2mpConn")
TRC_MSG(HIGHSPEED_CHECK_A2MPCONNSTATED_LOCALCTRIDD_PHYIDD, "highspeed check. a2mpConn.state:%d localctrid:%d phyid:%d")
TRC_MSG(HIGHSPEED_CHECK_HIGHSPEED_IT_ALREADY_EXISTED_CHANGE_IT, "highspeed check. highspeed it already existed! change it")
TRC_MSG(OBEX_REMOTE_HS_ALREADY_EXIST_CHANGE_TO_USE_RFCOMM, "OBEX: remote hs already exist. change to use rfcomm")
TRC_MSG(OBEX_STATUS_IS_OK_INVOKE_DISCONECT_CLIENT_LINK, "OBEX: status is ok. invoke disconect client link")
TRC_MSG(OBEX_SEC_LOW, "obex: SEC_LOW")
TRC_MSG(TEST_OBEX_RFCOMM_PACKET_TIMER_DURD, "test: OBEX_RFCOMM_PACKET_TIMER_DUR:%d")
TRC_MSG(OBEX_L2CHANNELIDD_FLUSHNUMD, "obex: l2ChannelId:%d flushnum:%d")
TRC_MSG(OBEX_FLUSH_FAIL_CONNTYPED, "obex: flush fail! connType:%d")
TRC_MSG(OBEX_CUR_L2CHANNELID0XX, "[OBEX:] cur l2channelId:0x%x")
TRC_MSG(OBEXWRN_IGNORE_L2EVENT_DISC_FROM_CHANNEL_ID_0XX, "[OBEX:][Wrn] ignore l2event_disc from channel id 0x%x")
TRC_MSG(OBEXERR_SHOULD_NOT_USE_BASIC_MODE_, "[OBEX:][Err] Should not use basic mode !!!")
TRC_MSG(DLIGHT_L2EVENT_PACKET_HANDLED_OBEX_TX_COUNTD, "Dlight L2EVENT_PACKET_HANDLED OBEX_TX_COunt:%d")
TRC_MSG(DLIGHT_L2EVENT_PACKET_HANDLED_08X, "Dlight L2EVENT_PACKET_HANDLED %08x")
TRC_MSG(DLIGHT_RX_TEST_PACKET, "Dlight rx test packet")
TRC_MSG(LOCK_STEP_CONFIG_CREATE_LOGICAL_LINK_STATUSD, "Lock Step config create logical link status:%d")
TRC_MSG(OLDCTRIDD_REQCTRIDD, "oldctrid:%d reqctrid:%d")
TRC_MSG(MOVECHANNEL_SERVER_RETURN_IS_OLD, "movechannel server return IS_OLD")
TRC_MSG(MOVE_CHANNEL_RESPONSED, "Move channel response:%d")
TRC_MSG(IN_FLOW_SERVICE_TYPED, "in flow service type:%d")
TRC_MSG(MOVE_FAIL_RESULTD, "Move fail result:%d")
TRC_MSG(OBEXCLIENTTIMER1_TRY_TO_SEND_DATA, "obexclienttimer1 try to send data")
TRC_MSG(DLIGHT_OBEX_TX_COUNTD, "Dlight OBEX_TX_Count:%d")
TRC_MSG(DLIGHT_L2CAP_SENDDATA08X, "Dlight L2CAP_SendData:%08x")
TRC_MSG(DLIGHT_TX_FAILED, "Dlight tx failed")
TRC_MSG(START_TIMER, "start timer")
TRC_MSG(DLIGHT_OBEX_TX_COUNT1D, "Dlight OBEX_TX_Count1:%d")
TRC_MSG(DLIGHT_L2CAP_SENDDATA108X, "Dlight L2CAP_SendData1:%08x")
TRC_MSG(DATA_FLOW_IND_RX_BUFFER_SHALL_NOT_BE_EMPTY, "Data Flow ind, rx buffer shall not be empty")
TRC_MSG(MOVECHANNEL_CLIENT_RETURN_IS_OLD, "movechannel client return IS_OLD")
TRC_MSG(OBEX_CHECK_THE_CLIENT_STATD, "obex check the client stat:%d")
TRC_MSG(OBEX_SDP_SUPPORTED_FORMAT_ATTRIBUTE_VALUE00XX_ATT, "[OBEX]-- SDP supported format: attribute_value[0]=0x%x, attribute_value[1]=0x%x")
TRC_MSG(FATAL_ERROR_UNABLE_TO_BIND_THE_CLIENT_TO_THE_PROTOCOL_STAC, "Fatal Error: Unable to bind the client to the protocol stack\n")
TRC_MSG(FATAL_ERROR_UNABLE_TO_BIND_THE_SERVER_TO_THE_PROTOCOL_STAC, "Fatal Error: Unable to bind the server to the protocol stack\n")
TRC_MSG(OBEX_REMOTE_IRLAP_CONNECTION_IS_UP_LOOKING_FOR_OBEX_SERVI, "OBEX: Remote IrLAP connection is up. Looking for OBEX service.\n")
TRC_MSG(OBEX_IRLAP_CONNECTION_IS_UP_LOOKING_FOR_OBEX_SERVICE, "OBEX: IrLAP connection is up. Looking for OBEX service.\n")
TRC_MSG(OBEX_FOUND_AN_OBEX_DEVICE_STARTING_TINYTP_CONNECTION_TO_LS, "OBEX: Found an OBEX device starting TinyTP connection to Lsap %d.\n")
TRC_MSG(PANPAN_DO_ROLE_SWITCH, "[PAN]Pan do role switch")
TRC_MSG(PANPAN_SEND_PACKET_BNEP_TYPE_X, "[PAN]pan send packet bnep type: %x")
TRC_MSG(PANPAN_SEND_PACKET_BNEP_TYPE_2_X, "[PAN]pan send packet bnep type 2: %x")
TRC_MSG(PANPAN_FORWARD_BROADCAST_PACKET_PKT_X_EXTHDR_X, "[PAN]Pan forward broadcast packet pkt: %x exthdr: %x")
TRC_MSG(PANPAN_FORWARD_UNICAST_PACKET_PKT_X_EXTHDR_X, "[PAN]Pan forward unicast packet pkt: %x exthdr: %x")
TRC_MSG(PANPAN_FORWARD_STATUS_D, "[PAN]Pan forward status: %d")
TRC_MSG(PAN_RECEIVED_BNEPEVENT_OPEN_EVENT, "[PAN] Received BNEPEVENT_OPEN event")
TRC_MSG(PAN_L2CAP_ASSIGNED_CHANNEL_ID_04X, "[PAN] L2CAP Assigned Channel ID %04x.")
TRC_MSG(PAN_RECEIVED_BNEPEVENT_OPEN_IND_EVENT, "[PAN] Received BNEPEVENT_OPEN_IND event")
TRC_MSG(PAN_ON_L2CAP_CHANNEL_04X, "[PAN] on L2CAP Channel %04x.")
TRC_MSG(PAN_RECEIVED_BNEPEVENT_CLOSED_EVENT_WITH_STATUS_D, "[PAN] Received BNEPEVENT_CLOSED event with status %d")
TRC_MSG(PAN_RECEIVED_BNEPEVENT_PACKET_HANDLED_EVENT_X, "[PAN] received BNEPEVENT_PACKET_HANDLED event %x")
TRC_MSG(PANPAN_PACKET_HANDLED_PKT_X, "[PAN]Pan packet handled pkt: %x")
TRC_MSG(PAN_RECEIVED_BNEPEVENT_CONTROL_TIMEOUT_EVENT, "[PAN] Received BNEPEVENT_CONTROL_TIMEOUT event")
TRC_MSG(PAN_RECEIVED_BNEP_CONTROL_EXTENSION_HEADER_TYPE_D, "[PAN] Received BNEP Control Extension Header type %d")
TRC_MSG(PAN_RECEIVED_UNKNOWN_EXTENSION_HEADER_D_WITH_STATUS_D, "[PAN] Received Unknown Extension Header %d with status %d")
TRC_MSG(PAN_RECEIVED_UNKNOWN_EVENT_D_WITH_STATUS_D, "[PAN] Received Unknown Event %d with status %d")
TRC_MSG(PAN_RECEIVED_BNEP_GENERAL_ETHERNET_PACKET_LENGTH_D, "[PAN] Received BNEP_GENERAL_ETHERNET packet length %d")
TRC_MSG(PANPAN_HANDLE_PACKET_EXTENSION_HEADER_LEN_D, "[PAN]Pan handle packet extension header len: %d")
TRC_MSG(PANPAN_DROP_THE_PACKET_DIRECTLY, "[PAN]Pan drop the packet directly.")
TRC_MSG(PANPAN_FORWARD_ETHERNET_PACKET, "[PAN]Pan forward ethernet packet.")
TRC_MSG(PAN_RECEIVED_NET_TYPE_FILTER_LIST_LENGTH_D, "[PAN] Received net type filter list length: %d")
TRC_MSG(PAN_RECEIVED_NET_TYPE_FILTER_START_D_END_D, "[PAN] Received net type filter start: %d end: %d")
TRC_MSG(PAN_RECEIVED_MULTICAST_ADDRESS_FILTER_LIST_LENGTH_D, "[PAN] Received multicast address filter list length: %d")
TRC_MSG(PAN_SETUPCONNECTION_FAILED_D, "[PAN] SetupConnection failed: %d")
TRC_MSG(PAN_RECEIVED_CONTROL_COMMAND_NOT_UNDERSTOOD_IGNORE_IT, "[PAN] Received control command not understood ignore it...")
TRC_MSG(PAN_RECEIVED_UNRECOGNIZED_PACKET_TYPE_D, "[PAN] Received unrecognized packet type %d")
TRC_MSG(PANPAN_FIND_IP_ADDR_X, "[PAN]pan find ip addr: %x")
TRC_MSG(PANPAN_MULTICAST_CMP_ADDRESS_START_X_X_X_X_X_X, "[PAN]Pan multicast cmp address start: %x %x %x %x %x %x")
TRC_MSG(PANPAN_MULTICAST_CMP_ADDRESS_END_X_X_X_X_X_X, "[PAN]Pan multicast cmp address end: %x %x %x %x %x %x")
TRC_MSG(PANPAN_MULTICAST_CMP_ADDRESS_DST_X_X_X_X_X_X, "[PAN]Pan multicast cmp address dst: %x %x %x %x %x %x")
TRC_MSG(PAN_PAN_MULTIADDR_COMPARE_EQUAL_TO_START_RANGE, "[PAN] pan multiaddr compare equal to start range")
TRC_MSG(PAN_PAN_MULTIADDR_COMPARE_EQUAL_TO_END_RANGE, "[PAN] pan multiaddr compare equal to end range")
TRC_MSG(PAN_PAN_MULTIADDR_COMPARE_ERROR_ENTERING, "[PAN] pan multiaddr compare, error entering...")
TRC_MSG(PANPAN_CHECK_MULTICAST_FILTER, "[PAN]Pan check multicast filter")
TRC_MSG(PANPAN_CHECK_1ST_FILTER_DATABASE_NETTYPE_LD, "[PAN]Pan check 1st filter database nettype: %d")
TRC_MSG(PANPAN_CHECK_2ST_FILTER_DATABASE, "[PAN]Pan check 2st filter database.")
TRC_MSG(PBAPPBAP_PROFILE_ALREADY_INITIALIZED, "[PBAP]PBAP Profile already initialized\n")
TRC_MSG(PBAPPBAP_PROFILE_INITIAL_FAILED, "[PBAP]PBAP Profile Initial FAILED")
TRC_MSG(PBAPPBAP_REGISTERED_ON_GOEP, "[PBAP]PBAP Registered On GOEP")
TRC_MSG(PBAPPBAP_DEREGISTERED_ON_GOEP, "[PBAP]PBAP Deregistered On GOEP")
TRC_MSG(PBAPPBAP_SERVER_ABORT, "[PBAP]PBAP Server Abort")
TRC_MSG(PBAPPBAP_SERVER_NOT_FOUND, "[PBAP]PBAP Server Not Found")
TRC_MSG(PBAP_OUT_OF_BOUNDARY_OF_SERVERAPPPARMS, "[PBAP] out of boundary of server->appParms")
TRC_MSG(PRX_CHECK_G_PRX_REPORTERLIST_INITD, "[PRX:] check g_prx_reporterlist_init:%d")
TRC_MSG(PRXINFO_PRX_GET_PACKET_0XX, "[PRX][INFO] prx_get_packet 0x%x")
TRC_MSG(PRXERR_PRX_GET_PACKET_LIST_IS_EMPTY, "[PRX][ERR] prx_get_packet list is empty!")
TRC_MSG(PRXERR_PRX_RETURN_PACKET_FAILED, "[PRX][ERR] prx_return_packet failed")
TRC_MSG(PRXINFO_PRX_RETURN_PACKET_0XX, "[PRX][INFO] prx_return_packet 0x%x")
TRC_MSG(PRXINFO_PRX_ATT_REGISTER_CHANNELDATA_0XX_REGFLAG_0XX, "[PRX][INFO] prx_att_register channeldata 0x%x regFlag 0x%x")
TRC_MSG(PRXINFO_CMGR_REGISTERHANDLER_STATUS_D, "[PRX][INFO] CMGR_RegisterHandler status %d")
TRC_MSG(PRX_INITIALIZELISTHEAD_REPORTERLIST, "[PRX:] InitializeListHead reporterlist")
TRC_MSG(PRXINFO_INSERTTAILLIST_0XX_TO_REPORTLIST, "[PRX][INFO] InsertTailList 0x%x to reportlist")
TRC_MSG(PRXINFO_PRX_ATT_DEREGISTER_CHANNEL_0XX, "[PRX][INFO] prx_att_deregister channel 0x%x")
TRC_MSG(PRXINFO_CMGR_DEREGISTERHANDLER_STATUSD, "[PRX][INFO] CMGR_DeregisterHandler status:%d")
TRC_MSG(PRXINFO_REMOVEENTRYLIST_0XX_FROM_REPORTLIST, "[PRX][INFO] RemoveentryList 0x%x from reportlist")
TRC_MSG(PRXINFO_PRX_ATT_SENDPACKET_CHNLID_D_PACKET_0XX, "[PRX][INFO] prx_att_sendpacket chnlId %d packet 0x%x")
TRC_MSG(PRXINFO_PRX_ATT_REJECTINCOMING_ID_D_, "[PRX][INFO] prx_att_rejectincoming id %d ")
TRC_MSG(PRXINFO_GATTDISCONNECT_STATUS_D, "[PRX][INFO] GattDisconnect status %d")
TRC_MSG(PRXINFO_CMGR_REMOVEDATALINK_STATUS_D, "[PRX][INFO] CMGR_RemoveDataLink status %d")
TRC_MSG(PRXINFO_PRX_ATT_DISCONNECT_ID_D_REGFLAG_0XX, "[PRX][INFO] prx_att_disconnect id %d regFlag 0x%x")
TRC_MSG(PRXINFO_PRX_ATT_DISCONNECT_BY_MONITOR_ID_D_REGFLAG_0X, "[PRX][INFO] prx_att_disconnect_by_monitor id %d regFlag 0x%x")
TRC_MSG(PRXINFO_PRX_GET_RSSI_CHANNEL_0XX, "[PRX][INFO] prx_get_rssi channel 0x%x")
TRC_MSG(PRXINFO_PRX_GET_RSSI_STATUS_D, "[PRX][INFO] prx_get_rssi status %d")
TRC_MSG(PRXINFO_PRX_GET_LOCAL_TXPOWER_CHANNEL_0XX, "[PRX][INFO] prx_get_local_txpower channel 0x%x")
TRC_MSG(PRXINFO_PRXSERVERREADTXPOWER_STATUS_D, "[PRX][INFO] prxServerReadTxPower status %d")
TRC_MSG(PRXINFO_STATIC_MONITOR_REMOVECMGR_PRXMTRANPORT_0XX_LOS, "[PRX][INFO] static_monitor_removeCmgr PrxMTranport 0x%x lost %d regFlag 0x%x")
TRC_MSG(PRXINFO_CMGR_DEREGISTERHANDLER_STATUS_D, "[PRX][INFO] CMGR_DeregisterHandler status %d")
TRC_MSG(PRXINFO_STATIC_MONITOR_REMOVECMGR_LOST_D_REGFLAG0XX, "[PRX][INFO] static_monitor_removeCmgr lost %d regFlag:0x%x")
TRC_MSG(PRXINFO_PRXMCLIENTCMGRCONNECTIONCALLBACK_EVENT_D_STATU, "[PRX][INFO] prxmClientCmgrConnectionCallback event %d status %d state %d ")
TRC_MSG(PRXINFO_CMGR_IS_EQUAL_CONNECTED_0XX, "[PRX][INFO] CMGR is equal connected 0x%x")
TRC_MSG(PRXINFO_GOTO_PREPARE_CMGR_REMOVEDATALINK_0XX, "[PRX][INFO] goto prepare CMGR_RemoveDataLink 0x%x")
TRC_MSG(PRXINFO_ABORT_CONNECTION_STATUS_D, "[PRX][INFO] abort connection status %d")
TRC_MSG(PRXERR_CMEVENT_DATA_LINK_CON_CNF_STATE_D, "[PRX][ERR] CMEVENT_DATA_LINK_CON_CNF state %d")
TRC_MSG(PRXINFO_CMEVENT_DATA_LINK_DIS_HANDLER_0XX_STATE_D, "[PRX][INFO] CMEVENT_DATA_LINK_DIS handler 0x%x state %d")
TRC_MSG(PRXWRN_NO_FREE_REPORTERARRY_CELL, "[PRX:][WRN] No free reporterarry cell")
TRC_MSG(PRX_FREEIDXD, "[PRX:] freeidx:%d")
TRC_MSG(PRXWRN_NO_FREE_REPORTER_, "[PRX:][WRN] no free reporter ")
TRC_MSG(PRX_DIFFERENT_ADDRES, "[PRX:] different addres")
TRC_MSG(PRX_CANNOT_FIND_ASSIGNED_REPORTER, "[PRX:] cannot find assigned reporter")
TRC_MSG(PRX_IN_RELEASE_MONITOR_FIND_RELEASED_INDEX_D, "[PRX:] In release_monitor, find released index: %d")
TRC_MSG(PRX_IN_RELEASE_MONITOR_FIND_NO_INDEX_WANTED, "[PRX:] In release_monitor, find no index wanted")
TRC_MSG(PRX_IN_ASSIGN_MONITOR_FIND_FREE_INDEX_D, "[PRX:] In assign_monitor, find free index: %d")
TRC_MSG(PRX_IN_ASSIGN_MONITOR_FIND_NO_FREE_INDEX, "[PRX:] In assign_monitor, find no free index")
TRC_MSG(PRXIN_GET_MONITOR_BY_REMDEV_INVALID_BTREMOTEDEVICE, "[PRX:]In get_monitor_by_remdev, invalid BtRemoteDevice")
TRC_MSG(PRXIN_GET_MONITOR_BY_REMDEV_FIND_ASSIGNED_REPORTER_IN_IN, "[PRX:]In get_monitor_by_remdev find assigned reporter in index %d")
TRC_MSG(PRX_DIFFERENT_ADDRES_FIND_NEXT, "[PRX:] different addres. find next")
TRC_MSG(PRXIN_GET_MONITOR_BY_REMDEV_CANNOT_FIND_ASSIGNED_REPORTE, "[PRX:]In get_monitor_by_remdev cannot find assigned reporter")
TRC_MSG(PRXINFO_PRXRSERVERCMGRCONNECTIONCALLBACK_EVENT_D_STATU, "[PRX][INFO] prxrServerCmgrConnectionCallback event %d status %d")
TRC_MSG(PRX_IGNORE_REMOVEDATALINK_REGFLAG0XX, "[PRX:] ignore removeDatalink regFlag:0x%x")
TRC_MSG(PRX_PRXR_ATT_SERVERHANDLEDATAINCOMING_CHNL08X, "[PRX:] prxr_att_serverhandleDataIncoming chnl:%08x")
TRC_MSG(PRXINFO_PRX_ATT_CREATEDATALINK_CHANNEL_0XX, "[PRX][INFO] prx_att_createdatalink channel 0x%x")
TRC_MSG(PRXINFO_PRX_ATT_CREATEDATALINK_0XXXXXXX_REGFLAG_0, "[PRX][INFO] prx_att_createdatalink 0x%x%x%x%x%x%x regFlag 0x%x")
TRC_MSG(PRXINFO_CMGR_REGISTERHANDLER_0XX_STATUS_D, "[PRX][INFO] CMGR_RegisterHandler 0x%x status %d")
TRC_MSG(PRXINFO_CMGR_CREATEDATALINK_CMGR_HANDLE_0XX, "[PRX][INFO] CMGR_CreateDataLink cmgr_handle 0x%x")
TRC_MSG(PRXINFO_CMGR_DEREGISTERHANDLER_0XX, "[PRX][INFO] CMGR_DeregisterHandler 0x%x")
TRC_MSG(PRXINFO_PRX_ATT_CREATEDATALINK_STATUS_D_REGFLAG_0XX, "[PRX][INFO] prx_att_createdatalink status %d regFlag 0x%x")
TRC_MSG(PRXINFO_PRX_ATT_REMOVEDATALINK_CHANNEL_0XX_REGFLAG_0X, "[PRX][INFO] prx_att_removedatalink channel 0x%x regFlag 0x%x")
TRC_MSG(PRXINFO_CMGR_REMOVEDATALINK_0XX, "[PRX][INFO] CMGR_RemoveDataLink 0x%x")
TRC_MSG(PRXINFO_PRX_ATT_REMOVEDATALINK_STATUSD, "[PRX][INFO] prx_att_removedatalink status:%d")
TRC_MSG(PRX_PRXMQUERYSDPCALLBACK_RESULTD_INDEXD, "[PRX:] PrxmQuerySdpCallback result:%d index:%d")
TRC_MSG(PRXERR_TRANTYPE_IS_NOT_D, "[PRX:][ERR] trantype is not %d")
TRC_MSG(PRX_PRXMIASQUERYSDPCALLBACK_RESULTD_INDEXD, "[PRX] PrxmIASQuerySdpCallback result:%d index:%d")
TRC_MSG(PRX_PRXMTPSQUERYSDPCALLBACK_RESULTD_INDEXD, "[PRX] PrxmTPSQuerySdpCallback result:%d index:%d")
TRC_MSG(PRXINFO_PRX_ATT_QUERYSERVICE_CHANNEL_0XX, "[PRX][INFO] prx_att_queryservice channel 0x%x")
TRC_MSG(PRXINFO_PRX_ATT_STOPQUERYSERVICE_CHANNEL_0XX, "[PRX][INFO] prx_att_stopqueryservice channel 0x%x")
TRC_MSG(PRXINFO_PRX_ATT_CONNECTSERVICE_CHANNEL_0XX_REGFLAG_0X, "[PRX][INFO] prx_att_connectservice channel 0x%x regFlag 0x%x")
TRC_MSG(PRXINFO_GATTCLIENTCONNECT_STATUS_D, "[PRX][INFO] GattClientConnect status %d")
TRC_MSG(PRXERR_CHANNEL_HANDLER_REMDEV_IS_NULL__, "[PRX][ERR] channel handler remDev is NULL ! ")
TRC_MSG(PRXINFO_PRX_ATT_WRITELOCALVALUE_ID_D, "[PRX][INFO] prx_att_writelocalvalue id %d")
TRC_MSG(PRXERR_NULL_PARAMETER, "[PRX][ERR] NULL parameter")
TRC_MSG(PRXERR_PRX_BY_GATT_NOT_IMPLEMENT_YET_READLOCALVALUE_ID_, "[PRX][ERR] PRX_BY_GATT not implement yet readlocalvalue id %d type %d")
TRC_MSG(PRXINFO_PRX_ATT_READREMOTEVALUE_ID_D, "[PRX][INFO] prx_att_readremotevalue id %d")
TRC_MSG(PRXERR_PRX_ATT_READREMOTEVALUE_WRONG_TYPE_D, "[PRX][ERR] prx_att_readremotevalue wrong type %d")
TRC_MSG(PRX_RSSIDONE_REMDEV0XX_ERROR_CODED, "[PRX:] RSSIdone remDev:0x%x error code:%d")
TRC_MSG(PRX_CLIENT_READ_RSSIDONE_ERROR_CODED, "[PRX:] Client Read RSSIdone, error code:%d")
TRC_MSG(PRX_CLIENT_READ_RSSIDONE_REMDEVRSSID, "[PRX:] Client Read RSSIdone, remDev->rssi:%d")
TRC_MSG(PRX_SERVER_READ_TX_POWER_DONE_ERROR_CODED, "[PRX:] Server Read Tx Power done, error code:%d")
TRC_MSG(SERVER_READ_TX_POWER_DONE_REMDEVTXPOWER02X, "Server Read Tx Power done, remDev->txPower:%02x")
TRC_MSG(PRXINFO_PRX_ATT_READLOCALVALUE_ID_D, "[PRX][INFO] prx_att_readlocalvalue id %d")
TRC_MSG(PRXINFO_TRY_TO_READ_TX_POWER_ID_D_VALUE_D_STATUS_D, "[PRX][INFO] try to read tx power id %d value %d status %d")
TRC_MSG(PRXINFO_G_PRX_IMALERT_ID_D_VALUE_D, "[PRX][INFO] g_prx_imalert id %d value %d")
TRC_MSG(PRXERR_G_PRX_IMALERT_ID, "[PRX][ERR] g_prx_imalert i:%d")
TRC_MSG(PRXINFO_G_PRX_LOSSALERT_ID_D_VALUE_D, "[PRX][INFO] g_prx_lossalert id %d value %d")
TRC_MSG(PRXERR_G_PRX_IMALERT_ID_D, "[PRX][ERR] g_prx_imalert id %d")
TRC_MSG(PRXINFO_G_PRX_TXPOWER_ID_D_VALUE_D, "[PRX][INFO] g_prx_txpower id %d value %d")
TRC_MSG(PRXERR_WRONG_TYPE_PRX_ATT_WRITELOCALVALUE_ID_D_TYPE_D, "[PRX][ERR] wrong type prx_att_writelocalvalue id %d type %d")
TRC_MSG(PRXINFO_PRX_ATT_WRITEREMOTEVALUE_SEQID_D_ID_D_TYPE_D, "[PRX][INFO] prx_att_writeremotevalue seqid %d id %d type %d value %d")
TRC_MSG(PRXERR_PRX_ATT_WRITEREMOTEVALUE_WRONG_TYPE_D, "[PRX][ERR] prx_att_writeremotevalue wrong type %d")
TRC_MSG(PRXINFO_STATUS_D, "[PRX][INFO] status %d")
TRC_MSG(PRXINFO_BT_GATTAPPHANDLEDISCOVERYALLPRIMARYSERVICE_FLAG, "[PRX][INFO] BT_GATTAppHandleDiscoveryAllPrimaryService flag %d")
TRC_MSG(PRXINFO_CHANNEL_ADDRESS_08X, "[PRX][INFO] Channel address %08x")
TRC_MSG(PRXGATTSTARTHANDLED, "[PRX:][GATT]startHandle:%d")
TRC_MSG(PRXGATTENDHANDLED, "[PRX:][GATT]endHandle:%d")
TRC_MSG(PRXGATTTYPED, "[PRX:][GATT]type:%d")
TRC_MSG(PRXGATTUUID2D, "[PRX:][GATT]uuid2:%d")
TRC_MSG(GATTBT_GATTAPPHANDLEDISCOVERYALLPRIMARYSERVICE_BT_GATT_EV, "[GATT]BT_GATTAppHandleDiscoveryAllPrimaryService BT_GATT_EVENT_RESULT_DONE_COMPLETED success:%d")
TRC_MSG(PRX_STATUSD, "[PRX:] status:%d")
TRC_MSG(PRXGATTBT_GATTAPPHANDLEDISCOVERYCHARBYUUID, "[PRX:][GATT]BT_GATTAppHandleDiscoveryCharByUUID")
TRC_MSG(PRXGATTPTRFLAGD, "[PRX:][GATT]ptr->flag:%d")
TRC_MSG(CHANNEL_ADDRESS08X, "Channel address:%08x")
TRC_MSG(PRXGATTATTRIBUTEHANDLED, "[PRX:][GATT]attributeHandle:%d")
TRC_MSG(PRXGATTCHARPROPERTYD, "[PRX:][GATT]charProperty:%d")
TRC_MSG(PRXGATTCHARVALUEATTRIBUTEHANDLED, "[PRX:][GATT]charValueAttributeHandle:%d")
TRC_MSG(GATTBT_GATTAPPHANDLEDISCOVERYCHARBYUUID_BT_GATT_EVENT_RES, "[GATT]BT_GATTAppHandleDiscoveryCharByUUID BT_GATT_EVENT_RESULT_DONE_COMPLETED %d")
TRC_MSG(GATT_PRX_GATTREADCHARVALUE_STATUSD, "[GATT] prx_GattReadCharValue status:%d")
TRC_MSG(GATT_PRX_GATTWRITECHARVALUE_STATUSD, "[GATT] prx_GattWriteCharValue status:%d")
TRC_MSG(GATT_BT_GATT_WRITEWITHOUTRESPONSE_STATUSD, "[GATT] BT_GATT_WriteWithoutResponse status:%d")
TRC_MSG(PRXGATTBT_GATTAPPHANDLEREADCHARVALUE, "[PRX:][GATT]BT_GATTAppHandleReadCharValue")
TRC_MSG(PRXGATTLENGTHD, "[PRX:][GATT]length:%d")
TRC_MSG(PRXGATTBT_GATTAPPHANDLEREADCHARVALUE_BT_GATT_EVENT_RES, "[PRX:][GATT]BT_GATTAppHandleReadCharValue BT_GATT_EVENT_RESULT_DONE_COMPLETED")
TRC_MSG(PRXGATT_DATA0D, "[PRX:][GATT] data[0]:%d")
TRC_MSG(PRXGATT_DATA0D_DATA1D, "[PRX:][GATT] data[0]:%d data[1]:%d")
TRC_MSG(PRXGATTBT_GATT_EVENT_RESULT_ERROR, "[PRX:][GATT]BT_GATT_EVENT_RESULT_ERROR")
TRC_MSG(PRXGATTBT_GATT_EVENT_RESULT_DISCONNECT, "[PRX:][GATT]BT_GATT_EVENT_RESULT_DISCONNECT")
TRC_MSG(GATTBT_GATTAPPHANDLEWRITECHARVALUE, "[GATT]BT_GATTAppHandleWriteCharValue")
TRC_MSG(GATTPTRFLAGD, "[GATT]ptr->flag:%d")
TRC_MSG(PRXGATTFLAGD, "[PRX:][GATT]flag:%d")
TRC_MSG(PRXGATTBT_GATTAPPHANDLEWRITECHARVALUE_BT_GATT_EVENT_RE, "[PRX:][GATT]BT_GATTAppHandleWriteCharValue BT_GATT_EVENT_RESULT_DONE_COMPLETED")
TRC_MSG(GATTPRX_WRITECHARACTERISTICWITHOUTRESPONSE, "[GATT]prx_WriteCharacteristicWithoutResponse")
TRC_MSG(PRXGATTPRX_WRITECHARACTERISTICWITHOUTRESPONSE_BT_GATT_, "[PRX:][GATT]prx_WriteCharacteristicWithoutResponse BT_GATT_EVENT_RESULT_DONE_COMPLETED")
TRC_MSG(PRXGATTPRXGATTAPCALLBACK_WITH_EVENTD, "[PRX:][GATT]prxGattAPCallBack with event:%d")
TRC_MSG(PRXGATTT_PRXGATTAPCALLBACK_PACKET0XX, "[PRX:][GATT][t] prxGattAPCallBack packet:0x%x")
TRC_MSG(PRXGATT_PRXGATTAPCALLBACK_HANDLER0XX_0XX, "[PRX:][GATT] prxGattAPCallBack handler:0x%x, 0x%x")
TRC_MSG(PRXGATTYI_PRXGATTAPCALLBACK_DISCOVER_ALL_CHAR, "[PRX:][GATT][Yi] prxGattAPCallBack discover all char")
TRC_MSG(PRXGATTWRN_UNKNOW_ETYPED_USERDATA0XX, "[PRX:][GATT][WRN] unknow eType:%d userdata:0x%x")
TRC_MSG(PRX_STATUS_D, "[PRX:] status %d")
TRC_MSG(PRXT_BTGATTOP_D_D_D, "[PRX:][T] BtGattOp %d %d %d")
TRC_MSG(PRX_PROXIMITYCOMMONGATTCALLBACK_ETYPED, "[PRX:] ProximityCommonGattCallback eType:%d")
TRC_MSG(PRXGATTBT_GATT_APP_EVENT_CONNECTED, "[PRX:][GATT]BT_GATT_APP_EVENT_CONNECTED")
TRC_MSG(PRX_BT_GATT_APP_EVENT_CONNECTED, "[PRX:] BT_GATT_APP_EVENT_CONNECTED")
TRC_MSG(PRXWRN_NO_ADDRESS_IGNORE_IT, "[PRX:][WRN] no address ignore it!")
TRC_MSG(PRXWRN_NO_MONITOR_IGNORE_IT, "[PRX:][WRN] no monitor ignore it!")
TRC_MSG(PRXGATTBT_GATT_APP_EVENT_DISCONNECTED, "[PRX:][GATT]BT_GATT_APP_EVENT_DISCONNECTED")
TRC_MSG(PRX_FIND_REPORTER_0XX, "[PRX:] find reporter 0x%x")
TRC_MSG(PRXGATTBT_GATT_APP_EVENT_VALUE_NOTIFICATION, "[PRX:][GATT]BT_GATT_APP_EVENT_VALUE_NOTIFICATION")
TRC_MSG(PRXGATTBT_GATT_APP_EVENT_VALUE_INDICATION, "[PRX:][GATT]BT_GATT_APP_EVENT_VALUE_INDICATION")
TRC_MSG(PRXERR_PRXCLIENTQUERYRESULT_NULL_PACKET, "[PRX:][ERR] prxClientQueryResult NULL packet")
TRC_MSG(PRXERR_PRXCLIENTQUERYRESULT_NULL_CNTX_PACKET0XX, "[PRX:][ERR] prxClientQueryResult NULL Cntx packet:0x%x")
TRC_MSG(PRX_READ_TX_POWER_IS02X, "[PRX:] Read TX Power is:%02x")
TRC_MSG(PRX_READ_TX_POWER_FAIL_RESULTD, "[PRX:] Read TX Power Fail result:%d")
TRC_MSG(PRX_READ_GATT_PRX_IMMEDIATE_SERVICE_IS02X, "[PRX:] Read GATT_PRX_IMMEDIATE_SERVICE is:%02x")
TRC_MSG(PRX_READ_IMALERT_FAIL_RESULTD, "[PRX:] Read Imalert Fail result:%d")
TRC_MSG(PRX_READ_GATT_PRX_LINKLOSS_SERVICE_IS02X, "[PRX:] Read GATT_PRX_LINKLOSS_SERVICE is:%02x")
TRC_MSG(PRX_READ_LINKLOSS_FAIL_RESULTD, "[PRX] Read linkloss Fail result:%d")
TRC_MSG(PRX_WRITE_GATT_PRX_WRITE_TXPOWER_DONE, "[PRX:] write GATT_PRX_WRITE_TXPOWER done")
TRC_MSG(PRX_WRITE_TXPOWER_FAIL_RESULTD, "[PRX:] write txpower Fail result:%d")
TRC_MSG(PRX_WRITE_GATT_PRX_WRITE_IMMEDIATE_SERVICE_DONE, "[PRX:] write GATT_PRX_WRITE_IMMEDIATE_SERVICE done")
TRC_MSG(PRX_WRITE_IM_ALERT_FAIL_RESULTD, "[PRX:] write Im alert Fail result:%d")
TRC_MSG(PRX_WRITE_GATT_PRX_WRITE_LINKLOSS_SERVICE_DONE, "[PRX:] write GATT_PRX_WRITE_LINKLOSS_SERVICE done")
TRC_MSG(PRX_WRITE_LINKLOSS_FAIL_RESULTD, "[PRX:] Write LinkLoss Fail result:%d")
TRC_MSG(PRX_READ_IMALERT_D, "[PRX:] read imalert %d")
TRC_MSG(PRX_WRITE_IMALERT_D, "[PRX:] write imalert %d")
TRC_MSG(PRX_REJECT_IT_, "[PRX:] reject it !")
TRC_MSG(PRX_READ_TXPOWER_D, "[PRX:] read txPower %d")
TRC_MSG(PRX_WRITE_TXPOWER__REJECT_IT_, "[PRX:] write txpower ! reject it !")
TRC_MSG(PRX_WRITE_LINKLOSS_D, "[PRX:] write linkloss %d")
TRC_MSG(PRXINFO_STATIC_GETPRXMFREECONTEXT_FREE_ID_D, "[PRX][INFO] static_getPRXMFreeContext free id %d")
TRC_MSG(PRXERR_STATIC_GETPRXMFREECONTEXT_NO_ANY_AVAIABLE_ONE, "[PRX][ERR] static_getPRXMFreeContext no any avaiable one")
TRC_MSG(PRXINFO_STATIC_FREEPRXMFREECONTEXT_FREE_ID_D, "[PRX][INFO] static_freePRXMFreeContext free id %d")
TRC_MSG(PRXWRN_STATIC_FREEPRXMFREECONTEXT_UNABLE_TO_FREE_ID_D, "[PRX][WRN] static_freePRXMFreeContext unable to free id %d")
TRC_MSG(PRXERR_STATIC_FREEPRXMFREECONTEXT_NOT_FOUND_, "[PRX][ERR] static_freePRXMFreeContext not found ")
TRC_MSG(PRXERR_PRXM_NOTIFY_IGNORE_PCNTX_0XX_EVENT_D, "[PRX][ERR] prxm_notify ignore pCntx 0x%x event %d")
TRC_MSG(PRXWRN_PRXM_NOTIFYLINKRESULT_IGNORE_EVENT, "[PRX][WRN] prxm_notifyLinkResult ignore event")
TRC_MSG(RPXERR_PRXM_NOTIFYLINKRESULT_LINK_CONNECT_STATUS_D, "[RPX][ERR] prxm_notifyLinkResult LINK_CONNECT status %d")
TRC_MSG(PRXINFO_ATT_REMOVELINK_STATUS_D, "[PRX][INFO] ATT_REMOVELINK status %d")
TRC_MSG(RPXERR_PRXM_NOTIFYLINKRESULT_QUERY_STATUS_D, "[RPX][ERR] prxm_notifyLinkResult QUERY status %d")
TRC_MSG(RPXERR_PRXM_NOTIFYLINKRESULT_CONNECTING_STATUS_D, "[RPX][ERR] prxm_notifyLinkResult CONNECTING status %d")
TRC_MSG(PRXERR_PRXM_NOTIFYLINKRESULT_REMOVELINK_STATUS_D, "[PRX][ERR] prxm_notifyLinkResult removelink status %d")
TRC_MSG(PRXINFO_PRXM_NOTIFYDISCONNECTRESULT_STATE_D, "[PRX][INFO] prxm_notifyDisconnectResult state %d")
TRC_MSG(PRXFOUND1_STATUSD, "[PRX:]found1 status:%d")
TRC_MSG(PRXFOUND2_STATUSD, "[PRX:]found2 status:%d")
TRC_MSG(PRXINFO_PRXM_CONNECT_OK, "[PRX][INFO] PRXM_Connect ok")
TRC_MSG(PRXM_STATED, "prxm state:%d")
TRC_MSG(ATTIDD, "attid:%d")
TRC_MSG(PRXERR_RPXM_WRITELINKLOSSLEVEL_STATUSD, "[PRX][ERR] RPXM_WriteLinkLossLevel status:%d")
TRC_MSG(PRXERR_RPXM_READREMOTETXPOWER_STATUS_D, "[PRX][ERR] RPXM_ReadRemoteTxPower status %d")
TRC_MSG(PRXERR_RPXM_READREMOTELINKLOSS_STATUS_D, "[PRX][ERR] RPXM_ReadRemoteLinkLoss status %d")
TRC_MSG(PRXINFO_RPXM_GETLOCALRSSI_STATE_D, "[PRX][INFO] RPXM_GetLocalRssi state %d")
TRC_MSG(PRXINFO_PRXM_ISCONNECTING_STATE_D, "[PRX][INFO] prxm_isConnecting state %d")
TRC_MSG(PRXINFO_STATIC_GETPRXRFREECONTEXT_GET_ID_D, "[PRX][INFO] static_getPRXRFreeContext get id %d")
TRC_MSG(PRXERR_STATIC_GETPRXRFREECONTEXT_NO_ANY_AVAIABLE_ONE, "[PRX][ERR] static_getPRXRFreeContext no any avaiable one")
TRC_MSG(PRXINFO_STATIC_FREEPRXRFREECONTEXT_FREE_ID_D, "[PRX][INFO] static_freePRXRFreeContext free id %d")
TRC_MSG(PRXWRN_STATIC_FREEPRXRFREECONTEXT_UNABLE_TO_FREE_ID_D, "[PRX][WRN] static_freePRXRFreeContext unable to free id %d")
TRC_MSG(PRXERR_STATIC_FREEPRXRFREECONTEX_NOT_FOUND_, "[PRX][ERR] static_freePRXRFreeContex not found ")
TRC_MSG(PRXINFO_PRXR_RESETCONTEXT_ALL, "[PRX][INFO] PRXR_ResetContext all")
TRC_MSG(PRXERR_PRXR_REGISTER_ATT_REGISTERRECORD_FAIL, "[PRX][ERR] PRXR_Register ATT_REGISTERRECORD Fail")
TRC_MSG(PRXERR_PRXR_REGISTER_ATT_REGISTER_FAIL, "[PRX][ERR] PRXR_Register ATT_REGISTER fail")
TRC_MSG(PRXERR_PRXR_UNREGISTER_WRONG_STATUS_D, "[PRX][ERR] PRXR_Unregister wrong status %d")
TRC_MSG(PRXINFO_PRXR_UNREGISTER_WRONG_STATE_D, "[PRX][INFO] PRXR_Unregister wrong state %d")
TRC_MSG(PRXINFO_PRXR_ACCEPTINCOMING_APP_0XX_STATUS_D_STATE_D, "[PRX][INFO] PRXR_AcceptIncoming app 0x%x status %d state %d")
TRC_MSG(PRXERR_PRXR_DEREGISTER_WRONG_STATUS_D, "[PRX][ERR] PRXR_Deregister wrong status %d")

TRC_MSG(AVRCP_WARING_SHOULD_USE_0X10_BCD_AS_VERSION_CHANGE_10_TO_, "AVRCP: waring should use 0x10 BCD as version. change 10 to 0x10")
TRC_MSG(AVRCP_SDP_10_TARGET_ROLE, "AVRCP sdp 1.0 target role")
TRC_MSG(AVRCP_SDP_10_CONTROL_ROLE, "AVRCP sdp 1.0 control role")
TRC_MSG(AVRCP_WARING_SHOULD_USE_0X13_BCD_AS_VERSION_CHANGE_13_TO_, "AVRCP: waring should use 0x13 BCD as version. change 13 to 0x13")
TRC_MSG(AVRCP_SDP_13_TARGET_ROLE, "AVRCP sdp 1.3 target role")
TRC_MSG(AVRCP_SDP_13_CONTROL_ROLE, "AVRCP sdp 1.3 control role")
TRC_MSG(AVRCP_SDP_14_TARGET_ROLE, "AVRCP sdp 1.4 target role")
TRC_MSG(AVRCP_SDP_14_CONTROL_ROLE, "AVRCP sdp 1.4 control role")
TRC_MSG(HDPHDPSDPDB_REGISTRATION_ACTIVE_INSTANCE_NUM_IS_D, "[HDP]HdpSdpDB_Registration: active instance num is %d")
TRC_MSG(HDPSDPDBHDPSDPDB_DEREGISTRATION, "[HDP][SDPDB]HdpSdpDB_DeRegistration")
TRC_MSG(HDPSDPDBHDP_SDP_RECORDS_HAVE_BEEN_DEREGISTERED, "[HDP][SDPDB]hdp sdp records have been deregistered")
TRC_MSG(HDPHDPSUPPORTEDFEATURES_RESET_P, "[HDP]HdpSupportedFeatures reset: %p")
TRC_MSG(HDPSDPDB_ADDFEATURE_MDEP_ID_D_ROLE_D_TYPE_D, "HdpSdpDB_AddFeature: mdep id %d, role %d, type %d")
TRC_MSG(HDPSDP_FATAL_ERROR_THE_SDP_RECORD_DOES_NOT_CONTAINS_AI, "[HDP][SDP] fatal error: the sdp record does not contains AID_SERVICE_CLASS_ID_LIST")
TRC_MSG(HDPSDP_FATAL_ERROR_THE_SDP_RECORD_DOES_NOT_CONTAINS_SU, "[HDP][SDP] fatal error: the sdp record does not contains SUPPORTED_FEATURES")
TRC_MSG(HDPHDPSUPPORTEDFEATURES_MALLOC_P, "[HDP]HdpSupportedFeatures malloc: %p")
TRC_MSG(HDPSDP_FATAL_ERROR_FAIL_TO_ALLOCATE_MEMPORY, "[HDP][SDP] fatal error: fail to allocate mempory")
TRC_MSG(HDPSUB_LEN_FOR_MDEP_ID_D_IS_D, "[HDP]sub len for mdep id %d is %d")
TRC_MSG(HDPATTRIBUTEVALUE_RESET_D, "[HDP]attribute->value reset: %d")
TRC_MSG(OBEX_REGISTER_BOTH_OPP_RFCOMML2CAP_SDP, "[OBEX] register both opp rfcomm&l2cap sdp")
TRC_MSG(OBEX_REGISTER_OPP_L2CAP_SDP, "[OBEX] register opp l2cap sdp")
TRC_MSG(OBEX_REGISTER__OPP_RFCOMM_SDP, "[OBEX] register  opp rfcomm sdp")
TRC_MSG(OBEX_REGISTER_BOTH_FTP_RFCOMML2CAP_SDP, "[OBEX] register both ftp rfcomm&l2cap sdp")
TRC_MSG(OBEX_REGISTER_ONLY_FTP_L2CAP_SDP, "[OBEX] register only ftp l2cap sdp")
TRC_MSG(OBEX_REGISTER_ONLY_FTP_RFCOMM_SDP, "[OBEX] register only ftp rfcomm sdp")
TRC_MSG(PRX_PRXSDPDB_ADDRECORD_INDEXD_CAPABILITYD, "[PRX] PrxSdpDB_AddRecord index:%d capability:%d")
TRC_MSG(PRXWRN_ONLY_SUPPORT_INDEX_0_NOW, "[PRX][WRN] only support index 0 now!")
TRC_MSG(PRX_PRXSDPDB_REMOVERECORD_INDEXD_CAPABILITYD, "[PRX] PrxSdpDB_RemoveRecord index:%d capability:%d")
TRC_MSG(PRX_REMOVE_LINKLOSS_STATUSD, "[PRX] remove linkloss status:%d")
TRC_MSG(PRX_REMOVE_TXPOWER_STATUSD, "[PRX] remove txpower status:%d")
TRC_MSG(PRX_REMOVE_IMALERT_STATUSD, "[PRX] remove imalert status:%d")
TRC_MSG(SCO_SERVER_CHANNEL02X, "SCO server channel:%02x")
TRC_MSG(TIME_TIMESDPDB_ADDRECORD_IDXD_CAPD, "[Time] TimeSdpDB_AddRecord idx:%d cap:%d")
TRC_MSG(TIME_ERROR_INVALID_INDEX, "[Time] Error: invalid index")
TRC_MSG(TIME_ADD_CURTIMERECORD_TO_SDP_STATUS_D, "[Time] Add CurTimeRecord to SDP, status: %d")
TRC_MSG(TIME_ADD_NEXTDSTRECORD_TO_SDP_STATUS_D, "[Time] Add NextDSTRecord to SDP, status: %d")
TRC_MSG(TIME_ADD_REFTIMEUPDATERECORD_TO_SDP_STATUS_D, "[Time] Add RefTimeUpdateRecord to SDP, status: %d")
TRC_MSG(TIME_TIMESDPDB_REMOVERECORD_IDXD_CAPD, "[Time] TimeSdpDB_RemoveRecord idx:%d cap:%d")
TRC_MSG(TIME_REMOVE_CURTIMERECORD_TO_SDP_STATUS_D, "[Time] Remove CurTimeRecord to SDP, status: %d")
TRC_MSG(TIME_REMOVE_NEXTDSTRECORD_TO_SDP_STATUS_D, "[Time] Remove NextDSTRecord to SDP, status: %d")
TRC_MSG(TIME_REMOVE_REFTIMEUPDATERECORD_TO_SDP_STATUS_D, "[Time] Remove RefTimeUpdateRecord to SDP, status: %d")
TRC_MSG(BT_SIMAPSIM_SERVERATRRSPSERVERFLAGS0XX_RESULTD, "[BT SIMAP]SIM_ServerAtrRsp...Server->flags=0x%x, Result=%d, Len=%d")
TRC_MSG(BT_SIMAPSIM_SERVERATRRSP2, "[BT SIMAP]SIM_ServerAtrRsp...2")
TRC_MSG(BT_SIMAPSIM_SERVERATRRSPSIM_SERVER_FLAG_ATR_IS_SET, "[BT SIMAP]SIM_ServerAtrRsp...SIM_SERVER_FLAG_ATR is set!")
TRC_MSG(BT_SIMAPSIMSERVERSENDATRRSPERR_RESULTD, "[BT SIMAP]SimServerSendAtrRspErr: Result=%d")
TRC_MSG(BT_SIMAPSIMSERVERSENDATRRSPNOERROR_ERR_RETURN__STATUS, "[BT SIMAP]SimServerSendAtrRspNoErr(or Err) return : status=%d")
TRC_MSG(BT_SIMAP_SVRSAEVENT_SERVER_CLOSED_SUBSTATED, "[BT SIMAP_svr]SAEVENT_SERVER_CLOSED: substate=%d")
TRC_MSG(BT_SIMAPCURRENT_SIMCARDREADER_STATUS0XX, "[BT SIMAP]current_simcardreader_status=0x%x")
TRC_MSG(BEFORE_CLOSE_RFCOMM_CHANNEL_NEED_SET_ACL_CAN_BE_DISC, "Before Close Rfcomm Channel need set acl can be disc!\n")
TRC_MSG(BEFORE_CLOSE_RFCOMM_CHANNEL_DS_FINDDEVICE_FAILED, "Before Close Rfcomm Channel DS_FindDevice failed!\n")
TRC_MSG(SIMAP_RF_CALLBACK_RFEVENT_CLOSED, "SIMAP: RF Callback RFEVENT_CLOSED.\n")
TRC_MSG(SIMAP_RF_CALLBACK_RFEVENT_DATA_IND, "SIMAP: RF Callback RFEVENT_DATA_IND.\n")
TRC_MSG(SIMAP_RF_CALLBACK_RFEVENT_PACKET_HANDLED, "SIMAP: RF Callback RFEVENT_PACKET_HANDLED.\n")
TRC_MSG(SIMAP_RF_CALLBACK_RFEVENT_OPEN_IND, "SIMAP: RF Callback RFEVENT_OPEN_IND.\n")
TRC_MSG(SIMAP_RF_CALLBACK_RFEVENT_OPEN_D, "SIMAP: RF Callback RFEVENT_OPEN (%d).\n")
TRC_MSG(SIM__CLIENT_RECEIVED_A_GRACEFUL_DISCONNECT_INDICATION, "SIM:  Client received a graceful disconnect indication\n")
TRC_MSG(SIM__CLIENT_RECEIVED_AN_IMMEDIATE_DISCONNECT_INDICATION, "SIM:  Client received an immediate disconnect indication\n")
TRC_MSG(SIM__RECEIVED_A_RESPONSE_TO_THE_ATR_REQUEST, "SIM:  Received a response to the ATR request\n")
TRC_MSG(SIM__RECEIVED_AN_ATR_RESPONSE_BUT_NO_REQUEST_WAS_OUTSTAND, "SIM:  Received an ATR response, but no request was outstanding\n")
TRC_MSG(SIM__RECEIVED_A_RESPONSE_TO_THE_APDU_REQUEST, "SIM:  Received a response to the APDU request\n")
TRC_MSG(SIM__RECEIVED_AN_APDU_RESPONSE_BUT_NO_REQUEST_WAS_OUTSTAN, "SIM:  Received an APDU response, but no request was outstanding\n")
TRC_MSG(SIM__RECEIVED_A_RESPONSE_TO_THE_SIM_POWER_OFF_REQUEST, "SIM:  Received a response to the SIM Power Off request\n")
TRC_MSG(SIM__RECEIVED_AN_POWER_OFF_RESPONSE_BUT_NO_REQUEST_WAS_OU, "SIM:  Received an Power Off response, but no request was outstanding\n")
TRC_MSG(SIM__RECEIVED_A_RESPONSE_TO_THE_SIM_POWER_ON_REQUEST, "SIM:  Received a response to the SIM Power On request\n")
TRC_MSG(SIM__GETTING_ATR, "SIM:  Getting ATR\n")
TRC_MSG(SIM__RECEIVED_AN_POWER_ON_RESPONSE_BUT_NO_REQUEST_WAS_OUT, "SIM:  Received an Power On response, but no request was outstanding\n")
TRC_MSG(SIM__RECEIVED_A_RESPONSE_TO_THE_RESETSIM_REQUEST, "SIM:  Received a response to the ResetSIM request\n")
TRC_MSG(SIM__RECEIVED_A_RESET_RESPONSE_BUT_NO_REQUEST_WAS_OUTSTAN, "SIM:  Received a Reset response, but no request was outstanding\n")
TRC_MSG(SIM__RECEIVED_A_RESPONSE_TO_THE_CARD_READER_STATUS_REQUEST, "SIM:  Received a response to the Card Reader Status request\n")
TRC_MSG(SIM__RECEIVED_A_CARD_READER_STATUS_RESPONSE_BUT_NO_REQUES, "SIM:  Received a Card Reader Status response, but no request was outstanding\n")
TRC_MSG(SIM__RECEIVED_A_RESPONSE_TO_THE_SET_TRANSPORT_PROTOCOL_REQ, "SIM:  Received a response to the Set Transport Protocol request\n")
TRC_MSG(SIM__RECEIVED_A_SET_TRANSPORT_PROTOCOL_RESPONSE_BUT_NO_RE, "SIM:  Received a Set Transport Protocol response, but no request was outstanding\n")
TRC_MSG(SIM__RECEIVED_A_STATUS_INDICATION, "SIM:  Received a Status Indication\n")
TRC_MSG(SIM__UNKNOWN_APDU_PACKET_SENT, "SIM:  Unknown APDU packet sent\n")
TRC_MSG(SIM__AN_ERROR_WAS_DETECTED_IN_THE_REQUEST_OR_THE_RESPONSE, "SIM:  An error was detected in the request or the response\n")
TRC_MSG(SIM__CLIENT_OPEN_STATE_RECEIVED_AN_UNHANDLED_EVENT_02X, "SIM:  Client OPEN state received an unhandled event: %02X\n")
TRC_MSG(SIM__CLIENT_RECEIVED_A_CONNECT_RESPONSE_WITH_NEW_MESSAGE_S, "SIM:  Client received a connect response with new message size %d, retrying\n")
TRC_MSG(SIM__CLIENT_CONNECTION_FAILED, "SIM:  Client connection failed\n")
TRC_MSG(SIM__CLIENT_CONNECTION_ESTABLISHED, "SIM:  Client connection established\n")
TRC_MSG(SIM__CLIENT_GETTING_ATR, "SIM:  Client getting ATR\n")
TRC_MSG(SIM__CLIENT_CONN_PENDING_STATE_RECEIVED_AN_UNEXPECTED_EVEN, "SIM:  Client CONN_PENDING state received an unexpected event: %02X\n")
TRC_MSG(SIM__CLIENT_CONNECTION_CLOSED, "SIM:  Client connection closed\n")
TRC_MSG(SIM__CLIENT_DISC_PENDING_STATE_RECEIVED_AN_UNEXPECTED_EVEN, "SIM:  Client DISC_PENDING state received an unexpected event: %02X\n")
TRC_MSG(SIM__CLIENT_TRANSPORT_IS_UP, "SIM:  Client transport is up\n")
TRC_MSG(SIM__CLIENT_CLOSED_STATE_RECEIVED_AN_UNEXPECTED_EVENT_02, "SIM:  Client CLOSED state received an unexpected event: %02X\n")
TRC_MSG(BT_SIMAPSIMFINDFREEANDSENDPACKETMSGTYPED, "[BT SIMAP]SimFindFreeAndSendPacket...MsgType=%d")
TRC_MSG(BT_SIMAPRF_SENDDATA_, "[BT SIMAP]RF_SendData ...")
TRC_MSG(BT_SIMAPRF_SENDDATA_RETURN_D, "[BT SIMAP]RF_SendData return: %d")
TRC_MSG(SIMAPHANDLE_RF_CLOSECHANNEL_RETURN_BT_STATUS_SUCCESS, "[SIMAP][Handle RF_CloseChannel Return BT_STATUS_SUCCESS]---")
TRC_MSG(BT_SIMAP_AUTH_RSP_HDLR_NOT_BT_MMI_AUTH_REQ_SENT_SIMSIMSE, "bt_simap_auth_rsp_hdlr: NOT BT_MMI_AUTH_REQ_SENT! SIM(simServer)[0].substate=%d")
TRC_MSG(IN_UNIT_TEST_MODE_CHECK_THE_SIM_CARD_IS_INSERTED, "In unit test mode: Check the sim card is inserted")
TRC_MSG(SPPOS_DISCONNECTINDDSTMODD, "SPPOS_DisConnectInd:dstMod=%d")
TRC_MSG(SPP_REMOVE_SDP_SERVICE_FAILED, "[SPP] remove sdp service failed!")
TRC_MSG(THE_ATTRIBUTE_ID_OF_THIS_RSP_VALUE04X, "The attribute ID of this rsp value=%04x")
TRC_MSG(IN_QUERYCALLBACK_GET_SPP_SERVERIDD, "In queryCallback(): get spp serverid=%d")
TRC_MSG(TIME_BT_GATT_APP_EVENT_CONNECTED, "[Time] BT_GATT_APP_EVENT_CONNECTED")
TRC_MSG(TIME_IGNORE_EVENTLINK_0XX__CUR_TIMEC_CHNL_0XX, "[Time] Ignore. event->link: 0x%x, _cur_timec_chnl: 0x%x")
TRC_MSG(TIME_BT_GATT_APP_EVENT_DISCONNECTED, "[Time] BT_GATT_APP_EVENT_DISCONNECTED")
TRC_MSG(TIME_BT_GATT_APP_EVENT_VALUE_NOTIFICATION, "[Time] BT_GATT_APP_EVENT_VALUE_NOTIFICATION")
TRC_MSG(TIME_UNRECOGNIZED_HANDLE_D_IGNORE, "[Time] Unrecognized handle: %d, ignore")
TRC_MSG(TIME_BT_GATT_APP_EVENT_VALUE_INDICATION, "[Time] BT_GATT_APP_EVENT_VALUE_INDICATION")
TRC_MSG(TIME_PRIMARY_SERVICE_FOUND_TYPE_D_UUID_0X04X, "[Time] Primary Service found. type: %d, uuid: 0x%04x")
TRC_MSG(TIME_HANDLE_REANGE_0X04X_TO_0X04X, "[Time] Handle reange: 0x%04x to 0x%04x")
TRC_MSG(TIME_DISCOVERY_PRIMARY_SERVICE_BY_UUID_WITH_RESULT_DONE_C, "[Time] Discovery Primary Service by UUID with result DONE_COMPLETED. success: %d")
TRC_MSG(TIME_DISCOVERY_CHARACTERISTIC_STATUS_D, "[Time] Discovery Characteristic, status: %d")
TRC_MSG(TIME_CHARACTERISTIC_FOUND_TYPE_D_UUID_0X04X, "[Time] Characteristic found. type: %d, uuid: 0x%04x")
TRC_MSG(TIME_CHAR_HANDLE_0X04X_PROPERTY_0X02X_, "[Time] Char handle: 0x%04x, property: 0x%02x ")
TRC_MSG(TIME_CHAR_VALUE_HANDLE_0X04X, "[Time] Char value handle: 0x%04x")
TRC_MSG(TIME_DISCOVERY_CHARACTERISTIC_BY_UUID_WITH_RESULT_DONE_CO, "[Time] Discovery Characteristic by UUID with result DONE_COMPLETED. success: %d")
TRC_MSG(TIME_READ_CHARACTERISTIC_VALUE_WITH_RESULT_DONE_COMPLETED, "[Time] Read Characteristic Value with result DONE_COMPLETED")
TRC_MSG(TIME_WRITE_WITHOU_RESPONSE_WITH_RESULT_DONE_COMPLETED, "[Time] Write withou Response with result DONE_COMPLETED")
TRC_MSG(TIME_CHARACTERISTIC_DESCRIPTOR_FOUND_TYPE_D_UUID_0X, "[Time] Characteristic Descriptor found. type: %d, uuid: 0x%04x")
TRC_MSG(TIME_CHAR_DESC_VALUE_HANDLE_0X04X, "[Time] Char desc value handle: 0x%04x")
TRC_MSG(TIME_DISCOVERY_CHARACTERISTIC_DESCRIPTOR_WITH_RESULT_DONE, "[Time] Discovery Characteristic Descriptor with result DONE_COMPLETED")
TRC_MSG(TIME_READ_CHARACTERISTIC_DESCRIPTOR_WITH_RESULT_DONE_COMP, "[Time] Read Characteristic Descriptor with result DONE_COMPLETED")
TRC_MSG(TIME_WRITE_CHARACTERISTIC_DESCRIPTOR_WITH_RESULT_DONE_COM, "[Time] Write Characteristic Descriptor with result DONE_COMPLETED")
TRC_MSG(TIME_TIME_GATT_AP_CALLBACK_EVENT_D, "[Time] time_gatt_ap_callback(), event: %d")
TRC_MSG(TIME_BT_GATT_APP_EVENT_SERVER, "[Time] BT_GATT_APP_EVENT_SERVER")
TRC_MSG(TIME_NOTIFY_VALUE_WITH_RESULT_D, "[Time] Notify Value with result: %d")
TRC_MSG(TIME_DDD_DDDD_DAY_OF_WEEK_D, "[Time] %d-%d-%d, %d:%d:%d.%d, day of week: %d")
TRC_MSG(TIME_CURRENT_TIME_NOTIFY_CONFIG_UPDATED_0X04X, "[Time] Current Time notify config updated: 0x%04x")
TRC_MSG(TIME_GATTCLIENTCONNECT_RETURNS_D, "[Time] GattClientConnect() returns %d")
TRC_MSG(TIME_ERROR_PCHNLHANDLERREMDEV_IS_NULL, "[Time] Error: pChnl->handler.remDev is NULL")
TRC_MSG(TIME_GATTDISCONNECT_RETURNS_D, "[Time] GattDisconnect() returns %d")
TRC_MSG(TIME_WRITE_LOCAL_VALUE_FAILED_VALUE_ID_D, "[Time] Write local value failed, value_id: %d")
TRC_MSG(TIME_TIMEC_CMGR_CALLBACK_EVENT_D_STATUS_D, "[Time] timec_cmgr_callback, event: %d, status: %d")
TRC_MSG(TIME_NO_AVAILABLE_CLIENT_CONTEXT, "[Time] No available client context.")
TRC_MSG(TIME_INVALID_CLIENT_CONTEXT_POINTER_0XX, "[Time] Invalid client context pointer: 0x%x")
TRC_MSG(TIME_NO_AVAILABLE_CLIENT_PACKET, "[Time] No available client packet.")
TRC_MSG(TIME_FAILED_TO_REGISTER_TIP_CLIENT, "[Time] Failed to register TIP client")
TRC_MSG(TIME_WARNING_TIMECAPP_IS_NULL, "[Time] Warning: TimeCApp is null.")
TRC_MSG(TIME_WARNING_TIME_CLIENT_CONTEXT_IS_NULL, "[Time] Warning: Time client context is null")
TRC_MSG(TIME_CLIENT_FAILED_TO_CRATE_LINK, "[Time] Client failed to crate link.")
TRC_MSG(TIME_CLIENT_FAILED_TO_OPEN_CHANNEL, "[Time] Client failed to open channel.")
TRC_MSG(TIME_NULL_CLIENT_CALLBACK_FORCE_DISCONNECT, "[Time] Null client callback. Force disconnect.")
TRC_MSG(TIME_NO_AVAILABLE_SERVER_CONTEXT, "[Time] No available server context.")
TRC_MSG(TIME_INVALID_SERVER_CONTEXT_POINTER_0XX, "[Time] Invalid server context pointer: 0x%x")
TRC_MSG(TIME_XXXXXX_HAS_ALREADY_CONNECTED, "[Time] %x:%x:%x:%x:%x:%x has already connected.")
TRC_MSG(TIME_WARN_NO_SERVER_TP_FOUND_FOR_ADDR_XXXXXX, "[Time] WARN: No server tp found for addr: %x:%x:%x:%x:%x:%x .")
TRC_MSG(TIME_NO_AVAILABLE_SERVER_PACKET, "[Time] No available server packet.")
TRC_MSG(TIME_WARNING_PKT_IS_NULL, "[Time] Warning: pkt is NULL")
TRC_MSG(TIME_TIMES_CMGR_CALLBACK_EVENT_D_STATUS_D, "[Time] times_cmgr_callback, event: %d, status: %d")
TRC_MSG(TIME_SERVER_REGISTRATION_FAILED, "[Time] Server registration failed.")
TRC_MSG(TIME_WRONG_STATE_TO_DEREGISTER_SERVER_STATE_D, "[Time] Wrong state to deregister server, state: %d.")
TRC_MSG(TIME_WRONG_STATE_TO_ACCEPT_INCOMING, "[Time] Wrong state to accept incoming.")
TRC_MSG(TIME_CMGR_REGISTERHANDLER_RETURNS_D, "[Time] CMGR_RegisterHandler() returns %d")
TRC_MSG(TIME_WRONG_STATE_TO_INITIATE_CONNECTION_STATE_D, "[Time] Wrong state to initiate connection, state: %d.")
TRC_MSG(TIME_SERVER_DISCONNECTS_IN_CONNECTING_PHASE, "[Time] Server disconnects in connecting phase.")
TRC_MSG(TIME_NULL_SERVER_CALLBACK_FORCE_DISCONNECT, "[Time] Null server callback. Force disconnect.")
TRC_MSG(TIME_NOTIFY_CONNECTED_IN_INVALID_STATE_D, "[Time] Notify connected in invalid state: %d")
TRC_MSG(PTRCHNL_MAPXXXXXXXXXX, "ptr->chnl_map=%X%X%X%X%X%X%X%X%X%X")
TRC_MSG(BTWIFICCHNL_MAPXXXXXXXXXX, "BTWIFIC(chnl_map)=%X%X%X%X%X%X%X%X%X%X")
TRC_MSG(BT_HCI_INIT, "BT HCI Init")
TRC_MSG(TIMER_TIMERX_TIMEOUT_U_U_WHEN_RESET_OS_TIMER_JUS, "[TIMER] Timer(%x) timeout (%u, %u) when reset OS timer. Just Fire timer")
TRC_MSG(RADIOMGR__RMGR_RADIOINIT, "RADIOMGR:  RMGR_RadioInit\n")
TRC_MSG(RADIOMGR__BEGINNING_INITIALIZATION, "RADIOMGR:  Beginning Initialization\n")
TRC_MSG(RADIOMGR__INITIALIZING_HCI, "RADIOMGR:  Initializing HCI\n")
TRC_MSG(RADIOMGR__INITIALIZING_TRANSPORT, "RADIOMGR:  Initializing Transport\n")
TRC_MSG(RADIOMGR__TRANSPORT_INITIALIZED, "RADIOMGR:  Transport initialized\n")
TRC_MSG(RADIOMGR__RADIO_INITIALIZED, "RADIOMGR:  Radio Initialized\n")
TRC_MSG(RADIOMGR__INITIALIZATION_FAILED, "RADIOMGR:  Initialization failed\n")
TRC_MSG(RADIOMGR__INIT_CALLED_DURING_INIT, "RADIOMGR:  Init called during init\n")
TRC_MSG(RADIOMGR__RMGR_RADIOSHUTDOWN, "RADIOMGR:  RMGR_RadioShutdown\n")
TRC_MSG(RADIOMGR__SHUTDOWN_INITIATED, "RADIOMGR:  Shutdown initiated\n")
TRC_MSG(RADIOMGR__RADIO_SHUTTING_DOWN, "RADIOMGR:  Radio shutting down\n")
TRC_MSG(RADIOMGR__RADIO_MODULE_IS_DOWN, "RADIOMGR:  Radio Module is down\n")
TRC_MSG(RADIOMGR__HCI_DEINIT_STARTED, "RADIOMGR:  HCI deinit started\n")
TRC_MSG(RADIOMGR__TRANSPORT_IS_DOWN, "RADIOMGR:  Transport is down\n")
TRC_MSG(RADIOMGR__HCI_IS_DOWN, "RADIOMGR:  HCI is down\n")
TRC_MSG(RADIOMGR__SHUTDOWN_FAILED_ALREADY_DOWN_OR_INTIALIZING, "RADIOMGR:  Shutdown failed (already down or intializing)\n")
TRC_MSG(RADIOMGR__RMGR_HCIRESET, "RADIOMGR:  RMGR_HciReset\n")
TRC_MSG(RADIOMGR__RESET_INITIATED, "RADIOMGR:  Reset initiated\n")
TRC_MSG(RADIOMGR__TRANSPORT_SHUTTING_DOWN, "RADIOMGR:  Transport shutting down\n")
TRC_MSG(RADIOMGR__TRANSPORT_FAILED_SHUTDOWN, "RADIOMGR:  Transport failed shutdown\n")
TRC_MSG(RADIOMGR__TRANSPORT_INITIALIZING, "RADIOMGR:  Transport initializing\n")
TRC_MSG(RADIOMGR__TRANSPORT_INITIATED, "RADIOMGR:  Transport initiated\n")
TRC_MSG(RADIOMGR__COULD_NOT_INIT_TRANSPORT_DURING_RESET, "RADIOMGR:  Could not init transport during reset\n")
TRC_MSG(RADIOMGR__RESET_DURING_SHUTDOWN, "RADIOMGR:  Reset during shutdown\n")
TRC_MSG(RADIOMGR__RESET_FAILED, "RADIOMGR:  Reset failed\n")
TRC_MSG(RADIOMGR__RADIODEINIT, "RADIOMGR:  RadioDeinit\n")
TRC_MSG(RADIOMGR__HCI_INIT_ERROR, "RADIOMGR:  HCI init error\n")
TRC_MSG(RADIOMGR__RMGRHCICALLBACK_X, "RADIOMGR:  RmgrHciCallback: %#x\n")
TRC_MSG(RADIOMGR__RMGRHCICALLBACK_VALID_EVENT, "RADIOMGR:  RmgrHciCallback: valid event.\n")
TRC_MSG(RADIOMGR__HCI_INIT_FAILED_RETRYING, "RADIOMGR:  HCI init failed (retrying)\n")
TRC_MSG(RADIOMGR__RMGRTRANCALLBACK_X, "RADIOMGR:  RmgrTranCallback: %#x\n")
TRC_MSG(RADIOMGR__TRANSPORT_INIT_FAILED_RETRYING, "RADIOMGR:  Transport init failed (retrying)\n")
TRC_MSG(RADIOMGR__INITIALIZING_TRANSPORT_DURING_RESET, "RADIOMGR:  Initializing transport during reset\n")
TRC_MSG(RADIOMGR__INTIALIZING_RADIO, "RADIOMGR:  Intializing Radio\n")
TRC_MSG(RADIOMGR__TRANSPORT_INIT_FAILED_GIVING_UP, "RADIOMGR:  Transport init failed (giving up)\n")
TRC_MSG(RADIOMGR__TRANSPORT_DEINITIALIZATION_FAILED, "RADIOMGR:  Transport deinitialization failed\n")
TRC_MSG(RADIOMGR__RMGRRADIOCALLBACK_X, "RADIOMGR:  RmgrRadioCallback: %#x\n")
TRC_MSG(RMGR__RADIO_INIT_STATUS, "RMGR:  RADIO_INIT_STATUS\n")
TRC_MSG(RADIOMGR__RADIO_INIT_FAILED_RETRYING, "RADIOMGR:  Radio init failed (retrying)\n")
TRC_MSG(RADIOMGR__RADIO_IS_DOWN, "RADIOMGR:  Radio is down\n")
TRC_MSG(A2MPHANDLECREATESERVERCHANNELREQ_CHANNEL_0, "A2MPHandleCreateServerChannelReq channel ==0")
TRC_MSG(A2MPHANDLECREATESERVERCHANNELREQ_MAIN_CHANNEL_0, "A2MPHandleCreateServerChannelReq Main_Channel ==0")
TRC_MSG(A2MPHANDLECREATESERVERCHANNELREQ_REMOTECONTROLIDD, "A2MPHandleCreateServerChannelReq remoteControlId:%d")
TRC_MSG(A2MPHANDLECREATESERVERCHANNELREQ_MAIN_CHANNELLOCALCONTROL, "A2MPHandleCreateServerChannelReq Main_Channel->localControllerId:%d")
TRC_MSG(BTA2MP_PHYSICALLINKCREATE_ACCEPT, "BTA2MP_PhysicalLinkCreate accept")
TRC_MSG(TX_A2MP_CODE_DISCOVER_REQ, "TX A2MP_CODE_DISCOVER_REQ")
TRC_MSG(TX_A2MP_CODE_DISCOVER_RSP, "TX A2MP_CODE_DISCOVER_RSP")
TRC_MSG(TX_A2MP_CODE_CHANGE_NOTIFY, "TX A2MP_CODE_CHANGE_NOTIFY")
TRC_MSG(TX_A2MP_CODE_CHANGE_RSP, "TX A2MP_CODE_CHANGE_RSP")
TRC_MSG(TX_A2MP_CODE_GET_INFO_REQ, "TX A2MP_CODE_GET_INFO_REQ")
TRC_MSG(TX_A2MP_CODE_GET_INFO_RSP, "TX A2MP_CODE_GET_INFO_RSP")
TRC_MSG(TX_A2MP_CODE_GET_AMP_ASSOC_REQ, "TX A2MP_CODE_GET_AMP_ASSOC_REQ")
TRC_MSG(TX_A2MP_CODE_GET_AMP_ASSOC_RSP, "TX A2MP_CODE_GET_AMP_ASSOC_RSP")
TRC_MSG(TX_A2MP_CODE_CREATE_PHY_LINK_REQ, "TX A2MP_CODE_CREATE_PHY_LINK_REQ")
TRC_MSG(TX_A2MP_CODE_CREATE_PHY_LINK_RSP, "TX A2MP_CODE_CREATE_PHY_LINK_RSP")
TRC_MSG(TX_A2MP_CODE_DISC_PHY_LINK_REQ, "TX A2MP_CODE_DISC_PHY_LINK_REQ")
TRC_MSG(TX_A2MP_CODE_DISC_PHY_LINK_RSP, "TX A2MP_CODE_DISC_PHY_LINK_RSP")
TRC_MSG(LAST_OPCODE_FAILED, "last_opcode failed")
TRC_MSG(BTA2MP_HANDLEDISCOVERYREQUEST, "BTA2MP_HandleDiscoveryRequest")
TRC_MSG(A2MP_INDEX_ID, "A2MP index i:%d")
TRC_MSG(AMP_STATUS_CHANGE_TO_D, "AMP status change to :%d")
TRC_MSG(BTA2MP_HANDLEGETINFOREQUEST, "BTA2MP_HandleGetInfoRequest")
TRC_MSG(HANDLE_BTA2MP_HANDLECREATEPHYSICALLINKREQUEST, "Handle BTA2MP_HandleCreatePhysicalLinkRequest")
TRC_MSG(A2MP_MAIN_CHANNEL_NOT_0, "a2mp_main_channel not 0")
TRC_MSG(CONTROLLER_ID_NOT_MATCHD_D, "controller id not match:%d, %d")
TRC_MSG(PHYSICAL_LINK_ALREADY_EXISTS, "Physical Link Already exists")
TRC_MSG(UNABLE_TO_START_PHYSICAL_LINK_CREATION, "Unable to start physical link creation")
TRC_MSG(A2MP_MAIN_CHANNELLAST_OPCODED, "a2mp_main_channel->last_opcode:%d")
TRC_MSG(COLLISION_HAPPENS, "Collision happens")
TRC_MSG(TRY_TO_DISCONNECT_PREVIOUS_CREATE_LINK_OPERATION, "Try to disconnect previous create link operation")
TRC_MSG(ME_ACCEPTPHYSICALLINK, "ME_AcceptPhysicalLink")
TRC_MSG(A2MP_PARM_RSPSTATUSD, "a2mp_parm_rsp.status:%d")
TRC_MSG(BTA2MP_HANDLECREATEPHYSICALLINKRESPONSED, "BTA2MP_HandleCreatePhysicalLinkResponse:%d")
TRC_MSG(BTA2MP_RECVDATAIND_LENGTHD, "BTA2MP_RecvDataInd length:d")
TRC_MSG(BTA2MP_RECVDATAIND_OPCODE02X, "BTA2MP_RecvDataInd opcode:02x")
TRC_MSG(A2MP_MAIN_CHANNEL_EMPTY, "A2MP main channel empty")
TRC_MSG(A2MP_REQ_OPCODED, "A2MP req opcode:%d")
TRC_MSG(RX_A2MP_CODE_DISCOVER_REQ, "RX A2MP_CODE_DISCOVER_REQ")
TRC_MSG(RX_A2MP_CODE_CHANGE_NOTIFY, "RX A2MP_CODE_CHANGE_NOTIFY")
TRC_MSG(RX_A2MP_CODE_GET_INFO_REQ, "RX A2MP_CODE_GET_INFO_REQ")
TRC_MSG(RX_A2MP_CODE_GET_AMP_ASSOC_REQ, "RX A2MP_CODE_GET_AMP_ASSOC_REQ")
TRC_MSG(RX_A2MP_CODE_CREATE_PHY_LINK_REQ, "RX A2MP_CODE_CREATE_PHY_LINK_REQ")
TRC_MSG(RX_A2MP_CODE_DISC_PHY_LINK_REQ, "RX A2MP_CODE_DISC_PHY_LINK_REQ")
TRC_MSG(UNKNOWN_IDENTIFIER, "Unknown identifier")
TRC_MSG(A2MP_RSP_OPCODED, "A2MP rsp opcode:%d")
TRC_MSG(RX_A2MP_CODE_COMMAND_REJECT, "RX A2MP_CODE_COMMAND_REJECT")
TRC_MSG(RX_A2MP_CODE_DISCOVER_RSP, "RX A2MP_CODE_DISCOVER_RSP")
TRC_MSG(RX_A2MP_CODE_CHANGE_RSP, "RX A2MP_CODE_CHANGE_RSP")
TRC_MSG(RX_A2MP_CODE_GET_INFO_RSP, "RX A2MP_CODE_GET_INFO_RSP")
TRC_MSG(RX_A2MP_CODE_GET_AMP_ASSOC_RSP, "RX A2MP_CODE_GET_AMP_ASSOC_RSP")
TRC_MSG(RX_A2MP_CODE_CREATE_PHY_LINK_RSP, "RX A2MP_CODE_CREATE_PHY_LINK_RSP")
TRC_MSG(RX_A2MP_CODE_DISC_PHY_LINK_RSP, "RX A2MP_CODE_DISC_PHY_LINK_RSP")
TRC_MSG(CONTROLLER_IDD, "Controller id:%d")
TRC_MSG(CONTROLLER_TYPED, "Controller type:%d")
TRC_MSG(CONTROLLER_STATUSD, "Controller status:%d")
TRC_MSG(BTA2MP_PHYSICALLINKCREATE_DETECTEDD_EXISTSD, "BTA2MP_PhysicalLinkCreate detected:%d, exists:%d")
TRC_MSG(BTA2MP_PHYSICALLINKCREATE_DISCOVERDONED, "BTA2MP_PhysicalLinkCreate discoverDone:%d")
TRC_MSG(PERVIOUS_CREATE_CHANNEL_PENDING, "Pervious create channel pending")
TRC_MSG(AMP_IS_NOT_EXISTING, "AMP is not existing")
TRC_MSG(NO_ENOUGH_RESOURCE_TO_CREATE_AMP_CHANNEL, "No enough resource to create AMP channel")
TRC_MSG(A2MP_DISCOVERY_DONED, "A2MP discovery Done:%d")
TRC_MSG(A2MP_DETECTEDD, "A2MP detected:%d")
TRC_MSG(AMP_STATUSD, "Amp Status:%d")
TRC_MSG(A2MP_INFOACLLINKREMOTEWIFIAMPEXISTSD, "A2MP info->aclLink->remoteWifiAMP.exists:%d")
TRC_MSG(NO_AMP_CONTROLLER_FOUND_, "No AMP controller found. ")
TRC_MSG(A2MP_BTA2MP_SENDDISCOVERYREQUEST, "A2MP BTA2MP_SendDiscoveryRequest")
TRC_MSG(CONTROLLERIDD, "controllerId:%d")
TRC_MSG(INDEXD, "index:%d")
TRC_MSG(LINK08X, "link:%08x")
TRC_MSG(LINKREMOTEWIFIAMP08X, "link->remoteWifiAMP:%08x")
TRC_MSG(LINKREMOTEWIFIAMPPHYSICAL_LINK_SATED, "link->remoteWifiAMP.physical_link_sate:%d")
TRC_MSG(INEXTFLOWSPECSERVICETYPED, "inExtFlowSpec->serviceType:%d")
TRC_MSG(A2MP_CHANNEL_NOT_EXISTING, "A2MP Channel not existing")
TRC_MSG(A2MP_MAIN_CHANNELA2MP_CHANNELISTATED, "a2mp_main_channel->a2mp_channel[i].state:%d")
TRC_MSG(A2MP_MAIN_CHANNELREMDEVREMOTEWIFIAMPSTATED, "a2mp_main_channel->remDev->remoteWifiAMP.state:%d")
TRC_MSG(ID, "i:%d")
TRC_MSG(A2MP_MAIN_CHANNELA2MP_CHANNELIPSMD, "a2mp_main_channel->a2mp_channel[i].psm:%d")
TRC_MSG(CREATE_LOGICAL_LINK_SUCCESS, "Create Logical Link success")
TRC_MSG(CREATE_LOGICAL_LINK_FAILED, "Create Logical Link failed")
TRC_MSG(A2MPHANDLELOGICALLINKDISCONNECTCOMPLETE, "A2MPHandleLogicalLinkDisconnectComplete")
TRC_MSG(CHANGE_THE_CONTROLLER_LIST, "Change the controller List")
TRC_MSG(A2MPCA2MP_MAIN_CHANNELDSTATED, "A2MPC(a2mp_main_channel)[%d].state:%d")
TRC_MSG(A2MPCA2MP_MAIN_CHANNELDDISCOVERDONED, "A2MPC(a2mp_main_channel)[%d].discoverDone:%d")
TRC_MSG(A2MPMAINCHANNELL2CALLBACKDL2CHANNELIDD, "A2MPMainChannelL2Callback:%d,L2ChannelId:%d")
TRC_MSG(THE_L2CHANNELIDD, "The L2ChannelId:%d")
TRC_MSG(THE_MAIN_CHANNELLOCALCIDD, "The main_channel->localCid:%d")
TRC_MSG(DDDD, "%d,%d,%d,%d")
TRC_MSG(REMOTE_A2MP_FEATURE_DETECTED_BEFORE_NO_A2MP_OPERATION, "Remote A2MP feature detected before, no A2MP operation")
TRC_MSG(L2EVENT_FLOW_DATA_IND_S, "L2EVENT_FLOW_DATA_IND")
TRC_MSG(INFOPTRSLOCKSTEPCONFIGREQCREATECHANNELNITIATORD, "info->ptrs.lockstepConfigReq.createChannelnitiator:%d")
TRC_MSG(THE_CONTROLLER_ID_ARE_D, "The controller id are :%d")
TRC_MSG(A2MP_ALLOCATEMAINCHANNEL, "A2MP_AllocateMainChannel")
TRC_MSG(A2MP_FREEMAINCHANNEL, "A2MP_FreeMainChannel")
TRC_MSG(A2MP_ALLOCATEPSMCHANNEL_A2MP_MAIN_CHANNEL_0, "A2MP_AllocatePSMChannel A2MP main channel 0")
TRC_MSG(A2MP_CHANNEL08X, "a2mp_channel:%08x")
TRC_MSG(A2MP_CHANNEL_NOT_EXISTS, "A2MP Channel not exists")
TRC_MSG(CONTROLLER_IDD_STATUSD, "Controller ID:%d, status:%d")
TRC_MSG(A2MP_FINDAMPDEVICE_INDEXD, "A2MP_FindAMPDevice index:%d")
TRC_MSG(A2MPCA2MP_MAIN_CHANNELIREMDEV08X, "A2MPC(a2mp_main_channel)[i].remDev:%08x")
TRC_MSG(BT_ATT_HANDLERXREADY_OPCODED, "BT_ATT_HandleRxReady(): opcode=%d")
TRC_MSG(BT_ATT_HANDLERXREADY_ERROR_CODE_D, "BT_ATT_HandleRxReady(): error code =%d")
TRC_MSG(SM_BOND_STARTS, "SM bond starts")
TRC_MSG(SM_STATUS02X, "SM status:%02x")
TRC_MSG(BT_ATT_CONN_PACKET_08X, "BT ATT conn packet %08x")
TRC_MSG(BT_ATT_RETURN_CONN_PACKET_0_, "BT ATT return conn packet 0 ")
TRC_MSG(BT_ATT_RETURN_CONN_PACKET_1, "BT ATT return conn packet 1")
TRC_MSG(BT_ATT_RETURN_CONN_PACKET_2, "BT ATT return conn packet 2")

TRC_MSG(BT_ATT_SECURITYCHECKDONE_CONND, "BT_ATT_SecurityCheckDone conn:%d")
TRC_MSG(BT_ATT_REPORTEVENT_EVENT_CODED, "BT_ATT_ReportEvent(): event_code=%d")
TRC_MSG(BT_ATT_HANDLEERRORRESPONSE_OPCODE0XX_ERRCODE0XX, "BT_ATT_HandleErrorResponse: opcode=0x%x, errCode=0x%x")
TRC_MSG(START__END_ERROR, "Start > End, Error")
TRC_MSG(BT_ATT_HANDLEFINDBYTYPEVALUEREQUEST_0XX0XX_0XX_D, "BT_ATT_HandleFindByTypeValueRequest(): 0x%x~0x%x, 0x%x, %d, 0x%x, 0x%x")
TRC_MSG(NEED_APPLICATION_RESPONSE, "Need application response")

TRC_MSG(NEED_WAIT_SECURITY_PROCEDURE, "Need wait security procedure")
TRC_MSG(BT_ATT_HANDLEREADBYTYPEREQUEST_0XX0XX, "BT_ATT_HandleReadByTypeRequest(): 0x%x~0x%x")
TRC_MSG(ATTHANDLEPREPAREWRITEREQUEST__ERROR_CODEU, "AttHandlePrepareWriteRequest : error_code=%u")
TRC_MSG(PREPAREWRITEBUFFERU_IS_AVAILABLE, "prepareWriteBuffer[%u] is available")
TRC_MSG(PREPAREWRITEBUFFERU_IS_AVAILABLE_HANDLE0XX, "prepareWriteBuffer[%u] is available, handle=0x%x")
TRC_MSG(BT_ATT_CON_TIMEOUT, "BT ATT con timeout")
TRC_MSG(BT_ATT_BT_ATT_HANDLEAPPLICATIONRESPONSE_STATUS, "BT Att BT_ATT_HandleApplicationResponse status")
TRC_MSG(BT_ATTHANDLEAPPLICATIONRESPONSE, "BT_ATTHandleApplicationResponse")
TRC_MSG(CAN_NOT_FIND_ANY_DEVICES, "can not find any devices")
TRC_MSG(NO_COMMAND_WAITING_TO_RESPONSE, "No command waiting to response??????????")
TRC_MSG(PREVIOUS_COMMAND_OPCODED, "Previous command opcode:%d")
TRC_MSG(BT_ATT_HANDLESMCOMPLETEDD, "BT_ATT_HandleSMCompleted:%d")
TRC_MSG(SM_COMPLED_BUT_FAILED, "SM compled but failed.")
TRC_MSG(CONN08X, "Conn:%08x")
TRC_MSG(CONNFREEPACKETLIST08X, "conn->freePacketList:%08x")
TRC_MSG(CONNBUFFERPKT08X, "conn->bufferPkt:%08x")
TRC_MSG(CONNBUFFERPKTNODE08X, "conn->bufferPkt->node:%08x")
TRC_MSG(BT_ATT_HANDLERXREADY_OPCODE02X, "BT_ATT_HandleRxReady(): opcode=%02x")
TRC_MSG(SM_CONN_BUFFER_PACKET08X, "SM Conn buffer packet:%08x")
TRC_MSG(PACKET_HANDLED_BLE, "Packet Handled BLE")
TRC_MSG(PACKET_HANDLED_BREDR, "Packet Handled BREDR")
TRC_MSG(BT_ATT_CLIENT_REQUEST_STATUSD, "BT Att Client request status:%d")

TRC_MSG(STATUSD, "status:%d")


TRC_MSG(AVCTIMER_EVM_CANCELTIMER_0XX, "[AVC][TIMER] EVM_CancelTimer 0x%x")
TRC_MSG(AVCTIMER_STARTTIMER_0XX, "[AVC][TIMER] StartTimer 0x%x")
TRC_MSG(AVCTIMER_CANCELTIMER_0XX, "[AVC][TIMER] CancelTimer 0x%x")
TRC_MSG(AVC_PTYPESTART_PACKETLEFTD, "[AVC] ptype:start packetLeft:%d")
TRC_MSG(AVC_PTYPEEND_BUT_PACKETLEFTD_IS_NOT_ZERO, "[AVC] ptype:end but packetLeft:%d is not zero")
TRC_MSG(AVCTP_MSGHDR0XX_0XX_0XX, "[AVCTP] msgHdr:0x%x 0x%x 0x%x")
TRC_MSG(AVC_L2CAP_SENDDATA_CHANNELIDD_PACKETHEADERLEND_PACKE, "[AVC] L2CAP_SendData channelId:%d packet.headerLen:%d packet.dataLen:%d")
TRC_MSG(AVCTP_REGISTER_PSM_0XX_STATUSD, "[AVCTP] register psm 0x%x status:%d")
TRC_MSG(AVCTP_FAIL_TO_REGISTER_BROWSING_CHANNEL_BSRESULTD, "[AVCTP] Fail to register browsing channel bsResult:%d")
TRC_MSG(AVCTP_FAIL_TO_REGISTER_AVCTP_CHANNEL_BSRESULTD, "[AVCTP] Fail to register AVCTP channel bsResult:%d")
TRC_MSG(AVCTP_NO_ENHANCE_MODE_IGNORE_REGISTER_, "[AVCTP] No enhance mode. Ignore register ")
TRC_MSG(AVCTP_AVCTP_CONNECTRSP_NOT_IN_INCOMING_STATED, "[AVCTP] AVCTP_ConnectRsp not in incoming state:%d")
TRC_MSG(AVCTP_CMDFRAMECTYPED_CMDFRAMEOPCODED, "[AVCTP] cmdFrame->ctype:%d cmdFrame->opcode:%d")
TRC_MSG(AVCTP_RAWFRAMETYPED, "[AVCTP] rawFrame->type:%d")
TRC_MSG(AVCTP_TXIDSIZED_RAWFRAMELENGTHD, "[AVCTP] txIdSize:%d rawFrame->length:%d")
TRC_MSG(AVCTP_CONNECTRSP_CHANNELIDD_STATUSD, "[AVCTP] ConnectRsp channelid:%d status:%d")
TRC_MSG(AVCTP_CHIDD, "[AVCTP] chid:%d")
TRC_MSG(AVCTP_RECJECT_L2CHANNELIDD, "[AVCTP] recject l2channelid:%d")
TRC_MSG(AVRCP_AVCTPCONNECT_AVCTPCONN0XX_PSMD, "[AVRCP] AvctpConnect AvctpConn:0x%x psm:%d")
TRC_MSG(AVRCPBWS_RECEIVE_BROWSEPACKET_OPERANDLEND_MORED, "[AVRCP][BWS] Receive browse-packet operandLen:%d more:%d")
TRC_MSG(AVRCPBWS_NO_AVC_PARSE_OPERANDLEND_MORED, "[AVRCP][BWS] No av/c parse operandLen:%d more:%d")
TRC_MSG(AVCTP_RX__EVENT_D_ERROR, "[AVCTP] RX__EVENT %d error")
TRC_MSG(AVCTP_RX_BUFFER_UNDERRUN, "[AVCTP] RX_BUFFER_UNDERRUN")
TRC_MSG(AVDTPSIGPARSECONFIGCMDINSERT_STREAM_TO_CHANNL_STREAM_LIST, "[AvdtpSigParseConfigCmd]insert stream to channl stream list")
TRC_MSG(AVDTPSIGMGRCONNCALLBACKAVDTP_CONN_EVENT_DISCONNECT_STRM_C, "[AvdtpSigMgrConnCallback]AVDTP_CONN_EVENT_DISCONNECT strm conn stat:%d")
TRC_MSG(SCATTNETROLEFORSCO_PTR04XSTATEDSWITCHSTATEDROLE, "ScattnetRoleForSCO(): ptr=%04X,state=%d,switchstate=%d,role=%d")
TRC_MSG(SCATTNETROLEFORSCO_2_PTR04XSTATEDSWITCHSTATEDRO, "ScattnetRoleForSCO()_2: ptr=%04X,state=%d,switchstate=%d,role=%d")
TRC_MSG(SCATTNETROLEFORSCO_SKIP_ROLE_SWITCH_FOR_PAIRING_SLAVE_S, "ScattnetRoleForSCO(): Skip role switch for pairing slave: state=%d")
TRC_MSG(AUTUMN_CURRENT_STATE_NOT_ALLOW_TO_DO_THE_ROLE_SWITCH_OPERAT, "autumn current state not allow to do the role switch operation")
TRC_MSG(CASE_TOSHIBA_CORP_WITH_SUBVERSNR_1296_WE_DONT_DO_ROLE_SWI, "Case Toshiba Corp with SubVersNr 1296, we don't do role switch")
TRC_MSG(REMDEV_DID_NOT_ALLOW_ROLE_SWITCH, "RemDev did not allow role switch.")
TRC_MSG(BTBMDOROLESWITCH_MODE0XX_ENCRYPTSTATE0XX_REMOTEFEATU, "BTBMDoRoleSwitch: mode=0x%x, encryptState=0x%x, remoteFeature[5]=0x%x")
TRC_MSG(BTBMDOROLESWITCH_SWITCHSTATE0XX, "BTBMDoRoleSwitch: switchState=0x%x")
TRC_MSG(BDCUNDER_USED0XX, "bdc->under_used=0x%x")
TRC_MSG(BMERR_BTBMGAPLINKCREATE__BTBMALLOCATEFREEDEVICES_FAILE, "[BM][ERR] BTBMGapLinkCreate : BtbmAllocateFreeDevices failed")
TRC_MSG(BMERR_BTBMALLOCATEFREEDEVICES_FAILED__STATUS__D, "[BM][ERR] BtbmAllocateFreeDevices Failed : status = %d")
TRC_MSG(SH_DEVICE_CONTEXT_IS_NULL, "[SH] Device Context is NULL")
TRC_MSG(BMERR_BTBMHANDLERCONNECTIND__BTBMALLOCATEFREEDEVICES_F, "[BM][ERR] btbmHandlerConnectInd : BtbmAllocateFreeDevices failed")
TRC_MSG(BTBMHANDLERCONNECTCFM_CONN_TYPE_UNKNOWN, "btbmHandlerConnectCfm conn type unknown")
TRC_MSG(BTBMHANDLEMODECFM_SWITCHSTATE0X02X_CURMODE0X02X, "btbmHandleModeCfm switchState=0x%02x, curMode=0x%02x")
TRC_MSG(SEC_BTBMHANDLERLINKKEYDELETED, "[SEC] btbmHandlerLinkkeyDeleted")
TRC_MSG(BMERR_BTBMHANDLELINKCONNECTREQ__BTBMHANDLELINKCONNECTR, "[BM][ERR] btbmHandleLinkConnectReq : btbmHandleLinkConnectReq failed")
TRC_MSG(BDC0XX, "bdc=0x%x")
TRC_MSG(TPDMGINBV01C_DISCOVERY_RESULT_ON_BREDR_02X02X0, "TP/DM/GIN/BV-01-C: Discovery result on BR/EDR: %02x,%02x,%02x,%02x,%02x,%02x")
TRC_MSG(DEVICE_NAME_AVAILABLE_IN_CURRENT_INQUIRY_LOOP, "device name available in current inquiry loop")
TRC_MSG(BTBMUTILCONNECTEDDEVICENAMEENTRYFREE, "btbmUtilConnectedDeviceNameEntryFree")
TRC_MSG(BTBMUTILCONNECTEDDEVICENAMEENTRYLOOKUP, "btbmUtilConnectedDeviceNameEntryLookUp")
TRC_MSG(BTBMUTILCONNECTEDDEVICENAMEENTRYLOOKUP_ID, "btbmUtilConnectedDeviceNameEntryLookUp i=%d")
TRC_MSG(BTBMUTILCONNECTEDDEVICENAMEENTRYALLOCATE, "btbmUtilConnectedDeviceNameEntryAllocate")
TRC_MSG(BTBMUTILCONNECTEDDEVICENAMEENTRYUPDATE, "btbmUtilConnectedDeviceNameEntryUpdate")
TRC_MSG(BTBMBLEUTILCONNECTEDDEVICENAMEENTRYALLOCATE, "btbmBLEUtilConnectedDeviceNameEntryAllocate")
TRC_MSG(BTBMBLEUTILCONNECTEDDEVICENAMEENTRYALLOCATE_NOT_EMPTY, "btbmBLEUtilConnectedDeviceNameEntryAllocate not empty")
TRC_MSG(BTBMBLEUTILCONNECTEDDEVICENAMEENTRYALLOCATE_EMPTY_ASSIGN_N, "btbmBLEUtilConnectedDeviceNameEntryAllocate empty, assign name")
TRC_MSG(BTBMBLEUTILCHECKDEVICENAMEAVAILABLE_ITEM08X, "btbmBLEUtilCheckDeviceNameAvailable item:%08x")
TRC_MSG(INQUIRY_STATE_IS_U, "inquiry_state is %u")
TRC_MSG(CURRENT_INQUIRY_CANCEL_OPACTIVITYD, "Current inquiry cancel opactivity:%d")
TRC_MSG(BMERR_BTBMGAPREMOTENAMEREQ__BTBMALLOCATEFREEDEVICES_FA, "[BM][ERR] BTBMGapRemoteNameReq : BtbmAllocateFreeDevices failed")
TRC_MSG(BTBMNAMEREQ_DEVTYPED, "btbmNameReq: devType=%d")
TRC_MSG(BMCONTROLLERINQUIRY_DATAD, "BMController.inquiry_data:%d")
TRC_MSG(AUTUMN_BTBMHANDLERINQUIRYRESULT, "autumn btbmHandlerInquiryResult")
TRC_MSG(BTBMHANDLERINQUIRYRESULT_BM_OPACTIVITY0XX_, "btbmHandlerInquiryResult(): bm_opactivity=0x%x, ")
TRC_MSG(DISCOVERY_RESULT_ON_LE_02X02X02X02X02X02X_ADV_, "Discovery result on LE: %02x,%02x,%02x,%02x,%02x,%02x, ADV Type=0x%x, AD Flag=0x%x")
TRC_MSG(IGNORE_ADVTYPED_FROM_LE_DEVICE, "Ignore advType=%d from LE device")
TRC_MSG(INQRESULTADVTYPED_BDCADVTYPED, "inqResult->advType=%d, bdc->advType=%d")
TRC_MSG(IGNORE_DUAL_MODE_DEVICE_ADV_INDICATION, "Ignore Dual mode device adv indication")
TRC_MSG(IGNORE_NONDISCOVERABLE_LEDUAL_MODE_DEVICE, "Ignore non-discoverable LE/dual mode device")
TRC_MSG(BDCLINK__0XX_BDCUNDER_USED0XX, "bdc->link = 0x%x, bdc->under_used=0x%x")
TRC_MSG(OUR_DISCOVERY_MODE_IS_LIMITED_INQUIRY, "Our discovery mode is limited inquiry")
TRC_MSG(REMOTE_DEVICE_TYPE_IS_LE_OR_DUAL_MODE_DEVICE, "Remote device type is LE or dual mode device")
TRC_MSG(REMOTE_DEVICE_IS_NOT_IN_LIMITED_DICSOVERABLE_MODE, "Remote device is not in limited dicsoverable mode")
TRC_MSG(IGNORE_NONLIMITED_DISCOVERABLE_LEDUAL_MODE_DEVICE, "Ignore non-limited discoverable LE/dual mode device")
TRC_MSG(DISCOVERY_DEVTYPED, "Discovery devType:%d")
TRC_MSG(DISCOVERY_BDCSUPPORT_SERVICE_LISTD, "Discovery bdc->support_service_list:%d")
TRC_MSG(BTBMHANDLERINQUIRYRESULT_INQUIRY_STATE0XX_, "btbmHandlerInquiryResult(): inquiry_state=0x%x, ")
TRC_MSG(INQUIRY_COMPLETE_WHEN_ACTIVITY_IS_INQCANCEL_DUAL_INQUIRY_T, "inquiry complete when activity is INQCANCEL. dual_inquiry_type_cur=%d")
TRC_MSG(BTLOG_BTMTKBMCINQUIRY_STATEU, "BTlog BTMTKBMC(inquiry_state):%u")
TRC_MSG(DLIGHT_TING_BTBMHANDLERMULTIPLENAMEQUERY, "Dlight Ting btbmHandlerMultipleNameQuery")
TRC_MSG(EIR_WITH_NAME_DLIGHT108X, "EIR with Name Dlight1:%08x")
TRC_MSG(THE_STATUSD, "The status:%d")
TRC_MSG(TOKEN08X, "token:%08x")
TRC_MSG(BTBMGETCUSTINQUIRYDATA__IDXU_U_U__VALD_U_U, "btbmGetCustInquiryData : idx(%u, %u, %u) : val(%d, %u, %u)")
TRC_MSG(BTBMHANDLERINQUIRYINTERVALPROCEDURED, "btbmHandlerInquiryIntervalProcedure:%d")
TRC_MSG(MMI_INQUIRY_LENGTHD_CURTIMED_TOTALTIMED, "mmi_inquiry_length=%d, curTime=%d, totalTime=%d")
TRC_MSG(DLIGHT_TING_BTBMMULTIPLENAMEQUERY, "Dlight Ting btbmMultipleNameQuery")
TRC_MSG(BMCONTROLLERINQUIREDDEVICESDUSEDD, "BMController.inquiredDevices[%d].used:%d")
TRC_MSG(BDCNEARUNDER_USED0XX, "bdcNear->under_used=0x%x")
TRC_MSG(DLIGHT_NAME_ADDRESS08X, "Dlight name address:%08x")
TRC_MSG(NAME_REQUEST_STATUSD, "name request status:%d")
TRC_MSG(BTBMBLENAMEREQ, "btbmBleNameReq")
TRC_MSG(SET_BTBMSDPSEARCHATTRIBUTEPENDINGINQUIRY_TO_D, "set btbmSdpSearchAttributePendingInquiry to :%d")
TRC_MSG(COPY_TO_CONNECTED_TABLE_LIST, "Copy to connected table list")
TRC_MSG(BTBMGATTOPSD, "btbmGattOps[%d]")
TRC_MSG(BTBMGATTTOKENSD, "btbmGattTokens[%d]")
TRC_MSG(RESULTFLAGD, "result->flag:%d")
TRC_MSG(UPF_SIGNEDWRITE, "UPF_SignedWrite")
TRC_MSG(BTBMGATTREMOVELINK_LINK_D, "btbmGattRemoveLink link %d")
TRC_MSG(BTBMGATTREMOVELINK_STATE_D, "btbmGattRemoveLink state %d")
TRC_MSG(ADDRESS_02X02X02X, "address %02x,%02x,%02x,")
TRC_MSG(THE_LINK_HANDLER_IS_NOT_INSERT, "The link handler is not insert")
TRC_MSG(BTBMGATTFORCEREMOVELINK_LINK_D, "btbmGattForceRemoveLink link %d")
TRC_MSG(BTBMGATTNAMECALLBACK_EVENT_D, "btbmGattNameCallback event %d")
TRC_MSG(BLE_CONNECTED_CONFIRMED_TRIGGER_ANOTHER_BLE_SEARCH_AGAIN, "BLE connected confirmed, trigger another BLE search again")
TRC_MSG(NO_NAME_TOKEN, "No name token")
TRC_MSG(BTBMGATTCALLBACK_EVENT_D, "btbmGattCallback event %d")
TRC_MSG(BM_OPERATIVITY02X, "bm operativity:%02x")
TRC_MSG(SERVICE_SEARCH_BLE_LINK_COMPLETED_FAST_SEARCH_SERVICE_AGAI, "Service search BLE link completed, fast search service again")
TRC_MSG(BTBMGATTGETREMOATEDEVICENAMECALLBACKD, "btbmGattGetRemoateDeviceNameCallBack():%d")
TRC_MSG(RESULTFLAGD_RESULTLENGTHD, "result->flag:%d, result->length:%d")
TRC_MSG(INSERT_LINK_HANDLER, "Insert link handler")
TRC_MSG(BTBMGATTSERVICESEARCHALLCALLBACKD, "btbmGattServiceSearchAllCallBack():%d")
TRC_MSG(RESULTFLAGD_HANDLE_0XX0XX_TYPED_UUID20XX, "result->flag:%d, handle 0x%x~0x%x, type=%d, uuid2=0x%x")
TRC_MSG(OPUUID204X, "op->uuid2:%04x")
TRC_MSG(DISCOVERY_ALL_PRIMARY_SERVICE_DONE, "Discovery all primary service done")
TRC_MSG(BTBMGATTWRITEREMOTEPRIVACYCALLBACKD, "btbmGattWriteRemotePrivacyCallBack():%d")
TRC_MSG(BTBMGATTWRITEREMOTERECONNECTADDRESSCALLBACKD, "btbmGattWriteRemoteReconnectAddressCallBack():%d")
TRC_MSG(WAIT_NAME_REQUEST_COMPLETED, "Wait name request completed")
TRC_MSG(NAME_REQUEST_COMPLETED, "name request completed")
TRC_MSG(BTBMGATTHANDLEREMNAMEREQTIMEOUTCOMPLETED_08X, "btbmGattHandleRemNameReqTimeoutCompleted %08x")
TRC_MSG(ADDRESS02X02X02X02X02X02X, "address:%02x,%02x,%02x,%02x,%02x,%02x")
TRC_MSG(NAME_REQUEST_TIMER_STOP, "Name request timer stop")
TRC_MSG(BTBMGATT_SERVICESEARCHALL, "BTBMGATT_ServiceSearchAll")
TRC_MSG(BTBMGATT_WRITEREMOTEPRIVACY_PRIVACYD, "BTBMGATT_WriteRemotePrivacy: privacy=%d")
TRC_MSG(BTBMGATT_WRITEREMOTEPRIVACY_NULL_CALLBACK, "BTBMGATT_WriteRemotePrivacy: NULL callback")
TRC_MSG(BTBMGATT_WRITEREMOTERECONNECTADDRESS, "BTBMGATT_WriteRemoteReconnectAddress")
TRC_MSG(BTBMGATT_WRITEREMOTERECONNECTADDRESS_NULL_CALLBACK, "BTBMGATT_WriteRemoteReconnectAddress: NULL callback")
TRC_MSG(UPF_SIGNEDWRITECALLBACKD, "UPF_SignedWriteCallBack():%d")
TRC_MSG(GAP_READ_APPEARANCE_0XX_0XX, "[GAP] read appearance 0x%x, 0x%x")
TRC_MSG(BTBMCONNECTEDREMOTEDEVICENAMECALLBACKD, "btbmConnectedRemoteDeviceNameCallBack():%d")
TRC_MSG(BTBMHANDLERGATTREADYTOASKDEVICENAME, "btbmHandlerGattReadyToAskDeviceName")
TRC_MSG(BTBMGATT_SERVICESEARCHALL_NULL_CALLBACK, "BTBMGATT_ServiceSearchAll: NULL callback")
TRC_MSG(BTBMHANDLERBLEADVEVENT, "BtbmHandlerBLEAdvEvent")
TRC_MSG(ADDRESS_02X02X02X02X02X02X, "Address %02x,%02x,%02x,%02x,%02x,%02x,")
TRC_MSG(WHITELIST_NOD, "WhiteList no:%d")
TRC_MSG(BLACKLISTNO_NOD, "blackListNo no:%d")
TRC_MSG(CALL_CALLBACK_INWHITELISTD_INBLACKLISTD, "Call callback inWhiteList:%d, inBlackList:%d")
TRC_MSG(BTBMHANDLERBLEADVEVENT_END, "BtbmHandlerBLEAdvEvent end")
TRC_MSG(BTBMADVLEGETADVINDEX_D, "BtbmAdvLeGetAdvIndex %d")
TRC_MSG(BTBMLEADVENABLED_INDEXD, "BtBmLeAdvScanEnabled index:%d")
TRC_MSG(BTBMLEADVENABLED_ENABLEDD, "BtBmLeAdvScanEnabled enabled:%d")
TRC_MSG(BTBMLEADVENABLED_SCANONGOINGD, "BtBmLeAdvScanEnabled scanOngoing:%d")
TRC_MSG(BTBMLEADVDISABLED_INDEXD, "BtBmLeAdvScanDisabled index:%d")
TRC_MSG(BTBMLEADVDISABLED_LEADVENABLEDD, "BtBmLeAdvScanDisabled LeAdv(enabled):%d")
TRC_MSG(MAKE_COMMAND_TO_CANCEL_INQUIRY, "Make command to cancel inquiry")
TRC_MSG(OTHER_FUNCTION_NEED_ADV_NOT_STOP, "Other function need Adv, not stop")
TRC_MSG(BM_BTBMSTARTSERVICESEARCHIMMEDIATLY, "[BM] btbmStartServiceSearchImmediatly")
TRC_MSG(BM_BTBMHANDLESERVICESEARCHDELAYTIMEOUT, "[BM] btbmHandleServiceSearchDelayTimeout")
TRC_MSG(BM_BTBMSTARTSERVICESEARCH__DELAY_U_MS, "[BM] btbmStartServiceSearch : delay %u ms")
TRC_MSG(BTBMGAPWRITEPINCODE, "BTBMGapWritePINCode")
TRC_MSG(MTKBMCBM_OPACTIVITY0XX, "MTKBMC(bm_opactivity)=0x%x")
TRC_MSG(HID_VIRTUAL_CABLE_UNPLUG_CALLBACK_REMDEVP, "hid_virtual_cable_unplug_callback. remDev=%p")
TRC_MSG(HID_UNPLUGD, "hid_unplug=%d")
TRC_MSG(DELAY_DELETE_TRUST_CNF_UNTIL_HID_UNPLUG, "Delay delete trust cnf until HID unplug")
TRC_MSG(BTBMGAPWRITEUSERCONFIRM_BDCDEVTYPED, "BTBMGapWriteUserConfirm() bdc->devType=%d")
TRC_MSG(BTBMGAPWRITEUSERCONFIRM_BDC_IS_NULL, "BTBMGapWriteUserConfirm() bdc is null")
TRC_MSG(BTBMGAPWRITEUSERCONFIRM_ACCEPTD, "BTBMGapWriteUserConfirm() accept=%d")
TRC_MSG(SEC_BTBMUPDATEPAIRINGTYPE__IOCAPABILITIYSTATEU, "[SEC] btbmUpdatePairingType : ioCapabilitiyState=%u")
TRC_MSG(SEC_BTBMUPDATEPAIRINGTYPE__SET_PAIRING_TO_BPT_NOT_SAVED, "[SEC] btbmUpdatePairingType : set pairing to BPT_NOT_SAVED")
TRC_MSG(MTKBMCSSPDEVICEINFOAUTHREQUIREMENTSD, "MTKBMC(SSPDeviceInfo).authRequirements:%d")
TRC_MSG(SEC_BTBMHANDLEIOCAPABILITYREQUEST__GAPSECURITYLEVEL_IS_, "[SEC] btbmHandleIoCapabilityRequest : gapSecurityLevel is %u, ioCapabilitiyState=%u")
TRC_MSG(REMOTE_REQUEST_DEDICATED_BONDING_SET_MITM_REQUIRED, "Remote request dedicated bonding. Set MITM required")
TRC_MSG(SEC_BTBMHANDLEIOCAPABILITYREQUEST__JSR82_USEDU_CTSTES, "[SEC] btbmHandleIoCapabilityRequest : jsr82 used=%u, CTSTest=%u")
TRC_MSG(AUTO_ACCEPT_THE_PAIR_REQUEST, "Auto accept the pair request")
TRC_MSG(MTKBMCCTSTESTD, "MTKBMC(CTSTest):%d")
TRC_MSG(A_BDD, "a, b:%d,%d")
TRC_MSG(SHALL_NOT_STORE_RECORD, "shall not store record")
TRC_MSG(MTKBMCSSPDEVICEINFOAUTHREQUIREMENTSU, "MTKBMC(SSPDeviceInfo).authRequirements=%u")
TRC_MSG(REMDEVAUTHINITIATOR__U, "remDev->authInitiator = %u")
TRC_MSG(SEC_REMOTE_IOCAPABILITY_IS_0X3, "[SEC] remote ioCapability is 0x3")
TRC_MSG(SEC_AUTO_ACCEPT_IN_BONDING_STATE_OR_AUTH_INITIATED_BY_LOC, "[SEC] Auto accept in bonding state or auth initiated by local")
TRC_MSG(SEC_LOCAL_AND_REMOTE_MITM_NOT_REQUIRED_AND_NOT_DEDICATE_B, "[SEC] Local and remote MITM not required and not dedicate bonding. Accept directly")
TRC_MSG(MBTBMUTILCHECKBONDINGSTATE0XX__0XX, "MbtbmUtilCheckBondingState=0x%x | 0x%x")
TRC_MSG(BTBMUTILCHECKPAIRINGSTATE0XX__0XX, "btbmUtilCheckPairingState=0x%x | 0x%x")
TRC_MSG(SECURITY_MODE_24, "Security mode 2/4")
TRC_MSG(SECURITY_MODE_3, "Security mode 3")
TRC_MSG(MTKBMCPIN_BDCUNDER_USED0XX, "MTKBMC(pin_bdc)->under_used=0x%x")
TRC_MSG(PROPERTY_LESCANABLE_NOT_SET, "Property lescanable not set")
TRC_MSG(BTBMLOCALWRITESCANENABLED02X02X02X02X, "BTBMLocalWriteScanEnabled:%02x,%02x,%02x,%02x,")
TRC_MSG(BNEPINITIALIZED, "[BNEP]Initialized")
TRC_MSG(BNEPDEINITIALIZED, "[BNEP]Deinitialized")
TRC_MSG(BNEPUNABLE_TO_REGISTER_WITH_L2CAP, "[BNEP]Unable to register with L2CAP")
TRC_MSG(BNEPREGISTERED, "[BNEP]Registered")
TRC_MSG(BNEPDEREGISTERED, "[BNEP]Deregistered")
TRC_MSG(BNEPESTABLISHING_L2CAP_CONNECTION, "[BNEP]Establishing L2CAP connection")
TRC_MSG(BNEPL2CAP_CONNECT_REQUEST_FAILED_D, "[BNEP]L2CAP connect request failed %d")
TRC_MSG(BNEPPANU_OPEN_IND_D, "[BNEP]panu open ind %d")
TRC_MSG(BNEPBNEP_CLOSE_ENTER, "[BNEP]BNEP_Close enter")
TRC_MSG(BNEPBNEP_CLOSE_OUT, "[BNEP]BNEP_Close out")
TRC_MSG(BNEPCONTROL_COMMAND_STARTED, "[BNEP]Control command started")
TRC_MSG(BNEPSEND_STATUS_D, "[BNEP]Send status %d")
TRC_MSG(BNEPSEND_PACKET_TYPE_D, "[BNEP]Send packet type %d")
TRC_MSG(BNEPCONTROL_RESPONSE, "[BNEP]Control Response")
TRC_MSG(BNEPUNKNOWN_CONTROL_TYPE_U, "[BNEP]Unknown control type %u")
TRC_MSG(BNEP_UNEXPECTED_L2EVENT_D_ON_CHANNEL_D, "[BNEP] Unexpected L2EVENT %d on channel %d")
TRC_MSG(BNEPHANDLEDATAIND_ENTER, "[BNEP]HandleDataInd enter")
TRC_MSG(BNEPHANDLEDATAIND_BNEP_TYPEX, "[BNEP]HandleDataInd BNEP type(%x)")
TRC_MSG(BNEP_RECEIVED_CONTROL_PACKET, "[BNEP] Received Control Packet")
TRC_MSG(BNEP_RECEIVED_CONTROL_RESPONSE_PACKET, "[BNEP] Received Control Response Packet")
TRC_MSG(BNEP_RECEIVED_GENRL_ETHER_PACKET, "[BNEP] Received Gen'rl Ether Packet")
TRC_MSG(BNEP_RECEIVED_COMPRESSED_ETHER_PACKET, "[BNEP] Received Compressed Ether Packet")
TRC_MSG(BNEP_RECEIVED_COMP_SRC_ETHER_PACKET, "[BNEP] Received Comp Src Ether Packet")
TRC_MSG(BNEP_RECEIVED_COMP_DEST_ETHER_PACKET, "[BNEP] Received Comp Dest Ether Packet")
TRC_MSG(BNEP_RECEIVED_GENERAL_ETHER_PACKET, "[BNEP] Received General Ether Packet")
TRC_MSG(BNEPHANDLEDATAIND__HANDLEEXTHEADER, "[BNEP]HandleDataInd  HandleExtHeader")
TRC_MSG(BNEPHANDLEDATAIND_CONTROL_PACKET_WITH_ENTENSION_HEADER_EN, "[BNEP]HandleDataInd Control packet with entension header end out")
TRC_MSG(BNEPHANDLEDATAIND_BNEPAPPCALLBACK_BNEPEVENT_PACKET_IND_OU, "[BNEP]HandleDataInd BnepAppCallBack BNEPEVENT_PACKET_IND out")
TRC_MSG(BNEPHANDLEEXTHEADER_ENTER, "[BNEP]HandleExtHeader enter")
TRC_MSG(BNEPHANDLEEXTHEADER_BNEP_TYPEX, "[BNEP]HandleExtHeader BNEP type(%x)")
TRC_MSG(BNEP_CONTROL_RESPONSE, "[BNEP] Control Response")
TRC_MSG(BNEP_HANDLEEXTHEADER_RECEIVED_UNKNOWN_CONTROL_TYPE_U, "[BNEP] HandleExtHeader received unknown control type %u")
TRC_MSG(BNEPHANDLEDATAIND_BNEPAPPCALLBACK_BNEPEVENT_PACKET_IND_RE, "[BNEP]HandleDataInd BnepAppCallBack BNEPEVENT_PACKET_IND report known control packet first")
TRC_MSG(BNEPHANDLEEXTHEADER_BNEP_ETHERNET_EMULATION_IS_XA_ENABLED, "[BNEP]HandleExtHeader BNEP_ETHERNET_EMULATION is XA_ENABLED")
TRC_MSG(BNEPHANDLEEXTHEADER_GET_RID_OF_EXTHDR, "[BNEP]HandleExtHeader get rid of extHdr")
TRC_MSG(BNEPHANDLEEXTHEADER_BNEP_ETHERNET_EMULATION_IS_NOT_XA_ENA, "[BNEP]HandleExtHeader BNEP_ETHERNET_EMULATION is not XA_ENABLED")
TRC_MSG(BNEPHANDLEEXTHEADER_OUT, "[BNEP]HandleExtHeader out")
TRC_MSG(BNEPBNEPSETTIMER_ENTER, "[BNEP]BnepSetTimer enter")
TRC_MSG(BNEPBNEPSETTIMER_MEMSET_PANUPCONTROLPKTD, "[BNEP]BnepSetTimer memset panu(%p):controlPkt(%d)")
TRC_MSG(BNEPBNEPSETTIMER_BT_STATUS_FAILED_OUT, "[BNEP]BnepSetTimer BT_STATUS_FAILED out")
TRC_MSG(BNEPBNEPSETTIMER_BT_STATUS_IN_PROGRESS_OUT, "[BNEP]BnepSetTimer BT_STATUS_IN_PROGRESS out")
TRC_MSG(BNEPBNEPSETTIMER_MEMCPY_PANUPCONTROLPKTD, "[BNEP]BnepSetTimer memcpy panu(%p):controlPkt(%d)")
TRC_MSG(BNEPBNEPSETTIMER_BT_STATUS_SUCCESS_OUT, "[BNEP]BnepSetTimer BT_STATUS_SUCCESS out")
TRC_MSG(BNEPBNEPTIMEOUTHANDLER_ENTER, "[BNEP]BnepTimeoutHandler enter")
TRC_MSG(BNEPBNEPTIMEOUTHANDLER_TIMER_IS_NOT_FOUND, "[BNEP]BnepTimeoutHandler Timer is not found")
TRC_MSG(BNEPBNEP_SETUP_CONNECTION_TIMEOUT, "[BNEP]BNEP_SETUP_CONNECTION_TIMEOUT")
TRC_MSG(BNEPBNEPTIMEOUTHANDLER_OUT, "[BNEP]BnepTimeoutHandler out")
TRC_MSG(BT_IN_STATUS_DEINIT, "BT in status deinit")
TRC_MSG(BT_IN_STATUS_INIT, "BT in status init")
TRC_MSG(CMGR_SCO_CREATE_FAILED_WITHOUT_A_CONFIRM_MAKE_FAKE_REPOR, "[CMGR] SCO create failed without a confirm. Make fake report to upper layers")
TRC_MSG(CONNMGRCREATEAUDIOLINKSCOCONNECTP_REMDEVP_FLAGU, "ConnMgrCreateAudioLink(scoConnect=%p, RemDev=%p, flag=%u)")
TRC_MSG(CONNMGRCREATEAUDIOLINK_CREATE_EXT_SCO_WITH_CODEC__D, "ConnMgrCreateAudioLink Create ext SCO with codec = %d")
TRC_MSG(CONNMGRCREATEAUDIOLINK_C, "ConnMgrCreateAudioLink")
TRC_MSG(CMGR_CMGRSCORETRYTIMERTYPE02X, "CMGR CMGR(scoRetryTimerType):%02x")
TRC_MSG(SCOCONSCORDSCOPARMS, "scoCon->scord->scoParms")
TRC_MSG(SCO_WAIT_FOR_ROLE_SWITCH_RETRY_FOR_SCO, "SCO wait for Role Switch retry for SCO")
TRC_MSG(SCO_WAIT_FOR_ROLE_SWITCH_COUNTDREMDEV04X, "SCO wait for Role switch count:%d,remDev=%04X")
TRC_MSG(SCO_WAIT_FOR_ROLE_SWITCH_RETRY_1, "SCO wait for Role Switch retry 1")
TRC_MSG(SCO_WAIT_FOR_ROLE_SWITCH_RETRY_2, "SCO wait for Role Switch retry 2")
TRC_MSG(ONLY_1_SCATTERNET_CAN_CREATE_SCO, "Only 1 scatternet, can create SCO")
TRC_MSG(REMDEVSCOPARMS_2D, "remDev->scoParms 2:%d")
TRC_MSG(CONNMANAGER_EVENTD, "ConnManager: event=%d")
TRC_MSG(CONNMGRCREATEAUDIOLINK_A, "ConnMgrCreateAudioLink a")
TRC_MSG(THE_CMGRHANDLER_IS_D, "The cmgrHandler is :%d")
TRC_MSG(THE_STOPSNIFFSTATUS_RESULTD, "The stopSniffStatus result:%d")
TRC_MSG(READ_TX_POWER_DONE, "Read Tx Power done")
TRC_MSG(CMGR_ADD_HANDLER0XX, "CMGR add handler:0x%x")
TRC_MSG(CMGRCON_CMGR_CREATEDATALINKP, "[CMGR][CON] CMGR_CreateDataLink=%p")
TRC_MSG(BT_NOT_IN_INITIALIZE_STATE, "BT not in initialize state")
TRC_MSG(AUTUMN_CONNECTION_ALREADY_CONNECTED, "autumn connection already connected")
TRC_MSG(CMGR_CONNECTED, "CMGR Connected")
TRC_MSG(PERVIOUS_SCO_CONNECT_REQUEST_NOT_COMPLETED, "Pervious SCO connect Request not completed")
TRC_MSG(HANDLERBDCLINKSCOPARMS_1D_CODECD, "Handler->bdc->link->scoParms 1:%d, codec=%d")
TRC_MSG(FOR_SCO_LINK_STATE02X, "For SCO link state:%02x")
TRC_MSG(CONNMGRCREATEAUDIOLINK_B, "ConnMgrCreateAudioLink b")
TRC_MSG(CMGR_CREATEAUDIOLINKP, "CMGR_CreateAudioLink(%p)")
TRC_MSG(CMGR_CREATEAUDIOLINK_EXP_D, "CMGR_CreateAudioLink_Ex(%p, %d)")
TRC_MSG(AUTUMN_CMGR_ACTIVATESNIFFTIMER_SUCCESS, "autumn CMGR_ActivateSniffTimer success")

TRC_MSG(ERROR_RESPONSED, "Error response:%d")

TRC_MSG(GAVDPGAVDPSWITCHROLE, "[GAVDP][GavdpSwitchRole]+++")
TRC_MSG(A_HCCWIFICONTROLLERNUMOFDATABLOCKBUFFERD, "A HCC(wifiController).numOfDataBlockbuffer:%d")
TRC_MSG(B_HCCWIFICONTROLLERNUMOFDATABLOCKBUFFERD, "B HCC(wifiController).numOfDataBlockbuffer:%d")
TRC_MSG(HCCWIFICONTROLLERAMPTXPACKETSSENTD, "HCC(wifiController).ampTxPacketsSent:%d")
TRC_MSG(C_HCCWIFICONTROLLERNUMOFDATABLOCKBUFFERD, "C HCC(wifiController).numOfDataBlockbuffer:%d")
TRC_MSG(F_HCCWIFICONTROLLERNUMOFDATABLOCKBUFFERD, "F HCC(wifiController).numOfDataBlockbuffer:%d")
TRC_MSG(F_HCCWIFICONTROLLERMAXDATABLOCKLENGTHD, "F HCC(wifiController).maxDataBlockLength:%d")
TRC_MSG(F_HCCWIFICONTROLLERMAXACLTXDATALENGTHD, "F HCC(wifiController).maxACLTxDataLength:%d")
TRC_MSG(TX_AVAILABLE_PACKET_BUFFER_D, "Tx available packet buffer :%d")
TRC_MSG(E_HCCWIFICONTROLLERNUMOFDATABLOCKBUFFERD, "E HCC(wifiController).numOfDataBlockbuffer:%d")
TRC_MSG(HCISENTAMPCOMMAND_D, "HciSentAMPCommand %d")
TRC_MSG(HCIPROCESSAMPRXEVENT_COMPLETED, "HciProcessAMPRxEvent COMPLETE:%d")
TRC_MSG(HCIPROCESSAMPRXEVENT_STATUSED, "HciProcessAMPRxEvent STATUSE:%d")
TRC_MSG(PALINIT_MSG_ID_PAL_BT_CREATE_PHYSICAL_LINK_COMMAND_D_, "[PAL][Init] MSG_ID_PAL_BT_CREATE_PHYSICAL_LINK_COMMAND %d %d")
TRC_MSG(PALINIT_MSG_ID_PAL_BT_ACCEPT_PHYSICAL_LINK_COMMAND_D_, "[PAL][Init] MSG_ID_PAL_BT_ACCEPT_PHYSICAL_LINK_COMMAND %d %d ")
TRC_MSG(PALINIT_MSG_ID_PAL_BT_DISCONNECT_PHYSICAL_LINK_COMMAND_, "[PAL][Init] MSG_ID_PAL_BT_DISCONNECT_PHYSICAL_LINK_COMMAND %d %d ")
TRC_MSG(PALINIT_MSG_ID_PAL_BT_CREATE_LOGICAL_LINK_COMMAND_D_D, "[PAL][Init] MSG_ID_PAL_BT_CREATE_LOGICAL_LINK_COMMAND %d %d ")
TRC_MSG(PALINIT_MSG_ID_PAL_BT_ACCEPT_LOGICAL_LINK_COMMAND_D_D, "[PAL][Init] MSG_ID_PAL_BT_ACCEPT_LOGICAL_LINK_COMMAND %d %d ")
TRC_MSG(PALINIT_MSG_ID_PAL_BT_DISCONNECT_LOGICAL_LINK_COMMAND_, "[PAL][Init] MSG_ID_PAL_BT_DISCONNECT_LOGICAL_LINK_COMMAND %d %d ")
TRC_MSG(PALINIT_MSG_ID_PAL_BT_FLOW_SPEC_MODIFY_COMMAND_D_D_, "[PAL][Init] MSG_ID_PAL_BT_FLOW_SPEC_MODIFY_COMMAND %d %d ")
TRC_MSG(PALINIT_MSG_ID_PAL_BT_READ_LOCAL_AMP_ASSOC_COMMAND_D_, "[PAL][Init] MSG_ID_PAL_BT_READ_LOCAL_AMP_ASSOC_COMMAND %d %d ")
TRC_MSG(PALINIT_MSG_ID_PAL_BT_WRITE_REMOTE_AMP_ASSOC_COMMAND_D, "[PAL][Init] MSG_ID_PAL_BT_WRITE_REMOTE_AMP_ASSOC_COMMAND %d %d ")
TRC_MSG(HCI_RESET_FAILURE_RADIOMOD_UPDATES_MAXCOMMANDS_FLAG, "HCI RESET Failure: radiomod updates maxCommands flag")
TRC_MSG(UNEXPECTED_EVENT02X, "Unexpected event=%02x")
TRC_MSG(PANIC_INDEXD, "PANIC index:%d")
TRC_MSG(A1_ACLTXPACKETSLEFTD, "A1 aclTxPacketsLeft:%d")
TRC_MSG(A1_HCCCONHCICONENTRYINDEXPACKETSSENTD, "A1 HCC(con)[hciConEntryIndex].packetsSent:%d")
TRC_MSG(ALMOST_EMPTY, "Almost empty")
TRC_MSG(BTPACKET_RETRANSMISSION_CONTEXTD, "Btpacket retransmission context:%d")
TRC_MSG(DEBUG_ACK_FROM_REMOTE_SIDEHCI_STILL_RETRANSMITTED, "DEBUG ACK from remote side,HCI still retransmitted")
TRC_MSG(ERR_MAY_ASSERT_HERE_, "[ERR] May assert here !!!")
TRC_MSG(HCCMAXCOMMANDSD, "HCC(maxCommands):%d")
TRC_MSG(ERR_GET_A_AMP_CON_ADDRESS_IS_0__IGNORE_IT, "[ERR] Get a AMP con address is 0 ! ignore it!")
TRC_MSG(HCIGETAMPHCICONNECTIOND, "HciGetAMPHciConnection:%d")
TRC_MSG(AMP_CON_STATEDD, "AMP con state:%d,%d")
TRC_MSG(HCIADDCONNECTION_HCIHANDLED_LINKTYPED, "HciAddConnection: hciHandle[%d], linkType[%d]")
TRC_MSG(HCIADDCONNECTION_HCIHANDLED_IS_ALREADY_IN_THE_TABLE, "HciAddConnection: hciHandle[%d] is already in the table")
TRC_MSG(HCIDELETEAMPCONNECTIOND, "HciDeleteAMPConnection:%d")
TRC_MSG(HCCWIFICONTROLLERNUMOFDATABLOCKBUFFERD, "HCC(wifiController).numOfDataBlockbuffer:%d")
TRC_MSG(SET_UART_AWAKE_TIMEOUT_TO_U_MS, "set uart awake timeout to %u ms")
TRC_MSG(UART_RX_STATE_RESET, "UART Rx State Reset")
TRC_MSG(RETURN_AND_IGNORE_WRITE_TO_UART, "Return and ignore write to UART")
TRC_MSG(TRY_TO_CALL_CHIP_WAKEUP_1, "Try to call chip wakeup 1")
TRC_MSG(ACQUIRE_UART_AWAKE_WAKELOCK, "Acquire uart awake wakelock")
TRC_MSG(RELEASE_UART_AWAKE_WAKELOCK, "Release uart awake wakelock")
TRC_MSG(RECEIVE_UNKNOWN_TYPE02X, "Receive unknown Type:%02x")
TRC_MSG(INVALID_FRAMING, "Invalid framing")
TRC_MSG(UARTWAKEUPTIMEOUT1, "uartWakeupTimeout1")
TRC_MSG(SM_VERIFYHOSTSLEEPTIMEOUT, "[SM] verifyHostSleepTimeout")
TRC_MSG(SM_IT_CAN_ENTER_SLEEP, "[SM] It can enter sleep")
TRC_MSG(SM_IT_WILL_NOT_SLEEP, "[SM] It will not sleep")
TRC_MSG(SM_TRY_TO_CALL_CHIP_WAKEUP_2, "[SM] Try to call chip wakeup 2")
TRC_MSG(P_ACK, "P ack")
TRC_MSG(N_ACK, "N ack")
TRC_MSG(MT66XX_FLOW_CONTROL_TIMEOUT, "MT66xx flow control timeout")
TRC_MSG(PROTOCOLINLINKMODED, "Protocol->inLinkMode:%d")
TRC_MSG(PROTOCOLOUTLINKMODED, "Protocol->outLinkMode:%d")
TRC_MSG(L2CAP_INDEXD_STATUSD_RETURN_BUSY, "l2cap index:%d status:%d return busy!")
TRC_MSG(L2CAP_ALLOCATEFIXCHANNEL_PSM04X, "L2CAP_AllocateFixChannel PSM:%04x")
TRC_MSG(A2MP_DLIGHT_A1D, "A2MP Dlight a1:%d")
TRC_MSG(L2CAP_REMOTE_PSM0XX_OUTMODED_INMODED, "l2cap: remote psm:0x%x outMode:%d inMode:%d")
TRC_MSG(L2CAP_CONNECTREQ_RPSM0XX_OUTMODED_INMODED, "L2Cap: ConnectReq r-psm:0x%x outMode:%d inMode:%d")
TRC_MSG(ALLOCATE_LOCAL_CHANNEL_CID04X, "Allocate local channel cid:%04x")
TRC_MSG(L2CAP_RXWINDOWSIZED, "l2cap rxWindowSize:%d")
TRC_MSG(L2CAP_UPPER_ACCEPT, "l2cap: Upper accept")
TRC_MSG(L2CAP_UPPER_REJECT, "l2cap: Upper reject")
TRC_MSG(L2CAP_PASS_TO_CREATECHANNEL_STATUSD, "l2cap: pass to createchannel status:%d")
TRC_MSG(L2CAPERR_WRONG_STATE_AT_L2CAPC_455, "[L2CAP][ERR] wrong state at l2cap.c #455")
TRC_MSG(ERROR_1, "Error 1")
TRC_MSG(ERROR_2, "Error 2")
TRC_MSG(ERROR_2_STATED, "Error 2 state:%d")
TRC_MSG(L2CAP_DISCONNECTREQ_CIDD, "l2Cap: DisconnectReq cid:%d")
TRC_MSG(L2CAP_SENDDATA_STATED_RETURND, "L2CAP_SendData state:%d return:%d")
TRC_MSG(L2CAP_CHANNEL_ALLOCATED_BEFORE, "L2CAP channel allocated before.")
TRC_MSG(TRY_TO_ALLOCATE_L2CAP_CHANNEL, "Try to allocate L2CAP channel")
TRC_MSG(WRN_AVSENDDATA_DDD__LOCALMPUD, "[WRN] AvSendData (%d)(%d)(%d) > localMpu:%d")
TRC_MSG(WRN_CHECK3_FLAGS0XX_STATED, "wrn check3 flags:0x%x state:%d")
TRC_MSG(L2CAP_SENDCONFIGREQ_STATED_FLAGS0XX_TXCOUNTD, "l2cap: SendConfigReq state:%d flags:0x%x txcount:%d")
TRC_MSG(WRN_CHECK2_FLAGS0XX_STATED, "wrn check2 flags:0x%x state:%d")
TRC_MSG(L2CAP_RECONFIG_STATE_FLAGS0XX, "l2cap reconfig state flags:0x%x")
TRC_MSG(L2CAP_CID_OUTOFRANGE_CID0XX, "l2cap Cid out-of-range cid:0x%x")
TRC_MSG(L2CAP_CID_CID0XX, "l2cap Cid cid:0x%x")
TRC_MSG(L2CAP_GETTXMTU_STATED_RETURND, "L2CAP_GetTxMtu state:%d return:%d")
TRC_MSG(L_L2CAP_GETTXMTU_STATED, "L: L2CAP_GetTxMtu state:%d")
TRC_MSG(L2CAP_KEEP_QUEUE_PACKET_STATED, "l2cap: keep queue packet state:%d")
TRC_MSG(L2CAP_RETURN_NOCONNECTION_STATED, "l2cap: return no-connection state:%d")
TRC_MSG(L2CAP_L2CAP_SEND_SIGNAL_PACKET_OPCODE0XX_LEND, "L2Cap: L2Cap_Send signal packet OpCode:0x%x len(%d)")
TRC_MSG(L2CAP_QUEUETX_FAIL_AT_CID0XX, "l2cap QueueTx fail at cid:0x%x")
TRC_MSG(L2CAP_SEND_SFRAME, "L2CAP_Send Sframe")
TRC_MSG(CHANNELOUTLINKMODED, "Channel->outLinkMode:%d")
TRC_MSG(REMOTECIDD, "RemoteCid:%d")
TRC_MSG(L2CAP_QUEUETX_SFRAME_FAIL_AT_CID0XX, "l2cap QueueTx sframe fail at cid:0x%x")
TRC_MSG(L2CAP_QUEUETX_FAIL_BDS_DISC, "l2cap QueueTx fail BDS_DISC")
TRC_MSG(L2CAP_QUEUETXPACKET_ERROR_WRONG_PRI_TYPED, "L2Cap_QueueTxPacket error wrong pri type:%d")
TRC_MSG(L2CAP_SENDCONFIGRSP_RESULTD_FLAGS0XX, "l2cap: sendconfigrsp result:%d flags:0x%x")
TRC_MSG(L_LINKMODES0XX_FIXEDSUPPORTED0D, "L: linkModes:0x%x FixedSupported[0]:%d")
TRC_MSG(L2CAP_PSM_IN_MODE02X, "L2CAP PSM in mode:%02x")
TRC_MSG(L2CAP_LINK_MODE02X, "L2CAP link mode:%02x")
TRC_MSG(L_SIGNAL0XX, "L: signal:0x%x")
TRC_MSG(L2CAP_NOTIFYAMPCHANNELCLOSED_CHANNELIDD, "L2CAP_NotifyAMPChannelClosed ChannelId:%d")
TRC_MSG(L2CAPAMPSTATE_W4_CREATE_OPCODE02X, "L2CapAMPState_W4_Create Opcode:%02x")
TRC_MSG(L2CAP_SENDCREATECHANNELRSPINTERNALD, "L2Cap_SendCreateChannelRspInternal:%d")
TRC_MSG(INFLAGD_OUTFLAGD_PSM0XX_ORIGIND, "inflag:%d outflag:%d psm:0x%x origin:%d")
TRC_MSG(L2CAPAMPSTATE_W4_CREATERSP_OPCODE02X, "L2CapAMPState_W4_CreateRsp Opcode:%02x")
TRC_MSG(L2CAP_SENDCREATECHANNELREQINTERNALD, "L2Cap_SendCreateChannelReqInternal:%d")
TRC_MSG(L2CAPAMPSTATE_W4_MOVE_OPCODE02X, "L2CapAMPState_W4_Move Opcode:%02x")
TRC_MSG(L2CAPAMPSTATE_W4_MOVERSP_OPCODE02X, "L2CapAMPState_W4_MoveRsp Opcode:%02x")
TRC_MSG(CHANGE_TO_W4_MOVE_CNF_CONTROLLER_ID_IS_NOT_SUPPORTED, "Change to W4 MOVE CNF, controller Id is not supported")
TRC_MSG(CHANGE_TO_L2C_W4_MOVE_CNF, "Change to L2C_W4_MOVE_CNF")
TRC_MSG(L2CAPAMPPRIORIZATIONALGORITHM_TRUE, "L2CapAMPPriorizationAlgorithm TRUE")
TRC_MSG(L2CAPAMPPRIORIZATIONALGORITHM_FALSE, "L2CapAMPPriorizationAlgorithm FALSE")
TRC_MSG(L2CAPAMPSTATE_W4_MOVECNF_OPCODE02X, "L2CapAMPState_W4_MoveCnf Opcode:%02x")
TRC_MSG(L2CAPAMPSTATE_W4_MOVECNFRSP_OPCODE02X, "L2CapAMPState_W4_MoveCnfRsp Opcode:%02x")
TRC_MSG(WRN_CON_SETTING_IS_NULL, "[WRN] con_setting is NULL")
TRC_MSG(NEW_CHANNELCREATECHANNELINITIATORD, "new_channel->createChannelInitiator:%d")
TRC_MSG(TRY_TO_MOVE_CHANNEL, "Try to move channel")
TRC_MSG(UNABLED_TO_FIND_CHANNELIDD, "Unabled to find ChannelId:%d")
TRC_MSG(CHANNEL_STATED_NOT_ABLE_TO_MOVE, "Channel state:%d, Not able to move")
TRC_MSG(AMP_NOT_SUPPORTED, "AMP not supported")
TRC_MSG(CHANNEL_MOVE_TO_BREDR, "Channel Move to BR/EDR")
TRC_MSG(CHANNELLINKREMOTEWIFIAMPEXISTSD, "channel->link->remoteWifiAMP.exists:%d")
TRC_MSG(CHANNELLINKREMOTEWIFIAMPPHYSICAL_LINK_SATED, "channel->link->remoteWifiAMP.physical_link_sate:%d")
TRC_MSG(SET_CHANNEL_A08X_TO_D, "Set channel a:%08x to %d")
TRC_MSG(A_CHANNELENHANCEDNEEDTOSENDFINALD, "A channel->enhancedNeedToSendFinal:%d")
TRC_MSG(SET_CHANNEL_B08X_TO_D, "Set channel b:%08x to %d")
TRC_MSG(SET_CHANNEL_C08X_TO_D, "Set channel c:%08x to %d")
TRC_MSG(SET_CHANNEL_D08X_TO_D, "Set channel d:%08x to %d")
TRC_MSG(SET_CHANNEL_E08X_TO_D, "Set channel e:%08x to %d")
TRC_MSG(L2CAP_AMP_L2CAP_SENDCREATECHANNELREQINTERNAL, "L2CAP AMP L2Cap_SendCreateChannelReqInternal")
TRC_MSG(L2CAP_AMP_L2CAP_SENDCREATECHANNELRSPINTERNAL_WITH_CHANNEL, "L2CAP AMP L2Cap_SendCreateChannelRspInternal with Channel->result:%02x")
TRC_MSG(L2CAP_ENHANCED_RETRANSMISSION_TIMEOUT_WAIT_F_BITD_CIDD, "L2CAP enhanced Retransmission Timeout Wait F bit:%d cid:%d")
TRC_MSG(L2CAP_ENHANCED_RETRANSMISSION_TIMEOUT_WAIT_F_BITD, "L2CAP enhanced Retransmission Timeout Wait F bit:%d")
TRC_MSG(L2CAP_ENHANCED_RETRANSMISSION_TIMOUT, "L2CAP enhanced Retransmission timout")
TRC_MSG(L2CAP_ENHANCED_SENT_RNR, "L2CAP enhanced Sent RNR")
TRC_MSG(L2CAP_ENHANCED_SENT_RR, "L2CAP enhanced Sent RR")
TRC_MSG(BUILD_S_FRAME, "build D frame")
TRC_MSG(L2CAP_ENHANCED_RETRANSMISSION_TIMEOUT_BUT_IN_WAIT_F_STATE, "L2CAP enhanced Retransmission timeout but in WAIT_F state")
TRC_MSG(L2CAP_ENHANCED_L2CAP_ENHANCEDL2CAP_HANDLEENHANCEDMONITORTI, "L2CAP enhanced L2CAP enhanced:L2Cap_HandleEnhancedMonitorTimout enhancedWait_F:%d")
TRC_MSG(L2CAP_ENHANCED_MONITOR_TIMEOUT_BUT_IN_XMIT_STATE, "L2CAP enhanced Monitor timeout but in XMIT state")
TRC_MSG(L2CAP_ENHANCED_RETRY_COUNT02X_MAX02X, "L2CAP enhanced Retry count:%02x, max:%02x")
TRC_MSG(L2CAP_ENHANCED_TRANSMITMAX0X02X_REACH__DISCONNECT, "L2CAP enhanced transmitMax:0x%02x reach ! disconnect")
TRC_MSG(L2CAP_FLUSH_PACKETS, "L2CAP flush packets")
TRC_MSG(L2CAP_FORCETOGETANACK, "L2Cap_ForceToGetAnAck")
TRC_MSG(L2DATA_L2CAP_SEND_RR_CIDD_FROMD_RECVSEQD, "l2data: L2CAP Send RR cid:%d from:%d recvSeq:%d")
TRC_MSG(L2DATA_L2CAP_SEND_RNR0XX_CIDD, "l2data: L2CAP Send RNR:0x%x cid:%d")
TRC_MSG(L2DATA_L2CAP_SEND_SREJ0XX_REQSEQ0XX_CIDD, "l2data: L2CAP Send SREJ:0x%x reqseq:0x%x cid:%d")
TRC_MSG(L2DATA_L2CAP_SENDREJ_CHANNELENHANCEDREJSENTD_CIDD, "l2data: L2Cap_SendREJ Channel->enhancedRejSent:%d cid:%d")
TRC_MSG(L2CAP_SENDREJ_CHANNELENHANCEDREJSENTD, "L2Cap_SendREJ Channel->enhancedRejSent:%d")
TRC_MSG(PING1_TIME04D04D, "ping1 time:%04d%04d")
TRC_MSG(L2CAP_ENHANCEMENTRETRANSMISSIONSETPOLLBIT_SET_POLL_BIT_IND, "L2Cap_EnhancementRetransmissionSetPollBit set poll bit (index:%d) cid:%d")
TRC_MSG(L2CAP_ENHANCEDL2CAP_PROCESSRECVPORFBIT_P_CONTROLD_CIDD, "L2CAP enhanced:L2Cap_ProcessRecvPorFBit p_control:%d cid:%d")
TRC_MSG(L2CAP_ENHANCEDL2CAP_PROCESSRECVPORFBIT__F_CONTROLD, "L2CAP enhanced:L2Cap_ProcessRecvPorFBit - f_control:%d")
TRC_MSG(B_CHANNELENHANCEDNEEDTOSENDFINALD, "B channel->enhancedNeedToSendFinal:%d")
TRC_MSG(L2CAP_ENHANCEDL2CAP_PROCESSRECVPORFBIT_ENHANCEDWAIT_FD_C, "L2CAP enhanced:L2Cap_ProcessRecvPorFBit enhancedWait_F:%d cid:%d")
TRC_MSG(PING2_TIME04D04D, "ping2 time:%04d%04d")
TRC_MSG(PING_BACK_DIFFD, "ping back diff:%d")
TRC_MSG(L2CAP_ENHANCEDL2CAP_PROCESSRECVPORFBIT_ENHANCEDACKWAITING, "L2CAP enhanced:L2Cap_ProcessRecvPorFBit enhancedAckWaiting:%d cid:%d")
TRC_MSG(L2DATA_L2CAP_SEND_ACK_WAIT_FD_BUSYD_SENDFLAGD, "l2data L2cap send ack Wait_F:%d busy:%d sendFlag:%d")
TRC_MSG(L2CAP_ENHANCED_TRY_TO_SEND_ACK, "L2CAP enhanced Try to send ack.")
TRC_MSG(L2CAP_ENHANCED_TRY_TO_SEND_ACK_BUT_A_OUTGOIND_POLL_IS_SENT, "L2CAP enhanced Try to send ack but a outgoind poll is sent.")
TRC_MSG(L2CAP_ENHANCED_TRY_TO_SEND_ACK_IN_WAIT_FINAL, "L2CAP enhanced Try to send ack in wait final.")
TRC_MSG(L2CAP_SEND_RNR, "L2CAP Send RNR")
TRC_MSG(DLIGHT_REMOTE_WAIT_ACK_ISD, "Dlight remote wait ack is:%d")
TRC_MSG(SEND_RR_A11_4, "Send RR a11_4")
TRC_MSG(L2CAP_OUT_OF_NONACKNO_DWINDOWD_WAIT_SYNC_RR_, "L2cap out of nonAckNo (%d)/window(%d). wait sync RR ")
TRC_MSG(L2CAP_ENHANCEDL2CAP_ENHANCEDRETRANSMISSIONPASSTOTXFBIT_ENH, "L2CAP enhanced:L2Cap_EnhancedRetransmissionPassToTxFBit enhancedAckWaiting:%d")
TRC_MSG(WRN_SREJLISTTXCOUNTD, "wrn SrejListTxCount:%d")
TRC_MSG(CHANNELENHANCEDSREJLISTD, "Channel->enhancedSrejList:%d")
TRC_MSG(REQSEQD, "ReqSeq:%d")
TRC_MSG(CHANNELTXSREJLIST0D, "Channel->txSrejList[0]:%d")
TRC_MSG(L2CAP_ENHANCEDGETNEXTSREJRXMISSINGREJECTTABLE, "L2Cap_EnhancedGetNextSrejRxMissingRejectTable")
TRC_MSG(CHANNELENHANCEDSREJLIST_08X, "Channel->enhancedSrejList %08x")
TRC_MSG(CHANNELTXSREJLISTD08X, "Channel->txSrejList[%d]:%08x")
TRC_MSG(L2CAP_ENHANCEDGETNEXTSREJRXMISSINGREJECTTABLE08X, "L2Cap_EnhancedGetNextSrejRxMissingRejectTable:%08x")
TRC_MSG(INDEX08X, "*index:%08x")
TRC_MSG(L2CAP_ENHANCEDGETNEXTSREJRXMISSINGREJECTTABLE_A08X, "L2Cap_EnhancedGetNextSrejRxMissingRejectTable A:%08x")
TRC_MSG(INDEX_B08X, "*index B:%08x")
TRC_MSG(STILL_HAVE_SREJ_S_FRAME_NEED_TO_SENT_OUT, "Still have SREJ S frame need to sent out")
TRC_MSG(NO_SREJ_S_FRAME_NEED_TO_SENT_OUT, "No SREJ S frame need to sent out")
TRC_MSG(DEST08X, "dest:%08x")
TRC_MSG(L2CAP_PROCESS_A2MP_PROTOCOL, "L2Cap_Process A2MP Protocol")
TRC_MSG(RX_ERROR_2, "RX error 2")
TRC_MSG(L2CAP_PROCESSSIGNAL, "L2Cap_ProcessSignal")
TRC_MSG(RX_ERROR_3, "RX error 3")
TRC_MSG(L2CAP_CID0XX_STATED_FLAG0XX_LINK0XX_LINK20XX, "L2Cap: cid:0x%x state:%d flag:0x%x link:0x%x link2:0x%x")
TRC_MSG(L2CAP_CLOSED_CID0XX_STATED_FLAG0XX_LINK0XX_LINK20, "L2Cap: closed cid:0x%x state:%d flag:0x%x link:0x%x link2:0x%x")
TRC_MSG(L2CAP_LINK_NOT_RIGHT_CID0XX_STATED_FLAG0XX_HCIHNDL0, "L2Cap: link not right cid:0x%x state:%d flag:0x%x HciHndl:0x%x link:0x%x link2:0x%x")
TRC_MSG(L2CAP_RESENT_THE_SREJ_FRAME, "L2cap resent the Srej frame")
TRC_MSG(SH_1_U_U, "[SH] 1. %u, %u")
TRC_MSG(L_SELECT_LOW, "l: select low")
TRC_MSG(L2DATA_SEND_S_SREJ_FRAME, "l2data: Send S SREJ frame")
TRC_MSG(L2DATA_L2CAP_SEND_S_FRAME_D_LCIDD_PKT0XX, "l2data: L2Cap Send S frame (%d) lcid:%d pkt:0x%x")
TRC_MSG(SEND_I_FRAME_D, "Send I frame (%d)")
TRC_MSG(L2DATA_L2CAP_BUILD_A_I_FRAME_D_LCIDD_TXSEQD_TXCO, "l2data: L2CAP Build a I frame (%d) lcid:%d TxSeq:%d... TxCompose:%d")
TRC_MSG(L2CAP_LINKCONNECTED_D, "L2CAP_LinkConnected: %d")
TRC_MSG(L2CFIXCIDDCALLBACK, "L2C(fixCid)[%d].callback")
TRC_MSG(RX_ERROR_4, "RX error 4")
TRC_MSG(MTU_VIOLATION_5_RXDATALEND_CMDLEND, "MTU violation 5 RxDataLen:%d cmdLen:%d")
TRC_MSG(L2CAP_PROCESSRSP, "L2Cap_ProcessRsp")
TRC_MSG(L2CAP_PROCESSREQ, "L2Cap_ProcessReq")
TRC_MSG(A_RX_DATA_LEND_LOCAL_MTUD, "A Rx Data len:%d, local MTU:%d")
TRC_MSG(B_RX_DATA_LEND_LOCAL_MTUD, "B Rx Data len:%d, local MTU:%d")
TRC_MSG(L2CAP_PROCESSBLERSP, "L2Cap_ProcessBLERsp")
TRC_MSG(L2CAP_PROCESSBLEREQ, "L2Cap_ProcessBLEReq")
TRC_MSG(MTU_VIOLATION_1, "MTU violation 1")
TRC_MSG(MTU_VIOLATION_2, "MTU violation 2")
TRC_MSG(RX_ERROR_5, "RX error 5")
TRC_MSG(CHANNELFLOWRXBUFFERDATALEND, "Channel->flowRxBuffer->dataLen:%d")
TRC_MSG(L2CAP_PROCESSTXSEQ_FAILED, "L2Cap_ProcessTxSeq failed")
TRC_MSG(L2CAP_PROCESSREQSEQ_FAILED_CIDD_STATED, "L2Cap_ProcessReqSeq failed cid:%d state:%d")
TRC_MSG(RX_SEQUENCE0X02X, "Rx Sequence:0x%02x")
TRC_MSG(L2DATA_I_FRAME_CIDD_RECVSEQ0X02X_SARD_TXSEQD, "l2data: I frame cid:%d recvSeq:0x%02x sar:%d txSeq:%d")
TRC_MSG(RX_DUPLICATE_I_FRAME_IGNORE_IT, "Rx duplicate I frame ignore it")
TRC_MSG(L2CAPTHE_FRAME_IS_OUT_OF_SEQUENCE, "L2Cap:The frame is out of sequence")
TRC_MSG(L2CAP_ENHANCED_TRY_TO_SEND_REJ_OR_SREJ, "L2Cap enhanced try to send REJ or SREJ")
TRC_MSG(SEND_REJ1, "Send REJ1")
TRC_MSG(L2CAP_INVALID_SAR_ORDER, "L2Cap: Invalid SAR order")
TRC_MSG(I_FRAME_IN_ORDER, "I frame in order")
TRC_MSG(RX_DATA_SAR__2, "RX data SAR == 2")
TRC_MSG(L2DATA_I_FRAME_NOT_IN_ORDER, "l2data: I frame not in order")
TRC_MSG(L2CAP_SEND_RR_A1_EXPECTEDTXSREJ, "L2Cap: Send RR a1 expectedTxSrej")
TRC_MSG(L2CAP_SEND_RR_A2_RECVEXPECTEDTXSEQ, "L2Cap: Send RR a2 recvExpectedTxSeq")
TRC_MSG(FCS_ERROR, "FCS error")
TRC_MSG(CHANNELRECVSEQ0X02X, "Channel->recvSeq:0x%02x")
TRC_MSG(DEBUG_RX_EXPECTED_DATA, "DEBUG Rx expected data")
TRC_MSG(PROCESS_TXSEQ_UNPECTED_ERROR, "Process TxSeq unpected error")
TRC_MSG(RX_DATA_LENGTHD, "Rx data length:%d")
TRC_MSG(RX_A_S_FRAME_CIDD, "Rx a S frame cid:%d")
TRC_MSG(CALL_L2CAP_CHANNELRXERROR_1, "call L2Cap_ChannelRxError 1")
TRC_MSG(L2DATA_RX_A_S_FRAME_S_CONTROLD, "l2data: Rx a S frame s_control:%d")
TRC_MSG(L2CAP_SFRAMERR_TXIFRAMECOUNTD_ACKSEQD_TRANSMAXD, "L2Cap: SFrame:RR txIframecount:%d ackSeq:%d transMax:%d")
TRC_MSG(RR_F_CONTROLD, "RR f control:%d")
TRC_MSG(CHANNELENHANCEDREJACTIONEDD, "Channel->enhancedRejActioned:%d")
TRC_MSG(L2DATA_CHANNELACKSEQD_LCIDD, "l2data: Channel->ackSeq:%d lcid:%d")
TRC_MSG(RR_P_CONTROLD, "RR p control:%d")
TRC_MSG(C_CHANNELENHANCEDNEEDTOSENDFINALD, "C channel->enhancedNeedToSendFinal:%d")
TRC_MSG(SEND_RR_A5, "Send RR a5")
TRC_MSG(L2DATA_SFRAMEREJECT_SEND_FROMD_ALREADYD, "l2data: SFrame:Reject send from:%d already:%d")
TRC_MSG(L2CAP_SFRAMEREJECT_TXIFRAMECOUNTD_ACKSEQD_TRANSMAXD, "l2cap: SFrame:Reject txIframecount:%d ackSeq:%d transMax:%d")
TRC_MSG(L2CAP_ENHANCED_RX_REJ_SEND_FROMD, "L2Cap enhanced rx REJ, send from:%d")
TRC_MSG(L2DATA_SFRAMERNR, "l2data: SFrame:RnR")
TRC_MSG(D_CHANNELENHANCEDNEEDTOSENDFINALD, "D channel->enhancedNeedToSendFinal:%d")
TRC_MSG(SEND_RR_A6, "Send RR a6")
TRC_MSG(SEND_RR_A7, "Send RR a7")
TRC_MSG(L2DATA_SFRAMESREJ_, "l2data: SFrame:SRej ")
TRC_MSG(L2CAP_SFRAMESREJ_TXIFRAMECOUNTD_ACKSEQD_TRANSMAXD, "L2Cap: SFrame:Srej txIframecount:%d ackSeq:%d transMax:%d")
TRC_MSG(L2DATA_SFRAMERR_S_CONTROL_, "l2data: SFrame:RR s_control ")
TRC_MSG(L2CAP_L2ERR_INVALID_NR, "L2Cap: L2ERR_INVALID_NR")
TRC_MSG(L2CAP_L2CAP_SECACCESSRSP_ETYPED, "l2cap L2Cap_SecAccessRsp eType:%d")
TRC_MSG(T_PARSEPDUOFFSETD_SARD_CONTROLFIELDTYPED, "[T:] parsePDUOffset:%d sar:%d controlFieldType:%d")
TRC_MSG(FRAME_LENGTHD, "frame length:%d")
TRC_MSG(RX_ERROR_8, "RX error 8")
TRC_MSG(FRAME_LENGTHD_LOCAL_MTUD, "frame length:%d, local_mtu:%d")
TRC_MSG(FRAME_LENGTHD_LEGAL_FRAME_SIZED, "frame length:%d, legal_frame_size:%d")
TRC_MSG(RX_ERROR_9, "RX error 9")
TRC_MSG(MTU_VIOLATION_3, "MTU violation 3")
TRC_MSG(NEW_FRAGMENT_THE_FLOWRXBUFFER_SHALL_BE_0_RESTART_SDU_OFFS, "new fragment, the flowRxBuffer shall be 0. Restart SDU offset")
TRC_MSG(NEW_FRAGMENT_THE_FLOWRXBUFFER_SHALL_BE_0, "new fragment, the flowRxBuffer shall be 0.")
TRC_MSG(CHANNELSDULENGTHD, "Channel->sduLength:%d")
TRC_MSG(CHANNELLOCALMPUD, "Channel->localMpu:%d")
TRC_MSG(RX_ERROR_6, "RX error 6")
TRC_MSG(SAR_NOT_0X00, "SAR not 0x00")
TRC_MSG(CHANNELLOCALMPUD_SEGRECEIVEDSTARTD_FRAMEOFFSETD_COP, "Channel->localMpu:%d segReceivedStart:%d frameOffset:%d copylen:%d")
TRC_MSG(RX_ERROR_7_, "RX error 7 ")
TRC_MSG(THE_FLOWRXBUFFER_IS_NOT_ZERO, "The flowRxBuffer is not zero")
TRC_MSG(L2CAP_LLC_CONN_REQ_, "l2cap: LLC_CONN_REQ ")
TRC_MSG(L2CAP_NO_NEW_CHANNEL, "l2cap: No new channel")
TRC_MSG(LLC_CONFIG_REQ_S, "LLC_CONFIG_REQ")
TRC_MSG(L2CAP_FIND_BY_REMOTE_CID0XX_HANDLE0XX, "l2cap find by remote cid:0x%x handle:0x%x")
TRC_MSG(LLC_CREATE_CHANNEL_REQ_S, "LLC_CREATE_CHANNEL_REQ")
TRC_MSG(LAST_LE_STATE_IS_SCAN_ON_TRY_TO_ON_AGAIN_STOP_FIRST, "LAST_LE_STATE_IS_SCAN_ON_TRY_TO_ON_AGAIN_STOP_FIRST")
TRC_MSG(L2CAP_INFO_REQD, "l2cap Info_req:%d")
TRC_MSG(BT_3_0_UNICAST___SUPPORTED, "__BT_3_0_UNICAST__ supported")
TRC_MSG(BT30HS_SUPPORTED, "BT3.0+HS supported")
TRC_MSG(L2CAP_EXTENDED_FEATURE_0XX, "L2Cap: extended_feature 0x%x")
TRC_MSG(L2CAP_PROCESSRSP_OPCODE0XX_PSM0XX, "L2Cap: ProcessRsp opcode:0x%x() psm:0x%x")
TRC_MSG(L2CAP_CONN_RSP_RESULTD, "l2cap conn_rsp result:%d")
TRC_MSG(L_FINAL_LINKMODES0XX, "l: final linkModes:0x%x")
TRC_MSG(RXDATA6D, "RxData[6]:%d")
TRC_MSG(RXDATA7D, "RxData[7]:%d")
TRC_MSG(RXDATA8D, "RxData[8]:%d")
TRC_MSG(CHANNELINLINKMODED, "Channel->inLinkMode:%d")
TRC_MSG(LINKMODED, "LinkMode:%d")
TRC_MSG(CHANNELPSMINFOCHANNELUSAGED, "Channel->psmInfo->channelUsage:%d")
TRC_MSG(EVENTD, "Event:%d")
TRC_MSG(L2CCALLBACKPARMSSTATUSD, "L2C(callbackParms).status:%d")
TRC_MSG(L2CAP_PENDING_DISCRSP_NOTIFY_TXCOUNTD_FLAGS0XX_, "l2cap: pending disc-rsp notify txCount:%d flags:0x%x ")
TRC_MSG(L2CAP_TRIGGERHCISEND_HANDLED_STATED, "l2cap triggerHciSend handle:%d state:%d")
TRC_MSG(L2CAP_FLAGS0XX_TXCOUNTD, "l2cap flags:0x%x txCount:%d")
TRC_MSG(L2CAP_ENTER_OPEN_STATE, "l2cap: enter open state")
TRC_MSG(L2CAP_L2ERR_INVALID_CONFIG_IND_OUTD, "L2Cap: L2ERR Invalid Config in:(%d) out(%d)")
TRC_MSG(START_L2CAP_STARTMONITORTIMER_1_TIMER, "Start L2Cap_StartMonitorTimer 1 timer")
TRC_MSG(CHANNELPSMINFOLOCKSTEPNEEDEDD, "Channel->psmInfo->lockStepNeeded:%d")
TRC_MSG(CHANNELAUTHORIZATIONINCOMINGD, "Channel->authorization.incoming:%d")
TRC_MSG(CHANNELA2MPSUPPORTEDD, "Channel->a2mpSupported:%d")
TRC_MSG(CHANNELRXFLOWAVAILABLED, "Channel->rxFlowAvailable:%d")
TRC_MSG(CHANNELTXFLOWAVAILABLED, "Channel->txFlowAvailable:%d")
TRC_MSG(CHANNELSETUPBYCREATECHANNELD, "Channel->setupByCreateChannel:%d")
TRC_MSG(NOTIFIED_DATA1, "Notified data1")
TRC_MSG(NOTIFIED_DATA2, "Notified data2")
TRC_MSG(NOTIFIED_DATA3, "Notified data3")
TRC_MSG(NOTIFIED_DATA5, "Notified data5")
TRC_MSG(NOTIFIED_DATA4, "Notified data4")
TRC_MSG(L2CAPSTATE_CLOSED_EVENTD, "L2CapState_CLOSED event:%d")
TRC_MSG(L2CAP_CURCTRLIDD_MOVECTRLIDD, "l2cap curCtrlId:%d MoveCtrlId:%d")
TRC_MSG(L2CAP_SEC_ACCESSREQD_AUTHORIZEDSETTINGD_, "l2cap sec_accessReq:%d authorizedSetting:%d ")
TRC_MSG(L2CAP_SEC_ACCESSREQD_INFOREQDONED, "l2cap sec_accessReq:%d infoReqDone:%d")
TRC_MSG(L2CAP_HAS_INFO_NOFIY_BY_CURCTRLIDD, "l2cap has info nofiy by curCtrlId:%d")
TRC_MSG(L2CAP_HAS_INFO_AND_CONTI, "l2cap has info and conti.")
TRC_MSG(L2CAP_NOFIY_BY_CURCTRLIDD, "l2cap nofiy by curCtrlId:%d")
TRC_MSG(L2CAP_IGNORE_THE_SECOND_DISCONNECT_STATED, "l2cap: Ignore the second disconnect state:%d")
TRC_MSG(L2CAP_LLC_DISC_REQ_CHECK_STATED, "l2cap: llc_disc_req check state:%d")
TRC_MSG(ERR_L2CAPTXCOUNT_0_CIDD, "[err] l2capTxCount 0 cid:%d")
TRC_MSG(DLIGHT_SET_THE_VERIFYRETRANSMISSIONQUEUESTATE_TO_1, "Dlight set the verifyRetransmissionQueueState to 1")
TRC_MSG(CHANNELTXIFRAMECOUNTDD, "Channel->txIframeCount[%d]:%d")
TRC_MSG(CHANNELTRANSMITMAXD, "Channel->transmitMax:%d")
TRC_MSG(START_L2CAP_STARTMONITORTIMER_2_TIMER, "Start L2Cap_StartMonitorTimer 2 timer")
TRC_MSG(DLIGHT_SET_1_THE_VERIFYRETRANSMISSIONQUEUESTATE_TO_1, "Dlight set 1 the verifyRetransmissionQueueState to 1")
TRC_MSG(START_L2CAP_STARTMONITORTIMER_3_TIMER, "Start L2Cap_StartMonitorTimer 3 timer")
TRC_MSG(L2CAP_CHANNEL_PSM0XX_STATED_CID0XX_EVENTD, "l2cap Channel psm:0x%x state:%d cid:0x%x Event:%d")
TRC_MSG(CHANNELINLINKMODED_OUTD, "Channel->inLinkMode:%d out:%d")
TRC_MSG(L2CAP_SETFLOW_RESULTD, "l2cap SetFlow result:%d")
TRC_MSG(L2CAP_OUTMTUD_MINREMOTEMTUD, "l2cap outMtu:%d minRemoteMtu:%d")
TRC_MSG(L2CAP_PARSE_CONFIG_0XX, "l2cap: parse config 0x%x")
TRC_MSG(L2CAP_OPTION_FLOW_DDDDDD, "l2cap option flow (%d)(%d)(%d)(%d)(%d)(%d)")
TRC_MSG(RETRANSMISSION_TIMEOUTD, "Retransmission timeout:%d")
TRC_MSG(MONITORTIMEOUT_TIMEOUTD, "monitorTimeout timeout:%d")
TRC_MSG(L2CAP_HANDLECONFIGREQ_RESULTD_PSM0XX, "l2cap: handleconfigreq result:%d psm:0x%x")
TRC_MSG(L2CAP_HANDLECONFIGRSP_FLAGS0XX_RESULTD, "l2cap: handleconfigrsp flags:0x%x result:%d")
TRC_MSG(LOCKSTEP_NOT_PENDING_BEFORE_SUCCESS_WE_SHALL_DISCONNECT_I, "LockStep, not pending before success. We shall disconnect it")
TRC_MSG(L2CAP_LOCKSTEPD_PENDINGDONED, "l2cap lockstep:%d pendingdone:%d")
TRC_MSG(LOCKSTEPRESULTD, "lockstepResult:%d")
TRC_MSG(SUPPORT_EXTENDED_FLOW_SPEC, "Support Extended Flow Spec")
TRC_MSG(SUPPORT_EXTENDED_TXWINDOWS_SIZE, "Support Extended TxWindows Size")
TRC_MSG(CHANNELCREATECHANNELINITIATORD_LOCKSTEPNEEDD, "Channel->createChannelInitiator:%d lockstepNeed:%d")
TRC_MSG(CHANNEL_DOESNOT_NEED_LOCKSTEP_SEND_OK_DIRECTLY, "Channel doesnot need lockstep. send ok directly!")
TRC_MSG(L2CAP_INIPKT_NUMD, "l2cap inipkt num:%d")
TRC_MSG(L2CAP_FINDLOOP_LINK0XX_HCIHANDLE0XX, "l2cap findloop link:0x%x hcihandle:0x%x")
TRC_MSG(L2CAP_CANNOT_FIND_PSM0XX, "l2cap: cannot find psm:0x%x")
TRC_MSG(DUMP_CHANNEL_STATUS, "dump channel status")
TRC_MSG(L2CAP_IDXD_CIDD_RCIDD_STATED_PSM0XX, "l2cap: idx:%d cid:%d rcid:%d state:%d psm:0x%x")
TRC_MSG(DLIGHT_DUMP_CHANNEL_STATUS, "Dlight dump channel status")
TRC_MSG(L2CAP_NOTIFYUSER_PRESTATED, "l2cap: NotifyUser preState:%d")
TRC_MSG(L2CAP_IGNORE_THE_DISCONNECT_RESPONSE_TIMEOUT, "l2cap: ignore the disconnect response timeout!")
TRC_MSG(L2CAP_IGNORE_THE_CONNECTION_RESPONSE_TIMEOUT, "l2cap: ignore the connection response timeout!")
TRC_MSG(CHANNEL_ICDD_L2CAPTXCOUNTD_CHECK_GETPKT_D, "channel icd:%d l2capTxcount:%d (check getpkt) %d")
TRC_MSG(L2CAP_TXCOUNT_NOT_0_ERROR_, "l2cap txCount not 0. error !!!")
TRC_MSG(CHANNELFLAGSD, "Channel->flags:%d")
TRC_MSG(L2EVENT_DISCONNECTED_S, "L2EVENT_DISCONNECTED")
TRC_MSG(LINKREFCOUNT_AD, "link->refCount A:%d")
TRC_MSG(L_GETPKT_EMPTY_SYSPKT_PRIORITYD, "l: getpkt empty syspkt Priority:%d")
TRC_MSG(L_GETPKT_NO_SYSPKT_PRIORITYD, "l: getpkt no syspkt Priority:%d")
TRC_MSG(LINKMODED_INLINKMODE0XX, "linkMode:%d inLinkMode:0x%x")
TRC_MSG(CHANNELPSMINFOOP_STATED_LINKLINKMODES0XX, "Channel->psmInfo->op_state:%d link->linkmodes:0x%x")
TRC_MSG(A2MP_DLIGHT_A2D, "A2MP Dlight a2:%d")
TRC_MSG(OPTIONSLEND, "OptionsLen:%d")
TRC_MSG(OPTIONS02X, "*Options:%02x")
TRC_MSG(L2CFG_OPTION_FLOW_CONTROL_S, "L2CFG_OPTION_FLOW_CONTROL")
TRC_MSG(THE_TEMPLINKMODE_AD, "the templinkMode a:%d")
TRC_MSG(THE_CHANNELAMPSUSPEND_AD, "the Channel->ampSuspend a:%d")
TRC_MSG(THE_CHANNELA2MPSUPPORTED_AD, "the Channel->a2mpSupported a:%d")
TRC_MSG(THE_OPTIONS2D, "the Options[2]:%d")
TRC_MSG(THE_CHANNELPSMINFOCHANNELUSAGE_AD, "the Channel->psmInfo->channelUsage a:%d")
TRC_MSG(THE_OP_STATED, "the op_state:%d")
TRC_MSG(A2MP_DLIGHT_A3D, "A2MP Dlight a3:%d")
TRC_MSG(A2MP_DLIGHT_A4D, "A2MP Dlight a4:%d")
TRC_MSG(A2MP_DLIGHT_A5D, "A2MP Dlight a5:%d")
TRC_MSG(CHANNELWORKSPACE202X_TXWINDOWD, "Channel->workspace[2]:%02x txWindow:%d")
TRC_MSG(CHANNELTXWINDOWD_WRONG_RANGE_, "Channel->txWindow:%d wrong range ")
TRC_MSG(TRANSMITMAXD, "transmitMax:%d")
TRC_MSG(OUTMPU_IS_D, "outMpu is %d")
TRC_MSG(AMP_FLUSH_TIMEOUT_INFINITE_SET_MONITOR_RETRANS_TO_SUPERVI, "AMP flush timeout infinite, set monitor, retrans to supervision. ")
TRC_MSG(A2MP_DLIGHT_A6D, "A2MP Dlight a6:%d")
TRC_MSG(A2MP_DLIGHT_A7D, "A2MP Dlight a7:%d")
TRC_MSG(CHANNELINEXTFLOWSPECSERVICETYPED, "Channel->inExtFlowSpec.serviceType:%d")
TRC_MSG(CHANNELINEXTFLOOUTEXTFLOWSPECWSPECSERVICETYPED, "Channel->inExtFlooutExtFlowSpecwSpec.serviceType:%d")
TRC_MSG(L2CAP_CONFIGRESULTD_NO_CHANGE, "l2cap configresult:%d no change")
TRC_MSG(SUPPORT_EXT_TX_WINDOWS_SIZE, "Support Ext Tx Windows Size")
TRC_MSG(SDUDATALEND, "Sdu->dataLen:%d")
TRC_MSG(CHANNELOUTMPUD, "channel->outMpu:%d")
TRC_MSG(SDUSEGSTARTD, "Sdu->segStart:%d")
TRC_MSG(SDU_NUMD, "SDU num:%d")
TRC_MSG(CHANNELTXCOMPOSESEQD, "channel->txComposeSeq:%d")
TRC_MSG(SEGMENT_HEADERLENDDD, "Segment headerLen:%d,%d,%d")
TRC_MSG(DATALEND, "dataLen:%d")
TRC_MSG(HEADERLEND, "headerLen:%d")
TRC_MSG(TAILLEND, "tailLen:%d")
TRC_MSG(E_CHANNELENHANCEDNEEDTOSENDFINALD, "E channel->enhancedNeedToSendFinal:%d")
TRC_MSG(DLIGHT_I_FRAME_SENDD, "Dlight: I frame Send:%d")
TRC_MSG(THE_SEQD_RETRANSMISSION_NUMBERD, "The Seq:%d, retransmission number:%d")
TRC_MSG(DLIGHT_SET_THE_VERIFYRETRANSMISSIONQUEUESTATE_TO_0, "Dlight set the verifyRetransmissionQueueState to 0")
TRC_MSG(SUPPORTEXTCONTROLD, "supportExtControl:%d")
TRC_MSG(HEADERLENDDATALEND_TAILLEND, "headerLen:%d,dataLen:%d, tailLen:%d")
TRC_MSG(OUTMPUDSARD, "outMpu:%d,sar:%d")
TRC_MSG(CHANNELENHANCEDNEEDTOSENDFINALD, "channel->enhancedNeedToSendFinal:%d")
TRC_MSG(DLIGHT_I_FRAME_SEND_AD, "Dlight: I frame Send a:%d")
TRC_MSG(DLIGHT_I_FRAME_SEND_BD, "Dlight: I frame Send b:%d")
TRC_MSG(DLIGHT_I_FRAME_SEND_CD, "Dlight: I frame Send c:%d")
TRC_MSG(DLIHGT_CHANNEL_SEND_S08X04X, "Dlihgt Channel Send S:%08x,%04x")
TRC_MSG(CHANNEL_IN_LINK_MODE02X, "Channel in link mode:%02x")
TRC_MSG(DEBUG_S_FRAME_STATUS02X, "DEBUG: S frame status:%02x")
TRC_MSG(DEBUG_NO_S_FRAME_SYSTEM_PACKET, "DEBUG: No S frame system packet")
TRC_MSG(SET_CHANNEL_F08X_TO_D, "Set channel f:%08x to %d")
TRC_MSG(L2DATA_BUILD_S_FRAMEIN_IFRAME_IGNORE_NRD_LCIDD, "l2data Build S frame(in I-Frame) ignore nr:%d lcid:%d")
TRC_MSG(NR_IN_I_FRAME, "N(R) in I frame")
TRC_MSG(L2DATA_BUILD_S_FRAME_NRD_LCIDD, "l2data Build S frame nr:%d lcid:%d")
TRC_MSG(G_CHANNELENHANCEDNEEDTOSENDFINALD, "G channel->enhancedNeedToSendFinal:%d")
TRC_MSG(BUILD_S_FRAME_SET_THE_FINAL_BIT_TO_1, "Build S frame set the Final bit to 1")
TRC_MSG(SREJINDEXD_TO_D, "sRejIndex:%d to %d")
TRC_MSG(ALL_SREJ_SENT_OUT, "All Srej sent out")
TRC_MSG(MUST_SREJ_IS_ENABLED, "MUST SRej is enabled")
TRC_MSG(H_CHANNELENHANCEDNEEDTOSENDFINALD, "H channel->enhancedNeedToSendFinal:%d")
TRC_MSG(S_FRAME_FCS04X, "S frame fcs:%04x")
TRC_MSG(SREJ_QUEUE_NOT_EMPTY_TRY_S_WITH_SREJ_AGAIN, "SREJ Queue not empty, try S with SREJ again")
TRC_MSG(LOCAL_CIDD_ACKSEQD_SENDSEQD, "Local Cid:%d, ackSeq:%d, sendSeq:%d")
TRC_MSG(DEBUG_THE_REMOTE_SIDE_SEND_REQSEQD, "DEBUG: The remote side send ReqSeq:%d")
TRC_MSG(DEBUGCHANNELACKSEQD, "DEBUG:Channel->ackSeq:%d")
TRC_MSG(DEBUGCHANNELTXCOMPOSESEQD, "DEBUG:Channel->txComposeSeq:%d")
TRC_MSG(L2CAP_REQSEQ_CHECKFAIL0, "L2CAP ReqSeq CheckFail0")
TRC_MSG(L2CAP_WITH_INVALID_REQSEQD, "L2CAP with Invalid ReqSeq:%d")
TRC_MSG(L2CAP_WITH_INVALID_ACKSEQD, "L2CAP with Invalid ackSeq:%d")
TRC_MSG(L2CAP_WITH_INVALID_TXCOMPOSESEQD, "L2CAP with Invalid txComposeSeq:%d")
TRC_MSG(L2CAP_REQSEQ_CHECKFAIL1_ACKSEQ__TXCOMPOSESEQNOT_SENT_YET, "L2CAP ReqSeq CheckFail1 ackSeq == txComposeSeq(not sent yet)!")
TRC_MSG(L2CAP_REQSEQ_CHECKFAIL2, "L2CAP ReqSeq CheckFail2")
TRC_MSG(DEBUGCHANNELSENDSEQD, "DEBUG:Channel->sendSeq:%d")
TRC_MSG(L2CAP_ENHANCED_NONACKNOD, "L2cap enhanced nonAckNo:%d")
TRC_MSG(DEBUG_NEW_ACK_STOP_TIMER, "DEBUG: New Ack, stop timer")
TRC_MSG(DEBUG_DUPLICATE_ACK_JUST_RETURN, "DEBUG: Duplicate ACK, just return")
TRC_MSG(SEND_RR_A8_D, "Send RR a8 :%d")
TRC_MSG(START_L2CAP_STARTRETRANSMITTIMER_4_TIMER, "Start L2Cap_StartRetransmitTimer 4 timer")
TRC_MSG(START_L2CAP_STARTMONITORTIMER_4_TIMER, "Start L2Cap_StartMonitorTimer 4 timer")
TRC_MSG(TX_REMOTE_SEND_TXSEQD, "TX remote send TxSeq:%d")
TRC_MSG(DEBUG_SEQUENCE_FAILED_1, "DEBUG Sequence failed 1")
TRC_MSG(DEBUG_SEQUENCE_FAILED_2, "DEBUG Sequence failed 2")
TRC_MSG(RETRANSMISSION_TIMOUT_BUT_ALL_DATA_BEEN_ACKED, "Retransmission timout but all data been acked")
TRC_MSG(L2CAP__NOIFYPSM_CHIDD_EVENTD_STATUSD, "l2cap  NoifyPSM chid:%d event:%d status:%d")
TRC_MSG(L2CAP_IGNORE_NULL_CHANNEL, "l2cap ignore null channel")
TRC_MSG(L2CAP_VALIDATEOPTIONS_FAIL, "L2cap ValidateOptions fail!")
TRC_MSG(L2CAP_MECURRENTMODED_STOPSNIFF_STATUSD, "l2cap: MECurrentMode:%d StopSniff status:%d")
TRC_MSG(L2CAP_STARTMONITORTIMERD, "L2Cap_StartMonitorTimer:%d")
TRC_MSG(IN_WAIT_F_PENDING_NEW_TX_DATA_CIDD, "In wait F, pending new tx data cid:%d")
TRC_MSG(TX_WINDOWS_FULL, "TX windows full")
TRC_MSG(SUPPORT_L2EXTENDED_FEATURE_EXTENDED_FLOW_OPTION_ON_BREDR, "Support L2EXTENDED_FEATURE_EXTENDED_FLOW_OPTION on BR/EDR")
TRC_MSG(NOT_SUPPORT_L2EXTENDED_FEATURE_EXTENDED_FLOW_OPTION_ON_BRE, "Not Support L2EXTENDED_FEATURE_EXTENDED_FLOW_OPTION on BR/EDR")
TRC_MSG(NOTIFY_UPPER_LAYER_TO_MOVE_CHANNEL_AGAIN, "Notify upper layer to move channel again")
TRC_MSG(L2CAP_ASSIGNCHANNELAMPHANDLER_CTRIDD, "L2CAP_AssignChannelAMPHandler ctrid:%d")
TRC_MSG(L2CAP_ASSIGNCHANNELAMPHANDLER_AD, "L2CAP_AssignChannelAMPHandler a:%d")
TRC_MSG(L2CAP_ASSIGNCHANNELAMPHANDLER_BD, "L2CAP_AssignChannelAMPHandler b:%d")
TRC_MSG(L2CAP_ASSIGNCHANNELAMPHANDLER_CD, "L2CAP_AssignChannelAMPHandler c:%d")
TRC_MSG(L2CAP_ASSIGNCHANNELAMPHANDLER_DD, "L2CAP_AssignChannelAMPHandler d:%d")
TRC_MSG(L2CAP_ASSIGNCHANNELAMPHANDLERD, "L2CAP_AssignChannelAMPHandler:%d")
TRC_MSG(L2CAP_AMPPHYSICALLINKCOMPLETED_CIDD, "L2Cap_AMPPhysicalLinkCompleted: cid:%d")
TRC_MSG(SETUPBYCREATECHANNEL_D, "setupByCreateChannel: %d")
TRC_MSG(CHANNEL_CIDD, "channel: cid:%d")
TRC_MSG(MCAPMCAP_INIT, "[MCAP]MCAP_Init")
TRC_MSG(MCAPINITIALIZED, "[MCAP]Initialized")
TRC_MSG(MCAPDEINITIALIZED, "[MCAP]Deinitialized")
TRC_MSG(MCAPMCAPCONTROLPSMMINREMOTEMTU_D, "[MCAP]MCAP(controlPsm).minRemoteMtu: %d")
TRC_MSG(MCAPUNABLE_TO_REGISTER_CONTROL_CHANNEL_PSM_WITH_L2CAP_D, "[MCAP]Unable to register control channel PSM with L2CAP: %d")
TRC_MSG(MCAPASSIGNED_PSM_FOR_CONTROL_CHANNEL_X, "[MCAP]Assigned PSM for control channel: %x")
TRC_MSG(MCAPUNABLE_TO_REGISTER_DATA_CHANNEL_PSM_WITH_L2CAP_D, "[MCAP]Unable to register data channel PSM with L2CAP: %d")
TRC_MSG(MCAPASSIGNED_PSM_FOR_DATA_CHANNEL_X, "[MCAP]Assigned PSM for data channel: %x")
TRC_MSG(MCAPUNABLE_TO_REGISTER_CONTROL_CHANNEL_SECURITY_RECORD_WI, "[MCAP]Unable to register control channel security record with L2CAP")
TRC_MSG(MCAPUNABLE_TO_REGISTER_DATA_CHANNEL_SECURITY_RECORD_WITH_, "[MCAP]Unable to register data channel security record with L2CAP")
TRC_MSG(MCAPREGISTERED, "[MCAP]Registered")
TRC_MSG(MCAPDEREGISTERED, "[MCAP]Deregistered")
TRC_MSG(MCAPOPEN_MCL_CONNECTION, "[MCAP]----------Open MCL connection-----------")
TRC_MSG(MCAPESTABLISHING_L2CAP_CONNECTION_FOR_MCL_CID__D, "[MCAP:]Establishing L2CAP connection for MCL: CID = %d")
TRC_MSG(MCAPL2CAP_CONNECT_REQUEST_FAILED_D, "[MCAP]L2CAP connect request failed %d")
TRC_MSG(MCAPL2CAP_CONNECT_REQUEST_FAILED, "[MCAP]L2CAP connect request failed")
TRC_MSG(MCAPMCAP_CLOSEMCL, "[MCAP]--------------MCAP_CloseMcl-----------------")
TRC_MSG(MCAPCONFIG_THE_MDL, "[MCAP]-----------Config the MDL----------------")
TRC_MSG(MCAPCONFIG_THE_MDL_STATUSD, "[MCAP]Config the MDL status:%d")
TRC_MSG(MCAPOPEN_THE_MDL, "[MCAP]-----------Open the MDL--------------")
TRC_MSG(MCAPMCAPDATAPSMINLINKMODEX, "[MCAP]MCAP(dataPsm).inLinkMode:%x")
TRC_MSG(MCAPRESET_THIS_MDL_CHANNEL, "[MCAP]Reset this MDL channel")
TRC_MSG(MCAPESTABLISHING_L2CAP_CONNECTION_FOR_MDL_CID__D, "[MCAP:]Establishing L2CAP connection for MDL: CID = %d")
TRC_MSG(MCAPMCAP_CLOSEMDL, "[MCAP]--------------MCAP_CloseMdl-----------------")
TRC_MSG(MCAPMCAP_ACCEPTMCL, "[MCAP]--------------MCAP_AcceptMcl-----------------")
TRC_MSG(MCAPMCAP_ACCEPTMDL, "[MCAP]------------MCAP_AcceptMdl-------------")
TRC_MSG(MCAP_MDL_CONFIGED_MODE0XX, "[MCAP] mdl configed mode:0x%x")
TRC_MSG(MCAPMCAP_ABORTMDL, "[MCAP]-------------MCAP_AbortMdl------------")
TRC_MSG(MCAPMCAP_RECONNECTMDL, "[MCAP]------------MCAP_ReconnectMdl----------------")
TRC_MSG(MCAPMCAP_SENDDATA, "[MCAP]--------------MCAP_SendData---------------")
TRC_MSG(MCAPL2MCAPMCLCALLBACK_EVENT_D_CID_D, "[MCAP:]L2McapMclCallback event: %d; Cid: %d")
TRC_MSG(MCAPMCL_EXSIT_REJECT_THIS_MCL_CONNECT_REQUEST, "[MCAP]MCL exsit, reject this MCL connect request")
TRC_MSG(MCAPCURRENT_MCL_STATE_D, "[MCAP]Current MCL state: %d")
TRC_MSG(MCAPEMPTY_MCL, "[MCAP]Empty MCL")
TRC_MSG(MCAPL2MCAPMDLCALLBACK_EVENT_D_CID_D, "[MCAP:]L2McapMdlCallback event: %d; Cid: %d")
TRC_MSG(MCAPFIND_NO_MCL, "[MCAP]Find no MCL")
TRC_MSG(MCAPWRONG_MCL_STATE, "[MCAP]Wrong MCL state")
TRC_MSG(MCAPFIND_NO_MDL, "[MCAP]Find no MDL")
TRC_MSG(MCAPCURRENT_MDL_STATE_D, "[MCAP]Current MDL state: %d")
TRC_MSG(MCAPFIND_WRONG_MCL_OR_MDL, "[MCAP]Find wrong MCL or MDL")
TRC_MSG(MCAPEMPTY_MCL_OR_MDL, "[MCAP]Empty MCL or MDL")
TRC_MSG(MCAPRUN_MCL_IDLE_MACHINE_L2CAP_EVENT__D, "[MCAP]Run MCL IDLE machine: L2CAP event = %d")
TRC_MSG(MCAPRUN_MCL_IDLE_MACHINE_UNSUPPORTED_L2CAP_EVENT, "[MCAP]Run MCL IDLE machine: Unsupported L2CAP event")
TRC_MSG(MCAPOPCODE_D, "[MCAP]opCode: %d")
TRC_MSG(MCAPSEND_THE_QUEUED_COMMAND_OPCODE__D, "[MCAP]Send the queued command, opCode = %d")
TRC_MSG(MCAPUNSUPPORTED_L2CAP_EVENT_D, "[MCAP]Unsupported L2CAP event %d")
TRC_MSG(MCAPRUN_MCL_CONNECTED_MACHINE_L2CAP_EVENT__D, "[MCAP]Run MCL CONNECTED machine: L2CAP event = %d")
TRC_MSG(MCAPRUN_MCL_ACTIVE_MACHINE_L2CAP_EVENT__D, "[MCAP]Run MCL ACTIVE machine: L2CAP event = %d")
TRC_MSG(MCAPRUN_MCL_PENDING_MACHINE_L2CAP_EVENT__D, "[MCAP]Run MCL PENDING machine: L2CAP event = %d")
TRC_MSG(MCAPOPCODED_MDLID__D, "[MCAP]opCode=%d, mdlId = %d")
TRC_MSG(MCAPRUN_MCL_DISCONNECTINGING_MACHINE_L2CAP_EVENT__D, "[MCAP]Run MCL DISCONNECTINGING machine: L2CAP event = %d")
TRC_MSG(MCAPRUN_MDL_OPEN_MACHINE_L2CAP_EVENT__D, "[MCAP]Run MDL OPEN machine: L2CAP event = %d")
TRC_MSG(MCAPRUN_MDL_CONNECT_PENDING_MACHINE_L2CAP_EVENT__D, "[MCAP]Run MDL Connect Pending machine: L2CAP event = %d")
TRC_MSG(MCAPMDLL2CONFIGMINREMOTEMTU_VS_L2CAP_GETTXMTUMDLL2C, "[MCAP]mdl->l2config.minRemoteMtu VS L2CAP_GetTxMtu(mdl->l2ChannelId: %d vs %d")
TRC_MSG(MCAPMDLL2CONFIGINLINKMODE_VS_L2CAP_GETCONNECTIONMODEM, "[MCAP]mdl->l2config.inLinkMode VS L2CAP_GetConnectionMode(mdl->l2ChannelId, FALSE): %d vs %d")
TRC_MSG(MCAPCHANGED_L2CAP_CONFIGURATION_OF_RECONNECT_DISCONNECT, "[MCAP]Changed L2CAP configuration of reconnect, disconnect")
TRC_MSG(MCAPRUN_MDL_DISCONNECT_PENDING_MACHINE_L2CAP_EVENT__D, "[MCAP]Run MDL Disconnect Pending machine: L2CAP event = %d")
TRC_MSG(MCAPMCAPNEWMCL, "[MCAP]McapNewMcl")
TRC_MSG(MCAPMCL_IS_NOT_IN_IDLE_STATE, "[MCAP]MCL is not in idle state")
TRC_MSG(MCAPNO_RESOURCE_FOR_MORE_MCL, "[MCAP]No resource for more MCL")
TRC_MSG(MCAPMCAPFREEMCL, "[MCAP]McapFreeMcl")
TRC_MSG(MCAPMCAPFREEMCLMCL_IS_NOT_EMPTY, "[MCAP]McapFreeMcl---MCL is not empty")
TRC_MSG(MCAPMCAPNEWMDL, "[MCAP]McapNewMdl")
TRC_MSG(MCAPMCAPFREEMDL, "[MCAP]McapFreeMdl")
TRC_MSG(MCAPNULL_MDL_OR_NULL_MDL, "[MCAP]Null MDL or Null MDL")
TRC_MSG(MCAPDISCONNECT_L2CAP_OF_MCL, "[MCAP:]Disconnect L2CAP of MCL")
TRC_MSG(MCAPMCAPCHECKMCLSTATE_D_VS_D, "[MCAP]McapCheckMclState %d VS %d")
TRC_MSG(MCAPMCAPMCLSTATETRANS_D__D, "[MCAP]McapMclStateTrans: %d -> %d")
TRC_MSG(MCAPMCAPCHECKMDLSTATE_D_VS_D, "[MCAP]McapCheckMdlState %d VS %d")
TRC_MSG(MCAPMCAPMDLSTATETRANS_D__D, "[MCAP]McapMdlStateTrans: %d -> %d")
TRC_MSG(MCAPMCAPGENERATEMDLID, "[MCAP]McapGenerateMdlId")
TRC_MSG(MCAPMCAP_GENERATE_MDLID_D, "[MCAP]Mcap Generate MdlId :%d")
TRC_MSG(MCAPMCAPSENDCONTROL_D_RESPONSE_CODE_D_MDLID_D, "[MCAP]McapSendControl %d, response code: %d, mdlId: %d")
TRC_MSG(MCAPWAITING_RESPOND_FOR_REQUEST_D, "[MCAP]Waiting respond for request %d")
TRC_MSG(MCAPCURRENT_MCL_IS_BUSY_QUEUE_THIS_COMMAND, "[MCAP]Current MCL is busy, queue this command")
TRC_MSG(MCAPCONTROL_PACKET_SEND_STATUSD, "[MCAP:]Control packet send status:%d")
TRC_MSG(MCAPMCAPCONFIGMDL, "[MCAP]McapConfigMdl")
TRC_MSG(MCAPMCAPSENDDATA_IN_D, "[MCAP]McapSendData in %d")
TRC_MSG(MCAPDATA_PACKET_SEND_D, "[MCAP:]Data packet send %d")
TRC_MSG(MCAPMCAPFINDMDLBYCID_WANT_TO_FIND_CHANNELID__D, "[MCAP]McapFindMdlByCid: want to find ChannelId = %d")
TRC_MSG(MCAPMCAPFINDMCLBYCID_FIND_MCL, "[MCAP]McapFindMclByCid: find mcl")
TRC_MSG(MCAPMCAPFINDMCLBYCID_FIND_MCL_NULL, "[MCAP]McapFindMclByCid: find MCL NULL")
TRC_MSG(MCAPMCAPFINDMDLBYCID_MCLNULL, "[MCAP]McapFindMdlByCid MCL==NULL")
TRC_MSG(MCAPFIND_MDLID__D, "[MCAP]find mdlId = %d")
TRC_MSG(MCAPMCAPFINDMDLBYCID_FIND_MDL_NULL, "[MCAP]McapFindMdlByCid: find mdl NULL")
TRC_MSG(MCAPMCAPFINDMCLBYBTADDR_FIND_MCL, "[MCAP]McapFindMclByBTAddr: find MCL")
TRC_MSG(MCAPMCAPFINDMCLBYBTADDR_FIND_MCL_NULL, "[MCAP]McapFindMclByBTAddr: find MCL NULL")
TRC_MSG(MCAPMCAPFINDMCLBYTIMER, "[MCAP]McapFindMclByTimer")
TRC_MSG(MCAPMCAPGETMDLBYMDLID_WANT_TO_FIND_MDLID__D, "[MCAP]McapGetMdlByMdlId: want to find mdlId = %d")
TRC_MSG(MCAPMCAPGETMDLBYMDLID_FIND_MDL_NULL, "[MCAP]McapGetMdlByMdlId: find mdl NULL")
TRC_MSG(MCAPMCAPCHECKMDEP, "[MCAP]McapCheckMdep")
TRC_MSG(MCAPMCAPMCLCHECKPARMS, "[MCAP]McapMclCheckParms")
TRC_MSG(MCAPMCAPMCLCHECKPARMS_MDEPID__D, "[MCAP]McapMclCheckParms, mdepId = %d")
TRC_MSG(MCAPMCAPHANDLEMCLDATAIND_OPCODED, "[MCAP]McapHandleMclDataInd, opCode=%d")
TRC_MSG(MCAPMDLIDD, "[MCAP]mdlId=%d")
TRC_MSG(MCAPUNEXPECTED_RESPONSE_CODE_CURRENT_OP_D, "[MCAP]Unexpected response code: current op %d")
TRC_MSG(MCAPRESPONSECODED_MDLIDD, "[MCAP]responseCode=%d, mdlId=%d")
TRC_MSG(MCAPDISCONNECT_L2CAP_OF_MDL_CID__D, "[MCAP:]Disconnect L2CAP of mdl: CID = %d")
TRC_MSG(MCAPUNSUPPORTED_COMMAND_IN_THIS_STATE, "[MCAP]Unsupported command in this state.")
TRC_MSG(MCAPMCAPMCL_TIMER_TIMEOUT, "[MCAP]McapMcl timer timeout.")
TRC_MSG(MCAPNO_MCL_FOUND_WITH_THIS_TIMER, "[MCAP]No mcl found with this timer.")
TRC_MSG(MCAPNO_MDL_FOUND, "[MCAP]No mdl found.")
TRC_MSG(MCAPMCAPMCLSTARTTIMER, "[MCAP]McapMclStartTimer.")
TRC_MSG(MCAPTIMER_D_START, "[MCAP]Timer %d start.")
TRC_MSG(MCAPNO_TIMER_TO_START, "[MCAP]No timer to start.")
TRC_MSG(MCAPMCAPMCLSTOPTIMER, "[MCAP]McapMclStopTimer.")
TRC_MSG(MCAPCONTROLPKTMDLID__D, "[MCAP]controlPkt->mdlId = %d.")
TRC_MSG(MCAPTIMER_D_STOP, "[MCAP]Timer %d stop.")
TRC_MSG(MCAPNO_TIMER_FOUND_WHEN_STOP_TIMER, "[MCAP]No timer found when stop timer.")
TRC_MSG(MCAPMCAPMCLSTOPALLTIMER, "[MCAP]McapMclStopAllTimer.")
TRC_MSG(MCAPMCAPMCL_DISCONNECT_TIMER_TIMEOUT, "[MCAP]McapMcl disconnect timer timeout.")
TRC_MSG(MCAPMCAPMCLSTARTDISTIMER, "[MCAP]McapMclStartDisTimer.")
TRC_MSG(MCAPMCAPMCLSTOPDISTIMER, "[MCAP]McapMclStopDisTimer.")
TRC_MSG(PTA_TASK1_END, "PTA Task1 end")
TRC_MSG(PTA_TASK2_END, "PTA Task2 end")
TRC_MSG(PTA_INFO_END, "PTA Info end")
TRC_MSG(CHANGE_UART_SPEEDD, "Change UART speed:%d")
TRC_MSG(SEND_CHANGE_UART_SPEED, "Send Change UART speed")
TRC_MSG(FCBF_COMPLETED, "0xFCBF completed")
TRC_MSG(FCD0_COMPLETED, "0xFCD0 completed")
TRC_MSG(MEHANDLEWRITEMT66XXFLOWCONTROLENABLED, "MeHandleWriteMT66xxFlowControlEnabled")
TRC_MSG(WRITE_FM_OVER_SBC_START, "Write FM over SBC start")
TRC_MSG(COMMAND_RAW_DATA02X02X02X02X02X02X, "command raw data:%02x,%02x,%02x,%02x,%02x,%02x")
TRC_MSG(WRITE_FM_OVER_SBC_END, "Write FM over SBC end")
TRC_MSG(MEHANDLEWRITEPCMSETVALUED_D, "MeHandleWritePCMSetValue(%d, %d)")
TRC_MSG(MEHANDLEWRITEPCMSWITCHVALUED, "MeHandleWritePCMSwitchValue(%d)")
TRC_MSG(MEHANDLEWRITEPCMSWITCHVALUEX_D, "MeHandleWritePCMSwitchValue(%x, %d)")
TRC_MSG(HANDLETESTMODEENABLE_COMPLETED, "HandleTestModeEnable completed")
TRC_MSG(HANDLETESTMODEENABLE__CMDD_SEQD, "HandleTestModeEnable : cmd=%d, seq=%d")
TRC_MSG(UNEXPECTED_HCC_COMMAND__D, "unexpected HCC command : %d")
TRC_MSG(HANDLETESTMODEENABLE_SET_D_END_SEQD, "HandleTestModeEnable(): set %d end, seq=%d")
TRC_MSG(UUID0XX, "UUID=0x%x")
TRC_MSG(CLEAR_REGLIST_OPLIST_SECLIST_CMDLIST_PENDLIST_IN_ME_D, "Clear (regList, opList, secList, cmdList, pendList) in ME_Deinit")
TRC_MSG(ME_MEREADREMOTESUPPORTEDFEATUREP, "[ME] MeReadRemoteSupportedFeature(%p)")
TRC_MSG(ME_MEREADREMOTESUPPORTEDEXTFEATUREP, "[ME] MeReadRemoteSupportedExtFeature(%p)")
TRC_MSG(SET_INQUIRY_TX_PWR_SUCCESS__U, "Set inquiry tx pwr success : %u")
TRC_MSG(HANDLEINQUIRYTXPWROP__FAILED, "HandleInquiryTxPwrOp : Failed")
TRC_MSG(HANDLEWRITESSPDEBUG_SET_D_END, "HandleWriteSSPDebug(): set %d end")
TRC_MSG(TING_SETS_HCICMDCMDPARMENABLE_A1_TO_02X, "Ting sets hciCmd->cmdParm.enable A1 to :%02x")
TRC_MSG(TING_SETS_HCICMDCMDPARMENABLE_A2_TO_02X, "Ting sets hciCmd->cmdParm.enable A2 to :%02x")
TRC_MSG(MEREPORTMECOMMANDCOMPLETE_ETYPE_IS_NAME_RESULT_CANCEL_T, "MeReportMeCommandComplete(): eType is Name Result, cancel timer of token=%d")
TRC_MSG(MEREPORTMECOMMANDCOMPLETE_2_ETYPE_IS_NAME_RESULT_CANC, "MeReportMeCommandComplete(): [2] eType is Name Result, cancel timer of token=%d")
TRC_MSG(MECBTVERSIONU, "MEC(btVersion)=%u")
TRC_MSG(HCC_WRITE_LE_HOST_SUPPORT_LE_SUPPORTED_HOSTU_SIMULTANEO, "HCC_WRITE_LE_HOST_SUPPORT: LE_Supported_Host=%u, Simultaneous_LE_Host=%u")
TRC_MSG(HCC_WRITE_LE_HOST_SUPPORT_DONE, "HCC_WRITE_LE_HOST_SUPPORT done")
TRC_MSG(HCC_READ_PROPRIETARY_EXTENDED_FEATURES_S, "HCC_READ_PROPRIETARY_EXTENDED_FEATURES")
TRC_MSG(HCC_READ_PROPRIETARY_EXTENDED_FEATURES_DONE, "HCC_READ_PROPRIETARY_EXTENDED_FEATURES done")
TRC_MSG(U_U_U_U_U_U_U_U, "%u, %u, %u, %u, %u, %u, %u, %u")
TRC_MSG(HCC_READ_MTK_FEATURE_FAILED__STATUSU, "HCC_READ_MTK_FEATURE failed : status=%u")
TRC_MSG(ME_RECEIVED_BLUETOOTH_COMMAND_INFO, "ME: Received Bluetooth command info")
TRC_MSG(ME_RECEIVED_BLUETOOTH_CODEC_INFO_CODEC_NUMU_VENDOR_COD, "ME: Received Bluetooth codec info, codec_num=%u, vendor_codec_num=%u")
TRC_MSG(ME_CODEC_IDU, "ME: codec_id=%u")
TRC_MSG(DB_OPEND_BTDB_BTDEV_INFO_DB_FAILED, "[DB] Opend BTDB_BTDEV_INFO DB failed")
TRC_MSG(HCC_SET_LMP_EXTENDED_FEATURE_0X3, "HCC_SET_LMP_EXTENDED_FEATURE: 0x3")
TRC_MSG(HCC_SET_LMP_EXTENDED_FEATURE_DONE, "HCC_SET_LMP_EXTENDED_FEATURE done")
TRC_MSG(INIT_COMMAND_NODE_NOT_AVAILABLE, "init command node not available")
TRC_MSG(WRITE_IAC_LAP_NUMBERD, "Write IAC LAP number:%d")
TRC_MSG(IAC_LAP_PARM_02X02X02X02X02X02X02X, "IAC LAP parm: %02X,%02X,%02X,%02X,%02X,%02X,%02X")
TRC_MSG(CURRENT_ACCESS_MODE_IS_NOT_THE_SAME02X02X, "Current Access Mode is not the same:%02x,%02x")
TRC_MSG(MEHANDLECREATEPHYSICALLINKOP_COMPLETE, "MeHandleCreatePhysicalLinkOp complete")
TRC_MSG(MEHANDLEACCEPTPHYSICALLINKOP_COMPLETE, "MeHandleAcceptPhysicalLinkOp complete")
TRC_MSG(MEHANDLEDISCONNECTPHYSICALLINKOP_COMPLETE, "MeHandleDisconnectPhysicalLinkOp complete")
TRC_MSG(MEHANDLECREATELOGICALLINKOP_COMPLETE, "MeHandleCreateLogicalLinkOp complete")
TRC_MSG(MEHANDLEACCEPTLOGICALLINKOP_COMPLETE, "MeHandleAcceptLogicalLinkOp complete")
TRC_MSG(MEHANDLEDISCONNECTLOGICALLINKOP_COMPLETE, "MeHandleDisconnectLogicalLinkOp complete")
TRC_MSG(MEHANDLEREADDATABLOCKSIZEOP_COMPLETE, "MeHandleReadDataBlockSizeOp complete")
TRC_MSG(MEHANDLEFLOWSPECMODIFYOP_COMPLETE, "MeHandleFlowSpecModifyOp complete")
TRC_MSG(MEHANDLEREADLOCALAMPINFO_COMPLETE, "MeHandleReadLocalAmpInfo complete")
TRC_MSG(PAL_LENGTH_SO_FARD_AMP_ASSOC_LENGTHD_MSG_LEND, "[PAL] length_so_far:%d amp_assoc_length:%d msg_len:%d")
TRC_MSG(MEHANDLEREADLOCALAMPASSOC_COMPLETE, "MeHandleReadLocalAmpAssoc complete")
TRC_MSG(MEHANDLEWRITEREMOTEAMPASSOC_COMPLETE, "MeHandleWriteRemoteAmpAssoc complete")
TRC_MSG(ME_DISCONNECTPHYSICALLINK, "ME_DisconnectPhysicalLink")
TRC_MSG(DISCONNECT_OP_IN_OPLIST, "Disconnect Op in OpList")
TRC_MSG(DISCONNECT_OP_NOT_IN_OPLIST, "Disconnect Op not in OpList")
TRC_MSG(NO_AVAILABLE_DISCONNECT_OP_NOT_IN_OPLIST, "No available disconnect Op not in OpList")
TRC_MSG(ME_DISCONNECTAMPPHYSICALLINKBYHANDLER, "ME_DisconnectAMPPhysicalLinkByHandler")
TRC_MSG(PARM008X, "parm[0]:%08x")
TRC_MSG(LINKPHYSICAL_LINK_SATE08X, "link->physical_link_sate:%08x")
TRC_MSG(EVENTSTATUS08X, "event.status:%08x")
TRC_MSG(ERR_A2MP_FINDAMPDEVICE_LINK_IS_NULL_BY_IDD, "[ERR] A2MP_FindAMPDevice link is NULL by id:%d")
TRC_MSG(INDEX_ID, "index i:%d")
TRC_MSG(INDEX_LOGICAL_LINK_SATED, "index logical_link_sate:%d")
TRC_MSG(LETOHOST16PARM1D, "LEtoHost16(parm+1):%d")
TRC_MSG(NOT_FOUND_LOGICAL_LINK_HANDLER, "Not found logical link handler")
TRC_MSG(ME_HANDLEDISCONNECTLOGICALLINKCOMPLETEEVENT_PARM0D, "Me_HandleDisconnectLogicalLinkCompleteEvent: parm[0]:%d")
TRC_MSG(ME_HANDLEAMPRXHCIEVENTMESSAGE_EVENTD, "Me_HandleAmpRxHCIEventMessage event:%d")
TRC_MSG(HCE_DISCONNECT_LOGICAL_LINK_S, "HCE_DISCONNECT_LOGICAL_LINK")
TRC_MSG(CAN_NOT_FIN_COD_RECORD_DISCARD_PENDING_REQUEST, "Can not fin COD record. DIscard pending request")
TRC_MSG(REHANDLE_LINK_CONNECT_REQUEST, "Rehandle link connect request")
TRC_MSG(MEHANDLESWITCHROLEOP__REQROLEU__ROLEU_JUST_REPORT, "MeHandleSwitchRoleOp : reqRole(%u) == role(%u). Just report role change")
TRC_MSG(REMDEVHCIHANDLED, "remDev->hciHandle:%d")
TRC_MSG(READ_TX_POWER_RESULT, "Read Tx Power Result")
TRC_MSG(MEHANDLEREADREMOTEFEATURETYPEOP__EVENTU_REMDEVP_HCIH, "MeHandleReadRemoteFeatureTypeOp : event=%u, remDev=%p, hciHandle=%u")
TRC_MSG(ME_HANDLE_READ_REMOTE_EXT_FEATURE__U, "[ME] Handle read remote ext feature : %u")
TRC_MSG(ME_HANDLE_READ_REMOTE_EXT_FEATURE_FAILED__U, "[ME] Handle read remote ext feature failed : %u")
TRC_MSG(MEHANDLEREADREMOTEVERSIONTYPEOP__EVENTU_REMDEVP_HCIH, "MeHandleReadRemoteVersionTypeOp : event=%u, remDev=%p, hciHandle=%u")
TRC_MSG(READ_REMOTE_CLOCK_OFFSET, "Read remote clock offset")
TRC_MSG(READ_REMOTE_CLOCK_OFFSET_FAILED__U, "Read remote clock offset failed : %u")
TRC_MSG(ALLOWROLECHANGE0XX, "allowRoleChange=0x%x")
TRC_MSG(ME_FINDREMOTEDEVICEP_0XX0XX0XX0XX0XX0XX, "ME_FindRemoteDeviceP: 0x%X,0x%X,0x%X,0x%X,0x%X,0x%X,")
TRC_MSG(ME_FINDREMOTEDEVICEP_7_0XX0XX0XX0XX0XX0XX0XX, "ME_FindRemoteDeviceP: 0x%X,0x%X,0x%X,0x%X,0x%X,0x%X, linkType:0x%X")
TRC_MSG(DEVTABLEI_0XX0XX0XX0XX0XX0XX, "devTable[i]: 0x%X,0x%X,0x%X,0x%X,0x%X,0x%X,")
TRC_MSG(DEVTABLEI_7_0XX0XX0XX0XX0XX0XX0XX, "devTable[i]: 0x%X,0x%X,0x%X,0x%X,0x%X,0x%X, linkType:0x%x")
TRC_MSG(MECHECKDEVICESTATENOTIDLE__REMDEV_STATE_IS_BDS_OUT_CON, "MeCheckDeviceStateNotIdle : remDev state is BDS_OUT_CON")
TRC_MSG(OP_IS_ON_OPLIST, "op is on opList")
TRC_MSG(WARN_REMDEV_STATE_IS_BDS_OUT_CON_BUT_OP_IS_NEIGHER_ON_OP, "[WARN] remDev state is BDS_OUT_CON, but op is neigher on opList nor equal curOp")
TRC_MSG(MECON_MECALLLINKHANDLERS__HANDLERP_CALLBACKP_PEN, "[ME][CON] MeCallLinkHandlers : handler=%p, callback=%p, pending=%u")
TRC_MSG(SEC_NO_BONDING_DELETE_RECORD, "[SEC] No bonding, delete record")
TRC_MSG(TEST_STATED, "[test] state:%d")
TRC_MSG(TEST_REMDEVHANDLERSP_P_P, "[TEST] remDev->handlers=%p (%p, %p)")
TRC_MSG(TEST_PENDINGHANDLERSP_P_P, "[TEST] pendingHandlers=%p (%p, %p)")
TRC_MSG(MECONNWARN_BDC_IS_NULL_WHEN_DOING_ACL_RECONNECT, "[ME][CONN][WARN] bdc is NULL when doing ACL reconnect")
TRC_MSG(MECONN_ME_RECONNECT__HANDLERP, "[ME][CONN] ME reconnect : handler=%p")
TRC_MSG(MECONNWARN_DOING_RECONNECT__BDCP_STATUSD, "[ME][CONN][WARN] Doing reconnect : bdc=%p, status=%d")
TRC_MSG(MECON_FAIL_PENDIONG_OP__OPP_TYPEU, "[ME][CON] Fail pendiong op : op=%p, type=%u")
TRC_MSG(MECON_NOT_DEV_RELATED_CMD_REINSERT_INTO_OPLIST, "[ME][CON] not dev related cmd, re-insert into opList")
TRC_MSG(NEXTOP_IS_REMOVED_FROM_OPLIST_RESTART, "nextOp is removed from opList. Restart.")
TRC_MSG(CUROP_IS_REMOVED_CALL_MEOPERATIONEND_TO_CONTINUE, "curOp is removed. Call MeOperationEnd to continue")
TRC_MSG(HANDLE_SECURITY_IN_SM_WHICH_IS_CALLBACKED_FROM_L2CAP_D, "Handle security in SM which is callbacked from L2CAP: %d")
TRC_MSG(MEFAILPENDINGREMDEVCOMMANDS_BDC_IS_NULL, "MeFailPendingRemDevCommands: bdc is NULL")
TRC_MSG(MEFAILREMDEVCOMMAND_BOP_READ_RSSI, "MeFailRemDevCommand(): BOP_READ_RSSI")
TRC_MSG(REMOVE_CANCELOP_OP, "Remove cancelOp OP")
TRC_MSG(REMOVE_PACKETTYPEOP_OP, "Remove packetTypeOp OP")
TRC_MSG(REMOVE_REMOTEFEATUREOP_OP, "Remove remoteFeatureOp OP")
TRC_MSG(REMOVE_REMOTEVERSIONOP_OP, "Remove remoteVersionOp OP")
TRC_MSG(REMOVE_REMOTECLOCKOFFSETOP_OP, "Remove remoteClockOffsetOp OP")
TRC_MSG(REMOVE_SUPERVISIONOP_OP, "Remove supervisionOp OP")
TRC_MSG(REMOVE_AUTOMATICALLYFLUSHEDOP_OP, "Remove automaticallyFlushedOp OP")
TRC_MSG(REMOVE_SNIFFSUBRATEOP_OP, "Remove sniffSubrateOp OP")
TRC_MSG(REMOVE_READTXPOWEROP_OP, "Remove readTxPowerOp OP")
TRC_MSG(REMOVE_QOS_OP, "Remove QOS OP")
TRC_MSG(REMOTE_DOES_NOT_SUPPORT_ESCO, "Remote does not support eSCO")
TRC_MSG(EXT_FEATURE_IS_SUPPORTED, "Ext feature is supported")
TRC_MSG(ME_CAN_NOT_FIND_REMDEV_FOR_HCI_HANDLE_U, "[ME] Can not find remDev for hci handle %u")
TRC_MSG(ME_READ_REMOTE_EXT_FEATURE_FAILED__U, "[ME] Read remote ext feature failed : %u")
TRC_MSG(ME_READ_REMOTE_EXT_FEATURE_SUCCESS__HANDLEU, "[ME] Read remote ext feature success : handle=%u")
TRC_MSG(ME_EXT_FEATURE_IS__U_U_U_U_U_U_U_U, "[ME] Ext feature is : %u, %u, %u, %u, %u, %u, %u, %u")
TRC_MSG(ME_READ_REMOTE_VERSION_SUCCESS, "[ME] Read remote version success")
TRC_MSG(READ_REMOTE_CLOCK_OFFSET__STATUSU, "Read remote clock offset : status=%u")
TRC_MSG(READ_REMOTE_CLOCK_OFFSET_OF_HANDLEU, "Read remote clock offset of handle=%u")
TRC_MSG(MEDIS_FROM_INDXD, "MeDis from indx:%d")
TRC_MSG(AUTUMN_TRY_TO_DO_MEDISCONNECTLINK, "autumn try to do MeDisconnectLink")
TRC_MSG(REPORTROLECHANGE__REMOTE_DO_ROLE_CHANGE_FIRST_ERRU, "ReportRoleChange : remote do role change first, err=%u")
TRC_MSG(REPORTROLECHANGE__ROLE_CHANGE_SUCCESS_BEFORE_COMMAND_STATU, "ReportRoleChange : role change success before command status of role change command. Delay report until command status")
TRC_MSG(MECON_PENDING_HANDLER_DID_NOT_CALLBACK, "[ME][CON] pending handler, did not callback")
TRC_MSG(SUSPEND_PACKET_FOR_U_MS, "Suspend packet for %u ms")
TRC_MSG(LE_FOUND_DONE, "LE found done")
TRC_MSG(LE_FOUND_DONE1, "LE found done1")
TRC_MSG(MEDEVEVENTHANDLER_D, "MeDevEventHandler %d")
TRC_MSG(MEDEVEVENTHANDLER__DS_ADDDEVICE_FAILED, "MeDevEventHandler : DS_AddDevice failed")
TRC_MSG(BTEVENT_INQUIRY_RESULT_S, "BTEVENT_INQUIRY_RESULT")
TRC_MSG(BTEVENT_INQUIRY_RESULT_A1, "BTEVENT_INQUIRY_RESULT A1")
TRC_MSG(SET_DEVICE_TYPE02X, "set device type:%02x")
TRC_MSG(BTEVENT_INQUIRY_RESULT_A2, "BTEVENT_INQUIRY_RESULT A2")
TRC_MSG(DEVTYPE_IS_LE_AND_COD_IS_0_SET_COD_TO_0XFFFFFFFF, "devType is LE and COD is 0. set COD to 0xFFFFFFFF")
TRC_MSG(BLE_ADV_REPORT_OF_DUAL_MODE_DEVICE_DO_NOT_ADD_COD_RECORD, "BLE adv report of dual mode device. Do not add COD record.")
TRC_MSG(ME_INQUIRYTXPWR__MECINQUIRYTXPWROP_IS_QUEUED_BUT_NOT_SEN, "ME_InquiryTxPwr : MEC(inquiryTxPwrOp) is queued but not sent yet. Just fill the pwr level and return")
TRC_MSG(ME_WRITE_SCAN_MODE_OP_ALREADY_QUEUED_CHANGE_MODE_TO_U, "[ME] write scan mode op already queued. Change mode to %u")
TRC_MSG(INQ_ACCESS_CODE_HAS_BEEN_CHANGED, "INQ Access Code has been changed.")
TRC_MSG(ME_LE_SETDIRECTEDCONNECTABLE_STACKSTATED_ADVCUR0XX, "ME_LE_SetDirectedConnectable(): stackState=%d, advCur=0x%x")
TRC_MSG(BDC_PATH_D, "bdc path: %d")
TRC_MSG(SEC_PATH_D, "sec path: %d")
TRC_MSG(FIND_DEVICE_TYPE_FROM_DEVICE_INFO_DB__D, "find device type from device info db : %d")
TRC_MSG(HANDLE_04X, "handle :%04x")
TRC_MSG(LINK_PATH_D, "link path: %d")
TRC_MSG(ME_GETDEVICETYPE_D, "ME_GetDeviceType(): %d")
TRC_MSG(ME_GETCONNTYPE__HCIHANDLE__U_TYPE__D, "ME_GetConnType : hcihandle = %u, type = %d")
TRC_MSG(ME_LE_SETACCESSIBLE_STACKSTATED_MODE0XX_ADVCUR0X, "ME_LE_SetAccessible(): stackState=%d, mode=0x%x, advCur-0x%x")
TRC_MSG(LE_IS_SWICHED_OFF_JUST_RETURN, "LE is swiched off. just return")
TRC_MSG(CONTINUE_GOING, "Continue going")
TRC_MSG(BDC_NULL, "bdc null")
TRC_MSG(BDC08X, "bdc:%08x")
TRC_MSG(BDCLINK08X, "bdc->link:%08x")
TRC_MSG(TRY_TO_CREATE_LINK_AND_ADDRESS_TYPED, "Try to create link and address type:%d")
TRC_MSG(MECON_ME_CREATELINK__HANDLERP, "[ME][CON] ME_CreateLink : handler=%p")
TRC_MSG(ME_REPLACE_CLOCKOFFSET_IN_DB_CLOCKOFFSETU, "[ME] Replace clockOffset in DB. clockoffset=%u")
TRC_MSG(DISCONNECT_IN_PROGRESS, "Disconnect in progress")
TRC_MSG(REMDEVSTATED, "remDev->state:%d")
TRC_MSG(SECOPBDADDR0XX0XX0XX0XX0XX0XX, "secOp->bdAddr=0x%X,0x%X,0x%X,0x%X,0x%X,0x%X")
TRC_MSG(SEC_SETPINBYADDR_STATUSD, "SEC_SetPinByAddr status=%d")
TRC_MSG(SEC_SETUSERCONFIRMBYADDR_USERCONFIRMD, "SEC_SetUserConfirmByAddr() userConfirm=%d")
TRC_MSG(SEC_IS_LOW_AND_SSPHOST_IS_NOT_SUPPORTED, "SEC is low and SSP(host) is not supported")
TRC_MSG(ME_SETDEFAULTLINKPOLICY__INACLD_OUTACLD, "ME_SetDefaultLinkPolicy : inAcl=%d, outACL=%d")
TRC_MSG(ME_SETDEFAULTLINKPOLICY__BTVERU_SAVEINACLD_INACLD, "ME_SetDefaultLinkPolicy : btver=%u, saveInAcl=%d, inACL=%d")
TRC_MSG(ME_READTXPOWER, "ME_ReadTxPower")
TRC_MSG(ME_READMANUFACTURENAMEP, "ME_ReadManufactureName(%p)")
TRC_MSG(REMOTE_DEVICE_STATEU, "remote device state=%u")
TRC_MSG(ME_ISMTKBTCHIPU, "ME_IsMtkBTChip=%u")
TRC_MSG(ME_ISSSPSUPPORTED__D, "ME_IsSSPSupported : %d")
TRC_MSG(ME_CANCELBONDING__AUTHSTATE__U, "ME_CancelBonding : authState == %u")
TRC_MSG(ME_CANCELBONDING__DO_NOTHING_WAIT_FOR_ACL_DISCONNECT, "ME_CancelBonding : do nothing. Wait for ACL disconnect")
TRC_MSG(ERR_ME_CANCELBONDING__CANCEL_BOND_WHEN_WAITING_FOR_PIN_C, "[ERR] ME_CancelBonding : Cancel bond when waiting for pin code. MMI shall send 0 length pin to cancel bond.")
TRC_MSG(ERR_ME_CANCELBONDING__UNKNOWN_AUTHSTATE, "[ERR] ME_CancelBonding : unknown authState")
TRC_MSG(CURCMDIDX__D, "curCmdIdx = %d")
TRC_MSG(D_0XX, "%d: 0x%x")
TRC_MSG(LEUTILUPDATEADVERTISEDATA__LESUPPORT_IS_0_JUST_RETURN, "leUtilUpdateAdvertiseData : LESupport is 0, just return")
TRC_MSG(APPLICATION_WILL_NOT_CHANGE_CONNECTION_INTERVAL, "Application will not change connection interval")
TRC_MSG(THE_OLD_CONNECTION_UPDATE_IS_NOT_ONGOING, "The old connection update is not ongoing")
TRC_MSG(LEUTILRESOLVERANDOMPRIVATERESOLVABLEADDRESSCB_INDEXD, "leUtilResolveRandomPrivateResolvableAddressCB: index=%d")
TRC_MSG(LE_NOT_SUPPORTED_JUST_RETURN_NOT_SUPPORTED, "LE not supported. Just return not supported")
TRC_MSG(UPDATE_CONNECTION_LOCK_REJECT, "Update connection lock, reject")
TRC_MSG(UPDATE_CONNECTION_ONGOING_REJECT, "Update connection ongoing, reject")
TRC_MSG(TING_SETS_HCICMDCMDPARMENABLE_G_TO_02X, "Ting sets hciCmd->cmdParm.enable G to :%02x")
TRC_MSG(TING_SETS_HCICMDCMDPARMENABLE_H_TO_02X, "Ting sets hciCmd->cmdParm.enable H to :%02x")
TRC_MSG(TING_SETS_HCICMDCMDPARMENABLE_N1_TO_02X, "Ting sets hciCmd->cmdParm.enable N1 to :%02x")
TRC_MSG(DLIGHT_CURHCICMDCMDPARMENABLED, "Dlight curHciCmd->cmdParm.enable:%d")
TRC_MSG(TING_SETS_HCICMDCMDPARMENABLE_N_TO_02X, "Ting sets hciCmd->cmdParm.enable N to :%02x")
TRC_MSG(SET_SCAN_ENABLED_CURRENT_VALUED_RESULT, "Set Scan enabled current value:%d result")
TRC_MSG(SET_SCAN_ENABLED_SETENABLEDFLAGD_RESULT, "Set Scan enabled setEnabledFlag:%d result")
TRC_MSG(LAST_LE_STATE_IS_SCAN_ON_TRY_TO_ON_AGAIN_STOP_FIRSTDD, "Last Le state is scan on, try to on again, stop first:%d,%d")
TRC_MSG(SETS_HCICMDCMDPARMENABLE_C_TO_02X, "sets hciCmd->cmdParm.enable C to :%02x")
TRC_MSG(SETS_HCICMDCMDPARMENABLE_F_TO_02X, "sets hciCmd->cmdParm.enable F to :%02x")
TRC_MSG(BDCDEVTYPED, "bdc->devType=%d")
TRC_MSG(TRY_TO_START_LE_LINK_ENCRYPTION_RESULTD, "Try to start LE link encryption result:%d")
TRC_MSG(LE_SLAVE_NOT_INITIATE_ENCRYPTION, "LE Slave, not initiate encryption")
TRC_MSG(LECONNINTERVAL_DMS, "leConnInterval %dms")
TRC_MSG(BTCTXMEACTIVECONSD, "btCtxMe.activeCons=%d")
TRC_MSG(HANDLELECONNECTUPDATECOMPLETE02X02X02X02X02X, "HandleLeConnectUpdateComplete:%02x,%02x,%02x,%02x,%02x")
TRC_MSG(USED_THE_OLD_CONNECTION_INTERVAL_VALUE, "Used the old connection interval value")
TRC_MSG(INTERVAL04X_REMDEVINTERVAL_MAX04X_REMDEVINTERVAL_, "interval:%04x, remDev->interval_max:%04x, remDev->interval_min:%04x")
TRC_MSG(SLAVE_LATENCY04X_REMDEVSLAVE_LATENCY04X, "slave_latency:%04x, remDev->slave_latency:%04x")
TRC_MSG(TIMEOUT04X_REMDEVTIMEOUT04X, "timeout:%04x, remDev->timeout:%04x")
TRC_MSG(AUTUMN_START_TO_DISCONNECT_SCO_LINK, "autumn start to disconnect SCO Link")
TRC_MSG(OUT_SCO_CONNECTION_IS_ONGOING, "Out SCO connection is ongoing")
TRC_MSG(OUT_SCO_CONNECTION_OPERATION_IS_INSERTED, "Out SCO connection operation is inserted")
TRC_MSG(WARN_SCO_CONNECT_IS_OUTGOING_BUT_SCOOP_IS_NOT_INSERTED_S, "[WARN] SCO connect is outgoing but scoop is not inserted. scoop=%u")
TRC_MSG(NO_FREE_SCOCON_TO_REJECT_JUST_LEAVE_IT, "No free scocon to reject. Just leave it.")
TRC_MSG(SCOHANDLEDISCONNECTACL_BDS_OUT_CON__SHALL_NOT_COME_HERE, "ScoHandleDisconnectAcl (BDS_OUT_CON) : shall not come here")
TRC_MSG(CREATE_SCO_WITH_TYPE02X, "Create SCO with type:%02x")
TRC_MSG(SECHANDLEAUTHENTICATEOP__AUTHSTATEU_ERRU, "SecHandleAuthenticateOp : authState==%u, err=%u")
TRC_MSG(STARTPINCODERSPBYADDRTASK, "StartPinCodeRspByAddrTask")
TRC_MSG(STARTPINCODERSPBYADDRTASK_ASSERT, "StartPinCodeRspByAddrTask assert")
TRC_MSG(SECHANDLELINKKEYREQ__CONFLICT_WITH_LOCAL_BONDING, "SecHandleLinkKeyReq : conflict with local bonding")
TRC_MSG(SECHANDLEPINCODEREQ__CONFLICT_WITH_LOCAL_AUTHENTICATE, "SecHandlePinCodeReq : conflict with local authenticate")
TRC_MSG(SECHANDLEAUTHENTICATECOMPLETE__AUTHSTATE_IS_CANCEL_AUTHENT, "SecHandleAuthenticateComplete : authState is cancel authenticate. Just return")
TRC_MSG(WARN_SECHANDLELINKKEYNOTIFY__BONDING_HAS_BEEN_CANCELED_, "[WARN] SecHandleLinkKeyNotify : bonding has been canceled. Just return")
TRC_MSG(BTA2MP_GENERATEINITGAMPLK, "BTA2MP_GenerateInitGAMPLK")
TRC_MSG(GAMPKEY02X02X02X02X02X02X02X02X, "gampKey:%02x%02x%02x%02x%02x%02x%02x%02x")
TRC_MSG(BTA2MP_DEDICATEDAMPLK, "BTA2MP_DedicatedAMPLK")
TRC_MSG(DAMPKEY02X02X02X02X02X02X02X02X, "dampKey:%02x%02x%02x%02x%02x%02x%02x%02x")
TRC_MSG(TRY_TO_DISCONNECT_PHYSICAL_LINK, "Try to disconnect Physical link")
TRC_MSG(SECHANDLEIOCAPABILITYRESPONSE__CONFLICT_WITH_LOCAL_BONDING, "SecHandleIoCapabilityResponse : conflict with local bonding")
TRC_MSG(SET_AUTHINITIATOR_TO_0, "Set authInitiator to 0")
TRC_MSG(DLIGHT_REMDEVSTATE02X, "Dlight remDev->state:%02x")
TRC_MSG(DLIGHT_ERRORCODE02X, "Dlight errorCode:%02x")
TRC_MSG(ME_GETDEVICETYPE_BT_DEV_TYPE_LE, "ME_GetDeviceType BT_DEV_TYPE_LE")
TRC_MSG(AUTUMN_START_THE_AUTHENTICATION_PROCEDURE, "autumn start the authentication procedure")
TRC_MSG(SECADDAUTHENTICATEOPTOQUEUE__AUTH_IS_ONGOING_RETURN_IN_PR, "SecAddAuthenticateOpToQueue : auth is ongoing, return in progress. authState=%u, ioCapability=%u")
TRC_MSG(SET_AUTHINITIATOR_TO_1, "Set authInitiator to 1")
TRC_MSG(SECREMOVEAUTHENTICATEOPFROMQUEUE__REMOVE_WHEN_CUROP__AUT, "SecRemoveAuthenticateOpFromQueue : remove when curOp == auth op")
TRC_MSG(SECREMOVEAUTHENTICATEOPFROMQUEUE__NOT_FOUND, "SecRemoveAuthenticateOpFromQueue : not found")
TRC_MSG(SECPROCESSSECURITYTOKEN__REMDEV_STATE_IS_NOT_CONNECTED_RE, "SecProcessSecurityToken : remDev state is not connected. Return failed")
TRC_MSG(SECPROCESSSECURITYTOKENTOKENP__SRP, "SecProcessSecurityToken(token=%p) : sr=%p")
TRC_MSG(SSP_SUPPORTED_KEEP_GOING, "SSP supported. keep going")
TRC_MSG(SEC_BONDPAIR_ONGOING_DID_NOT_SEND_AUTH_CMD_TO_CONTROLLER, "[SEC] Bond/Pair ongoing did not send auth cmd to controller")
TRC_MSG(AUTH__ENCRYPTION_DISABLED_AND_SWITCSTATE_IS_U, "Auth : Encryption disabled and switcState is %u")
TRC_MSG(AUTHENTICATE_ENCOUNTER_ROLE_SWITCH_DISABLE_ENCRYPTION_WAIT, "Authenticate encounter role switch disable encryption. Wait for role switch complete and enable encryption again. ")
TRC_MSG(RFERR_RFCONTROLCHANNEL__RFCTLPARSEPARMS_FAILED, "[RF][ERR] RfControlChannel : RfCtlParseParms failed")
TRC_MSG(RECV_SIMAP_RFCHNL_CON_REQ_ORG_PIN_LENDAUTHSTATEDENCR, "Recv SIMAP RFChnl con req: org pin_len=%d,authState=%d,encryptState=%d")
TRC_MSG(RFCOMM_CHECK2_DLCIDD_TXCREDITD_RXCD_FLAG0XX, "RFCOMM: check2 dlcid:%d txcredit:%d rxc:%d flag:0x%x")
TRC_MSG(RFCOMM_PREVIOUS_SABM_IS_IN_PROGRESS_IGNORE_IT_DLCI0X02, "RFCOMM: Previous SABM is in progress, ignore it (DLCI=0x%02x Mux=0x%02x Event=0x%02x)")
TRC_MSG(SINCE_L2CHANNELID_IS_DIFFERENT_FROM_THAT_STORED_IN_MUX_JUS, "Since L2ChannelId is different from that stored in MUX, just ignore it")
TRC_MSG(RFSENDCMDRSP, "RfSendCmdRsp")
TRC_MSG(RFCOMMANDSENT, "RfCommandSent")
TRC_MSG(FLUSH_OCCURS, "flush occurs")
TRC_MSG(RF_DEREGISTERSERVERCHANNEL_CHANNELSTATEDLC_STATE_SEC_PE, "RF_DeregisterServerChannel: Channel->state=DLC_STATE_SEC_PENDING")
TRC_MSG(TEMP_REFCOUNT, "temp refCount--")
TRC_MSG(RF_CLOSECHANNEL_CHANNELSTATEDLC_STATE_SEC_PENDING, "RF_CloseChannel: Channel->state=DLC_STATE_SEC_PENDING")
TRC_MSG(RF_CLOSECHANNEL_CHANNELSTATED, "RF CLOSECHANNEL_CHANNEL STATE %d")
TRC_MSG(RFCOMM_DISC_OPERATION_IS_ONGOING, "RFCOMM: DISC operation is ongoing")
TRC_MSG(RFCOMM_CHECK21_DLCIDD_TXCREDITD_RXCD_FLAG0XX, "RFCOMM: check21 dlcid:%d txcredit:%d rxc:%d flag:0x%x")
TRC_MSG(AUTUMN_SEND_RFCOMM, "autumn send rfcomm")
TRC_MSG(THE_REMOTE_DEVICE_VERSION_IS_02X, "The remote device version is :%02x")
TRC_MSG(A2DPSDPQUERY__GETSDPQUERYCOUNT_D, "A2dpSdpQuery  GetSdpQueryCount %d")
TRC_MSG(A2DPSDPQUERY__SERVICESEARCHMULTIPLEATTRIBUTE_UUID_04X, "A2dpSdpQuery  ServiceSearchMultipleAttribute uuid %04x")
TRC_MSG(SDAP_REQUEST_QUEUE_IS_NOT_ENABLED_JUST_RETURN_BUSY, "[SDAP] Request Queue is not enabled. Just return busy.")
TRC_MSG(SDAP_NOT_IN_MULTIPLE_SDAP_REQUEST, "[SDAP] Not in multiple sdap request.")
TRC_MSG(SDAP_FAILED_TO_QUEUE_SDAP_SERVICE_SEARCH_ALL_REQUEST, "[SDAP] Failed to queue sdap service search all request.")
TRC_MSG(SDAP_FAILED_TO_QUEUE_SDAP_SERVICE_SEARCH_ALL2_REQUEST, "[SDAP] Failed to queue sdap service search all2 request.")
TRC_MSG(HDP_IN_SDAP_UUID_IS_0XX, "[HDP] in sdap, uuid is 0x%x")
TRC_MSG(QUERY_SDAP_MULTIPLE_CALLBACK_PROCEED_TO_ATTRIBD, "query_sdap_multiple_callback: proceed to attrib[%d]")
TRC_MSG(SDAP_RESULT_DUMP_0X02X_0X02X_0X02X_0X02X, "[SDAP] result dump 0x%02x 0x%02x 0x%02x 0x%02x")
TRC_MSG(SDAP_RESULT_DUMP_0X02X_0X02X, "[SDAP] result dump 0x%02x 0x%02x")
TRC_MSG(SDAP_SERVICE_RECORD_HANDLE_0X08X, "[SDAP] service record handle: 0x%08x")
TRC_MSG(SDAP_ATTRIBUTE_ID_0X04X, "[SDAP] attribute id: 0x%04x")
TRC_MSG(SDP_PARSE_STATUSD, "SDP parse status:%d")
TRC_MSG(SDAP_EVENTPTOKENUUIDU, "[SDAP] Event->p.token->uuid=%u")
TRC_MSG(SDAP_SUPPORT_UUIDUU, "[SDAP] support_uuid[%u])=%u")
TRC_MSG(QUERY_SDAP_SEARCH_ATTRIBUTE_CALLBACK_EVENT_D, "query_sdap_search_attribute_callback event %d")
TRC_MSG(GET_RFCOMM_CHANNEL_FOR_128BIT_UUID_SERVICE, "Get RFCOMM channel for 128bit UUID service")
TRC_MSG(EVENTPTOKENUUID0XX, "Event->p.token->uuid=0x%x")
TRC_MSG(AVAILVALUELEND_STOREDLEND, "availValueLen=%d, storedLen=%d")
TRC_MSG(SDAP_UTIL_CREATE_ACL_LINK_STATUSD, "sdap_util_create_acl_link status=%d")
TRC_MSG(SDAP_NO_SDAP_REQUEST_FOR_THE_SAME_DEVICE, "[SDAP] No SDAP request for the same device.")
TRC_MSG(SDAP_REQUEST_TYPE_D_STATUS_D, "[SDAP] Request Type: %d, status: %d")
TRC_MSG(SDAP_NO_ANY_QUEUED_SDAP_REQUEST, "[SDAP] No any queued sdap request.")
TRC_MSG(SDAP_NO_AVAILABLE_SDAP_REQUEST_STRUCT, "[SDAP] No available sdap request struct.")
TRC_MSG(SDAP_GET_QUEUED_SDAP_REQUEST_TYPE_D, "[SDAP] Get queued sdap request, type: %d")
TRC_MSG(SDAP_SDAP_FAILED_TO_REMOVE_THE_REQUEST_FROM_QUEUE, "[SDAP] Sdap failed to remove the request from queue")
TRC_MSG(SDAP_SDP_PARSEATTRIBUTES_RETURNS_D, "[SDAP] SDP_ParseAttributes() returns %d")
TRC_MSG(SDAP_VALUEBUFFER_02X_02X_02X_LEN_D, "[SDAP] valueBuffer: %02x %02x %02x. len: %d")
TRC_MSG(SDAP_SDPPARSEELEMENT_OFFSET_D_LEN_D, "[SDAP] SdpParseElement() offset: %d, len: %d")
TRC_MSG(SDAP_PARSED_UUID_4X, "[SDAP] Parsed UUID: %4x")
TRC_MSG(SDAP_CONTINUATION_STATE_MET, "[SDAP] Continuation state met.")
TRC_MSG(SDAP_NO_MORE_SERVICE_CLASS_ID_LIST, "[SDAP] No more Service Class ID List.")
TRC_MSG(SDAP_DB_TEST_VENDOR_ID_0X04X_PRODUCT_ID_0X04X_STAT, "[SDAP] DB Test. Vendor ID: 0x%04x, Product ID: 0x%04x, status: %d")
TRC_MSG(SDAPDB_OPEN_SDAP_DEVIC_DB_SUCCESS, "[SDAP][DB] Open SDAP Devic DB: Success")
TRC_MSG(SDAPDB_OPEN_SDAP_DEVIC_DB_FAIL_WITH_D, "[SDAP][DB] Open SDAP Devic DB: Fail with %d")
TRC_MSG(SDAPDB_CLOSE_SDAP_DEVIC_DB_SUCCESS, "[SDAP][DB] Close SDAP Devic DB: Success")
TRC_MSG(SDAPDB_CLOSE_SDAP_DEVIC_DB_FAIL_WITH_D, "[SDAP][DB] Close SDAP Devic DB: Fail with %d")
TRC_MSG(IN_POWER_OFF_STATE_NOT_CHANGE_EIR, "In power off state, not change EIR")
TRC_MSG(SDPUUIDCMPUUID1_LEND_2X_2X_2X_2X_2X_2X_2X_, "SdpUuidCmp:uuid1, len=%d, (%2x %2x, %2x %2x, %2x %2x, %2x %2x)")
TRC_MSG(SDPUUIDCMPUUID2_LEND_2X_2X_2X_2X_2X_2X_2X_, "SdpUuidCmp:uuid2, len=%d, (%2x %2x, %2x %2x, %2x %2x, %2x %2x)")
TRC_MSG(SM_ALLOCCMDPKT_0XX, "SM_AllocCmdPkt 0x%x")
TRC_MSG(SM_FREECMDPKT_0XX, "SM_FreeCmdPkt 0x%x")
TRC_MSG(GATT_DEVICE_NAME_FAILED, "GATT device name failed")
TRC_MSG(SESSIONPAIRSTATUSD, "session->pairStatus:%d")
TRC_MSG(TRY_TO_SERACH_SERVICE, "Try to serach service")
TRC_MSG(REMOTE_DO_NOT_WANT_TO_BOND, "Remote do not want to bond")
TRC_MSG(SM_BOND_BDC_0, "SM bond bdc 0")
TRC_MSG(BDCUNDER_USEDD, "bdc->under_used:%d")
TRC_MSG(BMCONTROLLERBM_OPACTIVITYD, "BMController.bm_opactivity:%d")
TRC_MSG(SM_SHALL_WAIT_FOR_BTEVENT_GATT_ATT_READY, "SM shall wait for BTEVENT_GATT_ATT_READY")
TRC_MSG(RECV_BTEVENT_GATT_ATT_READY_BUT_STATE_IS_NOT_INIT__D, "Recv BTEVENT_GATT_ATT_READY, but state is not init : %d")
TRC_MSG(SM_PHASE3_KEYRECEIVE_RECEIVE_UNEXPECTED_KEY, "SM_Phase3_KeyReceive(): Receive unexpected key")
TRC_MSG(CMAC_VERIFY_SUCCESS, "!!!!CMAC VERIFY SUCCESS!!!!")
TRC_MSG(CMAC_VERIFY_FAIL, "!!!!CMAC VERIFY FAIL!!!!")
TRC_MSG(LINK_ROLED_SESSIONPAIRINFORESPKEYDIST0XX, "link role=%d, session->pairInfo.respKeyDist=0x%x")
TRC_MSG(CACHE_MCONFIRM, "cache mConfirm")
TRC_MSG(UPF_DEBUG_LTK_RECEIVE_FROM_REMOTE_SIDE, "UPF Debug LTK Receive from Remote Side")
TRC_MSG(UPF_DEBUG_LTK_LSBMSB02X02X02X02X02X02X02X, "UPF Debug LTK LSB->MSB:%02x,%02x,%02x,%02x,%02x,%02x,%02x,%02x")
TRC_MSG(UPF_DEBUG_EDIV_RECEIVE_FROM_REMOTE_SIDE04X, "UPF Debug ediv Receive from Remote Side:%04x")
TRC_MSG(UPF_DEBUG_EDRANDIV_SEND_FROM_REMOTE_SIDE_LSBMSB02X02X, "UPF Debug edrandiv Send from Remote Side LSB->MSB:%02x,%02x,%02x,02x,%02x,%02x,%02x,%02x")
TRC_MSG(UPF_DEBUG_LTK_SEND_TO_REMOTE_SIDE, "UPF Debug LTK Send to Remote Side")
TRC_MSG(UPF_DEBUG_EDIV_SEND_TO_REMOTE_SIDE04X, "UPF Debug ediv Send to Remote Side:%04x")
TRC_MSG(UPF_DEBUG_RAND_SEND_TO_REMOTE_SIDE_LSBMSB02X02X02X, "UPF Debug rand Send to Remote Side LSB->MSB:%02x,%02x,%02x,02x,%02x,%02x,%02x,%02x")
TRC_MSG(INJECT_STRING_AND_TRY_TO_AUTH_LINK, "Inject string and try to auth link")
TRC_MSG(INJECT_TO_CAUSE_BT_RESET, "Inject to cause bt reset")
TRC_MSG(INJECT_BT_GET_RSSI_VALUE, "Inject bt get rssi value")
TRC_MSG(INJECT_TO_CAUSE_JSR82_BT_TERMINATE, "Inject to cause JSR82 BT terminate")
TRC_MSG(INJECT_TO_REGISTER_SERVICE, "Inject to register service")
TRC_MSG(INJECT_TO_REGISTER_SDP_RECORD, "Inject to register sdp record")
TRC_MSG(INJECT_TO_DEREGISTER_SPP_SERVICE, "Inject to deregister SPP service")
TRC_MSG(INJECT_TO_DEREGISTER_L2CAP_SERVICE, "Inject to deregister L2CAP service")
TRC_MSG(INJECT_TO_DEREGISTER_SDP_RECORD, "Inject to deregister sdp record")
TRC_MSG(INJECT_TO_DISC_SPP_CONNECTION, "Inject to disc SPP connection")
TRC_MSG(INJECT_TO_DISC_L2CAP_CONNECTION, "Inject to disc L2CAP connection")
TRC_MSG(INJECT_TO_CHANGE_TX_RX_LOOPBACK_MODE_SETTING, "Inject to change tx rx loopback mode setting")
TRC_MSG(INJECT_TO_START_JSR82_TX, "Inject to start jsr82 tx")
TRC_MSG(INJECT_TO_START_ASK_REMOTE_NAME, "Inject to start ask remote name")
TRC_MSG(BTSLOWDOWNUARTRXSPEED, "BTSlowDownUARTRxSpeed")
TRC_MSG(BTNORMALUARTTXSPEED, "BTNormalUARTTxSpeed")
TRC_MSG(BTCHANGEUARTRXSPEEDDOWN_02X, "BTChangeUartRxSpeedDown, %02x")
TRC_MSG(TURN_THE_VIRTUAL_SNIFFER_TO_ON, "Turn the Virtual Sniffer to ON")
TRC_MSG(TURN_THE_VIRTUAL_SNIFFER_TO_OFF, "Turn the Virtual Sniffer to OFF")
TRC_MSG(BTDLIGHTTEST1, "BTDlightTest1")
TRC_MSG(BT_UTIL_CONVERT_ERR5__NO_MATCHING_ERROR_CODE__STATUSD, "bt_util_convert_err5 : no matching error code : status=%d")
TRC_MSG(PARM_0X02X_0X02X_0X02X_0X02X_0X02X_0X02X_0X02, "parm: 0x%02X, 0x%02X, 0x%02X, 0x%02X, 0x%02X, 0x%02X, 0x%02X, 0x%02X, 0x%02X, 0x%02X")
TRC_MSG(INIT_DB__DB_FILE_OPENED, "init_db : db file opened")
TRC_MSG(INIT_DB__FILE_SIZE_D_INCORRECT_EXPECTED_U, "init_db : file size %d incorrect, expected %u")
TRC_MSG(DDB_INIT_LINK_KEY__SIZEU, "ddb_init_link_key : size=%u")
TRC_MSG(DDB_INIT_COD__SIZEU, "ddb_init_cod : size=%u")
TRC_MSG(DDB_LE_INIT__SIZEU, "ddb_le_init : size=%u")
TRC_MSG(DDB_LE_FLUSH, "ddb_le_flush")
TRC_MSG(DDB_LE_FINDRECORDD, "DDB_LE_FindRecord:%d")
TRC_MSG(TOTALD_DEVTYPED_ADDRTYPED_USED_PROFILES0XX, "Total=%d, devType=%d, addrType=%d, used profiles=0x%x")
TRC_MSG(DDB_LE_ADDRECORD_PROFILE0XX, "DDB_LE_AddRecord: profile=0x%x")
TRC_MSG(DDB_LE_ADDRECORD_FAILED, "DDB_LE_AddRecord failed")
TRC_MSG(LE_DB_FULL_WRAP_AROUND, "LE DB full! Wrap around")
TRC_MSG(DDB_LE_DELETERECORD_PROFILE0XX, "DDB_LE_DeleteRecord: profile=0x%x")
TRC_MSG(ALL_PROFILES0XX, "all profiles=0x%x")
TRC_MSG(TOTAL_DEV_NOD, "Total dev no=%d")
TRC_MSG(DDB_OPEN_DDB_LEDEVICESNUMDEVDDBRECSD, "DDB_Open ddb_le.devices.numDevDdbRecs:%d")
TRC_MSG(DDB_OPEN_DDB_LINKKEYNUMDDBRECSD, "DDB_Open ddb_linkkey.numDdbRecs:%d")
TRC_MSG(DDB_ADDRECORD_DDB_LINKKEYNUMDDBRECSD, "DDB_AddRecord ddb_linkkey.numDdbRecs:%d")
TRC_MSG(DDB_FINDRECORD_DDB_LINKKEYNUMDDBRECSD, "DDB_FindRecord ddb_linkkey.numDdbRecs:%d")
TRC_MSG(DDB_COD_FLUSH__NUMCODDDBRECSD, "DDB_COD_Flush : numcodDdbRecs=%d")
TRC_MSG(DDB_GETBTDBRECORD_FAILED, "DDB_GetBTDBRecord failed\n")
TRC_MSG(DDB_ALLOCATEBTDBRECORDDP, "DDB_allocateBTDBRecord(%d,%p)\n")
TRC_MSG(DBP_SIZEU_COUNTD, "db=%p, size=%u, count=%d\n")
TRC_MSG(RECORDP, "*record=%p\n")
TRC_MSG(U_UUUU, "%u, %u,%u,%u,%u\n")
TRC_MSG(DB_DDBGETDEVINFORECORD_FAILED, "[DB] ddbGetDevInfoRecord failed")
TRC_MSG(DB_DDB_PSI_ADDRECORD, "[DB] DDB_PSI_AddRecord")
TRC_MSG(DB_PSI__PSREPMODEU_PSMODEU_CLOCKOFFSETU, "[DB] psi : psRepMode=%u, psMode=%u, clockOffset=%u")
TRC_MSG(DBERR_DDBGETDEVINFORECORD_FAILED, "[DB][ERR] ddbGetDevInfoRecord failed")
TRC_MSG(DB_DDB_PSI_FINDRECORD, "[DB] DDB_PSI_FindRecord")
TRC_MSG(DDB_PSI_FINDRECORD__RECORDP, "DDB_PSI_FindRecord : record=%p\n")
TRC_MSG(RECORD_FOUND, "record found\n")
TRC_MSG(FOUND, "found\n")
TRC_MSG(PSI__PSREPMODEU_PSMODEU_CLOCKOFFSETU, "psi : psRepMode=%u, psMode=%u, clockOffset=%u")
TRC_MSG(DBERR_DDB_PSI_FINDRECORD_FAILED, "[DB][ERR] DDB_PSI_FindRecord failed")
TRC_MSG(DB_DDB_VER_ADDRECORD, "[DB] DDB_VER_AddRecord")
TRC_MSG(VERSIONU_U_U_U_U_U_U_U, "version=%u, %u, %u, %u, %u, %u, %u, %u")
TRC_MSG(DB_DDB_VER_FINDRECORD, "[DB] DDB_VER_FindRecord")
TRC_MSG(DB_DDB_DEV_TYPE_ADDRECORD, "[DB] DDB_DEV_TYPE_AddRecord")
TRC_MSG(DB_DEVTYPE__D, "[DB] devType = %d")
TRC_MSG(DBERR_INVALID_DEVTYPE_D, "[DB][ERR] invalid devType %d")
TRC_MSG(DB_DDB_DEV_TYPE_FINDRECORD, "[DB] DDB_DEV_TYPE_FindRecord")
TRC_MSG(DDB_DEV_TYPE_FINDRECORD__RECORDP, "DDB_DEV_TYPE_FindRecord : record=%p\n")
TRC_MSG(SBC_INVALID_HEADER, "SBC: Invalid header")
TRC_MSG(SBC_CRC_ERROR, "SBC: Crc error!")
TRC_MSG(SBC_INVALID_CHANNEL_MODE, "SBC: Invalid channel mode\n")
TRC_MSG(SDAP_TESTER_SM_COUNT_DOWN_TO_0_REMOVE_DATA_LINK, "[SDAP_Tester] sm count down to 0, remove data link")
TRC_MSG(SDAP_TESTER_FAILED_TO_CREATE_DATA_LINK, "[SDAP Tester] Failed to create data link.")
TRC_MSG(SDAP_TESTER_SEARCH_ALL_I_D_STATUS_D, "[SDAP_Tester] Search all, i: %d, status: %d")
TRC_MSG(SDAP_TESTER_SEARCH_MULTIPLE_ATTR_I_D_STATAUS_D, "[SDAP_Tester] Search multiple attr, i: %d, stataus: %d")
TRC_MSG(SDAP_TESTER_SEARCH_ALL_STATAUS_D, "[SDAP_Tester] Search all, stataus: %d")
TRC_MSG(SDAP_TESTER_SEARCH_MULTIPLE_ATTR_STATAUS_D, "[SDAP_Tester] Search multiple attr, stataus: %d")
TRC_MSG(SDAP_TESTER_CHECKING_AND_CREATING_DATA_LINK, "[SDAP_Tester] Checking and Creating data link")
TRC_MSG(SDAP_TESTER_CMD_D_STATUS_D, "[SDAP_Tester] cmd: %d, status %d")
TRC_MSG(DEDICATED_BONDING, "Dedicated bonding")
TRC_MSG(GENERAL_BONDING, "General bonding")
TRC_MSG(NON_BONDING, "Non bonding")
TRC_MSG(SET_SECURITY_CHANNEL_TO_LOW, "Set security channel to low")
TRC_MSG(SET_SECURITY_CHANNEL_TO_MED, "Set security channel to med")
TRC_MSG(SET_SECURITY_CHANNEL_TO_HIGH, "Set security channel to high")
TRC_MSG(AUTHENTICATED_LINK, "Authenticated Link")
TRC_MSG(ENCRYPTION__LINK, "encryption  Link")
TRC_MSG(L2CAP_ALREADY_INIT, "L2CAP already init")
TRC_MSG(L2CAP_TESTER_LIST_EMPTY, "L2cap tester list empty")
TRC_MSG(L2CAP_TESTER_LIST_NOT_EMPTY, "L2cap tester list not empty")
TRC_MSG(SEC_REGISTERRECORD_STATUS02X, "SEC_RegisterRecord Status:%02x")
TRC_MSG(SET_ENCRYPTION_ON, "set encryption on")
TRC_MSG(L2CAP_BT_L2CAPTESTER_HANDLER_HELP, "l2cap: bt_l2captester_handler_help")
TRC_MSG(L2_CONFIG_CID__RECONFIG_CONFIG_REQ_THE_CHANNEL, "l2 config <cid> - reconfig (config_req) the channel")
TRC_MSG(L2_DUMP__DUMP_THE_CHANNEL, "l2 dump - dump the channel")
TRC_MSG(L2_DISC_CID__DISC_THE_CHANNEL, "l2 disc <cid> - disc the channel")
TRC_MSG(L2CAP_CONFIG_REQ_CIDD, "l2cap: config_req cid:%d")
TRC_MSG(L2CAP_STATUSD, "l2cap: status:%d")
TRC_MSG(L2CAP_FAIL_STATUSD, "l2cap: fail status:%d")
TRC_MSG(L2CAP_DISC_CIDD, "l2cap: disc cid:%d")
TRC_MSG(UNICAST_GROUP_SEND_DATA, "UniCast group send data")
END_TRACE_MAP(MOD_BT)
#endif /* _BT_TRC_H */
