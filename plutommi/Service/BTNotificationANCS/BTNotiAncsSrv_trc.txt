[APP NAME] = SRV_BT_ANCS
[SCOPE] = PLUTO, COSMOS
[MODULE] = MOD_MMI_CONN_APP
TRC_MSG(TRC_SRV_ANCS_INIT, "[ANCS] srv_ancs_init, chip:%d")
TRC_MSG(TRC_SRV_ANCS_MEM_ALLOC, "[ANCSSrv] srv_ancs_mem_alloc: size = %d, buffer_p = %x")
TRC_MSG(TRC_SRV_ANCS_MEM_FREE, "[ANCSSrv] srv_ancs_mem_free(:%x)")
TRC_MSG(TRC_SRV_ANCS_NEW_DEV, "[ANCSSrv] new dev:%x")
TRC_MSG(TRC_SRV_ANCS_DEL_DEV, "[ANCSSrv] del dev, srv_hd:%d")
TRC_MSG(TRC_SRV_ANCS_NOT_FIND_DEV, "[ANCSSrv] don't find device")
TRC_MSG(TRC_SRV_ANCS_CRT_NSRC, "[ANCSSrv] srv_ancs_create_noti_src: index = %d, nsrv_p = %x, nid = %d")
TRC_MSG(TRC_SRV_ANCS_CRT_NATTR, "[ANCSSrv] srv_ancs_create_noti_info: n_attr_p = %x, nid = %d")
TRC_MSG(TRC_SRV_ANCS_CRT_NATTR_ERR, "[ANCSSrv] Fatal Error: no free space, noti_id:%d")
TRC_MSG(TRC_SRV_ANCS_NOTI_ID_ERR, "[ANCSSrv] Fatal Error: invalid notification id:%d")
TRC_MSG(TRC_SRV_ANCS_DEL_NATTR, "[ANCSSrv] delete attr_info, nid:%d")
TRC_MSG(TRC_SRV_ANCS_CRT_AATTR, "[ANCSSrv] srv_ancs_create_app_info: a_attr_p = %x, app_id_len = %d, app_id_alloc = %d")
TRC_MSG(TRC_SRV_ANCS_DEL_AATTR, "[ANCSSrv] delete app_attr, a_attr_p:%x")
TRC_MSG(TRC_SRV_ANCS_CRT_AATTR_ERR, "[ANCSSrv] Fatal Error: app id length too long, value:%d")
TRC_MSG(TRC_SRV_ANCS_CRT_N_NODE, "[ANCSSrv] create new node, nid:%d")
TRC_MSG(TRC_SRV_ANCS_DEL_A_N_NODE, "[ANCSSrv] delete all node")
TRC_MSG(TRC_SRV_ANCS_DEL_N_NODE, "[ANCSSrv] delete node, nid:%d")
TRC_MSG(TRC_SRV_ANCS_DEL_APP_INFO, "[ANCSSrv] del app info, alloc:%d, app_id_len:%d")
TRC_MSG(TRC_SRV_ANCS_NSRC_HD, "[ANCSSrv] noti_src_handler, nid:%d, evt_id:%d")
TRC_MSG(TRC_SRV_ANCS_NNODE_HD1, "[ANCSSrv] cur_pending_node:%x")
TRC_MSG(TRC_SRV_ANCS_NNODE_HD2, "[ANCSSrv] new_pending_node:%x")
TRC_MSG(TRC_SRV_ANCS_NNODE_DELAY, "[ANCSSrv][Delay Start] nid:%d, cat:%d, delay:%d")
TRC_MSG(TRC_SRV_ANCS_NNODE_DELAYD, "[ANCSSrv][Delay End] nid:%d, cat:%d")
TRC_MSG(TRC_SRV_ANCS_FSM_BEGIN, "[ANCSSrv] fsm begin, dev_p:%x, step:%d")
TRC_MSG(TRC_SRV_ANCS_FSM_END, "[ANCSSrv] fsm end, step:%d")
TRC_MSG(TRC_SRV_ANCS_REG_CLT_CB, "[ANCSSrv] register_client_cb, reg_ctx:%x, status:%d")
TRC_MSG(TRC_SRV_ANCS_CONN_CB, "[ANCSSrv] connection_cb, conn:%x, connected:%d")
TRC_MSG(TRC_SRV_ANCS_GET_DES_CB, "[ANCSSrv] get_descriptor_cb, state:%d")
TRC_MSG(TRC_SRV_ANCS_GET_CHAR_CB, "[ANCSSrv] get_characteristic_cb, state:%d, properties:%d")
TRC_MSG(TRC_SRV_ANCS_ALOC_CHAR, "[ANCSSrv] alloc char, type:%d")
TRC_MSG(TRC_SRV_ANCS_UNKNOWN_CHAR, "[ANCSSrv] unknown char uuid")
TRC_MSG(TRC_SRV_ANCS_READ_DES_CB, "[ANCSSrv] read_descriptor_cb, state:%d")
TRC_MSG(TRC_SRV_ANCS_DES_LEN_ERR, "[ANCSSrv] descriptor len overflow")
TRC_MSG(TRC_SRV_ANCS_REG_NOTI_CB, "[ANCSSrv] register_for_notification_cb, dev_p:%x")
TRC_MSG(TRC_SRV_ANCS_WRT_DES_CB, "[ANCSSrv] write_descriptor_cb, dev_p:%x, status:%d")
TRC_MSG(TRC_SRV_ANCS_WRT_CHAR_CB, "[ANCSSrv] write_characteristic_cb, dev_p:%x, pending_node:%x")
TRC_MSG(TRC_SRV_ANCS_REC_NOTI_CB, "[ANCSSrv] notify_cb")
TRC_MSG(TRC_SRV_ANCS_GET_FREE_CHAR, "[ANCSSrv] get free char, idx:%d, valid:%d")
TRC_MSG(TRC_SRV_ANCS_PARSE_CTRL_PT, "[ANCSSrv] parse ctrl pt, attr:%x")
TRC_MSG(TRC_SRV_ANCS_CTRL_PT_SIZE, "[ANCSSrv] ctrl_buff_size:%d")
TRC_MSG(TRC_SRV_ANCS_PARSE_ATTR, "[ANCSSrv] parse start, in_ptr = %d, in_len = %d, cut_type = %d, cut_len = %d, pending = %x")
TRC_MSG(TRC_SRV_ANCS_PARSE_ATTR_ID, "[ANCSSrv] data att_id , len:%d")
TRC_MSG(TRC_SRV_ANCS_PARSE_ATTR_UNKNOWN_ID, "[ANCSSrv] Fatal Error, undefined attr id:%d")
TRC_MSG(TRC_SRV_ANCS_PARSE_ATTR_LEN, "[ANCSSrv] srv_ancs_parse_attribute: left_len = %d")
TRC_MSG(TRC_SRV_ANCS_PARSE_ATTR_VAL, "[ANCSSrv] srv_ancs_parse_attribute - data att value: left_len = %d, node_len = %d")
TRC_MSG(TRC_SRV_ANCS_PARSE_DATA_SRC, "[ANCSSrv] srv_ancs_parse_data_source: cut type = %d, cut_point = %x, pending_node = %x")
TRC_MSG(TRC_SRV_ANCS_PARSE_NI_INFO, "[ANCSSrv] srv_ancs_parse_data_source - parse noti info: nid = %d, ptr = %x")
TRC_MSG(TRC_SRV_ANCS_PARSE_AP_INFO, "[ANCSSrv] parse app info, pending:%x, len:%d, input_len:%d")
TRC_MSG(TRC_SRV_ANCS_PARSE_DA_SRC_DONE, "[ANCSSrv] @@@@ parse done, app_len:%d")
TRC_MSG(TRC_SRV_ANCS_PARSE_APP_SRC_DONE, "[ANCSSrv] ##%d## app info ready")
TRC_MSG(TRC_SRV_ANCS_APP_INFO, "[ANCSSrv] app_info_p:%x, app_id_len:%d, MAX:%d")
TRC_MSG(TRC_SRV_ANCS_IS_CORR_UUID, "[ANCSSrv] srv_ancs_is_correct_uuid, ret:%d")
TRC_MSG(TRC_SRV_ANCS_QUERY_NOTI_INFO, "[ANCSSrv] srv_ancs_query_notification_info, attr_flags:%d, ret:%d")
TRC_MSG(TRC_SRV_ANCS_IS_CONNECTED, "[ANCSSrv] srv_ancs_is_connected, ret:%d")
TRC_MSG(TRC_SRV_ANCS_SRCH_RET, "[ANCSSrv] search_result_cb")
TRC_MSG(TRC_SRV_ANCS_SRCH_DONE, "[ANCSSrv] search_complete_cb, status:%d")
TRC_MSG(TRC_SRV_ANCS_SRCH_FAIL, "[ANCSSrv] search error, reg_ctx:%x, dev_p:%x")
TRC_MSG(TRC_SRV_ANCS_SEND_IND, "[ANCSSrv] srv_ancs_send_indication, ind_type = %d, noti_id = %d")
TRC_MSG(TRC_SRV_ANCS_GET_NOTI_INFO, "[ANCSSrv] srv_ancs_get_notification_info, result = %d")
TRC_MSG(TRC_SRV_ANCS_DIS_CONN, "[ANCSSrv] srv_ancs_disconnect_req, result = %d")
TRC_MSG(TRC_SRV_ANCS_APP_ID_HASH, "[ANCSSrv] srv_ancs_app_id_hash, result:%d")
TRC_MSG(TRC_SRV_ANCS_SRV_CGE_NOTI, "[ANCSSrv] srv_ancs_service_change_notify_cb, dev_p:%x")
TRC_MSG(TRC_SRV_ANCS_SRV_EXIST, "[ANCSSrv] srv_ancs_is_any_services_exist, result:%d")
TRC_MSG(TRC_SRV_ANCS_MSG_LEN, "[ANCSSrv] attr_len:%d,attr_node->attr_len:%d")
TRC_MSG(TRC_SRV_ANCS_WTE_POT, "[ANCSSrv] write .")
TRC_MSG(TRC_SRV_ANCS_UT_ENTRY, "[ANCSSrv] ut handle:%d, string:%d%d%d")