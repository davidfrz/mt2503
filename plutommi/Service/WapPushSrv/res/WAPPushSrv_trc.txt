[APP NAME] = WAP_PUSH
[SCOPE] =  PLUTO ,COSMOS
[MODULE] = MOD_MMI_INET_APP

#starttrace
/* OTA push Whitelist Ramneek */
TRC_MSG(TRC_MMI_BRW_PUSH_OTA_MEM_ALLOC, "[PUSH][OTA] Allocated = %d, at ADD = %x")
TRC_MSG(TRC_MMI_BRW_PUSH_OTA_MEM_FREE, "[PUSH][OTA] Released ADD = %x")
TRC_MSG(TRC_MMI_BRW_PUSH_OTA_IN_CALL_PROFILE_COUNT, "[PUSH][OTA] Remaining Profiles = %d, and isInCall")
TRC_MSG(TRC_MMI_BRW_PUSH_OTA_NOT_IN_CALL_PROFILE_COUNT, "[PUSH][OTA] Remaining Profiles = %d, and isNotInCall")
TRC_MSG(TRC_MMI_BRW_PUSH_OTA_INFO_SCR_DELETED, "[PUSH][OTA] Info scr deleted, deleted by PUSH = %d, status sent = %d")
TRC_MSG(TRC_MMI_BRW_PUSH_OTA_ALLOCATE_TRUSTLIST, "[PUSH][OTA] Allocate trustlist count = %d")
TRC_MSG(TRC_MMI_BRW_PUSH_OTA_ALLOCATE_NAPDEF, "[PUSH][OTA] Allocate NAPDEF count = %d")
TRC_MSG(TRC_MMI_BRW_PUSH_OTA_HANDLE_NAPDEF_TAG, "[PUSH][OTA] Handle NAPDEF tag, NAPDEF idx = %d")
TRC_MSG(TRC_MMI_BRW_PUSH_OTA_NAPADDR_TYPE, "[PUSH][OTA] Nap Addr Type = %d")
TRC_MSG(TRC_MMI_BRW_PUSH_OTA_HANDLE_PROXY_TAG, "[PUSH][OTA] Handle proxy tag, proxy idx = %d")
TRC_MSG(TRC_MMI_BRW_PUSH_OTA_PXADDR_TYPE, "[PUSH][OTA] Proxy Addr Type = %d")
TRC_MSG(TRC_MMI_BRW_PUSH_OTA_HANDLE_APPLICATION_TAG, "[PUSH][OTA] Handle APP tag, APP idx = %d")
TRC_MSG(TRC_MMI_BRW_PUSH_OTA_RELEASE_APP_PRX_NAP_NODES, "[PUSH][OTA] Mem Release APP, PRX and NAP nodes.")
TRC_MSG(TRC_MMI_BRW_PUSH_OTA_UI_DONE_ENTER, "[PUSH][OTA] UI done enter, count = %d")

	/* WAP PUSH LOGS */
	/* Logs for unknown address and sia request*/
TRC_MSG(TRC_MMI_BRW_PUSH_SEND_UNKNWN_ADDR_CNF, "[PUSH] Send unknown address conf trans id = %d, result = %d")
TRC_MSG(TRC_MMI_BRW_PUSH_ADD_UNKNWN_ADDR_IN_LIST, "[PUSH] Adding unknown address in list list type = %d")
TRC_MSG(TRC_MMI_BRW_PUSH_ACCEPT_ADD_UNKNWN_ADDR, "[PUSH] Accept push and add into white list")
TRC_MSG(TRC_MMI_BRW_PUSH_REJECT_ADD_UNKNWN_ADDR, "[PUSH] Reject push and add into black list")
TRC_MSG(TRC_MMI_BRW_PUSH_REJECT_UNKNWN_ADDR, "[PUSH] Reject push from unknown server")
TRC_MSG(TRC_MMI_BRW_PUSH_ACCEPT_UNKNWN_ADDR, "[PUSH] Accept push from unknown server")
TRC_MSG(TRC_MMI_BRW_PUSH_GO_BACK_UNKNWN_ADDR, "[PUSH] Go back from unknown address dialogue")
TRC_MSG(TRC_MMI_BRW_PUSH_SEND_SIA_CNF, "[PUSH] Send SIA conf trans id = %d, result = %d")
TRC_MSG(TRC_MMI_BRW_PUSH_ACCEPT_SIA, "[PUSH] Accept SIA request")
TRC_MSG(TRC_MMI_BRW_PUSH_REJECT_SIA, "[PUSH] Reject SIA request")
TRC_MSG(TRC_MMI_BRW_PUSH_ENQUEUE_DLG, "[PUSH] Enqueue dilogue request")
TRC_MSG(TRC_MMI_BRW_PUSH_DEQUEUE_DLG, "[PUSH] Dequeue dilogue request")
TRC_MSG(TRC_MMI_BRW_PUSH_START_CONSTRUCT_DISPLAY_DATA_FOR, "[PUSH] start construct display data for dilogue type %d")
TRC_MSG(TRC_MMI_BRW_PUSH_END_CONSTRUCT_DISPLAY_DATA, "[PUSH] End construct data for display")
TRC_MSG(TRC_MMI_BRW_PUSH_DISPLAY_DLG_FOR, "[PUSH] display dialogue for type = %d")
TRC_MSG(TRC_MMI_BRW_PUSH_SIA_REQ_FOR_TRANS_ID, "[PUSH] Got SIA request for trans id = %d")
TRC_MSG(TRC_MMI_BRW_PUSH_SIA_REQ_QUEUED, "[PUSH] SIA request queued user not on Idle")
TRC_MSG(TRC_MMI_BRW_PUSH_UNKNOWN_DILOGUE_REQ_FOR_TRANS_ID, "[PUSH] Got unknown sender push request for trans id = %d")
TRC_MSG(TRC_MMI_BRW_PUSH_UNKNOWN_DILOGUE_REQ_QUEUED, "[PUSH] Unknown DLG request queued user not on Idle")

	/* logs for setting menu */
TRC_MSG(TRC_MMI_BRW_PUSH_SETTING_GET_RECORD_INDEX_FOR_ITEM, "[PUSH] Exits mmi_brw_push_get_record_and_index for item number %d")
TRC_MSG(TRC_MMI_BRW_PUSH_SETTING_ENTERS_SEND_BLACK_LIST, "[PUSH] Started sending black list Cell")
TRC_MSG(TRC_MMI_BRW_PUSH_SETTING_EXITS_SEND_BLACK_LIST, "[PUSH] exits from send black list Cell")
TRC_MSG(TRC_MMI_BRW_PUSH_SENDING_BLACK_LIST_TOTAL, "[PUSH] started sending black list to PMG total = %d")
TRC_MSG(TRC_MMI_BRW_PUSH_ALL_BLACK_LIST_SENDED, "[PUSH] All black list send to PMG completed")
TRC_MSG(TRC_MMI_BRW_PUSH_SETTING_ENTERS_SEND_WHITE_LIST, "[PUSH] Started sending white list Cell")
TRC_MSG(TRC_MMI_BRW_PUSH_SETTING_EXITS_SEND_WHITE_LIST, "[PUSH] exits from send white list Cell")
TRC_MSG(TRC_MMI_BRW_PUSH_SENDING_WHITE_LIST_TOTAL, "[PUSH] started sending white list to PMG total = %d")
TRC_MSG(TRC_MMI_BRW_PUSH_ALL_WHITE_LIST_SENDED, "[PUSH] All white list send to PMG completed")
TRC_MSG(TRC_MMI_BRW_PUSH_ENTERS_DUPLICATE_CHECK, "[PUSH] Enters duplicate check")
TRC_MSG(TRC_MMI_BRW_PUSH_EXITS_DUPLICATE_CHECK, "[PUSH] exits duplicate check fwith status = %d")
TRC_MSG(TRC_MMI_BRW_PUSH_COUNT_BL_WL_ENTRY_START, "[PUSH] Started counting white list black list entries")
TRC_MSG(TRC_MMI_BRW_PUSH_COUNT_BL_WL_ENTRY_END, "[PUSH] End black list white list count white list = %d, black list = %d")
TRC_MSG(TRC_MMI_BRW_PUSH_READ_WL_FROM_NVRAM_RECORD, "[PUSH] Read white list record %d from NVRAM")
TRC_MSG(TRC_MMI_BRW_PUSH_READ_WL_COMPLETED, "[PUSH] white list read operation completed")
TRC_MSG(TRC_MMI_BRW_PUSH_READ_BL_FROM_NVRAM_RECORD, "[PUSH] Read black list record %d from NVRAM")
TRC_MSG(TRC_MMI_BRW_PUSH_READ_BL_COMPLETED, "[PUSH] Black list read operation completed")
TRC_MSG(TRC_MMI_BRW_PUSH_WRITE_BL_NVRAM_RECORD, "[PUSH] Writing black list record number %d into NVRAM")
TRC_MSG(TRC_MMI_BRW_PUSH_WRITE_BL_COMPLETED, "[PUSH] Black list commit into NVRAM completed")
TRC_MSG(TRC_MMI_BRW_PUSH_WRITE_WL_NVRAM_RECORD, "[PUSH] Writing white list record number %d into NVRAM")
TRC_MSG(TRC_MMI_BRW_PUSH_WRITE_WL_COMPLETED, "[PUSH] White list commit into NVRAM completed")
TRC_MSG(TRC_MMI_BRW_PUSH_START_RESTORE, "[PUSH] Restore starts for push application")
TRC_MSG(TRC_MMI_BRW_PUSH_END_RESTORE, "[PUSH] Restore ends for push application")
TRC_MSG(TRC_MMI_BRW_PUSH_ENTERS_ADD_MODIFY, "[PUSH] Enters into mmi_brw_push_add_modify_list")
TRC_MSG(TRC_MMI_BRW_PUSH_EXITS_ADD_MODIFY, "[PUSH] mmi_brw_push_add_modify_list exits with status = %d")
TRC_MSG(TRC_MMI_BRW_PUSH_ENTERS_DELETE_ALL, "[PUSH] Entry delete all for list type = %d")
TRC_MSG(TRC_MMI_BRW_PUSH_EXITS_DELETE_ALL, "[PUSH] Exit from delete all")
TRC_MSG(TRC_MMI_BRW_PUSH_ENTERS_LIST_SCREEN, "Entry list screen for list type = %d")
TRC_MSG(TRC_MMI_BRW_PUSH_USER_CANCEL_OTA_SETTING_REPLACE, "[PUSH] OTA replace user cancel")
TRC_MSG(TRC_MMI_BRW_PUSH_USER_ACCEPT_OTA_SETTING_REPLACE, "[PUSH] OTA replace status = %d")
TRC_MSG(TRC_MMI_BRW_PUSH_ADD_OTA_REQ, "[PUSH] OTA White list request address type = %d")
TRC_MSG(TRC_MMI_BRW_PUSH_ADD_OTA_REQ_TOTAL_WL, "[PUSH] OTA White list request total count = %d")
	/* logs for Toolbar, NMGR and general push*/
TRC_MSG(TRC_MMI_BRW_PUSH_HDL_PMG_REPLCE_IND, "[PUSH] mmi_brw_push_replace_msg_ind Trans_id = %d")
TRC_MSG(TRC_MMI_BRW_PUSH_HDL_PMG_DEL_RSP, "[PUSH] mmi_brw_push_delete_msg_rsp Trans_id = %d, status = %d")
TRC_MSG(TRC_MMI_BRW_PUSH_HDL_PMG_DEL_ALL_RSP, "[PUSH]mmi_brw_push_delete_all_msg_rsp Trans_id = %d")
TRC_MSG(TRC_MMI_BRW_PUSH_HDL_PMG_MSG_RSP, "[PUSH] mmi_brw_push_handle_full_msg Trans ID = %d, status = %d")
TRC_MSG(TRC_MMI_BRW_PUSH_TB_GOT_MSG_FRM_PMG, "[PUSH] Get message data for Toolbar => Selected operation = %d")
TRC_MSG(TRC_MMI_BRW_PUSH_TB_ENTER_VIEW, "[PUSH] View toolbar message for MSG ID = %d")
TRC_MSG(TRC_MMI_BRW_PUSH_TB_SHOW_INVALID_POPUP, "[PUSH] Show invalid number popup when sender is invalid")
TRC_MSG(TRC_MMI_BRW_PUSH_TB_SEND_DEL_REQ_FOR_MSG_ID, "[PUSH] toolbar delete request sent to PMG for MSG ID = %d")
TRC_MSG(TRC_MMI_BRW_PUSH_INSIDE_VIEW, "[PUSH] Enters mmi_brw_push_entry_display_msg_screen")
TRC_MSG(TRC_MMI_BRW_PUSH_END_VIEW, "[PUSH] Exit mmi_brw_push_entry_display_msg_screen")
TRC_MSG(TRC_MMI_BRW_PUSH_HDL_PMG_COUNT_RSP, "[PUSH] mmi_brw_push_handle_msg_count_rsp Trans ID = %d, count = %d")
TRC_MSG(TRC_MMI_BRW_PUSH_TB_GOT_UNREAD_COUNT_FROM_PMG, "[PUSH] Got unread count for toolbar Total Unread = %d")
TRC_MSG(TRC_MMI_BRW_PUSH_TB_GOT_MSG_LIST_FROM_PMG, "[PUSH] mmi_brw_push_handle_list_for_toolbar, Buffer_index = %d")
TRC_MSG(TRC_MMI_BRW_PUSH_TB_ASK_MORE_MSG_LIST_FROM_PMG, "[PUSH] Asking more messages for toolbar answer, Buffer index = %d")
TRC_MSG(TRC_MMI_BRW_PUSH_TB_ANSWER_TOOLBAR, "[PUSH] Answering toolbar when need more is true")
TRC_MSG(TRC_MMI_BRW_PUSH_LOAD_URL, "[PUSH] Put load url request to Browser")
TRC_MSG(TRC_MMI_BRW_PUSH_HDL_IDLE_CALLBACK_FOR_DLG_REQ, "[PUSH] IDLE SCREEN call dlg process function")
TRC_MSG(TRC_MMI_BRW_PUSH_NMGR_SEND_NOTIFY, "[PUSH] Sending Event notify to NMGR")
TRC_MSG(TRC_MMI_BRW_PUSH_NMGR_SEND_NOTIFY_NOT_PROCESSED, "[PUSH] NMGR fail to process request")
TRC_MSG(TRC_MMI_BRW_PUSH_NMGR_NOT_PROCESSED_PUSH_DISPLAY_POPUP, "[PUSH] NMGR fails Popup displayed by push APP")	
TRC_MSG(TRC_MMI_BRW_PUSH_NMGR_REQ_UNREAD, "[PUSH] NMGR Query function ask for Unread request")
TRC_MSG(TRC_MMI_BRW_PUSH_NMGR_GET_UNREAD_FRM_PMG, "[PUSH] Call Count request for NMGR")
TRC_MSG(TRC_MMI_BRW_PUSH_NMGR_SEND_UM_CANCEL_IND, "[PUSH] NMGR cancel callback sending UM cancel indication")
TRC_MSG(TRC_MMI_BRW_PUSH_NMGR_ANSWER, "[PUSH] mmi_brw_push_nmgr_send_answer, Unread count = %d")
TRC_MSG(TRC_MMI_BRW_PUSH_NMGR_SEND_ANSWER, "[PUSH] NMGR answered successfully")
TRC_MSG(TRC_MMI_BRW_PUSH_NMGR_SEND_ANSWER_NOT_READY, "[PUSH] NMGR Answered Not ready")
TRC_MSG(TRC_MMI_BRW_PUSH_TB_ASK_MSG_FRM_PMG, "[PUSH] requesting Full message for toolbar Trans ID  = %d")
TRC_MSG(TRC_MMI_BRW_PUSH_TB_VIEW_MSG, "[PUSH] Single message handler called by toolbar for Message ID = %d")
TRC_MSG(TRC_MMI_BRW_PUSH_TB_TOOLBAR_ANSWERED, "[PUSH] Toolbar get answered, total Unread = %d, Number = %d")
TRC_MSG(TRC_MMI_BRW_PUSH_TB_ASK_MSG_LIST_FROM_PMG, "[PUSH] Asking PMG for MSG list to process toolbar req Trans ID = %d")
TRC_MSG(TRC_MMI_BRW_PUSH_TB_ASK_UNREAD_COUNT_FROM_PMG, "[PUSH] Asking Unread count for toolbar Trans ID = %d")
TRC_MSG(TRC_MMI_BRW_PUSH_TB_QUERY, "[PUSH] Toolbar calls push Query function, Number = %d")
TRC_MSG(TRC_MMI_BRW_PUSH_TB_RSP_NOT_READY, "[PUSH] Push answer toolbar with Not ready in quesry function")

    /* New logs for PUSH APP Optimization */
    /* Logging in Service interface file */
TRC_MSG(TRC_MMI_BRW_PUSH_HDL_PMG_MSG_LIST_RSP, "[PUSH] Received msg list response from PMG for Trans ID = %d, size = %d")
TRC_MSG(TRC_MMI_BRW_PUSH_NEW_MSG_RCVD, "[PUSH] New message received with Message ID = %d")
TRC_MSG(TRC_MMI_BRW_PUSH_SEND_DLG_DATA_REQUEST, "[PUSH] Sending DLG data request to PMG for Trans ID = %d")
TRC_MSG(TRC_MMI_BRW_PUSH_SEND_FULL_MSG_REQ, "[PUSH] Sending Full message request to PMG for Message ID = %d, Trans ID = %d")
TRC_MSG(TRC_MMI_BRW_PUSH_SEND_COUNT_REQ, "[PUSH] Sending Message count request to PMG with read flag = %d, and Trans ID = %d")
TRC_MSG(TRC_MMI_BRW_PUSH_SEND_DEL_REQ, "[PUSH] Sending delete request to PMG for Message ID = %d, Trans ID = %d")
TRC_MSG(TRC_MMI_BRW_PUSH_SEND_UPDATE_REQ, "[PUSH] Sending Update request Message ID = %d")
TRC_MSG(TRC_MMI_BRW_PUSH_SEND_MSG_LIST_REQ, "[PUSH] Sending list request to PMG with start_index = %d,  num_item = %d, trans_id = %d, is_read = %d")
TRC_MSG(TRC_MMI_BRW_PUSH_SEND_DEL_ALL_REQ, "[PUSH] Sending Delete all indication to PMG")
TRC_MSG(TRC_MMI_BRW_PUSH_INITIALIZING_CURRENT_DLG_DATA, "[PUSH] Initializing current DLG data for dlg_type = %d, DLG = %d")
TRC_MSG(TRC_MMI_BRW_PUSH_SIA_RECEIVED_ON_IDLE, "[PUSH] SIA request received on IDLE Screen")
TRC_MSG(TRC_MMI_BRW_PUSH_UNKNWN_DLG_RECEIVED_ON_IDLE, "[PUSH] Unknown DLG display request received on IDLE Screen")
TRC_MSG(TRC_MMI_BRW_PUSH_GOT_DLG_DATA_RSP, "[PUSH] Got DLG data response from PMG")
TRC_MSG(TRC_MMI_BRW_PUSH_GOT_DLG_DATA_RSP_ON_DUMMY, "[PUSH]DLG data response from PMG when Active screen is Dummy Screen")
TRC_MSG(TRC_MMI_BRW_PUSH_RECEIVE_DEL_FOLDER_IND, "[PUSH] Delete folder indication from UM current folder = %d")

    /* Logging in Service Message UI file */
TRC_MSG(TRC_MMI_BRW_PUSH_GDI_UNLOCKED, "[PUSH] Unloking GDI buffer")
TRC_MSG(TRC_MMI_BRW_PUSH_FREEZ_GDI, "[PUSH] Locking the GDI buffer")
TRC_MSG(TRC_MMI_BRW_PUSH_DISPLAY_GENERIC_PROGRESS, "[PUSH] Display Generic Progressing screen")
TRC_MSG(TRC_MMI_BRW_PUSH_ENTER_CREATE_DISPLAY_FORMAT, "[PUSH] Enter mmi_brw_push_create_display_format_from_selected_message")
TRC_MSG(TRC_MMI_BRW_PUSH_EXIT_CREATE_DISPLAY_FORMAT, "[PUSH] Exit mmi_brw_push_create_display_format_from_selected_message")
TRC_MSG(TRC_MMI_BRW_PUSH_ENTER_DISPLAY_MESSAGE, "[PUSH] Enter mmi_brw_push_display_msg")
TRC_MSG(TRC_MMI_BRW_PUSH_EXIT_DISPLAY_MESSAGE, "[PUSH] Exit mmi_brw_push_display_msg")
TRC_MSG(TRC_MMI_BRW_PUSH_PROGRESSING_SCREEN_IN_HISTORY, "[PUSH] Replacing processing screen in history with Message body screen")
TRC_MSG(TRC_MMI_BRW_PUSH_CLEAR_INBOX_HISTORY_POINTER, "[PUSH] Clearing Push Inbox gui buffer pointer")
TRC_MSG(TRC_MMI_BRW_PUSH_ENTER_UPDATE_INBOX_STATUS, "[PUSH] Update inbox status with factor = %d")
TRC_MSG(TRC_MMI_BRW_PUSH_ASYNC_DYNAMIC_CATEGORY_CALLBACK_REPLIED_SUCCESS, "[PUSH] Async dynamic category replied successfully")
TRC_MSG(TRC_MMI_BRW_PUSH_ASYNC_DYNAMIC_CATEGORY_CALLBACK_REPLIED_FAILED, "[PUSH] Async dynamic category replied Failed")
TRC_MSG(TRC_MMI_BRW_PUSH_ENTERING_SERVICE_INBOX, "[PUSH] Entering service inbox entry function for total messages = %d")
TRC_MSG(TRC_MMI_BRW_PUSH_ADD_LIST_COMPLETED, "[PUSH] Successfully Prepared the list required when inbox state = %d")
TRC_MSG(TRC_MMI_BRW_PUSH_NEED_TO_DISPLAY_INBOX_FOR, "[PUSH] Push need to display inbox for total = %d")

    /* Logging in Service Message Main file */
TRC_MSG(TRC_MMI_BRW_PUSH_MSG_QUEUEING_FAILED_MEMORY_NOT_ENOGH, "[PUSH] Failed to queue message for message_id = %d, type = %d")
TRC_MSG(TRC_MMI_BRW_PUSH_MSG_QUEUED_FOR_IDLE_PROCESS, "[PUSH] success to queue message for message_id = %d, type = %d")
TRC_MSG(TRC_MMI_BRW_PUSH_MSG_DEL_FROM_QUEUE, "[PUSH] Delete message from queue message_id = %d")
TRC_MSG(TRC_MMI_BRW_PUSH_MSG_DEL_FROM_QUEUE_MSG_DELETED, "[PUSH] Message deleted from Queue successfully")
TRC_MSG(TRC_MMI_BRW_PUSH_MSG_DEL_ALL_MESSAGES_FROM_QUEUE, "[PUSH] Deleting all messages from Queue")
TRC_MSG(TRC_MMI_BRW_PUSH_GENERIC_DELETE, "[PUSH] mmi_brw_push_delete_message_generic called for message id = %d")
TRC_MSG(TRC_MMI_BRW_PUSH_DELETE_INDICATION_FOR_N_MESSAGES, "[PUSH] Processing Delete indication received for %d messages")
TRC_MSG(TRC_MMI_BRW_PUSH_LAUNCHING_SL_MESSAGES_MESSAGE_ID, "[PUSH] launching SL message for Message ID = %d")
TRC_MSG(TRC_MMI_BRW_PUSH_SL_MESSAGES_ON_NON_IDLE, "[PUSH] Processing SL message on Non-IDLE Message ID = %d")
TRC_MSG(TRC_MMI_BRW_PUSH_SL_MESSAGES_ON_IDLE, "[PUSH] Processing SL message on IDLE Message ID = %d")
TRC_MSG(TRC_MMI_BRW_PUSH_NEW_SI_MESSAGES, "[PUSH] New SI received Message ID = %d")
TRC_MSG(TRC_MMI_BRW_PUSH_SI_HIGH_MESSAGES_ON_IDLE, "[PUSH] New SI HIGH on IDLE Message ID = %d")
TRC_MSG(TRC_MMI_BRW_PUSH_SI_HIGH_MESSAGES_ON_NON_IDLE, "[PUSH] New SI HIGH on Non-IDLE Message ID = %d")
TRC_MSG(TRC_MMI_BRW_PUSH_IDLE_FOUND_PENDING_MESSAGE, "[PUSH] IDLE callback executed for Message ID = %d")
TRC_MSG(TRC_MMI_BRW_PUSH_START_SEND_BY_CONSTRUCT_DATA, "[PUSH] Enters mmi_brw_push_construct_send_by_data")
TRC_MSG(TRC_MMI_BRW_PUSH_END_SEND_BY_CONSTRUCT_DATA, "[PUSH] END mmi_brw_push_construct_send_by_data")
TRC_MSG(TRC_MMI_BRW_PUSH_SEND_BY_SIZE, "[PUSH] Calculated mmi_brw_push_calculate_send_by_size = %d")
TRC_MSG(TRC_MMI_BRW_PUSH_ENTER_SEND_BY_MMS, "[PUSH] Enter into Send by MMS")
TRC_MSG(TRC_MMI_BRW_PUSH_MMS_ACTIVATED, "[PUSH] Send request dispatched to MMS module")
TRC_MSG(TRC_MMI_BRW_PUSH_ENTER_SEND_BY_SMS, "[PUSH] Enter into Send by SMS")
TRC_MSG(TRC_MMI_BRW_PUSH_SMS_ACTIVATED, "[PUSH] Send request dispatched to SMS module")
TRC_MSG(TRC_MMI_BRW_PUSH_ENTER_SEND_BY_EMAIL, "[PUSH] Enter into Send by Email")
TRC_MSG(TRC_MMI_BRW_PUSH_EMAIL_ACTIVATED, "[PUSH] Send request dispatched to Email module")
TRC_MSG(TRC_MMI_BRW_PUSH_ENTER_ADD_TO_BKM, "[PUSH] Sending Add to bookmark request to browser by wap_start_browser")
TRC_MSG(TRC_MMI_BRW_ADD_TO_WHITE_LIST_ERROR, "[PUSH] Add to white list return error = %d")

    /* Logging in unified push part */
TRC_MSG(MMI_BRW_PUSH_SIM_INFO_INDICATION, "[PUSH] sim_status_info, sim_id=%d, sim_inserted=%d, setting_mode=%d, sim1_can_read=%d, sim2_can_read=%d, sim1_type=%d, sim2_type=%d")
TRC_MSG(TRC_MMI_BRW_PUSH_MSG_SEND_LAWMO_RSP, "[PUSH] Send LAWMO response result = %d")
TRC_MSG(MMI_BRW_PUSH_LOAD_MSG_INFO, "[PUSH] Load request information URL: = %s, sim_id = %d, message_type = %d, message_id = %d")
TRC_MSG(TRC_MMI_BRW_PUSH_UPDATE_SIM2_ICON, "[PUSH] Updating SIM2 ICON sim2_unread = %d, setting = %d")
TRC_MSG(TRC_MMI_BRW_PUSH_UPDATE_SIM1_ICON, "[PUSH] Updating SIM1 ICON sim1_unread = %d, setting = %d")

TRC_MSG(TRC_MMI_BRW_PUSH_HANDLE_ADD_BKM_RSP, "[PUSH] Handle add bookmark response ret_code = %d")
TRC_MSG(TRC_MMI_BRW_PUSH_SEND_ADD_BKM_REQ, "[PUSH] Send add request to WAP for URL = %s")
TRC_MSG(TRC_MMI_BRW_PUSH_ENTER_ADD_BKM_SCREEN, "[PUSH] Entering add BKM screen for URL = %s")
TRC_MSG(TRC_MMI_BRW_PUSH_ADDED_MESSAGE_DELETED_SCR_IN_HIST, "[PUSH] Added message deleted screen in History")
TRC_MSG(TRC_MMI_BRW_PUSH_GET_LIST_ICON, "[PUSH] Get list ICON for is_read = %d, sim_id = %d, expire_time = %d")
TRC_MSG(TRC_MMI_BRW_PUSH_FULL_MSG_COMMON, "[PUSH] full message received from service, msg_id = %d, msg_type = %d, created = %d, expired = %d, priority = %d, text_type = %d, read = %d, has_info = %d")
TRC_MSG(TRC_MMI_BRW_PUSH_FULL_MSG_TEXT, "[PUSH] full message received from service, text = %s")
TRC_MSG(TRC_MMI_BRW_PUSH_FULL_MSG_SMSC, "[PUSH] full message received from service, smsc = %s")
TRC_MSG(TRC_MMI_BRW_PUSH_FULL_MSG_SENDER, "[PUSH] full message received from service, sender = %s")
TRC_MSG(TRC_MMI_BRW_PUSH_FULL_MSG_URL, "[PUSH] full message received from service, URL = %s")
TRC_MSG(TRC_MMI_BRW_PUSH_RECV_MSG_CNT_SIM1, "[PUSH] Receive message count response SIM1_count = %d")
TRC_MSG(TRC_MMI_BRW_PUSH_RECV_MSG_CNT_SIM2, "[PUSH] Receive message count response SIM2_count = %d")
  /* END OF WAP PUSH LOGS */