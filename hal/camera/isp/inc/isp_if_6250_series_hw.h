/*******************************************************************************
*  Copyright Statement:
*  --------------------
*  This software is protected by Copyright and the information contained
*  herein is confidential. The software may not be copied and the information
*  contained herein may not be used or disclosed except with the written
*  permission of MediaTek Inc. (C) 2005
*
*  BY OPENING THIS FILE, BUYER HEREBY UNEQUIVOCALLY ACKNOWLEDGES AND AGREES
*  THAT THE SOFTWARE/FIRMWARE AND ITS DOCUMENTATIONS ("MEDIATEK SOFTWARE")
*  RECEIVED FROM MEDIATEK AND/OR ITS REPRESENTATIVES ARE PROVIDED TO BUYER ON
*  AN "AS-IS" BASIS ONLY. MEDIATEK EXPRESSLY DISCLAIMS ANY AND ALL WARRANTIES,
*  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE IMPLIED WARRANTIES OF
*  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE OR NONINFRINGEMENT.
*  NEITHER DOES MEDIATEK PROVIDE ANY WARRANTY WHATSOEVER WITH RESPECT TO THE
*  SOFTWARE OF ANY THIRD PARTY WHICH MAY BE USED BY, INCORPORATED IN, OR
*  SUPPLIED WITH THE MEDIATEK SOFTWARE, AND BUYER AGREES TO LOOK ONLY TO SUCH
*  THIRD PARTY FOR ANY WARRANTY CLAIM RELATING THERETO. MEDIATEK SHALL ALSO
*  NOT BE RESPONSIBLE FOR ANY MEDIATEK SOFTWARE RELEASES MADE TO BUYER'S
*  SPECIFICATION OR TO CONFORM TO A PARTICULAR STANDARD OR OPEN FORUM.
*
*  BUYER'S SOLE AND EXCLUSIVE REMEDY AND MEDIATEK'S ENTIRE AND CUMULATIVE
*  LIABILITY WITH RESPECT TO THE MEDIATEK SOFTWARE RELEASED HEREUNDER WILL BE,
*  AT MEDIATEK'S OPTION, TO REVISE OR REPLACE THE MEDIATEK SOFTWARE AT ISSUE,
*  OR REFUND ANY SOFTWARE LICENSE FEES OR SERVICE CHARGE PAID BY BUYER TO
*  MEDIATEK FOR SUCH MEDIATEK SOFTWARE AT ISSUE. 
*
*  THE TRANSACTION CONTEMPLATED HEREUNDER SHALL BE CONSTRUED IN ACCORDANCE
*  WITH THE LAWS OF THE STATE OF CALIFORNIA, USA, EXCLUDING ITS CONFLICT OF
*  LAWS PRINCIPLES.  ANY DISPUTES, CONTROVERSIES OR CLAIMS ARISING THEREOF AND
*  RELATED THERETO SHALL BE SETTLED BY ARBITRATION IN SAN FRANCISCO, CA, UNDER
*  THE RULES OF THE INTERNATIONAL CHAMBER OF COMMERCE (ICC).
*
*******************************************************************************/

/*******************************************************************************
 * Filename:
 * ---------
 *	isp_if_6250_series_hw.h
 *
 * Project:
 * --------
 *   MT6250
 *
 * Description:
 * ------------
 *   This file is intends for ISP HW.
 *
 * Author:
 * -------
 * -------
 *
 *============================================================================
 *             HISTORY
 * Below this line, this part is controlled by PVCS VM. DO NOT MODIFY!!
 *------------------------------------------------------------------------------
 * removed!
 *
 * removed!
 * removed!
 * removed!
 *
 * removed!
 * removed!
 * removed!
 *
 * removed!
 * removed!
 * removed!
 *
 * removed!
 * removed!
 * removed!
 *
 * removed!
 * removed!
 * removed!
 *
 * removed!
 * removed!
 * removed!
 *
 * removed!
 * removed!
 * removed!
 *
 * removed!
 * removed!
 * removed!
 *

 *
 *------------------------------------------------------------------------------
 * Upper this line, this part is controlled by PVCS VM. DO NOT MODIFY!!
 *============================================================================
 ****************************************************************************/
#ifndef _ISP_IF_6250_SERIES_HW_H_
#define _ISP_IF_6250_SERIES_HW_H_

#include "drv_features.h"
#include "reg_base.h"

#if defined(DRV_ISP_6235_SERIES)

enum
{
	BAYER_B=0,
	BAYER_Gb,
	BAYER_Gr,
	BAYER_R
};
	
enum
{
	INPUT_BAYER=0,
	INPUT_YUV422=1,
	INPUT_RGB=2,
	INPUT_YCbCr=5	
};

enum
{
	INPUT_ORDER_CbYCrY1=0,
	INPUT_ORDER_CrYCbY1,
	INPUT_ORDER_YCbY1Cr,
	INPUT_ORDER_YCrY1Cb	
};
	

#define ISP_INT_FRAME_READY		0x0001
#define ISP_INT_IDLE			0x0002
#define ISP_INT_RESIZER_OVERRUN		0x0004
#define ISP_INT_ISP_DONE		0x0010
#define ISP_INT_AE_DONE			//0x0020  //MT6276 no use
#define ISP_INT_ATF_DONE			//0x0040  //MT6276 no use
#define ISP_INT_TG_DONE			0x0080
#define ISP_INT_VD_DONE			0x0100
#define ISP_INT_AVSYNC        0x0200

#define CAM_BASE      	CAMERA_base  

#define ISP_TG_PHASE_COUNTER_REG			(CAMERA_base + 0x0000)
#define ISP_CMOS_SENSOR_SIZE_CONFIG_REG 		(CAMERA_base + 0x0004)
#define ISP_TG_GRAB_RANGE_PIXEL_CONFIG_REG		(CAMERA_base + 0x0008)
#define ISP_TG_GRAB_RANGE_LINE_CONFIG_REG		(CAMERA_base + 0x000C)
#define ISP_CMOS_SENSOR_MODE_CONFIG_REG			(CAMERA_base + 0x0010)
#define ISP_CAMERA_BURST_CAPTURE_CTRL_REG		(CAMERA_base + 0x0014)
#define ISP_VIEW_FINDER_MODE_CTRL_REG			(CAMERA_base + 0x0018)
#define ISP_INT_ENABLE_REG             	   		(CAMERA_base + 0x001C)
#define ISP_INT_STATUS_REG     	            		(CAMERA_base + 0x0020)
#define ISP_PATH_CONFIG_REG	     	         	(CAMERA_base + 0x0024)
#define ISP_VERTICAL_SUB_SAMPLE_CTRL_REG		(CAMERA_base + 0x0128)
#define ISP_HORIZONTAL_SUB_SAMPLE_CTRL_REG		(CAMERA_base + 0x012C)
#define ISP_RESULT_WINDOW_V_SIZE_REG			(CAMERA_base + 0x0174)
#define ISP_RESULT_WINDOW_H_SIZE_REG			(CAMERA_base + 0x0178)
#define ISP_DEBUG_CONFIG1_REG				(CAMERA_base + 0x0190)
#define ISP_DEBUG_CONFIG2_REG				(CAMERA_base + 0x0194)
#define ISP_CAMAERA_TO_CRZ_CTRL_REG			(CAMERA_base + 0x01A0)
#define ISP_CAMAERA_TO_CRZ_STATUS_REG			(CAMERA_base + 0x01A4)
#define ISP_TG_STATUS_REG				(CAMERA_base + 0x01D4)
#define ISP_RESET_REG					(CAMERA_base + 0x01D8)
#define ISP_VERSION_REG					(CAMERA_base + 0x0274)
#define ISP_CAM_PROJECT_REG				(CAMERA_base + 0x0278)
#define ISP_TG_PHASE_COUNTER1_REG			(CAMERA_base + 0x081C)
#define ISP_TG_PHASE_COUNTER2_REG			(CAMERA_base + 0x0820)

#define REG_ISP_TG_PHASE_COUNTER			*((volatile unsigned int *) (CAMERA_base + 0x0000))
#define REG_ISP_CMOS_SENSOR_SIZE_CONFIG 		*((volatile unsigned int *) (CAMERA_base + 0x0004))
#define REG_ISP_TG_GRAB_RANGE_PIXEL_CONFIG		*((volatile unsigned int *) (CAMERA_base + 0x0008))
#define REG_ISP_TG_GRAB_RANGE_LINE_CONFIG		*((volatile unsigned int *) (CAMERA_base + 0x000C))
#define REG_ISP_CMOS_SENSOR_MODE_CONFIG			*((volatile unsigned int *) (CAMERA_base + 0x0010))
#define REG_ISP_CAMERA_BURST_CAPTURE_CTRL		*((volatile unsigned int *) (CAMERA_base + 0x0014))
#define REG_ISP_VIEW_FINDER_MODE_CTRL			*((volatile unsigned int *) (CAMERA_base + 0x0018))
#define REG_ISP_INT_ENABLE             	   		*((volatile unsigned int *) (CAMERA_base + 0x001C))
#define REG_ISP_INT_STATUS     	            		*((volatile unsigned int *) (CAMERA_base + 0x0020))
#define REG_ISP_PATH_CONFIG     	            	*((volatile unsigned int *) (CAMERA_base + 0x0024)) 
#define REG_ISP_PREPROCESS_CTRL1			*((volatile unsigned int *) (CAMERA_base + 0x0030))

#define REG_ISP_VERTICAL_SUB_SAMPLE_CTRL		*((volatile unsigned int *) (CAMERA_base + 0x0128)) 
#define REG_ISP_HORIZONTAL_SUB_SAMPLE_CTRL		*((volatile unsigned int *) (CAMERA_base + 0x012C)) 
#define REG_ISP_RESULT_WINDOW_V_SIZE			*((volatile unsigned int *) (CAMERA_base + 0x0174))
#define REG_ISP_RESULT_WINDOW_H_SIZE			*((volatile unsigned int *) (CAMERA_base + 0x0178))

#define REG_ISP_RESULT_WINDOW_LINE    					*((volatile unsigned int *) (CAMERA_base + 0x0174)) 
#define REG_ISP_RESULT_WINDOW_PIXEL	    				*((volatile unsigned int *) (CAMERA_base + 0x0178)) 

#define REG_ISP_DEBUG_CONFIG1				*((volatile unsigned int *) (CAMERA_base + 0x0190))
#define REG_ISP_DEBUG_CONFIG2				*((volatile unsigned int *) (CAMERA_base + 0x0194))
#define REG_ISP_CAMAERA_TO_CRZ_CTRL			*((volatile unsigned int *) (CAMERA_base + 0x01A0))
#define REG_ISP_CAMAERA_TO_CRZ_STATUS			*((volatile unsigned int *) (CAMERA_base + 0x01A4))
#define REG_ISP_TG_STATUS_REG				*((volatile unsigned int *) (CAMERA_base + 0x01D4))
#define REG_ISP_RESET					*((volatile unsigned int *) (CAMERA_base + 0x01D8))
#define REG_ISP_VERSION					*((volatile unsigned int *) (CAMERA_base + 0x0274))
#define REG_ISP_TG_PHASE_COUNTER1				*((volatile unsigned int *) (CAMERA_base + 0x081C))
#define REG_ISP_TG_PHASE_COUNTER2				*((volatile unsigned int *) (CAMERA_base + 0x0820))

/* bit mapping of Camera TG phase counter register */
#define REG_TGPC_PHASE_COUNTER_ENABLE_BIT		0x80000000
#define REG_TGPC_CLK_OUTPUT_ENABLE_BIT			0x20000000
#define REG_TGPC_CLK_POLARITY_CTRL_BIT			0x10000000
#define REG_TGPC_CLK_OUTPUT_DIV_MASK			0x0F000000
#define REG_TGPC_RISING_EDGE_CLK_CNT_MASK		0x00F00000
#define REG_TGPC_FALLING_EDGE_CLK_CNT_MASK		0x000F0000

#define REG_TGPC_HVALID_ENABLE_BIT			0x00008000
#define REG_TGPC_CAM_PCLK_INV_BIT			0x00004000
#define REG_TGPC_PAD_PCLK_INV_BIT			0x00002000
#define REG_TGPC_PIXEL_CLKIN_ENABLE_BIT			0x00001000

#define REG_TGPC_CLKFL_POL_BIT				0x00000800
#define REG_TGPC_PIXEL_CLK_SELECT_BIT			0x00000100
#define REG_TGPC_CLKL_POL_BIT			        0x00000800

#define REG_TGPC_PIXEL_CLK_DIV_MASK			0x000000F0
#define REG_TGPC_DATA_LATCH_POSITION_MASK		0x0000000F

/* bit mapping of Camera CMOS sensor size configuration register */
#define REG_CMOS_SENSOR_SIZE_WIDTH_MASK			0x0FFF0000
#define REG_CMOS_SENSOR_SIZE_HEIGHT_MASK		0x00000FFF

/* bit mapping of TG grab range start/end pixel configuration register */
#define REG_TG_GRAB_RANGE_START_PIXEL_MASK		0x0FFF0000
#define REG_TG_GRAB_RANGE_END_PIXEL_MASK		0x00000FFF

/* bit mapping of TG grab start/end line configuration register */
#define REG_TG_GRAB_RANGE_START_LINE_MASK		0x0FFF0000
#define REG_TG_GRAB_RANBE_END_LINE_MASK			0x00000FFF

/* bit mapping of CMOS sensor mode configuration register */
#define REG_CMOS_SENSOR_MEMIN_DUMMYLINE_MASK		0x003F0000
#define REG_CMOS_SENSOR_VSYNC_POLARITY_BIT		0x00000080
#define REG_CMOS_SENSOR_HSYNC_POLARITY_BIT		0x00000040
#define REG_CMOS_SENSOR_POWER_ON_BIT			0x00000020
#define REG_CMOS_SENSOR_RESET_BIT			0x00000010
#define REG_CMOS_SENSOR_AUTO_SYNC_ENABLE_BIT		0x00000008
#define REG_CMOS_SENSOR_ENABLE_BIT			0x00000001

/* bit mapping of camera burst capture control register */
#define REG_CAMERA_BURST_CAPTURE_NO_MASK		0x001F0000
#define REG_CAMERA_BURST_CAPTURE_ENABLE_BIT		0x00000001

/* bit mapping of camera view finder mode control register */
#define REG_VIEW_FINDER_MODE_AV_SYNC_SEL		0x80000000	
#define REG_VIEW_FINDER_MODE_VD_INT_POL_BIT		0x40000000
#define REG_VIEW_FINDER_MODE_AV_SYNC_LINENO_MASK	0x0FFF0000
#define REG_VIEW_FINDER_MODE_SP_DELAY_MASK		0x00000700	
#define REG_VIEW_FINDER_MODE_CAPTURE_MODE_BIT		0x00000080
#define REG_VIEW_FINDER_MODE_DATA_ENABLE_BIT		0x00000040
#define REG_VIEW_FINDER_MODE_FRAME_RATE_MASK		0x00000007

/* bit mapping of Camera module interrupt enable register */
#define REG_CAMERA_INT_TG_DONE_ENABLE_BIT		0x80000080
#define REG_CAMERA_INT_VD_DONE_ENABLE_BIT		0x00000080
#define REG_CAMERA_INT_WCLR_ENABLE_BIT			0x00010000
#define REG_CAMERA_INT_AVSYNC_ENABLE_BIT		0x00000100
#define REG_CAMERA_INT_ISP_DONE_ENABLE_BIT		0x00000010
#define REG_CAMERA_INT_IDLE_ENABLE_BIT			0x00000008
#define REG_CAMERA_INT_RESIZER_OVERRUN_ENABLE_BIT	0x00000002
#define REG_CAMERA_INT_FRAME_READY_ENABLE_BIT   	0x00000001


#define REG_CAMERA_INT_FLASH_SEL_ENABLE_BIT	    	0x80000000
#define REG_CAMERA_INT_AVSYNC_DONE_ENABLE_BIT		0x00000100

/* bit mapping of Camera module interrupt status register */
#define REG_CAMERA_INT_AVSYNC_STATUS_BIT		0x00000100
#define REG_CAMERA_INT_VSYNC_STATUS_BIT			0x00000080
#define REG_CAMERA_INT_ISP_DONE_STATUS_BIT		0x00000010
#define REG_CAMERA_INT_IDLE_STATUS_BIT			0x00000008
#define REG_CAMERA_INT_GMC_OVERRUN_ENABLE_BIT		0x00000004
#define REG_CAMERA_INT_RESIZER_OVERRUN_STATUS_BIT	0x00000002
#define REG_CAMERA_INT_FRAME_READY_STATUS_BIT   	0x00000001

/* bit mapping of Camera path config register */
#define REG_CAMERA_PATH_REZ_DISCONN_BIT			0x00800000
#define REG_CAMERA_PATH_INORDER_SEL_MASK		0x00003000
#define REG_CAMERA_PATH_SWAP_Y_MASK					0x00002000	
#define REG_CAMERA_PATH_SWAP_CBCR_MASK				0x00001000	

#define REG_CAMERA_PATH_DATA8_LSB_MASK			0x00000800
#define REG_CAMERA_PATH_INTYPE_SEL_MASK			0x00000700

/* bit mapping of vertical sub-sample control register */
#define REG_VERTICAL_SUB_V_SUB_EN_BIT			0x10000000
#define REG_VERTICAL_SUB_V_SUB_IN_MASK			0x0FFF0000
#define REG_VERTICAL_SUB_V_SUB_OUT_MASK			0x00000FFF

/* bit mapping of horizontal sub-sample control register */
#define REG_HORIZONTAL_SUB_H_SUB_EN_BIT			0x10000000
#define REG_HORIZONTAL_SUB_H_SUB_IN_MASK		0x0FFF0000
#define REG_HORIZONTAL_SUB_H_SUB_OUT_MASK		0x00000FFF

/* bit mapping of result window vertical size register */
#define REG_RESULT_WINDOW_ENABLE_BIT			0x10000000
#define REG_RESULT_WINDOW_START_MASK			0x0FFF0000
#define REG_RESULT_WINDOW_END_MASK			0x00000FFF

/* bit mapping of RESZ grab range start/end pixel configuration register */
#define REG_RESULT_GRAB_ENABLE_BIT				0x10000000
#define REG_RESULT_GRAB_RANGE_START_PIXEL_MASK	0x0FFF0000
#define REG_RESULT_GRAB_RANGE_END_PIXEL_MASK	0x00000FFF
#define REG_RESULT_GRAB_RANGE_PIXEL_MASK		0x0FFF0FFF

/* bit mapping of RESZ grab start/end line configuration register */
#define REG_RESZ_GRAB_RANGE_START_LINE_MASK		0x0FFF0000
#define REG_RESZ_GRAB_RANBE_END_LINE_MASK			0x00000FFF
#define REG_RESZ_GRAB_RANBE_LINE_MASK		0x0FFF0FFF

/* bit mapping of CAM reset register */
#define REG_CAM_RESET_ISP_FRAME_COUNT_MASK		0x0000FF00
#define REG_CAM_RESET_ISP_RESET_BIT			0x00000001


/* bit mapping of camera to CRZ control register */
#define REG_CAMERA_CRZ_CAMCRZ_INIT_EN_BIT		0x10000000
#define REG_CAMERA_CRZ_CAMCRZ_INIT_PERIOD_MASK		0x0F000000
#define REG_CAMERA_CRZ_REZ_OVERUN_FLIMIT_EN_BIT		0x00100000
#define REG_CAMERA_CRZ_REZ_OVERUN_FLIMIT_NO_MASK	0x000F0000

/* bit mapping of camera to CRZ status register */
#define REG_CAMERA_CRZ_CAMCRZ_FIFOCNT_MASK		0x3F000000
#define REG_CAMERA_CRZ_REZ_OVERUN_FCOUNT_MASK		0x000F0000

/* bit mapping of TG status register */
#define REG_TG_STATUS_CAM_BUSY_BIT			0x40000000
#define REG_TG_STATUS_CAPTURE_BUSY_BIT			0x20000000
#define REG_TG_STATUS_SYN_VF_DATA_EN_BIT		0x10000000
#define REG_TG_STATUS_LINE_COUNT_MASK			0x0FFF0000
#define REG_TG_STATUS_PIXEL_COUNT_MASK			0x00001FFF

/* bit mapping of CAM RESET register */
#define REG_CAM_RESET_CAM_CS_MASK			0x1F000000
#define REG_CAM_RESET_SW_RESET_BIT			0x00010000
#define REG_CAM_RESET_ISP_FRAME_COUNT_MASK		0x0000FF00
#define REG_CAM_RESET_HW_RESET_BIT			0x00000001

#define REG_TGPC1_CLK_OUTPUT_DIV_MASK			0x00000F00
#define REG_TGPC1_FALLING_EDGE_CLK_CNT_MASK		0x0000000F
#define REG_TGPC1_RISING_EDGE_CLK_CNT_MASK		0x000000F0

#define REG_TGPC2_CLKL_POL_BIT				0x00000001
#define REG_TGPC2_PIXEL_CLKIN_ENABLE_BIT		0x00000002
#define REG_TGPC2_PIXEL_CLK_SELECT_BIT			0x00000004
#define REG_TGPC2_FALLING_EDGE_CLK_CNT_MASK		0x000003F0
#define REG_TGPC2_RISING_EDGE_CLK_CNT_MASK		0x0003F000
#define REG_TGPC2_CLK_OUTPUT_DIV_MASK			0x03F00000
#define REG_TGPC2_PHASE_COUNTER_ENABLE_BIT		0x80000000
#define REG_TGPC2_CLK_OUTPUT_ENABLE_BIT			0x20000000
#define REG_TGPC2_CLK_POLARITY_CTRL_BIT			0x10000000

/* macros of TG phase counter register */
#define ENABLE_CAMERA_TG_PHASE_COUNTER			REG_ISP_TG_PHASE_COUNTER |= REG_TGPC_PHASE_COUNTER_ENABLE_BIT;
#define DISABLE_CAMERA_TG_PHASE_COUNTER			REG_ISP_TG_PHASE_COUNTER &= ~REG_TGPC_PHASE_COUNTER_ENABLE_BIT;
#define ENABLE_CAMERA_CLOCK_OUTPUT_TO_CMOS		REG_ISP_TG_PHASE_COUNTER |= REG_TGPC_CLK_OUTPUT_ENABLE_BIT;
#define DISABLE_CAMERA_CLOCK_OUTPUT_TO_CMOS		REG_ISP_TG_PHASE_COUNTER &= ~REG_TGPC_CLK_OUTPUT_ENABLE_BIT;
#define SET_CMOS_CLOCK_POLARITY_HIGH			REG_ISP_TG_PHASE_COUNTER |= REG_TGPC_CLK_POLARITY_CTRL_BIT;
#define SET_CMOS_CLOCK_POLARITY_LOW			REG_ISP_TG_PHASE_COUNTER &= ~REG_TGPC_CLK_POLARITY_CTRL_BIT;
#define SET_TG_OUTPUT_CLK_DIVIDER(n)	\
{\
	volatile kal_uint32 temp;\
	temp = (REG_ISP_TG_PHASE_COUNTER & (~REG_TGPC_CLK_OUTPUT_DIV_MASK));\
	temp |= ((n<<24) & REG_TGPC_CLK_OUTPUT_DIV_MASK);\
	REG_ISP_TG_PHASE_COUNTER = temp;\
}

#define SET_CMOS_RISING_EDGE(n)	\
{\
	volatile kal_uint32 temp;\
	temp = (REG_ISP_TG_PHASE_COUNTER & (~REG_TGPC_RISING_EDGE_CLK_CNT_MASK));\
	temp |= ((n<<20) & REG_TGPC_RISING_EDGE_CLK_CNT_MASK);\
	REG_ISP_TG_PHASE_COUNTER = temp;\
}

#define SET_CMOS_FALLING_EDGE(n)	\
{\
	volatile kal_uint32 temp;\
	temp = (REG_ISP_TG_PHASE_COUNTER & (~REG_TGPC_FALLING_EDGE_CLK_CNT_MASK));\
	temp |= ((n<<16) & REG_TGPC_FALLING_EDGE_CLK_CNT_MASK);\
	REG_ISP_TG_PHASE_COUNTER = temp;\
}

#define SET_TG_PIXEL_CLK_DIVIDER(n)	\
{\
	volatile kal_uint32 temp;\
	temp = (REG_ISP_TG_PHASE_COUNTER & (~REG_TGPC_PIXEL_CLK_DIV_MASK));\
	temp |= ((n<<4) & REG_TGPC_PIXEL_CLK_DIV_MASK);\
	REG_ISP_TG_PHASE_COUNTER = temp;\
}
#define SET_CMOS_DATA_LATCH(n)	\
{\
	volatile kal_uint32 temp;\
	temp = (REG_ISP_TG_PHASE_COUNTER & (~REG_TGPC_DATA_LATCH_POSITION_MASK));\
	temp |= (n & REG_TGPC_DATA_LATCH_POSITION_MASK);\
	REG_ISP_TG_PHASE_COUNTER = temp;\
}
#define ENABLE_CAMERA_SENSOR_HVALID_HREF		REG_ISP_TG_PHASE_COUNTER |= REG_TGPC_HVALID_ENABLE_BIT;
#define DISABLE_CAMERA_SENSOR_HVALID_HREF		REG_ISP_TG_PHASE_COUNTER &= ~REG_TGPC_HVALID_ENABLE_BIT;

#define ENABLE_CAMERA_SENSOR_CLKIN_MONITOR			REG_ISP_TG_PHASE_COUNTER |= REG_TGPC_CAM_PCLK_INV_BIT;
#define DISABLE_CAMERA_SENSOR_CLKIN_MONITOR			REG_ISP_TG_PHASE_COUNTER &= ~REG_TGPC_CAM_PCLK_INV_BIT;

#define ENABLE_CAMERA_PIXEL_CLK_INV			REG_ISP_TG_PHASE_COUNTER |= REG_TGPC_PAD_PCLK_INV_BIT;
#define DISABLE_CAMERA_PIXEL_CLK_INV			REG_ISP_TG_PHASE_COUNTER &= ~REG_TGPC_PAD_PCLK_INV_BIT;

#define ENABLE_CAMERA_PIXEL_CLKIN_ENABLE		REG_ISP_TG_PHASE_COUNTER |= REG_TGPC_PIXEL_CLKIN_ENABLE_BIT;
#define DISABLE_CAMERA_PIXEL_CLKIN_ENABLE		REG_ISP_TG_PHASE_COUNTER &= ~REG_TGPC_PIXEL_CLKIN_ENABLE_BIT;
#define SET_SENSOR_CLKFL_POL_HIGH			REG_ISP_TG_PHASE_COUNTER |= REG_TGPC_CLKFL_POL_BIT;
#define SET_SENSOR_CLKFL_POL_LOW			REG_ISP_TG_PHASE_COUNTER &= ~REG_TGPC_CLKFL_POL_BIT;
#define ENABLE_CAMERA_TG_CLK_48M			REG_ISP_TG_PHASE_COUNTER |= REG_TGPC_PIXEL_CLK_SELECT_BIT;
#define DISABLE_CAMERA_TG_CLK_48M			REG_ISP_TG_PHASE_COUNTER &= ~REG_TGPC_PIXEL_CLK_SELECT_BIT;
#define DISABLE_CAMERA_TG_CLK_POL 			REG_ISP_TG_PHASE_COUNTER &= ~REG_TGPC_CLKL_POL_BIT
#define ENABLE_CAMERA_TG_CLK_POL 			REG_ISP_TG_PHASE_COUNTER |= REG_TGPC_CLKL_POL_BIT

/* macros of CMOS sensor size configuration register */
#define SET_CMOS_SENSOR_SIZE(width, height)		REG_ISP_CMOS_SENSOR_SIZE_CONFIG = ((width<<16)|height);

#define SET_YUV_TG_GRAB_PIXEL(start,pixel)		REG_ISP_TG_GRAB_RANGE_PIXEL_CONFIG =((start<<16) | ((pixel<<1)+start-1));
#define SET_YUV_TG_GRAB_LINE(start,line)		REG_ISP_TG_GRAB_RANGE_LINE_CONFIG =((start<<16) | (line+start-1));

#define SET_TG_GRAB_PIXEL(start,pixel)		    SET_YUV_TG_GRAB_PIXEL(start,pixel)
#define SET_TG_GRAB_LINE(start,line)		    SET_YUV_TG_GRAB_LINE(start,line)


/* macros of CMOS sensor mode configuration register */
#define SET_VSYNC_POLARITY_HIGH				REG_ISP_CMOS_SENSOR_MODE_CONFIG |= REG_CMOS_SENSOR_VSYNC_POLARITY_BIT;
#define SET_VSYNC_POLARITY_LOW				REG_ISP_CMOS_SENSOR_MODE_CONFIG &= ~REG_CMOS_SENSOR_VSYNC_POLARITY_BIT;
#define SET_HSYNC_POLARITY_HIGH				REG_ISP_CMOS_SENSOR_MODE_CONFIG |= REG_CMOS_SENSOR_HSYNC_POLARITY_BIT;
#define SET_HSYNC_POLARITY_LOW				REG_ISP_CMOS_SENSOR_MODE_CONFIG &= ~REG_CMOS_SENSOR_HSYNC_POLARITY_BIT;
#define POWER_ON_CMOS_SENSOR				REG_ISP_CMOS_SENSOR_MODE_CONFIG &= ~REG_CMOS_SENSOR_POWER_ON_BIT;
#define POWER_OFF_CMOS_SENSOR				REG_ISP_CMOS_SENSOR_MODE_CONFIG |= REG_CMOS_SENSOR_POWER_ON_BIT;
#define RESET_CMOS_SENSOR				REG_ISP_CMOS_SENSOR_MODE_CONFIG |= REG_CMOS_SENSOR_RESET_BIT;\
								REG_ISP_CMOS_SENSOR_MODE_CONFIG &= ~REG_CMOS_SENSOR_RESET_BIT;
#define RESET_CMOS_SENSOR_MODE1				REG_ISP_CMOS_SENSOR_MODE_CONFIG |= REG_CMOS_SENSOR_RESET_BIT;\
								REG_ISP_CMOS_SENSOR_MODE_CONFIG &= ~REG_CMOS_SENSOR_RESET_BIT;
#define RESET_CMOS_SENSOR_MODE2				REG_ISP_CMOS_SENSOR_MODE_CONFIG &= ~REG_CMOS_SENSOR_RESET_BIT;\
								REG_ISP_CMOS_SENSOR_MODE_CONFIG |= REG_CMOS_SENSOR_RESET_BIT;


#define SET_CMOS_SENOSR_POWER_ON_HIGH       REG_ISP_CMOS_SENSOR_MODE_CONFIG |= REG_CMOS_SENSOR_POWER_ON_BIT;
#define SET_CMOS_SENOSR_POWER_ON_LOW        REG_ISP_CMOS_SENSOR_MODE_CONFIG &= ~REG_CMOS_SENSOR_POWER_ON_BIT;
#define SET_CMOS_SENOSR_RESET_HIGH          REG_ISP_CMOS_SENSOR_MODE_CONFIG |= REG_CMOS_SENSOR_RESET_BIT;
#define SET_CMOS_SENOSR_RESET_LOW           REG_ISP_CMOS_SENSOR_MODE_CONFIG &= ~REG_CMOS_SENSOR_RESET_BIT;


#define ENABLE_AUTO_HSYNC_PIXEL_CAL			REG_ISP_CMOS_SENSOR_MODE_CONFIG |= REG_CMOS_SENSOR_AUTO_SYNC_ENABLE_BIT;
#define DISABLE_AUTO_HSYNC_PIXEL_CAL			REG_ISP_CMOS_SENSOR_MODE_CONFIG &= ~REG_CMOS_SENSOR_AUTO_SYNC_ENABLE_BIT;
#define ENABLE_CMOS_SESNOR				REG_ISP_CMOS_SENSOR_MODE_CONFIG |= REG_CMOS_SENSOR_ENABLE_BIT;
#define ENABLE_CMOS_SENSOR				REG_ISP_CMOS_SENSOR_MODE_CONFIG |= REG_CMOS_SENSOR_ENABLE_BIT;
#define DISABLE_CMOS_SESNOR				REG_ISP_CMOS_SENSOR_MODE_CONFIG &= ~REG_CMOS_SENSOR_ENABLE_BIT;
#define DISABLE_CMOS_SENSOR				REG_ISP_CMOS_SENSOR_MODE_CONFIG &= ~REG_CMOS_SENSOR_ENABLE_BIT;

/* macros of camera interface view finder mode control register */
#define ENABLE_VIEW_FINDER_MODE				REG_ISP_VIEW_FINDER_MODE_CTRL |= REG_VIEW_FINDER_MODE_DATA_ENABLE_BIT;
#define DISABLE_VIEW_FINDER_MODE			REG_ISP_VIEW_FINDER_MODE_CTRL &= ~REG_VIEW_FINDER_MODE_DATA_ENABLE_BIT;
#define VIEW_FINDER_MODE_IS_ENABLE			(REG_ISP_VIEW_FINDER_MODE_CTRL & REG_VIEW_FINDER_MODE_DATA_ENABLE_BIT)
#define SET_CAMERA_PREVIEW_MODE				REG_ISP_VIEW_FINDER_MODE_CTRL &= ~REG_VIEW_FINDER_MODE_CAPTURE_MODE_BIT;
#define SET_CAMERA_CAPTURE_MODE				REG_ISP_VIEW_FINDER_MODE_CTRL |= REG_VIEW_FINDER_MODE_CAPTURE_MODE_BIT;
#define SET_CAMERA_FRAME_RATE(n)			REG_ISP_VIEW_FINDER_MODE_CTRL &= ~REG_VIEW_FINDER_MODE_FRAME_RATE_MASK;\
							REG_ISP_VIEW_FINDER_MODE_CTRL |= (n & REG_VIEW_FINDER_MODE_FRAME_RATE_MASK);
#define SET_CAMERA_CAPTURE_DELAY(n)			REG_ISP_VIEW_FINDER_MODE_CTRL &= ~REG_VIEW_FINDER_MODE_SP_DELAY_MASK;\
								REG_ISP_VIEW_FINDER_MODE_CTRL |= ((n<<8) & REG_VIEW_FINDER_MODE_SP_DELAY_MASK);
#define SET_AV_SYNC_LINENO(n)				REG_ISP_VIEW_FINDER_MODE_CTRL &= ~REG_VIEW_FINDER_MODE_AV_SYNC_LINENO_MASK;\
								REG_ISP_VIEW_FINDER_MODE_CTRL |= ((n<<16) & REG_VIEW_FINDER_MODE_AV_SYNC_LINENO_MASK);
#define SET_AV_SYNC_START_VSYNC				REG_ISP_VIEW_FINDER_MODE_CTRL |= REG_VIEW_FINDER_MODE_AV_SYNC_SEL;
#define SET_AV_SYNC_START_AV_SYNC_LIENO			REG_ISP_VIEW_FINDER_MODE_CTRL &= ~REG_VIEW_FINDER_MODE_AV_SYNC_SEL;
#define SET_VD_INT_POL_RISING_EDGE			REG_ISP_VIEW_FINDER_MODE_CTRL &= ~REG_VIEW_FINDER_MODE_VD_INT_POL_BIT;
#define SET_VD_INT_POL_FALLING_EDGE			REG_ISP_VIEW_FINDER_MODE_CTRL |= REG_VIEW_FINDER_MODE_VD_INT_POL_BIT;

/* macros of Camera interface interrupt enable register */
#define ENABLE_CAMERA_VD_DONE_INT			REG_ISP_INT_ENABLE |= REG_CAMERA_INT_VD_DONE_ENABLE_BIT;
#define DISABLE_CAMERA_VD_DONE_INT			REG_ISP_INT_ENABLE &= ~REG_CAMERA_INT_VD_DONE_ENABLE_BIT;
#define ENABLE_CAMERA_TG_DONE_INT			REG_ISP_INT_ENABLE |= REG_CAMERA_INT_TG_DONE_ENABLE_BIT;
#define DISABLE_CAMERA_TG_DONE_INT			REG_ISP_INT_ENABLE &= ~REG_CAMERA_INT_TG_DONE_ENABLE_BIT;
#define ENABLE_CAMERA_AVSYNC_DONE_INT			REG_ISP_INT_ENABLE |= REG_CAMERA_INT_AVSYNC_ENABLE_BIT;
#define DISABLE_CAMERA_AVSYNC_DONE_INT			REG_ISP_INT_ENABLE &= ~REG_CAMERA_INT_AVSYNC_ENABLE_BIT;
#define ENABLE_CAMERA_ISP_DONE_INT			REG_ISP_INT_ENABLE |= REG_CAMERA_INT_ISP_DONE_ENABLE_BIT;
#define DISABLE_CAMERA_ISP_DONE_INT			REG_ISP_INT_ENABLE &= ~REG_CAMERA_INT_ISP_DONE_ENABLE_BIT;

#define ENABLE_CAMERA_ATF_DONE_INT			//no this bit in MT6250	
#define DISABLE_CAMERA_ATF_DONE_INT			//no this bit in MT6250	
#define ENABLE_CAMERA_AE_DONE_INT			//no this bit in MT6250		
#define DISABLE_CAMERA_AE_DONE_INT			//no this bit in MT6250		


#define ENABLE_CAMERA_IDLE_INT				REG_ISP_INT_ENABLE |= REG_CAMERA_INT_IDLE_ENABLE_BIT;
#define DISABLE_CAMERA_IDLE_INT				REG_ISP_INT_ENABLE &= ~REG_CAMERA_INT_IDLE_ENABLE_BIT;
#define ENABLE_CAMERA_RESIZER_OVERRUN_INT		REG_ISP_INT_ENABLE |= REG_CAMERA_INT_RESIZER_OVERRUN_ENABLE_BIT;
#define DISABLE_CAMERA_RESIZER_OVERRUN_INT  		REG_ISP_INT_ENABLE &= ~REG_CAMERA_INT_RESIZER_OVERRUN_ENABLE_BIT;
#define ENABLE_CAMERA_FRAME_READY_INT   		REG_ISP_INT_ENABLE |= REG_CAMERA_INT_FRAME_READY_ENABLE_BIT;
#define DISABLE_CAMERA_FRAME_READY_INT  		REG_ISP_INT_ENABLE &= ~REG_CAMERA_INT_FRAME_READY_ENABLE_BIT;
#define ENABLE_CAMERA_INT_WCLR_EN   			REG_ISP_INT_ENABLE |= REG_CAMERA_INT_WCLR_ENABLE_BIT;
#define DISABLE_CAMERA_INT_WCLR_EN  			REG_ISP_INT_ENABLE &= ~REG_CAMERA_INT_WCLR_ENABLE_BIT;

/* macros of camera path config register */																							
#define ENABLE_REZ_DISCONN				REG_ISP_PATH_CONFIG |= REG_CAMERA_PATH_REZ_DISCONN_BIT;
#define DISABLE_REZ_DISCONN				REG_ISP_PATH_CONFIG &= ~REG_CAMERA_PATH_REZ_DISCONN_BIT;

#define ENABLE_SWAP_CBCR					REG_ISP_PATH_CONFIG |= REG_CAMERA_PATH_SWAP_CBCR_MASK;
#define DISABLE_SWAP_CBCR					REG_ISP_PATH_CONFIG &= ~REG_CAMERA_PATH_SWAP_CBCR_MASK;
#define ENABLE_SWAP_Y						REG_ISP_PATH_CONFIG |= REG_CAMERA_PATH_SWAP_Y_MASK;
#define DISABLE_SWAP_Y						REG_ISP_PATH_CONFIG &= ~REG_CAMERA_PATH_SWAP_Y_MASK;

#define SET_CAMERA_INPUT_TYPE(n)			REG_ISP_PATH_CONFIG &= ~REG_CAMERA_PATH_INTYPE_SEL_MASK;\
								REG_ISP_PATH_CONFIG |= ((n<<8) & REG_CAMERA_PATH_INTYPE_SEL_MASK);
#define SET_CAMERA_INPUT_ORDER(n)			REG_ISP_PATH_CONFIG &= ~REG_CAMERA_PATH_INORDER_SEL_MASK;\
								REG_ISP_PATH_CONFIG |= ((n<<12) & REG_CAMERA_PATH_INORDER_SEL_MASK);
/* macros of vertical sub-sample register */
#define ENABLE_VERTICAL_SUB_SAMPLE			REG_ISP_VERTICAL_SUB_SAMPLE_CTRL |= REG_VERTICAL_SUB_V_SUB_EN_BIT;	
#define DISABLE_VERTICAL_SUB_SAMPLE			REG_ISP_VERTICAL_SUB_SAMPLE_CTRL &= ~REG_VERTICAL_SUB_V_SUB_EN_BIT;	
#define SET_VSUB_SRC_SIZE(n) 				REG_ISP_VERTICAL_SUB_SAMPLE_CTRL &= ~REG_VERTICAL_SUB_V_SUB_IN_MASK;\
								REG_ISP_VERTICAL_SUB_SAMPLE_CTRL |= ((n<<16) & REG_VERTICAL_SUB_V_SUB_IN_MASK);
#define SET_VSUB_DST_SIZE(n) 				REG_ISP_VERTICAL_SUB_SAMPLE_CTRL &= ~REG_VERTICAL_SUB_V_SUB_OUT_MASK;\
								REG_ISP_VERTICAL_SUB_SAMPLE_CTRL |= (n & REG_VERTICAL_SUB_V_SUB_OUT_MASK);

/* macros of horizontal sub-sample register */
#define ENABLE_HORIZONTAL_SUB_SAMPLE			REG_ISP_HORIZONTAL_SUB_SAMPLE_CTRL |= REG_HORIZONTAL_SUB_H_SUB_EN_BIT;	
#define DISABLE_HORIZONTAL_SUB_SAMPLE			REG_ISP_HORIZONTAL_SUB_SAMPLE_CTRL &= ~REG_HORIZONTAL_SUB_H_SUB_EN_BIT;	
#define SET_HSUB_SRC_SIZE(n) 				REG_ISP_HORIZONTAL_SUB_SAMPLE_CTRL &= ~REG_HORIZONTAL_SUB_H_SUB_IN_MASK;\
								REG_ISP_HORIZONTAL_SUB_SAMPLE_CTRL |= ((n<<16) & REG_HORIZONTAL_SUB_H_SUB_IN_MASK);
#define SET_HSUB_DST_SIZE(n) 				REG_ISP_HORIZONTAL_SUB_SAMPLE_CTRL &= ~REG_HORIZONTAL_SUB_H_SUB_OUT_MASK;\
								REG_ISP_HORIZONTAL_SUB_SAMPLE_CTRL |= (n & REG_HORIZONTAL_SUB_H_SUB_OUT_MASK);

/* macros of result window register */
#define ENABLE_RESULT_WINDOW_GRAB		    		REG_ISP_RESULT_WINDOW_LINE |= REG_RESULT_GRAB_ENABLE_BIT;
#define DISABLE_RESULT_WINDOW_GRAB		    		REG_ISP_RESULT_WINDOW_LINE &= ~REG_RESULT_GRAB_ENABLE_BIT;
#define SET_RESULT_WINDOW_GRAB_LINE(start,line)		REG_ISP_RESULT_WINDOW_LINE &= ~REG_RESZ_GRAB_RANBE_LINE_MASK;\
													REG_ISP_RESULT_WINDOW_LINE |=(((start)<<16) | ((line)+(start)));
#define SET_RESULT_WINDOW_GRAB_PIXEL(start,pixel)	REG_ISP_RESULT_WINDOW_PIXEL &= ~REG_RESULT_GRAB_RANGE_PIXEL_MASK;\
													REG_ISP_RESULT_WINDOW_PIXEL |=(((start)<<16) | ((pixel)+(start)));


#define ENABLE_RESULT_WINDOW				REG_ISP_RESULT_WINDOW_V_SIZE |= REG_RESULT_WINDOW_ENABLE_BIT;
#define DISABLE_RESULT_WINDOW				REG_ISP_RESULT_WINDOW_V_SIZE &= ~REG_RESULT_WINDOW_ENABLE_BIT;
#define SET_RESULT_WINDOW_V_START(n)			REG_ISP_RESULT_WINDOW_V_SIZE &= ~REG_RESULT_WINDOW_START_MASK;\
								REG_ISP_RESULT_WINDOW_V_SIZE |= ((n<<16) & REG_RESULT_WINDOW_START_MASK);
#define SET_RESULT_WINDOW_V_END(n)			REG_ISP_RESULT_WINDOW_V_SIZE &= ~REG_RESULT_WINDOW_END_MASK;\
								REG_ISP_RESULT_WINDOW_V_SIZE |= (n & REG_RESULT_WINDOW_END_MASK);
#define SET_RESULT_WINDOW_H_START(n)			REG_ISP_RESULT_WINDOW_H_SIZE &= ~REG_RESULT_WINDOW_START_MASK;\
								REG_ISP_RESULT_WINDOW_H_SIZE |= ((n<<16) & REG_RESULT_WINDOW_START_MASK);
#define SET_RESULT_WINDOW_H_END(n)			REG_ISP_RESULT_WINDOW_H_SIZE &= ~REG_RESULT_WINDOW_END_MASK;\
								REG_ISP_RESULT_WINDOW_H_SIZE |= (n & REG_RESULT_WINDOW_END_MASK);
#define SET_RESULT_WINDOW_VERTICAL_SIZE(start,line)	REG_ISP_RESULT_WINDOW_V_SIZE &= ~(REG_RESULT_WINDOW_START_MASK|REG_RESULT_WINDOW_END_MASK);\
							REG_ISP_RESULT_WINDOW_V_SIZE |=(((start<<16) | (line+start)) & (REG_RESULT_WINDOW_START_MASK|REG_RESULT_WINDOW_END_MASK));
#define SET_RESULT_WINDOW_HORIZONTAL_SIZE(start,pixel)	REG_ISP_RESULT_WINDOW_H_SIZE &= ~(REG_RESULT_WINDOW_START_MASK|REG_RESULT_WINDOW_END_MASK);\
							REG_ISP_RESULT_WINDOW_H_SIZE |=(((start<<16) | (pixel+start)) & (REG_RESULT_WINDOW_START_MASK|REG_RESULT_WINDOW_END_MASK));
							
/* macros of TG status register */
#define SYN_VIEW_FINDER_MODE_ENABLE			REG_ISP_TG_STATUS_REG |= REG_TG_STATUS_SYN_VF_DATA_EN_BIT;	

/* macros of CAM reset register */
#define SW_RESET_ISP					REG_ISP_RESET |= REG_CAM_RESET_SW_RESET_BIT;		
#define CLEAR_SW_RESET_ISP				REG_ISP_RESET &= ~REG_CAM_RESET_SW_RESET_BIT;
#define HW_RESET_ISP					REG_ISP_RESET |= REG_CAM_RESET_HW_RESET_BIT;		
#define CLEAR_HW_RESET_ISP				REG_ISP_RESET &= ~REG_CAM_RESET_HW_RESET_BIT;			

/* macros of CAM reset register */
#define RESET_ISP					REG_ISP_RESET |= REG_CAM_RESET_ISP_RESET_BIT;		
#define CLEAR_RESET_ISP					REG_ISP_RESET &= ~REG_CAM_RESET_ISP_RESET_BIT;		

#define SET_TG_OUTPUT_CLK_EXT_DIVIDER(n)	REG_ISP_TG_PHASE_COUNTER1 &= ~REG_TGPC1_CLK_OUTPUT_DIV_MASK; \
											REG_ISP_TG_PHASE_COUNTER1 |= (n<<8);

#define SET_CMOS_RISING_EXT_EDGE(n)	 		REG_ISP_TG_PHASE_COUNTER1 &= ~REG_TGPC1_RISING_EDGE_CLK_CNT_MASK; \
											REG_ISP_TG_PHASE_COUNTER1 |= (n<<4);

#define SET_CMOS_FALLING_EXT_EDGE(n) 		REG_ISP_TG_PHASE_COUNTER1 &= ~REG_TGPC1_FALLING_EDGE_CLK_CNT_MASK; \
											REG_ISP_TG_PHASE_COUNTER1 |= (n<<0);

#define ENABLE_CAMERA_TG2_PHASE_COUNTER			REG_ISP_TG_PHASE_COUNTER2 |= REG_TGPC2_PHASE_COUNTER_ENABLE_BIT;
#define DISABLE_CAMERA_TG2_PHASE_COUNTER		REG_ISP_TG_PHASE_COUNTER2 &= ~REG_TGPC2_PHASE_COUNTER_ENABLE_BIT;
#define ENABLE_CAMERA_CLOCK2_OUTPUT_TO_CMOS		REG_ISP_TG_PHASE_COUNTER2 |= REG_TGPC2_CLK_OUTPUT_ENABLE_BIT;
#define DISABLE_CAMERA_CLOCK2_OUTPUT_TO_CMOS	REG_ISP_TG_PHASE_COUNTER2 &= ~REG_TGPC2_CLK_OUTPUT_ENABLE_BIT;
#define SET_CMOS_CLOCK2_POLARITY_HIGH			REG_ISP_TG_PHASE_COUNTER2 |= REG_TGPC2_CLK_POLARITY_CTRL_BIT;
#define SET_CMOS_CLOCK2_POLARITY_LOW			REG_ISP_TG_PHASE_COUNTER2 &= ~REG_TGPC2_CLK_POLARITY_CTRL_BIT;

#define SET_TG_OUTPUT_CLK2_DIVIDER(n)		REG_ISP_TG_PHASE_COUNTER2 &= ~REG_TGPC2_CLK_OUTPUT_DIV_MASK; \
											REG_ISP_TG_PHASE_COUNTER2 |= (n<<20);

#define SET_CMOS2_RISING_EDGE(n)	 		REG_ISP_TG_PHASE_COUNTER2 &= ~REG_TGPC2_RISING_EDGE_CLK_CNT_MASK; \
											REG_ISP_TG_PHASE_COUNTER2 |= (n<<12);

#define SET_CMOS2_FALLING_EDGE(n) 			REG_ISP_TG_PHASE_COUNTER2 &= ~REG_TGPC2_FALLING_EDGE_CLK_CNT_MASK; \
											REG_ISP_TG_PHASE_COUNTER2 |= (n<<4);
#define ENABLE_CAMERA_PIXEL_CLKIN2_ENABLE		REG_ISP_TG_PHASE_COUNTER2 |= REG_TGPC2_PIXEL_CLKIN_ENABLE_BIT;
#define DISABLE_CAMERA_PIXEL_CLKIN2_ENABLE		REG_ISP_TG_PHASE_COUNTER2 &= ~REG_TGPC2_PIXEL_CLKIN_ENABLE_BIT;
#define ENABLE_CAMERA_TG2_CLK_48M			REG_ISP_TG_PHASE_COUNTER2 |= REG_TGPC2_PIXEL_CLK_SELECT_BIT;
#define DISABLE_CAMERA_TG2_CLK_48M			REG_ISP_TG_PHASE_COUNTER2 &= ~REG_TGPC2_PIXEL_CLK_SELECT_BIT;
#define DISABLE_CAMERA_TG2_CLK_POL 			REG_ISP_TG_PHASE_COUNTER2 &= ~REG_TGPC2_CLKL_POL_BIT
#define ENABLE_CAMERA_TG2_CLK_POL 			REG_ISP_TG_PHASE_COUNTER2 |= REG_TGPC2_CLKL_POL_BIT

/* null macro */
#define ENABLE_CAMERA_INDATA_FORMAT
#define DISABLE_CAMERA_INDATA_FORMAT
#define ENABLE_CAMERA_GMC_OVERRUN_INT
#define DISABLE_CAMERA_GMC_OVERRUN_INT


#define SET_CAMERA_DATAPIN_9_2			
#define SET_CAMERA_DATAPIN_7_0			


#define REG_ISP_INPUT_ADDR				*((volatile unsigned int *) (CAMERA_base + 0x0028)) 

/********** for 6250 ISP Driving Setting***********/

#if defined(MT6250)
#define REG_ISP_DRIVING_MASK        0x00000006

#define REG_ISP_DRIVING             *((volatile unsigned int *) (GPIO_base + 0x830))
#define SET_ISP_MCLK_DRIVING(n)     REG_ISP_DRIVING &= ~REG_ISP_DRIVING_MASK; \
                                        REG_ISP_DRIVING |= (n<<1);

#elif defined(MT6260)
#define REG_ISP_DRIVING_MASK        0x00000006

#define REG_ISP_DRIVING             *((volatile unsigned int *) (GPIO_base + 0x820))
#define SET_ISP_MCLK_DRIVING(n)     REG_ISP_DRIVING &= ~REG_ISP_DRIVING_MASK; \
                                        REG_ISP_DRIVING |= (n<<1);

#elif defined(MT6261)||defined(MT2501)||defined(MT2502)
//QQ
#define REG_ISP_DRIVING_MASK        0x00003000
#define REG_ISP_DRIVING             *((volatile unsigned int *) (GPIO_base + 0x810))

#define SET_ISP_MCLK_DRIVING(n)     REG_ISP_DRIVING &= ~REG_ISP_DRIVING_MASK; \
                                        REG_ISP_DRIVING |= (n<<12);

#endif



#endif /* defined(DRV_ISP_6235_SERIES) && defined(ISP_SUPPORT) && defined(YUV_SENSOR_SUPPORT) */
#endif /* _ISP_IF_6235_SERIES_HW_H_ */
