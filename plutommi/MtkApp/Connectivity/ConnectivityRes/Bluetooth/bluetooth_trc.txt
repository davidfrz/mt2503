[APP NAME] = Bluetooth
[MODULE] = MOD_MMI_CONN_APP
[SCOPE] = PLUTO, COSMOS

#start trace
TRC_MSG(MMI_BT_G7_SCR_PWRON_PROC, "[BTMMI] : Power on in progress ")
TRC_MSG(MMI_BT_G7_SCR_PWROFF, "[BTMMI] : Power off ")
TRC_MSG(MMI_BT_G7_SCR_SHOW_PROGRESSING, "[BTMMI] : Show progressing  SCRID=%Mmmi_screen_id_cgen_enum, group_id = %d,TitleID=%d, ContentID=%d " )
TRC_MSG(MMI_BT_G7_SCR_ENTRY_PROGRESSING, "[BTMMI] : entry progressing  SCRID=%Mmmi_screen_id_cgen_enum,group_id=%d " )
TRC_MSG(MMI_BT_G7_SCR_STOP_PROGRESS, "[BTMMI] : Stop progressing  SCRID=%Mmmi_screen_id_cgen_enum, group_id=%d " )
TRC_MSG(MMI_BT_G7_SCR_SENDPINREQ, "[BTMMI] : Send PIN Request, PinStat = %d, CODE:%x %x %x %x %x %x %x %x " )
TRC_MSG(MMI_BT_G7_SCR_CONN_RFCOM, "[BTMMI] : Send RFCOM connection request " )
TRC_MSG(MMI_BT_G7_SCR_CON_MYDEV, "[BTMMI] : Connect to TrDev " )
TRC_MSG(MMI_BT_G7_SCR_REN, "[BTMMI] : TrDev Rename " )
TRC_MSG(MMI_BT_G7_SCR_DEL_TR, "[BTMMI] : TrDev Delete " )
TRC_MSG(MMI_BT_G7_SCR_DEL_TR_RES, "[BTMMI] : TrDev Delete Done, Res = %d" )
TRC_MSG(MMI_BT_G7_SCR_PROF_CON_IND, "[BTMMI] : Profile Connect Complete, prof = %d, result = %d, connecting_profile = %d, act screen = %d" )
TRC_MSG(MMI_BT_G7_SCR_PROF_DISCON_IND, "[BTMMI] : Profile Disconnect Complete, prof = %d, result = %d, disconnecting_conn_type = %d, act screen = %d" )
TRC_MSG(MMI_BT_G7_SCR_GTIMER_START, "[BTMMI] : Screen Guard Timer Start!" )
TRC_MSG(MMI_BT_G7_SCR_GTIMER_STOP, "[BTMMI] : Screen Guard Timer Stop!" )
TRC_MSG(MMI_BT_G7_SCR_GTIMER_TO, "[BTMMI] : Screen Guard Timer Timeout!" )
TRC_MSG(MMI_BT_G7_SCR_STO_ENDKEY, "[BTMMI] : Store END key handler" )
TRC_MSG(MMI_BT_G7_SCR_RESTO_ENDKEY, "[BTMMI] : Restore END key handler" )
TRC_MSG(MMI_BT_G7_SCR_CLR_ENDKEY, "[BTMMI] : Clear END key handler" )
TRC_MSG(MMI_BT_G7_SCR_EXE_ENDKEY, "[BTMMI] : Execute END key handler" )
TRC_MSG(MMI_BT_G7_SCR_HIGHLIGHT_ITEM, "[BTMMI] : BT MMI SCR Highlight Item(%d)" )
TRC_MSG(MMI_BT_G7_SCR_SCO_IND, "[BTMMI] :SCO ind, result=%d scr_flag=%d" )
TRC_MSG(MMI_BT_G7_SCR_HW_OFF, "[BTMMI] : HW OFF, ready=%d, active connections=%d, power status=%d")
TRC_MSG(MMI_BT_G7_SCR_HW_ON, "[BTMMI] : HW ON, hw_ready=%d, power status=%d" )
TRC_MSG(MMI_BT_G7_HW_READY_TIMER_START, "[BTMMI] : HW Ready Timer Start" )
TRC_MSG(MMI_BT_G7_GEN_UPDATE_STATUS_ICON, "[BTMMI] : BT Status Icon, power_status=%d, connections=%d, a2dp=%d, hfp=%d, earphone=%d" )
TRC_MSG(MMI_BT_G7_GEN_STATUS_ICON_START_BLINK, "[BTMMI] : BT Icon Start Blink, blinking=%d, profile_id =0x%04x, profile role=%d" )
TRC_MSG(MMI_BT_G7_GEN_STATUS_ICON_STOP_BLINK, "[BTMMI] : BT Icon Stop Blink, blinking=%d, profile_id =0x%04x, profile role=%d" )
TRC_MSG(MMI_BT_G7_LP_TEST, "[BTMMI] : LP Test, test_bt_at=%d, lap=0x%06x, uap=0x%02x, nap=0x%04x, pin_code[0]=%d, pin_code[1]=%d, pin_code[2]=%d, pin_code[3]=%d" )
TRC_MSG(MMI_BT_G7_BT_INIT, "[BTMMI] : BT Init" )
TRC_MSG(MMI_BT_G7_BT_SCR_INIT, "[BTMMI] : BT Scr Init" )
TRC_MSG(MMI_BT_G7_BT_PS_HW_INIT, "[BTMMI] : BT PS and HW Init, flight_mode=%d, sim_ready=%d, power=%d" )
TRC_MSG(MMI_BT_G7_BT_LP_TEST_RESULT, "[BTMMI] : LP Test Result, result=%d" )
TRC_MSG(MMI_BT_G7_SCR_INQ_RES_DEL_CB, "[BTMMI] : Inq result screen deleted callback, state=%d" )
TRC_MSG(MMI_BT_G7_SCR_POWER_OFF_GUARD_TIMEOUT, "[BTMMI] : Power off timeout, state=%d" )
TRC_MSG(MMI_BT_G7_SCR_RELEASE_ALL_CONN_GUARD_TIMEOUT, "[BTMMI] : Release all conn timeout, state=%d" )
TRC_MSG(MMI_BT_G7_SCR_INQ_PROGRESS_DEL_CB, "[BTMMI] : Inq progress screen deleted callback, state=%d" )
TRC_MSG(MMI_BT_G7_BT_SCR_STATUS, "[BTMMI] : BT Scr Status, state=%d, flag=0x%08x" )
TRC_MSG(MMI_BT_G7_SCR_PERMISSION_STATUS, "[BTMMI] : Permission Status, power_status=%d" )
TRC_MSG(MMI_BT_G7_SCR_POWER_AND_READY_STATUS, "[BTMMI] : Power and BT stack ready Status, Power=%d, stack_ready=%d" )
TRC_MSG(MMI_BT_G7_BT_DEINIT, "[BTMMI] : BT Deinit" )
TRC_MSG(MMI_BT_G7_BT_TEST_2BYTE_UCS2_CHAR, "[BTMMI] : mmi_bt_test_2bytes_ucs2_char_in_utf8_string, char_num=%d" )
TRC_MSG(MMI_BT_G7_BT_TEST_2BYTE_UCS2_CHAR_FINISH, "[BTMMI] : mmi_bt_test_2bytes_ucs2_char_in_utf8_string finish, found_index=%d" )
TRC_MSG(MMI_BT_G7_BT_ENTRY_COD_DEV_WITH_SER_SELECT_SCREEN, "[BTMMI] : mmi_bt_entry_cod_device_with_service_select_screen: cod = 0x%x, service_id = 0x%x, app_cb = 0x%x" )
TRC_MSG(MMI_BT_G7_BT_ENTRY_COD_DEV_WITH_SER_SELECT_SCREEN_EXT, "[BTMMI] : extended selection screen : lsk_string_id = 0x%x, rsk_string_id = 0x%x, lsk_handler = 0x%x, rsk_handler = 0x%x, nap = 0x%x, uap = 0x%x, lap = 0x%x" )
TRC_MSG(MMI_BT_G7_BT_INQUIRY_SPEC_COD_DEV, "[BTMMI] : mmi_bt_inquiry_specific_cod_dev: app_cb = %x" )
TRC_MSG(MMI_BT_G7_BT_CONNECT_CONFIRM, "[BTMMI] : mmi_bt_entry_connect_confirm: app_cb = %x, flag = 0x%08x" )
TRC_MSG(MMI_BT_G7_BT_SELECT_DEVICE_CB, "[BTMMI] : select_device_cb: result = %d, lap=%x, uap=%x, nap=%x" )
TRC_MSG(MMI_BT_G7_BT_ENTRY_MY_SPEC_DEV_MENU, "[BTMMI] : mmi_bt_entry_my_specific_dev_menu: cod = %x, service_id = %x, app_cb = %x" )
TRC_MSG(MMI_BT_G7_BT_MY_SPEC_DEV_HILITE_HDLR, "[BTMMI] : mmi_bt_my_specific_dev_hilite_hdlr: app_cb = %x" )
TRC_MSG(MMI_BT_G7_BT_SELECT_MY_SPEC_DEV, "[BTMMI] : mmi_bt_select_my_specific_dev: app_cb = %x" )
TRC_MSG(MMI_BT_G7_BT_GET_MATCHED_DEV, "[BTMMI] : mmi_bt_get_matched_dev: item_index = %d, specific_cod = %d, service_id = %d" )
TRC_MSG(MMI_BT_G7_BT_GET_MATCHED_DEV_EXT, "[BTMMI] : mmi_bt_get_matched_dev: item_index = J = %d" )
TRC_MSG(MMI_BT_G7_BT_IS_TO_DISPLAY_BT_MENU, "[BTMMI] : mmi_bt_is_to_display_bt_menu() = %x" )
TRC_MSG(MMI_BT_G7_BT_IS_BT_IN_FLIGHT_MODE, "[BTMMI] : mmi_bt_is_bt_in_flight_mode() = %x" )    
TRC_MSG(MMI_BT_G7_BT_SHOW_POWER_ON_CONFIRM_WITH_AUTO_ON, "[BTMMI] : mmi_bt_show_power_on_confirm_with_auto_on()" )    
TRC_MSG(MMI_BT_G7_BT_ENTRY_DUMMY_SPEC_COD_DEV, "[BTMMI] : mmi_bt_entry_dummy_specific_cod_device: IsBackHistory = %d, flag = 0x%08x, ext flag = 0x%08x, is_redrawing_bk_screens = %d" )
TRC_MSG(MMI_BT_G7_BT_ENTRY_DUMMY_SPEC_COD_DEV_DEL_CB, "[BTMMI] : mmi_bt_dummy_specific_cod_device_del_cb: callback = %x" )
TRC_MSG(MMI_BT_G7_BT_DUMMY_SPEC_COD_DEV_TIMER_EXPIRE, "[BTMMI] : mmi_bt_dummy_specific_cod_device_timer_expire_hdlr: callback = %x" )
TRC_MSG(MMI_BT_G7_BT_POWER_SWITCH_ON_COMPLETE, "[BTMMI] : mmi_bt_power_switch_on_complete: flag = 0x%08x" )    
TRC_MSG(MMI_BT_G7_BT_ENTRY_CONFIRM, "[BTMMI] : mmi_bt_entry_confirm, scr_id = %d, flag = 0x%08x," )    
TRC_MSG(MMI_BT_G7_BT_DISPLAY_CONFIRM_SCR, "[BTMMI] : mmi_bt_display_XXX_confirm_scr: flag = 0x%08x" )    
TRC_MSG(MMI_BT_G7_BT_GET_INT_SUPPRESS_LEVEL, "[BTMMI] : get suppress level,  suppress_switch = %d, suppress_level=0x%08x" )    
TRC_MSG(MMI_BT_G7_BT_SET_INT_SUPPRESS_LEVEL, "[BTMMI] : set suppress level,  curr_suppress_switch = %d, curr_suppress_level=0x%08x, set_suppress_switch = %d, set_suppress_level=0x%08x" )    
TRC_MSG(MMI_BT_G7_BT_SUPPRESS_PROFILE_POPUP, "[BTMMI] : mmi_bt_suppress_profile_popup(),  profile_id = %d, suppress_switch = %d" )       
TRC_MSG(MMI_BT_G7_BT_IS_PROFILE_SUPPRESS_POPUP, "[BTMMI] : mmi_bt_is_profile_suppress_popup(),  connection_type = %d, result = %d" )          
TRC_MSG(MMI_BT_G7_BT_IS_RECEVING_DATA, "[BTMMI] : mmi_bt_is_receving_data: result = %d" )
TRC_MSG(MMI_BT_G7_BT_SET_SCR_FLAG, "[BTMMI] : Set Screen Flag, flag =0x%08x --> 0x%08x" )
TRC_MSG(MMI_BT_G7_BT_RESET_SCR_FLAG, "[BTMMI] : Reset Screen Flag, flag=0x%08x --> 0x%08x" )    
TRC_MSG(MMI_BT_G7_BT_SET_SCR_EXT_FLAG, "[BTMMI] : Set Screen Ext Flag, ext flag=0x%08x --> 0x%08x" )
TRC_MSG(MMI_BT_G7_BT_RESET_SCR_EXT_FLAG, "[BTMMI] : Reset Screen Ext Flag, ext flag=0x%08x --> 0x%08x" )    
TRC_MSG(MMI_BT_G7_BT_SET_SCR_BLINK_FLAG, "[BTMMI] : Set Screen Blink Flag, blink flag=0x%08x --> 0x%08x" )
TRC_MSG(MMI_BT_G7_BT_RESET_SCR_BLINK_FLAG, "[BTMMI] : Reset Screen Blink Flag, blink flag=0x%08x --> 0x%08x" )    
TRC_MSG(MMI_BT_G7_BT_SET_SCR_STATE, "[BTMMI] : g_mmi_bt_scr_cntx.state = %d" )        
TRC_MSG(MMI_BT_G7_BT_SET_HILIGHT_ITEM, "[BTMMI] : g_mmi_bt_scr_cntx.hilight_item = %d" )            
TRC_MSG(MMI_BT_G7_BT_SET_CONN_PROF_HILIGHT_ITEM, "[BTMMI] : g_mmi_bt_scr_cntx.conn_prof_hilight_item = %d" )            
TRC_MSG(MMI_BT_G7_BT_SET_AUTHORIZE_HILIGHT_ITEM, "[BTMMI] : g_mmi_bt_scr_cntx.authorize_hilight_item = %d" )            
TRC_MSG(MMI_BT_G7_BT_SET_AUTHENTICATE_DEVICE_INDEX, "[BTMMI] : g_mmi_bt_scr_cntx.authenticate_device_index = %d" )            
TRC_MSG(MMI_BT_G7_BT_SET_CONN_PROFILE_ID, "[BTMMI] : g_mmi_bt_scr_cntx.conn_profile_id = %d" )                
TRC_MSG(MMI_BT_G7_BT_SET_CONNECTING_PROFILE, "[BTMMI] : g_mmi_bt_scr_cntx.connecting_profile = %d" )                        
TRC_MSG(MMI_BT_G7_BT_SET_DISCONNECTING_CONN_TYPE, "[BTMMI] : g_mmi_bt_scr_cntx.disconnecting_conn_type = %d" )                            
TRC_MSG(MMI_BT_G7_BT_ENTRY_BLOCK_CONFIRM, "[BTMMI] : mmi_bt_block_device_confirmation, prof_id = 0x%x, BD_ADDR= 0x%02x:0x%02x:0x%02x:0x%02x:0x%02x:0x%02x" )    
TRC_MSG(MMI_BT_G7_BT_CONNECT_ACCEPT_REQ, "[BTMMI] : mmi_bt_connect_accept_cnf_req: prof_id = 0x%x, nap = 0x%x, uap = 0x%x, lap = 0x%x" )
TRC_MSG(MMI_BT_G7_BT_AUTO_ON, "[BTMMI] : bt auto on: power=%d, stack_ready=%d" )
TRC_MSG(MMI_BT_G7_BT_ENTRY_POWER_SWITCH_WITH_AUTO_ON, "[BTMMI] : mmi_bt_entry_power_switch_with_auto_on()" )
TRC_MSG(MMI_BT_G7_BT_AUTO_OFF, "[BTMMI] : bt auto off: power=%d, stack_ready=%d, is_auto_pwr_switch=%d, any_connect_exist=%d" )
TRC_MSG(MMI_BT_G7_BT_REGISTER_PWR_ON_CALLBACK, "[BTMMI] : register pwr callback: callback=0x%x" )
TRC_MSG(MMI_BT_G7_BT_REGISTER_PWR_ON_CALLBACK_WITH_RESULT, "[BTMMI] : register pwr callback with result: callback=0x%x" )
TRC_MSG(MMI_BT_G7_BT_INVOKE_PWR_ON_CALLBACK_WITH_RESULT, "[BTMMI] : invoke pwr callback with result: callback=0x%x, result=%d" )
TRC_MSG(MMI_BT_G7_BT_SET_SPK_VOLUME_REQ, "[BTMMI] : set speaker volume: volume_gain = %d" )
TRC_MSG(MMI_BT_G7_BT_INVOKE_PWR_ON_CALLBACK, "[BTMMI] : invoke pwr callback : callback=0x%x" )
TRC_MSG(MMI_BT_G7_BT_PROFILE_UUID, "[BTMMI] : Profile UUID : profile =0x%x" )
TRC_MSG(MMI_BT_G7_BT_IS_HF_CAR_KIT_CONNECTED, "[BTMMI] : mmi_bt_is_hf_car_kit_connected() = %d" )        
TRC_MSG(MMI_BT_G7_BT_RESET_HW_ON, "[BTMMI] : mmi_bt_reset_hw_on() " )
TRC_MSG(MMI_BT_G7_BT_RESET_HW_OFF, "[BTMMI] : mmi_bt_reset_hw_off() " )    
TRC_MSG(MMI_BT_G7_BT_INQUIRY_OPP_DEV, "[BTMMI] : mmi_bt_inquiry_opp_dev() " )        
TRC_MSG(MMI_BT_G7_BT_INQUIRY_A2DP_DEV, "[BTMMI] : mmi_bt_inquiry_a2dp_dev() " )        
TRC_MSG(MMI_BT_G7_BT_INQUIRY_REMOTE_CTRL_DEV, "[BTMMI] : mmi_bt_inquiry_remote_ctrl_dev() " )            
TRC_MSG(MMI_BT_G7_BT_INQUIRY_PRINTER_DEV, "[BTMMI] : mmi_bt_inquiry_printer_dev() " )                
TRC_MSG(MMI_BT_G7_BT_OPEN, "[BTMMI] : mmi_bt_open() " )                    
TRC_MSG(MMI_BT_G7_BT_CLOSE, "[BTMMI] : mmi_bt_close() " )                        
TRC_MSG(MMI_BT_G7_BT_DELAY_AUTO_OFF, "[BTMMI] : mmi_bt_delay_auto_off() " )                        
TRC_MSG(MMI_BT_G7_BT_GET_HILIGHT_INDEX_OF_DISCOV_DEV, "[BTMMI] : mmi_bt_get_hilight_index_of_discov_dev() = %d" )
TRC_MSG(MMI_BT_G7_BT_GET_DISCOVERYED_DEV_INFO, "[BTMMI] : mmi_bt_get_discoveryed_dev_info(), index = %d, result = %d" )
TRC_MSG(MMI_BT_G7_BT_MAIN_HILIGHT_HANDLER, "[BTMMI] : mmi_bt_main_hilight_handler()" )    
TRC_MSG(MMI_BT_G7_BT_MAIN_EXIT_HANDLER, "[BTMMI] : mmi_bt_main_menu_exit_hdler()" )        
TRC_MSG(MMI_BT_G7_BT_ENTRY_MAIN_MENU, "[BTMMI] : mmi_bt_entry_main_menu()" )            
TRC_MSG(MMI_BT_G7_BT_ENTRY_POWER_SWITCH, "[BTMMI] : mmi_bt_entry_power_switch()" )                
TRC_MSG(MMI_BT_G7_BT_RELEASE_ALL_CONNECTIONS, "[BTMMI] : mmi_bt_entry_release_all_connections()" )                    
TRC_MSG(MMI_BT_G7_BT_RELEASE_ALL_CONN_COMPLETE, "[BTMMI] : mmi_bt_release_all_conn_complete(), result = %d" )                        
TRC_MSG(MMI_BT_G7_BT_RELEASE_ALL_CONN_GUARD_TIMEOUT_GOBACK_HISTORY_HDLER, "[BTMMI] : mmi_bt_release_all_conn_guard_timeout_goback_history_hdler()" )                            
TRC_MSG(MMI_BT_G7_BT_POWER_SWITCH_CONFIRM_RSK_HDLER, "[BTMMI] : mmi_bt_power_switch_confirm_rsk_hdler()" )
TRC_MSG(MMI_BT_G7_BT_ENTRY_RELEASE_DEVICE_CONNECTIONS, "[BTMMI] : mmi_bt_entry_release_device_connections()" )
TRC_MSG(MMI_BT_G7_BT_POWER_SWITCH_OFF_COMPLETE, "[BTMMI] : mmi_bt_power_switch_off_complete(), result = %d" )
TRC_MSG(MMI_BT_G7_BT_BLOCK_DEVICE_CONFIRMATION, "[BTMMI] : mmi_bt_block_device_confirmation(), lap = 0x%x, uap = 0x%x, nap = 0x%x, profile_id = %d" )
TRC_MSG(MMI_BT_G7_BT_ENTRY_BLOCK_CONFIRMATION, "[BTMMI] : mmi_bt_entry_block_confirmation()" )
TRC_MSG(MMI_BT_G7_BT_BLOCK_CONFIRMATION_BLOCKED, "[BTMMI] : mmi_bt_block_confirmation_blocked()" )
TRC_MSG(MMI_BT_G7_BT_BLOCK_CONFIRMATION_UNBLOCKED, "[BTMMI] : mmi_bt_block_confirmation_unblocked()" )
TRC_MSG(MMI_BT_G7_BT_ENTRY_INQ_AUD_DEV, "[BTMMI] : mmi_bt_entry_inq_aud_dev()" )
TRC_MSG(MMI_BT_G7_BT_ENTRY_INQ_AUD_DEV_CONFIRM_RSK_HDLER, "[BTMMI] : mmi_bt_inq_aud_dev_confirm_rsk_hdler()" )
TRC_MSG(MMI_BT_G7_BT_INQUIRY, "[BTMMI] : mmi_bt_inquiry(), max_response = %d, timeout = %d, cod = %d, name_discovery = %d, inquiry_type = %d" )
TRC_MSG(MMI_BT_G7_BT_GET_DISCOVERED_ITEM, "[BTMMI] : mmi_bt_get_discovered_item(), item_index = %d" )
TRC_MSG(MMI_BT_G7_BT_GET_DISCOVERED_ITEM_HINT, "[BTMMI] : mmi_bt_get_discovered_item_hint(), item_index = %d" )
TRC_MSG(MMI_BT_G7_BT_ENTRY_INQ_RESULT, "[BTMMI] : mmi_bt_entry_inq_result()" )
TRC_MSG(MMI_BT_G7_BT_EXIT_INQ_RESULT, "[BTMMI] : mmi_bt_exit_inq_result()" )
TRC_MSG(MMI_BT_G7_BT_INQ_RESULT_HILITE_HDLR, "[BTMMI] : mmi_bt_inq_result_hilite_hdlr(), ind = %d" )
TRC_MSG(MMI_BT_G7_BT_INQ_COMPLETE, "[BTMMI] : mmi_bt_inq_complete(), result = %d" )    
TRC_MSG(MMI_BT_G7_BT_INQ_RESULT_CANCEL, "[BTMMI] : mmi_bt_inq_result_cancel()" )        
TRC_MSG(MMI_BT_G7_BT_INQ_RESULT_GOBACK, "[BTMMI] : mmi_bt_inq_result_goback()" )            
TRC_MSG(MMI_BT_G7_BT_INQ_RESULT_ENDKEY, "[BTMMI] : mmi_bt_inq_result_endkey()" )            
TRC_MSG(MMI_BT_G7_BT_ENTRY_BONDING, "[BTMMI] : mmi_bt_entry_bonding()" )                
TRC_MSG(MMI_BT_G7_BT_OPP_SENDING, "[BTMMI] : mmi_bt_opp_sending()" )                
TRC_MSG(MMI_BT_G7_BT_SHOW_PASSKEY_INPUT_SCREEN, "[BTMMI] : mmi_bt_show_passkey_input_screen()" )                
TRC_MSG(MMI_BT_G7_BT_ENTRY_PASSKEY_INPUT, "[BTMMI] : mmi_bt_entry_passkey_input()" )                
TRC_MSG(MMI_BT_G7_BT_EXIT_PASSKEY_INPUT, "[BTMMI] : mmi_bt_exit_passkey_input()" )
TRC_MSG(MMI_BT_G7_BT_PASSKEY_VALIDATION_FUNC, "[BTMMI] : mmi_bt_passkey_validation_func()" )    
TRC_MSG(MMI_BT_G7_BT_SEND_PASSKEY, "[BTMMI] : mmi_bt_send_passkey()" )    
TRC_MSG(MMI_BT_G7_BT_PASSKEY_INPUT_SCR_DEL_CALLBACK, "[BTMMI] : mmi_bt_passkey_input_scr_del_callback()" )    
TRC_MSG(MMI_BT_G7_BT_PASSKEY_INPUT_GOBACK, "[BTMMI] : mmi_bt_passkey_input_goback()" )    
TRC_MSG(MMI_BT_G7_BT_PASSKEY_INPUT_ENDKEY, "[BTMMI] : mmi_bt_passkey_input_endkey()" )    
TRC_MSG(MMI_BT_G7_BT_PASSKEY_INPUT_TIMEOUT_HDLR, "[BTMMI] : mmi_bt_passkey_input_timeout_hdlr()" )    
TRC_MSG(MMI_BT_G7_BT_ENTRY_PAIR_RESULT, "[BTMMI] : mmi_bt_entry_pair_result(), res = %d" )    
TRC_MSG(MMI_BT_G7_BT_ENTRY_BOND_RESULT, "[BTMMI] : mmi_bt_entry_bond_result(), res = %d" )    
TRC_MSG(MMI_BT_G7_BT_SECURITY_USER_CONFIRM, "[BTMMI] : mmi_bt_security_user_confirm(), lap = 0x%x, uap = 0x%x, nap = 0x%x" )    
TRC_MSG(MMI_BT_G7_BT_ENTRY_SECURITY_USER_CONFIRM, "[BTMMI] : mmi_bt_entry_security_user_confirm()" )    
TRC_MSG(MMI_BT_G7_BT_NEMERIC_CONFIRM_YES, "[BTMMI] : mmi_bt_numeric_confirm_yes()" )    
TRC_MSG(MMI_BT_G7_BT_NEMERIC_CONFIRM_NO, "[BTMMI] : mmi_bt_numeric_confirm_no()" )    
TRC_MSG(MMI_BT_G7_BT_NEMERIC_CONFIRM_SCR_DEL_CB, "[BTMMI] : mmi_bt_numeric_confirm_scr_del_cb()" )    
TRC_MSG(MMI_BT_G7_BT_SECURITY_PASSKEY_NOTIFY, "[BTMMI] : mmi_bt_security_passkey_notify(), lap = 0x%x, uap = 0x%x, nap = 0x%x" )    
TRC_MSG(MMI_BT_G7_BT_ENTRY_SECURITY_PASSKEY_NOTIFY, "[BTMMI] : mmi_bt_entry_security_passkey_notify()" )    
TRC_MSG(MMI_BT_G7_BT_KEYPRESS_NOTIFY_CANCEL, "[BTMMI] : mmi_bt_keypress_notify_cancel()" )    
TRC_MSG(MMI_BT_G7_BT_PASSKEY_NOTIFY_SCR_DEL_CB, "[BTMMI] : mmi_bt_passkey_notify_scr_del_cb()" )    
TRC_MSG(MMI_BT_G7_BT_ENTRY_SECURITY_KEYPRESS_NOTIFY, "[BTMMI] : mmi_bt_entry_security_keypress_notify(), lap = 0x%x, uap = 0x%x, nap = 0x%x" )    
TRC_MSG(MMI_BT_G7_BT_EXIT_CONNECT_CONFIRM, "[BTMMI] : mmi_bt_exit_connect_confirm()" )        
TRC_MSG(MMI_BT_G7_BT_CONNECT_CONFIRM_GOBACK, "[BTMMI] : mmi_bt_connect_confirm_goback()" )        
TRC_MSG(MMI_BT_G7_BT_CONNECT_CONFIRM_ENDKEY, "[BTMMI] : mmi_bt_connect_confirm_endkey()" )            
TRC_MSG(MMI_BT_G7_BT_ENTRY_CONNECTING, "[BTMMI] : mmi_bt_entry_connecting()" )            
TRC_MSG(MMI_BT_G7_BT_CONNECTING, "[BTMMI] : mmi_bt_connecting()" )            
TRC_MSG(MMI_BT_G7_BT_CONNECTING_HSP, "[BTMMI] : mmi_bt_connecting_hsp()" )
TRC_MSG(MMI_BT_G7_BT_EXIT_CONNECT_ACCEPT_CNF, "[BTMMI] : mmi_bt_exit_connect_accept_cnf()" )
TRC_MSG(MMI_BT_G7_BT_CONNECT_ACCEPT_CNF_SCR_DEL_CALLBACK, "[BTMMI] : mmi_bt_connect_accept_cnf_scr_del_callback()" )    
TRC_MSG(MMI_BT_G7_BT_ENTRY_CONNECT_ACCEPT_CNF, "[BTMMI] : mmi_bt_entry_connect_accept_cnf()" )        
TRC_MSG(MMI_BT_G7_BT_CONNECT_ACCEPT_CNF_ACCEPTED, "[BTMMI] : mmi_bt_connect_accept_cnf_accepted()" )        
TRC_MSG(MMI_BT_G7_BT_CONNECT_ACCEPT_CNF_REJECTED, "[BTMMI] : mmi_bt_connect_accept_cnf_rejected()" )        
TRC_MSG(MMI_BT_G7_BT_CONNECT_ACCEPT_CNF_TIMEOUT, "[BTMMI] : mmi_bt_connect_accept_cnf_timeout()" )            
TRC_MSG(MMI_BT_G7_BT_CONNECT_ACCEPT_CNF_END_KEY, "[BTMMI] : mmi_bt_connect_accept_cnf_end_key()" )        
TRC_MSG(MMI_BT_G7_BT_BLOCK_DEVICE, "[BTMMI] : mmi_bt_block_device()" )            
TRC_MSG(MMI_BT_G7_BT_UNBLOCK_DEVICE, "[BTMMI] : mmi_bt_unblock_device()" )            
TRC_MSG(MMI_BT_G7_BT_BLOCK_COMPLETE, "[BTMMI] : mmi_bt_block_complete(), result = %d" )            
TRC_MSG(MMI_BT_G7_BT_UNBLOCK_COMPLETE, "[BTMMI] : mmi_bt_unblock_complete(), result = %d" )                
TRC_MSG(MMI_BT_G7_BT_ENTRY_MYDEV_MENU, "[BTMMI] : mmi_bt_entry_mydev_menu()" )                
TRC_MSG(MMI_BT_G7_BT_UPDATE_MYDEV_MENU, "[BTMMI] : mmi_bt_update_mydev_menu()" )                
TRC_MSG(MMI_BT_G7_BT_ENTRY_MYDEV_UNBLOCK, "[BTMMI] : mmi_bt_entry_mydev_unblock()" )                
TRC_MSG(MMI_BT_G7_BT_ENTRY_MYDEV_OPT, "[BTMMI] : mmi_bt_entry_mydev_opt()" )                    
TRC_MSG(MMI_BT_G7_BT_UPDATE_MYDEV_OPT, "[BTMMI] : mmi_bt_update_mydev_opt()" )                    
TRC_MSG(MMI_BT_G7_BT_MYDEV_OPT_HILITE_HDLR, "[BTMMI] : mmi_bt_mydev_opt_hilite_hdlr(), idx = %d" )
TRC_MSG(MMI_BT_G7_BT_ENTRY_MYDEV_PROF_CHOOSE, "[BTMMI] : mmi_bt_entry_mydev_prof_choose()" )
TRC_MSG(MMI_BT_G7_BT_PROF_CHOOSE_REFRESH_PROF_LIST, "[BTMMI] : mmi_bt_prof_choose_refresh_prof_list()" )
TRC_MSG(MMI_BT_G7_BT_REFRESH_PROF_COMPLETE, "[BTMMI] : mmi_bt_refresh_prof_complete(), result = %d" )
TRC_MSG(MMI_BT_G7_BT_ENTRY_MYDEV_CONN, "[BTMMI] : mmi_bt_entry_mydev_conn()" )
TRC_MSG(MMI_BT_G7_BT_SET_N_ITEMS, "[BTMMI] : nItems = %d" )        
TRC_MSG(MMI_BT_G7_BT_ENTRY_MYDEV_CONNECT_AUDIO_DEVICE, "[BTMMI] : mmi_bt_entry_mydev_connect_audio_device()" )
TRC_MSG(MMI_BT_G7_BT_ENTRY_RELEASE_AUDIO_DEVICE_CONNECT_CONFIRM_RSK_HDLER, "[BTMMI] : mmi_bt_entry_release_audio_device_connect_confirm_rsk_hdler()" )    
TRC_MSG(MMI_BT_G7_BT_ENTRY_RELEASE_AUDIO_DEVICE_CONNECT_CONFIRM_DEL_CB, "[BTMMI] : mmi_bt_entry_release_audio_device_connect_confirm_del_cb()" )        
TRC_MSG(MMI_BT_G7_BT_ENTRY_RELEASE_AUDIO_DEVICE_CONNECT_CONFIRM, "[BTMMI] : mmi_bt_entry_release_audio_device_connect_confirm()" )
TRC_MSG(MMI_BT_G7_BT_ENTRY_MYDEV_CONNECTED_PROF, "[BTMMI] : mmi_bt_entry_mydev_connected_prof()" )
TRC_MSG(MMI_BT_G7_BT_UPDATE_MYDEV_CONNECTED_PROF_SCREEN, "[BTMMI] : mmi_bt_update_mydev_connected_prof_screen()" )
TRC_MSG(MMI_BT_G7_BT_MYDEV_CONNECTED_PROF_DISCONN, "[BTMMI] : mmi_bt_mydev_connected_prof_disconn()" )
TRC_MSG(MMI_BT_G7_BT_ENTRY_MYDEV_SET_DEFAULT_HS, "[BTMMI] : mmi_bt_entry_mydev_set_default_hs()" )
TRC_MSG(MMI_BT_G7_BT_ENTRY_MYDEV_REN_EDOPT, "[BTMMI] : mmi_bt_entry_mydev_ren_edopt()" )
TRC_MSG(MMI_BT_G7_BT_ENTRY_MYDEV_REN_EDOPT_HILITE_HDLR, "[BTMMI] : mmi_bt_mydev_ren_edopt_hilite_hdlr(), idx = %d" )
TRC_MSG(MMI_BT_G7_BT_ENTRY_MYDEV_REN_PROC, "[BTMMI] : mmi_bt_mydev_ren_proc()" )
TRC_MSG(MMI_BT_G7_BT_ENTRY_MYDEV_AUTHORIZE, "[BTMMI] : mmi_bt_entry_mydev_authorize()" )
TRC_MSG(MMI_BT_G7_BT_ENTRY_MYDEV_DELETE_CONFIRM, "[BTMMI] : mmi_bt_entry_mydev_delete_confirm()" )
TRC_MSG(MMI_BT_G7_BT_ENTRY_MYDEV_DELETE_ALL_CONFIRM, "[BTMMI] : mmi_bt_entry_mydev_delete_all_confirm()" )
TRC_MSG(MMI_BT_G7_BT_ENTRY_MYDEV_DELETE_ALL, "[BTMMI] : mmi_bt_entry_mydev_del_all()" )    
TRC_MSG(MMI_BT_G7_BT_ENTRY_MYDEV_SUP_SER, "[BTMMI] : mmi_bt_entry_mydev_sup_ser()" )        
TRC_MSG(MMI_BT_G7_BT_SUP_SER_REFRESH_PROF_LIST, "[BTMMI] : mmi_bt_sup_ser_refresh_prof_list()" )        
TRC_MSG(MMI_BT_G7_BT_ENTRY_MYDEV_SCH, "[BTMMI] : mmi_bt_entry_mydev_sch()" )        
TRC_MSG(MMI_BT_G7_BT_ENTRY_ACT_DEV_MENU, "[BTMMI] : mmi_bt_entry_act_dev_menu()" )        
TRC_MSG(MMI_BT_G7_BT_UPDATE_ACT_DEV_MENU, "[BTMMI] : mmi_bt_update_act_dev_screen()" )        
TRC_MSG(MMI_BT_G7_BT_ACT_DEV_HILITE_HDLR, "[BTMMI] : mmi_bt_act_dev_hilite_hdlr(), idx = %d" )        
TRC_MSG(MMI_BT_G7_BT_ENTRY_ACT_DEV_DIS, "[BTMMI] : mmi_bt_entry_act_dev_dis()" )        
TRC_MSG(MMI_BT_G7_BT_ENTRY_DISCONNECT_WITH_CONN_ID_COMPLETE, "[BTMMI] : mmi_bt_entry_disconnect_with_conn_id_complete(), conn_id = %d" )        
TRC_MSG(MMI_BT_G7_BT_ENTRY_SET_MENU, "[BTMMI] : mmi_bt_entry_set_menu()" )
TRC_MSG(MMI_BT_G7_BT_ENTRY_SET_VIS, "[BTMMI] : mmi_bt_entry_set_vis()" )
TRC_MSG(MMI_BT_G7_BT_SET_VIS_PROC, "[BTMMI] : mmi_bt_set_vis_proc()" )
TRC_MSG(MMI_BT_G7_BT_SET_TEMP_VIS_TIMEOUT, "[BTMMI] : mmi_bt_set_temp_vis_timeout()" )    
TRC_MSG(MMI_BT_G7_BT_SET_VIS_COMPLETE, "[BTMMI] : mmi_bt_set_vis_complete()" )    
TRC_MSG(MMI_BT_G7_BT_ENTRY_SET_AUTH, "[BTMMI] : mmi_bt_entry_set_auth()" )    
TRC_MSG(MMI_BT_G7_BT_SET_AUTH_COMPLETE, "[BTMMI] : mmi_bt_set_auth_complete(), result = %d" )    
TRC_MSG(MMI_BT_G7_BT_ENTRY_SET_NAME, "[BTMMI] : mmi_bt_entry_set_name()" )    
TRC_MSG(MMI_BT_G7_BT_SET_NAME_OPT, "[BTMMI] : mmi_bt_set_name_opt()" )    
TRC_MSG(MMI_BT_G7_BT_SET_NAME_OPT_HILITE_HDLR, "[BTMMI] : mmi_bt_set_name_opt_hilite_hdlr(), idx = %d" )    
TRC_MSG(MMI_BT_G7_BT_SET_NAME_PROC, "[BTMMI] : mmi_bt_set_name_proc()" )    
TRC_MSG(MMI_BT_G7_BT_ENTRY_SET_AUDIO_PTH_MENU, "[BTMMI] : mmi_bt_entry_set_audio_pth_menu()" )    
TRC_MSG(MMI_BT_G7_BT_SET_AUDIO_PTH_PROC, "[BTMMI] : mmi_bt_set_audio_pth_proc()" )    
TRC_MSG(MMI_BT_G7_BT_ENTRY_BLOCK_LIST_MENU, "[BTMMI] : mmi_bt_entry_block_list_menu()" )    
TRC_MSG(MMI_BT_G7_BT_BLOCK_LIST_HILITE_HDLR, "[BTMMI] : mmi_bt_block_list_hilite_hdlr(), idx = %d" )    
TRC_MSG(MMI_BT_G7_BT_ENTRY_SET_SIMAP, "[BTMMI] : mmi_bt_entry_set_simap()" )    
TRC_MSG(MMI_BT_G7_BT_SET_SIMAP_COMPLETE, "[BTMMI] : mmi_bt_set_simap_complete(), result = %d" )    
TRC_MSG(MMI_BT_G7_BT_ENTRY_MYDEV_AUTHORIZE_PROC, "[BTMMI] : mmi_bt_mydev_authorize_proc()" )    
TRC_MSG(MMI_BT_G7_BT_SET_NAME_PROC_COMPLETE, "[BTMMI] : mmi_bt_set_name_proc_complete(), result = %d")
TRC_MSG(MMI_BT_G7_BT_IS_DEFAULT_HS_EXISTED, "[BTMMI] : mmi_bt_is_default_hs_existed(), result = %d")
TRC_MSG(MMI_BT_G7_BT_AUTH_DEV_HDLER, "[BTMMI] : mmi_bt_auth_dev_hdler()")
TRC_MSG(MMI_BT_G7_BT_ENTRY_AUTH_CONFIRM, "[BTMMI] : mmi_bt_entry_auth_confirm()")
TRC_MSG(MMI_BT_G7_BT_ENTRY_ABOUT, "[BTMMI] : mmi_bt_entry_about()")
TRC_MSG(MMI_BT_G7_BT_ENTRY_SPECIFIC_COD_DEVICE, "[BTMMI] : mmi_bt_entry_specific_cod_device(), cod_mask = %d")
TRC_MSG(MMI_BT_G7_BT_ENTRY_COD_DEVICE_CALL_STATUS_CB, "[BTMMI] : mmi_bt_entry_cod_device_call_status_cb()")
TRC_MSG(MMI_BT_G7_BT_DISPLAY_POWER_ON_CONFIRM, "[BTMMI] : mmi_bt_display_power_on_confirm(), flag = %d")    
TRC_MSG(MMI_BT_G7_BT_ENTRY_POWER_ON_CONFIRM, "[BTMMI] : mmi_bt_entry_power_on_confirm()")    
TRC_MSG(MMI_BT_G7_BT_ENTRY_POWER_ON_CONFIRM_DEL_CB, "[BTMMI] : mmi_bt_entry_power_on_confirm_del_cb()")    
TRC_MSG(MMI_BT_G7_BT_ENTRY_POWER_ON_CONFIRM_RSK_HDLER, "[BTMMI] : mmi_bt_entry_power_on_confirm_rsk_hdler()")    
TRC_MSG(MMI_BT_G7_BT_DISPLAY_RELEASE_ALL_CONNTION_CONFIRM, "[BTMMI] : mmi_bt_display_release_all_connection_confirm(), flag = %d")    
TRC_MSG(MMI_BT_G7_BT_ENTRY_RELEASE_ALL_CONNTION_CONFIRM, "[BTMMI] : mmi_bt_entry_release_all_connection_confirm()")    
TRC_MSG(MMI_BT_G7_BT_ENTRY_RELEASE_ALL_CONNTION_CONFIRM_DEL_CB, "[BTMMI] : mmi_bt_entry_release_all_connection_confirm_del_cb()")    
TRC_MSG(MMI_BT_G7_BT_DISPLAY_RELEASE_DEV_CONNECTION_CONFIRM, "[BTMMI] : mmi_bt_display_release_dev_connection_confirm(), flag = %d")    
TRC_MSG(MMI_BT_G7_BT_ENTRY_RELEASE_DEV_CONNECTION_CONFIRM, "[BTMMI] : mmi_bt_entry_release_dev_connection_confirm()")    
TRC_MSG(MMI_BT_G7_BT_ENTRY_RELEASE_DEV_CONNECTION_CONFIRM_DEL_CB, "[BTMMI] : mmi_bt_entry_release_dev_connection_confirm_del_cb()")    
TRC_MSG(MMI_BT_G7_BT_DISPLAY_CONNECT_PROFILE_CONNECTION_CONFIRM, "[BTMMI] : mmi_bt_display_connect_profile_connection_confirm(), flag = %d")    
TRC_MSG(MMI_BT_G7_BT_ENTRY_CONNECT_PROFILE_CONNECTION_CONFIRM, "[BTMMI] : mmi_bt_entry_connect_profile_connection_confirm()")        
TRC_MSG(MMI_BT_G7_BT_ENTRY_CONNECT_PROFILE_CONNECTION_CONFIRM_DEL_CB, "[BTMMI] : mmi_bt_entry_connect_profile_connection_confirm_del_cb()")        
TRC_MSG(MMI_BT_G7_BT_GET_SELECTED_SPECIFIC_DEVICE_INFO, "[BTMMI] : mmi_bt_get_selected_specfic_device_info()")        
TRC_MSG(MMI_BT_G7_BT_GET_DEFAULT_HEADSET_DEVICE_NAME, "[BTMMI] : mmi_bt_get_default_headset_device_name()")        
TRC_MSG(MMI_BT_G7_BT_SHOW_POPUP_SCR, "[BTMMI] : mmi_bt_show_popup_scr()")        
TRC_MSG(MMI_BT_G7_BT_GET_PROGRESS_SCR, "[BTMMI] : mmi_bt_get_progress_scr() = %d")
TRC_MSG(MMI_BT_G7_BT_SHOW_CONFIRM_SCR, "[BTMMI] : mmi_bt_show_confirm_scr() ,scr_id = %d, msg_id = %d")
TRC_MSG(MMI_BT_G7_BT_SHOW_EXCEED_MAX_PAIRED_DEVICE_POPUP, "[BTMMI] : mmi_bt_show_exceed_max_paired_device_popup()")
TRC_MSG(MMI_BT_G7_BT_ERROR, "[BTMMI] : mmi_bt_error()")
TRC_MSG(MMI_BT_G7_BT_PANIC_IND_PRE_PROCESS, "[BTMMI] : mmi_bt_panic_ind_pre_process()")
TRC_MSG(MMI_BT_G7_BT_PANIC_IND_POST_PROCESS, "[BTMMI] : mmi_bt_panic_ind_post_process()")
TRC_MSG(MMI_BT_G7_BT_SET_SCR_FLAG_AS_ZERO, "[BTMMI] : mmi_bt_reset_scr_flag()")
TRC_MSG(MMI_BT_G7_BT_DEL_SCR, "[BTMMI] : mmi_bt_del_scr(), start_scrid = %Mmmi_screen_id_cgen_enum, end_scrid = %Mmmi_screen_id_cgen_enum")
TRC_MSG(MMI_BT_G7_BT_CHECK_SUPPORTED_PROFILE, "[BTMMI] : mmi_bt_check_supported_profile(), profile_id = %d, result = %d")
TRC_MSG(MMI_BT_G7_BT_CHECK_SUPPORTED_CONNECTION_TYPE, "[BTMMI] : mmi_bt_check_supported_connection_type(), connetion_type = %d, result = %d")
TRC_MSG(MMI_BT_G7_BT_CONNECTING_PRE_CHECK, "[BTMMI] : mmi_bt_connecting_pre_check(), pro_uuid = %d, result = %d")
TRC_MSG(MMI_BT_G7_BT_GET_PROFILE_STR_ID, "[BTMMI] : mmi_bt_get_profile_str_id(), profile_uuid = %d, result = %d")
TRC_MSG(MMI_BT_G7_BT_GET_CONNECT_TYPE_STR_ID, "[BTMMI] : mmi_bt_get_connect_type_str_id(), conn_type = %d, result = %d")
TRC_MSG(MMI_BT_G7_BT_IS_POWER_ON, "[BTMMI] : mmi_bt_is_power_on() = %d")
TRC_MSG(MMI_BT_G7_BT_SET_HEADSET_SPEAKER_VOLUME, "[BTMMI] : mmi_bt_set_headset_speaker_volume(), ui_volume_level = %d")
TRC_MSG(MMI_BT_G7_BT_HFP_SCO_LINK_CONNECT_REQ, "[BTMMI] : mmi_bt_hfp_sco_link_connect_req()")
TRC_MSG(MMI_BT_G7_BT_HFP_SCO_LINK_DISCONNECT_REQ, "[BTMMI] : mmi_bt_hfp_sco_link_disconnect_req()")
TRC_MSG(MMI_BT_G7_BT_CONNECT_LAST_HEADSET, "[BTMMI] : mmi_bt_connect_last_headset()")
TRC_MSG(MMI_BT_G7_BT_GET_ACTIVE_SIGNAL_CONNECTION_ID, "[BTMMI] : mmi_bt_get_active_signal_connection_id(), profile_uuid = %d, conn_id = %d")
TRC_MSG(MMI_BT_G7_BT_IS_A2DP_CONNECT, "[BTMMI] : mmi_bt_is_a2dp_connected() = %d")
TRC_MSG(MMI_BT_G7_BT_HOST_DEVICE_POWER_OFF_PRE_PROCESS, "[BTMMI] : mmi_bt_host_device_power_off_pre_process()")
TRC_MSG(MMI_BT_G7_BT_REJECT_PASSKEY_IND, "[BTMMI] : mmi_bt_reject_passkey_ind(), lap = %d, uap= %d, nap = %d, result = %d")
TRC_MSG(MMI_BT_G7_BT_REJECT_PASSKEY_IND_NOT_MATCH, "[BTMMI] : mmi_bt_reject_passkey_ind() NOT MATCH, lap = %d, uap= %d, nap = %d, result = %d")    
TRC_MSG(MMI_BT_G7_BT_TEST_UCS2, "[BTMMI] : mmi_bt_test_ucs2(), result = %d")
TRC_MSG(MMI_BT_G7_BT_TRUNCATE_UCS2_STRING, "[BTMMI] : mmi_bt_truncate_ucs2_string()")
TRC_MSG(MMI_BT_G7_BT_DELETE_SCREEN, "[BTMMI] : mmi_bt_delete_screen(), screen_id = %d, go_back_history = %d")
TRC_MSG(MMI_BT_G7_BT_POPUP_OPERATION_NOT_ALLOWED, "[BTMMI] : mmi_bt_popup_operation_not_allowed()")
TRC_MSG(MMI_BT_G7_BT_POPUP_PROHIBITED_BY_SIMAP, "[BTMMI] : mmi_bt_popup_prohibited_by_simap()")
TRC_MSG(MMI_BT_G7_BT_POPUP_PROHIBITED_BY_BLOCKED_DEVICE, "[BTMMI] : mmi_bt_popup_prohibited_by_blocked_device()")
TRC_MSG(MMI_BT_G7_BT_IS_TO_HIDE_AUTH_SCREEN, "[BTMMI] : mmi_bt_is_to_hide_auth_screen() = %d")
TRC_MSG(MMI_BT_G7_BT_CLEAR_END_KEY_HANDLER, "[BTMMI] : mmi_bt_clear_end_key_handler()")
TRC_MSG(MMI_BT_G7_BT_INTERRUPT_BEHAVIOR_HDLR, "[BTMMI] : mmi_bt_interrupt_behavior_hdlr()")
TRC_MSG(MMI_BT_G7_BT_POPUP_PROHIBITED_BY_A2DP_WITH_FAILURE, "[BTMMI] : mmi_bt_popup_prohibited_by_a2dp_with_failure()")
TRC_MSG(MMI_BT_G7_BT_POPUP_NOT_ALLOW_WITH_FAILURE, "[BTMMI] : mmi_bt_popup_not_allow_with_failure()")    
TRC_MSG(MMI_BT_G7_BT_POPUP_ERROR_WITH_FAILURE, "[BTMMI] : mmi_bt_popup_error_with_failure()")    
TRC_MSG(MMI_BT_G7_BT_POPUP_DEVICE_BUSY_WITH_FAILURE, "[BTMMI] : mmi_bt_popup_device_busy_with_failure()")    
TRC_MSG(MMI_BT_G7_BT_POPUP_DONE_WITH_SUCCESS, "[BTMMI] : mmi_bt_popup_done_with_success()")    
TRC_MSG(MMI_BT_G7_BT_POPUP_CONNECTION_RELEASED_WITH_SUCCESS, "[BTMMI] : mmi_bt_popup_connection_released_with_success()")        
TRC_MSG(MMI_BT_G7_BT_POPUP_EMPTY_WITH_FAILURE, "[BTMMI] : mmi_bt_popup_empty_with_failure()")        
TRC_MSG(MMI_BT_G7_BT_POPUP_SERVICE_UNAVAILABLE_WITH_FAILURE, "[BTMMI] : mmi_bt_popup_service_unavailable_with_failure()")        
TRC_MSG(MMI_BT_G7_BT_SET_LIMIT_VIS_TIMEOUT, "[BTMMI] : mmi_bt_set_limit_vis_timeout()")    
TRC_MSG(MMI_BT_G7_BT_ENTRY_SET_LIMIT_VIS, "[BTMMI] : mmi_bt_entry_set_limit_vis()")        
TRC_MSG(MMI_BT_G7_BT_GET_DEFAULT_HEADSET, "[BTMMI] : mmi_bt_get_default_headset(), lap =%d, uap = %d, nap = %d")            
TRC_MSG(MMI_BT_G7_SCR_PUSH_CONNECT_ACCEPT_STACK, "[BTMMI] : mmi_bt_push_connect_accept_stack(), i = %d, lap = %d, uap = %d, nap = %d, prof_id = %d")
TRC_MSG(MMI_BT_G7_SCR_POP_CONNECT_ACCEPT_STACK, "[BTMMI] : mmi_bt_pop_connect_accept_stack(), i = %d, prof_id = %d")
TRC_MSG(MMI_BT_G7_SCR_CLEAR_TOP_CONNECT_ACCEPT_STACK, "[BTMMI] : mmi_bt_clear_top_connect_accept_stack(), i = %d, prof_id = %d")
TRC_MSG(MMI_BT_G7_SCR_CLEAR_SPECIFIC_CONNECT_ACCEPT_STACK, "[BTMMI] : mmi_bt_clear_specific_connect_accept_stack(), prof_id = %d, flag = %d")
TRC_MSG(MMI_BT_G7_BT_STACK_INFO, "[BTMMI] : g_mmi_bt_scr_cntx.authorize_ptr, i = %d, authorize_prof_id = %d, lap = %d, uap = %d, nap = %d")
TRC_MSG(MMI_BT_G7_SCR_POP_CONNECT_ACCEPT_STACK_NOT_FOUND, "[BTMMI] : mmi_bt_pop_connect_accept_stack(), not found")
TRC_MSG(MMI_BT_G7_SCR_CLEAR_TOP_CONNECT_ACCEPT_STACK_NOT_FOUND, "[BTMMI] : mmi_bt_clear_top_connect_accept_stack(), not found")
TRC_MSG(MMI_BT_G7_SEND_MSG_2_L4, "[BTMMI] : Send Msg (%d) to L4 " )
TRC_MSG(MMI_BT_G7_CUI_BT_POWER_ON_CREATE, "[BTCUI] : cui_bt_power_on_create(), parent_gid =%d, g_id = %d")            
TRC_MSG(MMI_BT_G7_CUI_BT_POWER_ON_RUN, "[BTCUI] : cui_bt_power_on_run(), cui_id =%d, pwr_cnf_cui_state = %d")            
TRC_MSG(MMI_BT_G7_CUI_BT_POWER_ON_RESULT_HDLR, "[BTCUI] : cui_bt_power_on_result_hdlr(), result =%d")            
TRC_MSG(MMI_BT_G7_CUI_BT_POWER_ON_CLOSE, "[BTCUI] : cui_bt_power_on_close(), cui_gid =%d, pwr_cnf_cui_state = %d")            
TRC_MSG(MMI_BT_G7_CUI_BT_DEVICE_SELECT_SCREEN_CREATE, "[BTCUI] : cui_bt_device_select_screen_create(), parent_gid =%d, g_id = %d")            
TRC_MSG(MMI_BT_G7_CUI_BT_DEVICE_SELECT_SCREEN_SET_MASK, "[BTCUI] : cui_bt_device_select_screen_set_mask(), cod_bit_mask =%d, service_id = %d")            
TRC_MSG(MMI_BT_G7_CUI_BT_DEVICE_SELECT_SCREEN_SET_DEFAULT_DEVICE, "[BTCUI] : cui_bt_device_select_screen_set_default_device(), lap =%d, uap = %d, nap = %d")            
TRC_MSG(MMI_BT_G7_CUI_BT_DEVICE_SELECT_SCREEN_SET_OPTION_FLAG, "[BTCUI] : cui_bt_device_select_screen_set_option_flag(), flag =%d")            
TRC_MSG(MMI_BT_G7_CUI_BT_DEVICE_SELECT_SCREEN_RUN, "[BTCUI] : cui_bt_device_select_screen_run(), cui_id =%d, device_select_cui_state = %d")            
TRC_MSG(MMI_BT_G7_CUI_BT_DEVICE_SET_DEFAULT_HDLR, "[BTCUI] : cui_bt_device_set_default_hdlr(), result =%d, lap =%d, uap = %d, nap = %d")            
TRC_MSG(MMI_BT_G7_CUI_BT_DEVICE_SELECT_HDLR, "[BTCUI] : cui_bt_device_select_hdlr(), result =%d, lap =%d, uap = %d, nap = %d")            
TRC_MSG(MMI_BT_G7_CUI_BT_DEVICE_SELECT_SCREEN_CLOSE, "[BTCUI] : cui_bt_device_select_screen_close(), cui_gid =%d, device_select_cui_state = %d")            
TRC_MSG(MMI_BT_G7_SRV_BT_CM_SPEECH, "[BTSRV] :Turn on Speech, onoff=%d, bt_stat=%d" )
TRC_MSG(MMI_BT_G7_SRV_BT_CM_NVR_READ, "[BTSRV] : Read Nvram, flag=%x, TrDevNum=%d" )
TRC_MSG(MMI_BT_G7_SRV_BT_CM_NVR_WRITE, "[BTSRV] : Write Nvram, flag=%x, TrDevNum=%d" )
TRC_MSG(MMI_BT_G7_INIT_EVENT_HDLR, "[BTSRV] : INIT Protocol event handler" )
TRC_MSG(MMI_BT_G7_BT_SRV_BT_CM_AUDPATH_ON, "[BTSRV] : Turn on Bluetooth voice path (L1SP)" )
TRC_MSG(MMI_BT_G7_SRV_BT_CM_AUDIO_CON_IND, "[BTSRV] :Audio Connect IND, bt_stat=%d, status=%d" )
TRC_MSG(MMI_BT_G7_SRV_BT_CM_AUDIO_CON_CNF, "[BTSRV] :Audio Connect CNF, result=%d, bt_stat=%d, status=%d" )
TRC_MSG(MMI_BT_G7_SRV_BT_CM_AUDIO_DISCON_IND, "[BTSRV] :Audio Disconnect IND, bt_stat=%d, status=%d" )
TRC_MSG(MMI_BT_G7_SRV_BT_CM_AUDIO_DISCON_CNF, "[BTSRV] :Audio Disconnect CNF, result=%d, bt_stat=%d, status=%d" )   
TRC_MSG(MMI_BT_G7_SRV_BT_CM_PAIRED_DEV_INFO, "[BTSRV] : Device Info, Cod=0x%x, Addr:0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x" )
TRC_MSG(MMI_BT_G7_SRV_BT_CM_SDP_IND, "[BTSRV] : SDP IND, bt_stat=%d, service=%d, server_channel=%d" )
TRC_MSG(MMI_BT_G7_SRV_BT_CM_SDP_SEARCH_CNF, "[BTSRV] : SDP Search CNF, bt_stat=%d, total_service_num=%d, Addr:0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x" )
TRC_MSG(MMI_BT_G7_SRV_BT_CM_DEACTIVATE_FLAG, "[BTSRV] : Deactivate flag, bt_stat=0x%04x" )
TRC_MSG(MMI_BT_G7_SRV_BT_CM_CONNECTABLE_REQ, "[BTSRV] : Connectable Info, connectable = %d, visible = %d" )
TRC_MSG(MMI_BT_G7_SRV_BT_CM_GEN_CONNECT_IND, "[BTSRV] : Connect Ind, bt_stat=%d, profile_id=%d, connection_id =%d, Addr:0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x" )
TRC_MSG(MMI_BT_G7_SRV_BT_CM_GEN_CONNECT_CNF, "[BTSRV] : Connect Cnf, result=%d, bt_stat=%d, profile_id=%d, connection_id =%d, Addr:0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x" )
TRC_MSG(MMI_BT_G7_SRV_BT_CM_GEN_DISCONNECT_IND, "[BTSRV] : Disconnect Ind, bt_stat=%d, profile_id=%d, connection_id =%d, Addr:0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x" )
TRC_MSG(MMI_BT_G7_SRV_BT_CM_GEN_DISCONNECT_CNF, "[BTSRV] : Disconnect Cnf, result=%d, bt_stat=%d, profile_id=%d, connection_id =%d, Addr:0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x" )
TRC_MSG(MMI_BT_G7_SRV_BT_CM_PAIR_RSP, "[BTSRV] : Pair Rsp, bt_stat =%d, Addr:0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x" )
TRC_MSG(MMI_BT_G7_SRV_BT_CM_MY_DEV_FUL_REJECT_PIN_REQ, "[BTSRV] :Reject Pin Req because of my device list full" )
TRC_MSG(MMI_BT_G7_SRV_BT_CM_SET_LOCAL_NAME_CNF, "[BTSRV] :Set Local Name CNF, bt_stat=%d, result=%d, bt_flag=%d, bt_ramflag=%d" )
TRC_MSG(MMI_BT_G7_SRV_BT_CM_SET_SEC_CNF, "[BTSRV] :Set Security CNF, bt_stat=%d, result=%d, bt_flag=%d, bt_ramflag=%d" )
TRC_MSG(MMI_BT_G7_SRV_BT_CM_GET_REMOTE_DEV_NAME_CNF, "[BTSRV] :Get remote device name cnf, bt_stat=%d, result=%d, bt_flag=%d, bt_ramflag=%d, Addr:0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x" )
TRC_MSG(MMI_BT_G7_SRV_BT_CM_GET_LOCAL_BD_ADD_CNF, "[BTSRV] :Get local device addr cnf, bt_stat=%d, bt_flag=%d, bt_ramflag=%d, Addr:0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x" )
TRC_MSG(MMI_BT_G7_SRV_BT_CM_CORE_STATUS, "[BTSRV] : BT Core Status, state=%d, flag=%d, ram_flag=%d, deactivate_flag=%d" )
TRC_MSG(MMI_BT_G7_SRV_BT_CM_STATE_TRANS, "[BTSRV] : CM State Trans, state=%d --> %d" )
TRC_MSG(MMI_BT_G7_SRV_BT_CM_TMP_STATE_TRANS, "[BTSRV] : CM Tmp State Trans, tmp_state=%d --> %d" )    
TRC_MSG(MMI_BT_G7_BT_SET_FLAG, "[BTSRV] : CM Set Flag, flag =0x%08x --> 0x%08x" )
TRC_MSG(MMI_BT_G7_BT_RESET_FLAG, "[BTSRV] : CM Reset Flag, flag=0x%08x --> 0x%08x" )    
TRC_MSG(MMI_BT_G7_BT_SET_RAMFLAG, "[BTSRV] : CM Set Ram Flag, ram flag=0x%08x --> 0x%08x" )
TRC_MSG(MMI_BT_G7_BT_RESET_RAMFLAG, "[BTSRV] : CM Reset Ram Flag, ram flag=0x%08x --> 0x%08x" )    
TRC_MSG(MMI_BT_G7_SRV_BT_CM_GEN_CONNECT_ACCEPT_CNF_REQ, "[BTSRV] : Connect Accept Cnf Req, bt_stat=%d, profile_id=%d, Addr:0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x" )
TRC_MSG(MMI_BT_G7_SRV_BT_CM_POWER_ON_FINISH, "[BTSRV] : Power On Finished" )
TRC_MSG(MMI_BT_G7_SRV_BT_CM_POWER_OFF_FINISH, "[BTSRV] : Power Off Finished" )
TRC_MSG(MMI_BT_G7_SRV_BT_CM_DEACTIVATE_CNF, "[BTSRV] : Deactivate Cnf, profile=0x%04x" )
TRC_MSG(MMI_BT_G7_SRV_BT_CM_CONNECTION_ID_EXISTED, "[BTSRV] : Connection Id Existed, conn_id=%d" )
TRC_MSG(MMI_BT_G7_SRV_BT_CM_CONNECTION_NOT_FOUND, "[BTSRV] : Connection Not Existed, conn_id=%d" )
TRC_MSG(MMI_BT_G7_SRV_BT_CM_ACTIVATE_CNF, "[BTSRV] : Activate Cnf, profile_id=0x%04x" )
TRC_MSG(MMI_BT_G7_SRV_BT_CM_REG_PAIRING_PERMISSION_CB, "[BTSRV] : register pairing permission cb, profile_id=0x%04x, func_ptr=0x%x" )
TRC_MSG(MMI_BT_G7_SRV_BT_CM_UNREG_PAIRING_PERMISSION_CB, "[BTSRV] : unregister pairing permission cb, profile_id=0x%04x" )
TRC_MSG(MMI_BT_G7_SRV_BT_CM_IS_PAIRING_PERMITTED, "[BTSRV] : check if pairing permission, profile_id=0x%04x, result=%d" )
TRC_MSG(MMI_BT_G7_SRV_BT_CM_CONNECT_ACCEPT_RES, "[BTSRV] : srv_bt_cm_accept_conn_user_confirm: prof_id = 0x%x, nap = 0x%x, uap = 0x%x, lap = 0x%x, result = %d" )
TRC_MSG(MMI_BT_G7_SRV_BT_CM_INIT, "[BTSRV] : srv_bt_cm_init()" )
TRC_MSG(MMI_BT_G7_SRV_BT_CM_NVRAM_RESET_INFO, "[BTSRV] : srv_bt_cm_nvram_reset_info()" )
TRC_MSG(MMI_BT_G7_SRV_BT_CM_NVRAM_READ_INFO, "[BTSRV] : srv_bt_cm_nvram_read_info()" )    
TRC_MSG(MMI_BT_G7_SRV_BT_CM_NVRAM_WRITE_INFO, "[BTSRV] : srv_bt_cm_nvram_write_info()" )        
TRC_MSG(MMI_BT_G7_SRV_BT_CM_INIT_FRESHDEV_DEFAULT, "[BTSRV] : srv_bt_cm_init_freshdev_default()" )            
TRC_MSG(MMI_BT_G7_SRV_BT_CM_ANTENNA_ON_RSP, "[BTSRV] : srv_bt_cm_antenna_on_rsp_hdler()" )                
TRC_MSG(MMI_BT_G7_SRV_BT_CM_ANTENNA_OFF_RSP, "[BTSRV] : srv_bt_cm_antenna_off_rsp_hdler()" )                
TRC_MSG(MMI_BT_G7_SRV_BT_CM_READY_IND, "[BTSRV] : srv_bt_cm_ready_ind_hdler()" )                    
TRC_MSG(MMI_BT_G7_SRV_BT_CM_RESTART_REQ_IND, "[BTSRV] : srv_bt_cm_restart_req_ind_hdler()" )                        
TRC_MSG(MMI_BT_G7_SRV_BT_CM_RESTART_RSP, "[BTSRV] : srv_bt_cm_restart_rsp_hdler()" )                            
TRC_MSG(MMI_BT_G7_SRV_BT_CM_DISCOVERY_RESULT_IND, "[BTSRV] : srv_bt_cm_discovery_result_ind_hdler()" )
TRC_MSG(MMI_BT_G7_SRV_BT_CM_DISCOVERY_CNF, "[BTSRV] : srv_bt_cm_discovery_cnf_hdler()" )
TRC_MSG(MMI_BT_G7_SRV_BT_CM_CANCEL_DISCOVERY_CNF, "[BTSRV] : srv_bt_cm_cancel_discovery_cnf_hdler()" )    
TRC_MSG(MMI_BT_G7_SRV_BT_CM_LINK_CONNECT_ACCEPT_IND, "[BTSRV] : srv_bt_cm_link_connect_accept_ind_hdler()" )        
TRC_MSG(MMI_BT_G7_SRV_BT_CM_BOND_IND, "[BTSRV] : srv_bt_cm_bond_ind_hdler()" )            
TRC_MSG(MMI_BT_G7_SRV_BT_CM_BOND_CNF, "[BTSRV] : srv_bt_cm_bond_cnf_hdler()" )                
TRC_MSG(MMI_BT_G7_SRV_BT_CM_DEBOND_CNF, "[BTSRV] : srv_bt_cm_debond_cnf_hdler()" )
TRC_MSG(MMI_BT_G7_SRV_BT_CM_PASSKEY_IND, "[BTSRV] : srv_bt_cm_passkey_ind_hdler()" )    
TRC_MSG(MMI_BT_G7_SRV_BT_CM_SECURITY_USER_CONFIRM_IND, "[BTSRV] : srv_bt_cm_security_user_confirm_ind_hdler()" )
TRC_MSG(MMI_BT_G7_SRV_BT_CM_SECURITY_PASSKEY_NOTIFY_IND, "[BTSRV] : srv_bt_cm_security_passkey_notify_ind_hdler()" )    
TRC_MSG(MMI_BT_G7_SRV_BT_CM_SECURITY_KEYPRESS_NOTIFY_IND, "[BTSRV] : srv_bt_cm_security_keypress_notify_ind_hdler()" )        
TRC_MSG(MMI_BT_G7_SRV_BT_CM_BLOCK_ACTIVE_LINK_CNF, "[BTSRV] : srv_bt_cm_block_active_link_cnf_hdler()" )            
TRC_MSG(MMI_BT_G7_SRV_BT_CM_WRITE_SCANENABLE_MODE_CNF, "[BTSRV] : srv_bt_cm_write_scanenable_mode_cnf_hdler()" )                
TRC_MSG(MMI_BT_G7_SRV_BT_CM_LINK_STATE_IND, "[BTSRV] : srv_bt_cm_link_state_ind_hdler()" )                    
TRC_MSG(MMI_BT_G7_SRV_BT_CM_ALLOW_ACL_LINK_ESTABLISH_CNF, "[BTSRV] : srv_bt_cm_allow_acl_link_establishment_cnf_hdler()" )
TRC_MSG(MMI_BT_G7_SRV_BT_CM_DISALLOW_ACL_LINK_ESTABLISH_CNF, "[BTSRV] : srv_bt_cm_disallow_acl_link_establishment_cnf_hdler()" )    
TRC_MSG(MMI_BT_G7_SRV_BT_CM_SDPDB_REGISTER_CNF, "[BTSRV] : srv_bt_cm_sdpdb_register_cnf_hdler()" )        
TRC_MSG(MMI_BT_G7_SRV_BT_CM_SDPDB_DEREGISTER_CNF, "[BTSRV] : srv_bt_cm_sdpdb_deregister_cnf_hdler()" )            
TRC_MSG(MMI_BT_G7_SRV_BT_CM_EXCEED_MAX_PAIRED_DEVICE_NUM, "[BTSRV] : exceed max paired device number" )            
TRC_MSG(MMI_BT_G7_SRV_BT_CM_MULTIPLE_CONNECT_CNF, "[BTSRV] : srv_bt_cm_multiple_connect_cnf_hdler()" )                
TRC_MSG(MMI_BT_G7_SRV_BT_CM_IS_ACTIVATED, "[BTSRV] : srv_bt_cm_is_activated() = %d" )
TRC_MSG(MMI_BT_G7_SRV_BT_CM_IS_VIS, "[BTSRV] : srv_bt_cm_is_vis() = %d" )                            
TRC_MSG(MMI_BT_G7_SRV_BT_CM_IS_AUTH, "[BTSRV] : srv_bt_cm_is_auth() = %d" )
TRC_MSG(MMI_BT_G7_SRV_BT_CM_IS_AUD_PTH_SET_TO_HF, "[BTSRV] : srv_bt_cm_is_audio_path_to_headset() = %d" )
TRC_MSG(MMI_BT_G7_SRV_BT_CM_IS_INCALL_AUD_SWAP2BT, "[BTSRV] : srv_bt_cm_is_incall_aud_swap2bt() = %d" )    
TRC_MSG(MMI_BT_G7_SRV_BT_CM_IS_HEADSET_CONNECTED, "[BTSRV] : srv_bt_cm_is_headset_connected(), id of hs = %d, result = %d" )        
TRC_MSG(MMI_BT_G7_SRV_BT_CM_IS_HS_AUDIO_LINK_CONNECTED, "[BTSRV] : srv_bt_cm_is_audio_link_on() = %d" )        
TRC_MSG(MMI_BT_G7_SRV_BT_CM_IS_CONNECTION_ACTIVE, "[BTSRV] : mmi_bth_is_connection_active() = %d, lap = 0x%x, uap = 0x%x, nap = 0x%x" )            
TRC_MSG(MMI_BT_G7_SRV_BT_CM_IS_SIMAP_ACTIVE, "[BTSRV] : srv_bt_cm_is_simap_activate() = %d" )                
TRC_MSG(MMI_BT_G7_SRV_BT_CM_IS_NAME_DUPLICATED, "[BTSRV] : srv_bt_cm_is_name_duplicated() = %d" )                    
TRC_MSG(MMI_BT_G7_SRV_BT_CM_IS_SERVICE_SUPPORT, "[BTSRV] : srv_bt_cm_is_service_support(), paired_index = %d, service_id = %d, result = %d" )
TRC_MSG(MMI_BT_G7_SRV_BT_CM_GET_STATE, "[BTSRV] : srv_bt_cm_get_state() = %d" )    
TRC_MSG(MMI_BT_G7_SRV_BT_CM_GET_DISCOV_DEV_NUM, "[BTSRV] : srv_bt_cm_get_searched_dev_num() = %d" )        
TRC_MSG(MMI_BT_G7_SRV_BT_CM_GET_PAIRED_DEV_NUM, "[BTSRV] : srv_bt_cm_get_paired_dev_num() = %d" )        
TRC_MSG(MMI_BT_G7_SRV_BT_CM_BLOCK_LIST_UPDATE_CNF, "[BTSRV] : srv_bt_cm_block_list_update_cnf_hdler()" )        
TRC_MSG(MMI_BT_G7_SRV_BT_CM_GET_EXISTED_DEV_NUM, "[BTSRV] : srv_bt_cm_get_existed_conn_num()=%d" )
TRC_MSG(MMI_BT_G7_SRV_BT_CM_GET_ACTION_ITEM_INDEX, "[BTSRV] : srv_bt_cm_get_action_item_index() = %d" )        
TRC_MSG(MMI_BT_G7_SRV_BT_CM_GET_FLAG, "[BTSRV] : srv_bt_cm_get_flag(), get_flag = %d, value = %d" )
TRC_MSG(MMI_BT_G7_SRV_BT_CM_GET_RAMFLAG, "[BTSRV] : srv_bt_cm_get_ram_flag(), get_flag = %d, value = %d" )            
TRC_MSG(MMI_BT_G7_SRV_BT_CM_GET_ACTIVE_HFP_CONNECT_ID, "[BTSRV] : srv_bt_cm_get_active_hfp_connect_id() = %d" )        
TRC_MSG(MMI_BT_G7_SRV_BT_CM_GET_SCO_STATUS, "[BTSRV] : srv_bt_cm_get_sco_status() = %d" )            
TRC_MSG(MMI_BT_G7_SRV_BT_CM_ANTENNA_OFF_REQ, "[BTSRV] : srv_bt_cm_antenna_off()" )                
TRC_MSG(MMI_BT_G7_SRV_BT_CM_ANTENNA_ON_REQ, "[BTSRV] : srv_bt_cm_antenna_on()" )                    
TRC_MSG(MMI_BT_G7_SRV_BT_CM_DEACTIVATE_REQ, "[BTSRV] : srv_bt_cm_deactivate()" )
TRC_MSG(MMI_BT_G7_SRV_BT_CM_DEACTIVATE_PROFILE_REQ, "[BTSRV] : srv_bt_cm_deactivate_profiles()" )    
TRC_MSG(MMI_BT_G7_SRV_BT_CM_POWER_ON_ACTIVATE_PROFILE_REQ, "[BTSRV] : srv_bt_cm_power_on_activate_profile()" )        
TRC_MSG(MMI_BT_G7_SRV_BT_CM_ACTIVATE_REQ, "[BTSRV] : srv_bt_cm_activate()" )        
TRC_MSG(MMI_BT_G7_SRV_BT_CM_ACTIVATE_PROFILE_REQ, "[BTSRV] : srv_bt_cm_activate_profiles()" )            
TRC_MSG(MMI_BT_G7_SRV_BT_CM_IN_FLIGHT_MODE, "[BTSRV] : in flight mode, profile = %d, skip" )
TRC_MSG(MMI_BT_G7_SRV_BT_CM_RELEASE_ALL_CONNECTION_REQ, "[BTSRV] : srv_bt_cm_release_all_conn()" )                
TRC_MSG(MMI_BT_G7_SRV_BT_CM_RELEASE_DEV_CONNECTION_REQ, "[BTSRV] : srv_bt_cm_release_dev_conn(), lap = 0x%x, uap = 0x%x, nap = 0x%x" )                    
TRC_MSG(MMI_BT_G7_SRV_BT_CM_INQUIRY_REQ, "[BTSRV] : srv_bt_cm_search(), max_response = %d, timeout = %d, cod = %d, name_discovery = %d, inquiry_type = %d" )                    
TRC_MSG(MMI_BT_G7_SRV_BT_CM_INQUIRY_CANCEL_REQ, "[BTSRV] : srv_bt_cm_search_abort(), inquiry_type = %d" )
TRC_MSG(MMI_BT_G7_SRV_BT_CM_BOND_REQ, "[BTSRV] : srv_bt_cm_bond(), index = %d" )    
TRC_MSG(MMI_BT_G7_SRV_BT_CM_PAIR_REQ, "[BTSRV] : srv_bt_cm_send_passkey()" )        
TRC_MSG(MMI_BT_G7_SRV_BT_CM_SECURITY_NUMERIC_CONFIRM_RSP, "[BTSRV] : srv_bt_cm_security_numeric_confirm()" )
TRC_MSG(MMI_BT_G7_SRV_BT_CM_SECURITY_KEYPRESS_NOTIFY_CANCEL_REQ, "[BTSRV] : srv_bt_cm_security_keypress_notify_cancel()" )    
TRC_MSG(MMI_BT_G7_SRV_BT_CM_BLOCK_REQ, "[BTSRV] : srv_bt_cm_block()" )        
TRC_MSG(MMI_BT_G7_SRV_BT_CM_UNBLOCK_REQ, "[BTSRV] : srv_bt_cm_unblock()" )            
TRC_MSG(MMI_BT_G7_SRV_BT_CM_REFRESH_SERVICE_LIST_REQ, "[BTSRV] : srv_bt_cm_refresh_service_list()" )
TRC_MSG(MMI_BT_G7_SRV_BT_CM_CONNECT_REQ, "[BTSRV] : srv_bt_cm_connect(), lap = 0x%x, uap = 0x%x, nap = 0x%x, profile_id = %d" )    
TRC_MSG(MMI_BT_G7_SRV_BT_CM_DISCONNECT_REQ, "[BTSRV] : srv_bt_cm_disconnect(), connection_id = %d, conn_type = %d" )        
TRC_MSG(MMI_BT_G7_SRV_BT_CM_BG_DISCONNECT_REQ, "[BTSRV] : srv_bt_cm_background_disconnect(), connection_id = %d, conn_type = %d" )            
TRC_MSG(MMI_BT_G7_SRV_BT_CM_RESET_BG_DISCONNECT, "[BTSRV] : it's background disconnect, just bypass" )                
TRC_MSG(MMI_BT_G7_SRV_BT_CM_MYDEV_AUTHORIZE_REQ, "[BTSRV] : srv_bt_cm_mydev_authorize(), lap = 0x%x, uap = 0x%x, nap = 0x%x, authorize_type = %d" )            
TRC_MSG(MMI_BT_G7_SRV_BT_CM_MYDEV_DEL_REQ, "[BTSRV] : srv_bt_cm_mydev_del(), lap = 0x%x, uap = 0x%x, nap = 0x%x" )                
TRC_MSG(MMI_BT_G7_SRV_BT_CM_MYDEV_DEL_ALL_REQ, "[BTSRV] : srv_bt_cm_mydev_del_all()" )                
TRC_MSG(MMI_BT_G7_SRV_BT_CM_MYDEV_ADD_REQ, "[BTSRV] : srv_bt_cm_mydev_add(), lap = 0x%x, uap = 0x%x, nap = 0x%x" )
TRC_MSG(MMI_BT_G7_SRV_BT_CM_MYDEV_REMOVE_REQ, "[BTSRV] : srv_bt_cm_mydev_remove(), lap = 0x%x, uap = 0x%x, nap = 0x%x" )
TRC_MSG(MMI_BT_G7_SRV_BT_CM_SET_VIS_REQ, "[BTSRV] : srv_bt_cm_set_vis(), vis = %d" )
TRC_MSG(MMI_BT_G7_SRV_BT_CM_SET_TEMP_VIS_REQ, "[BTSRV] : srv_bt_cm_set_temp_vis()" )
TRC_MSG(MMI_BT_G7_SRV_BT_CM_RESET_TEMP_VIS_REQ, "[BTSRV] : srv_bt_cm_reset_temp_vis()" )    
TRC_MSG(MMI_BT_G7_SRV_BT_CM_SET_CONNECTABLE_REQ, "[BTSRV] : srv_bt_cm_set_connectable(), connectable = %d" )        
TRC_MSG(MMI_BT_G7_SRV_BT_CM_SET_DISCOVERABLE_REQ, "[BTSRV] : srv_bt_cm_set_discoverable_mode(), discoverable_mode = %d" )            
TRC_MSG(MMI_BT_G7_SRV_BT_CM_SET_HOST_NAME_REQ, "[BTSRV] : srv_bt_cm_set_host_dev_name()" )
TRC_MSG(MMI_BT_G7_SRV_BT_CM_SET_NAME_REQ, "[BTSRV] : srv_bt_cm_set_name()" )
TRC_MSG(MMI_BT_G7_SRV_BT_CM_SET_AUTH_REQ, "[BTSRV] : srv_bt_cm_set_auth(), auth = %d" )
TRC_MSG(MMI_BT_G7_SRV_BT_CM_SET_SIMAP_REQ, "[BTSRV] : srv_bt_cm_set_simap(), activate = %d" )
TRC_MSG(MMI_BT_G7_SRV_BT_CM_SET_AUD_PTH_2_HF, "[BTSRV] : mmi_bth_set_aud_pth_2_hf(), pth_2_hg = %d" )
TRC_MSG(MMI_BT_G7_SRV_BT_CM_SET_RAMFLAG, "[BTSRV] : srv_bt_cm_set_ram_flag(), set_flag = %d" )
TRC_MSG(MMI_BT_G7_SRV_BT_CM_RESET_RAMFLAG, "[BTSRV] : srv_bt_cm_reset_ram_flag(), set_flag = %d" )
TRC_MSG(MMI_BT_G7_SRV_BT_CM_SET_FLAG, "[BTSRV] : srv_bt_cm_set_flag(), set_flag = %d" )
TRC_MSG(MMI_BT_G7_SRV_BT_CM_RESET_FLAG, "[BTSRV] : srv_bt_cm_reset_flag(), set_flag = %d" )
TRC_MSG(MMI_BT_G7_SRV_BT_CM_SET_STATE, "[BTSRV] : srv_bt_cm_set_state(), set_state = %d" )
TRC_MSG(MMI_BT_G7_SRV_BT_CM_SET_HEADSET_SPEAKDER_GAIN_REQ, "[BTSRV] : srv_bt_cm_set_headset_speaker_gain(), speaker_gain = %d, conn_id = %d" )
TRC_MSG(MMI_BT_G7_SRV_BT_CM_SET_DEFAULT_HD_INDEX, "[BTSRV] : srv_bt_cm_set_default_headset_index(), paired_index = %d" )    
TRC_MSG(MMI_BT_G7_SRV_BT_CM_HFP_SCO_CONNECT_REQ, "[BTSRV] : srv_bt_cm_hfp_sco_connect()" )        
TRC_MSG(MMI_BT_G7_SRV_BT_CM_HFP_SCO_DISCONNECT_REQ, "[BTSRV] : srv_bt_cm_hfp_sco_disconnect()" )            
TRC_MSG(MMI_BT_G7_SRV_BT_CM_CONNECT_LAST_HEADSET_REQ, "[BTSRV] : srv_bt_cm_connect_last_headset()" )            
TRC_MSG(MMI_BT_G7_SRV_BT_CM_SWITCH_VOICE_PATH_INCALL, "[BTSRV] : srv_bt_cm_switch_voice_path_incall(), is_on = %d" )            
TRC_MSG(MMI_BT_G7_SRV_BT_CM_IS_ALL_SUPPORTED_PROFILE_ACTIVATED, "[BTSRV] : srv_bt_cm_is_all_supported_profiles_activated() = %d" )            
TRC_MSG(MMI_BT_G7_SRV_BT_CM_IS_ALL_SUPPORTED_PROFILE_DEACTIVATED, "[BTSRV] : srv_bt_cm_is_all_supported_profiles_deactivated() = %d" )            
TRC_MSG(MMI_BT_G7_SRV_BT_CM_SET_DEACTIVATED_FLAG, "[BTSRV] : srv_bt_cm_set_deactivate_flag(), prof_flag = %d" )            
TRC_MSG(MMI_BT_G7_SRV_BT_CM_RESET_DEACTIVATED_FLAG, "[BTSRV] : srv_bt_cm_reset_deactivate_flag(), prof_flag = %d" )            
TRC_MSG(MMI_BT_G7_SRV_BT_CM_GET_HOST_DEV_SECURITY_LEVEL, "[BTSRV] : srv_bt_cm_get_host_dev_security_level() = %d" )                    
TRC_MSG(MMI_BT_G7_SRV_BT_CM_SET_A2DP_PROHIBIT_VIS, "[BTSRV] : srv_bt_cm_set_a2dp_prohibit_vis(), setting = %d" )                    
TRC_MSG(MMI_BT_G7_SRV_BT_CM_INCREASE_PAIRED_DEV_NUM, "[BTSRV] : srv_bt_cm_increase_paired_dev_num() = %d" )
TRC_MSG(MMI_BT_G7_SRV_BT_CM_DECREASE_PAIRED_DEV_NUM, "[BTSRV] : srv_bt_cm_decrease_paired_dev_num() = %d" )
TRC_MSG(MMI_BT_G7_SRV_BT_CM_RESET_DISCOVERED_DEV_NUM, "[BTSRV] : g_srv_bt_cm_cntx.discovered_dev_num = 0" )
TRC_MSG(MMI_BT_G7_SRV_BT_CM_INCREASE_DISCOVERED_DEV_NUM, "[BTSRV] : g_srv_bt_cm_cntx.discovered_dev_num ++ = %d" )
TRC_MSG(MMI_BT_G7_SRV_BT_CM_INCREASE_EXISTED_CONN_NUM, "[BTSRV] : g_srv_bt_cm_cntx.existed_conn_num++ = %d" )
TRC_MSG(MMI_BT_G7_SRV_BT_CM_DECREASE_EXISTED_CONN_NUM, "[BTSRV] : g_srv_bt_cm_cntx.existed_conn_num-- = %d" )
TRC_MSG(MMI_BT_G7_SRV_BT_CM_SET_ACTION_INDEX, "[BTSRV] : srv_bt_cm_set_action_index(), index = %d" )
TRC_MSG(MMI_BT_G7_SRV_BT_CM_SET_CONN_CNF_PROFILE_ID, "[BTSRV] : g_srv_bt_cm_cntx.conn_cnf_profile_id = %d" )
TRC_MSG(MMI_BT_G7_SRV_BT_CM_SET_STORED_SER_LIST_NUM, "[BTSRV] : g_srv_bt_cm_cntx.stored_ser_list_num = %d" )
TRC_MSG(MMI_BT_G7_SRV_BT_CM_GET_DEFAULT_HS_INDEX, "[BTSRV] : g_srv_bt_cm_cntx.idx_of_last_hs_dev = %d" )
TRC_MSG(MMI_BT_G7_SRV_BT_CM_SET_DEVICE_COD, "[BTSRV] : srv_bt_cm_set_dev_cod(), lap = 0x%x, uap = 0x%x, nap = 0x%x, cod = %d, result = %d" )
TRC_MSG(MMI_BT_G7_SRV_BT_CM_PROFILE_NOT_DEACTIVATED, "[BTSRV] : profile 0x%04x is not deactived" )    
TRC_MSG(MMI_BT_G7_SRV_BT_CM_SIMAP_NOT_DEACTIVATED, "[BTSRV] : SIMAP is not deactived" )        
TRC_MSG(MMI_BT_G7_SRV_BT_CM_SET_LIMIT_VIS_REQ, "[BTSRV] : srv_bt_cm_set_limit_vis(), vis = %d" )            
TRC_MSG(MMI_BT_G7_SRV_BT_CM_IS_LIMIT_VIS, "[BTSRV] : srv_bt_cm_is_limit_vis(), result = %d" )                
TRC_MSG(MMI_BT_G7_SRV_BT_CM_CONNECT_HEADSET, "[BTSRV] : srv_bt_cm_connect_headset():state=(%d),lap=0x%x,uap=0x%x,nap=0x%x, cb=0x%x" )                
TRC_MSG(MMI_BT_G7_SRV_BT_CM_CONNECT_INDEXED_HEADSET, "[BTSRV]:srv_bt_cm_connect_paired_headset_with_index, idx=%d, show_prgs_scr=%d")
TRC_MSG(MMI_BT_G7_SRV_BT_CM_CONNECT_CANCEL_HEADSET, "[BTSRV]:srv_bt_cm_cancel_connect_headset, hs_conn_state=%d")
TRC_MSG(MMI_BT_G7_SRV_BT_CM_CONNECT_HEADSET_RETURN, "[BTSRV] : srv_bt_cm_connect_headset return: result=%d" )                
TRC_MSG(MMI_BT_G7_SRV_BT_CM_HS_CONNECT_CNF, "[BTSRV] : srv_bt_cm_connect_cnf_hdler: HSP or HFP, result=%d, callback=0x%x" )                
TRC_MSG(MMI_BT_G7_SRV_BT_CM_CONNECT_DEFAULT_HEADSET_REQ, "[BTSRV]: srv_bt_cm_connect_default_headset,conn_cb=0x%x, idx_of_last_hs_dev=%d")
TRC_MSG(MMI_BT_G7_SRV_BT_CM_CONNECT_DEFAULT_HEADSET_RETURN, "[BTSRV]:srv_bt_cm_connect_default_headset return: %d")
TRC_MSG(MMI_BT_G7_SRV_BT_CM_DISCONNECT_HEADSET, "[BTSRV]:srv_bt_cm_disconnect_headset:conn_index=%d,connection_id=%d,conn_type=%d")
TRC_MSG(MMI_BT_G7_SRV_BT_CM_NO_CONNECTED_HEADSET, "[BTSRV]:srv_bt_cm_disconnect_headset: NO connected headset")
TRC_MSG(MMI_BT_G7_SRV_BT_CM_CONNECT_HEADSET_ERR_STATE, "[BTSRV] : mmi_bth_connect_headset(): CM state (%d) is NOT IDLE, just return!" )                
TRC_MSG(MMI_BT_G7_SRV_BT_CM_PUSH_CONN_CNF_STACK, "[BTSRV] : srv_bt_cm_push_conn_cnf_stack(), i = %d, conn_cnf_profile_id = %d, conn_cnf_idx = %d" )
TRC_MSG(MMI_BT_G7_SRV_BT_CM_POP_CONN_CNF_STACK, "[BTSRV] : srv_bt_cm_pop_conn_cnf_stack(), i = %d, conn_cnf_profile_id = %d" )
TRC_MSG(MMI_BT_G7_SRV_BT_CM_CLEAR_TOP_CONN_CNF_STACK, "[BTSRV] : srv_bt_cm_clear_top_conn_cnf_stack(), i = %d, conn_cnf_profile_id = %d" )
TRC_MSG(MMI_BT_G7_SRV_BT_CM_SCR_CLEAR_SPECIFIC_CONN_CNF_STACK, "[BTSRV] : srv_bt_cm_clear_specific_conn_cnf_stack(), prof_id = %d, flag = %d" )
TRC_MSG(MMI_BT_G7_SRV_BT_CM_SET_DISCONNECT_CON_ID, "[BTSRV] : g_srv_bt_cm_cntx.disconnect_con_id = %d" )
TRC_MSG(MMI_BT_G7_SRV_BT_CM_STACK_INFO, "[BTSRV] : g_srv_bt_cm_cntx.conn_cnf, i = %d, conn_cnf_idx = %d, conn_cnf_profile_id = %d" )
TRC_MSG(MMI_BT_G7_SRV_BT_CM_POP_CONN_CNF_STACK_NOT_FOUND, "[BTSRV] : srv_bt_cm_pop_conn_cnf_stack(), not found" )
TRC_MSG(MMI_BT_G7_SRV_BT_CM_CLEAR_TOP_CONN_CNF_STACK_NOT_FOUND, "[BTSRV] : srv_bt_cm_clear_top_conn_cnf_stack(), not found" )
TRC_MSG(MMI_BT_G7_SRV_BT_CM_LAWMO_CB_HDLR, "[BTSRV] : srv_bt_cm_lawmo_cb_hdlr(), app_id = %d, cmd = %d" )                    
TRC_MSG(MMI_BT_G7_SRV_BT_CM_LOCK_SUCCESS, "[BTSRV] : BT LOCK SUCCESS" )                    
TRC_MSG(MMI_BT_G7_SRV_BT_CM_UNLOCK_SUCCESS, "[BTSRV] : BT UNLOCK SUCCESS" )                        
TRC_MSG(MMI_BT_G7_SRV_BT_CM_DEV_PROPERTY_CHECK, "[BTSRV] : srv_bt_cm_dev_property_check(), lap = %d, uap = %d, nap = %d, prop = %d, result = %d" )                        
TRC_MSG(MMI_BT_G7_SRV_BT_CM_GET_DEFAULT_DEV_ADDR, "[BTSRV] : srv_bt_cm_get_default_dev_addr(), lap = %d, uap = %d, nap = %d, dev_type = %d" )
TRC_MSG(MMI_BT_G7_SRV_BT_CM_GET_DEFAULT_DEV_ADDR_NOT_FOUND, "[BTSRV] : srv_bt_cm_get_default_dev_addr() not found" )    
TRC_MSG(MMI_BT_G7_SRV_BT_CM_GET_DEVICE_NAME, "[BTSRV] : BT Get Device Name, paired_dev_index=%d, number_of_char=%d, max_allowed_chinese_char=%d, max_allowed_eng_char=%d" )
TRC_MSG(MMI_BT_G7_SRV_BT_CM_GET_DEVICE_NAME_NOT_FOUND, "[BTSRV] : BT Get Device Name NOT FOUND" )
TRC_MSG(MMI_BT_G7_SRV_BT_CM_GET_PWR_STATUS, "[BTSRV] : power status : power=%d, stack_ready=%d, cm state=%d, power status=%d" )
TRC_MSG(MMI_BT_G7_SRV_BT_CM_IS_PROFILE_CONNECTING, "[BTSRV] : srv_bt_cm_is_profile_connecting(), conn_id = %d, result = %d")
TRC_MSG(MMI_BT_G7_SRV_BT_CM_IS_PROFILE_CONNECTED, "[BTSRV] : srv_bt_cm_is_profile_connected(), conn_type = %d, result = %d")
TRC_MSG(MMI_BT_G7_SRV_BT_CM_IS_SERVICE_SUPPORT_WITH_DEV_ADDR, "[BTSRV] : srv_bt_cm_check_dev_profile_support_status(): lap = %d, uap = %d, nap = %d, service_id = %x, result = %x" )    
TRC_MSG(MMI_BT_G7_SRV_BT_CM_SET_DEFAULT_HS, "[BTSRV] : srv_bt_cm_set_default_dev(), lap =%d, uap = %d, nap = %d, result = %d")            
TRC_MSG(MMI_BT_G7_SRV_BT_CM_GET_DEVICE_COD, "[BTSRV] : srv_bt_cm_get_dev_cod(), lap = %d, uap = %d, nap = %d, device cod = %d" )
TRC_MSG(MMI_BT_G7_SRV_BT_CM_DEV_COD_MATCH, "[BTSRV] : srv_bt_cm_is_dev_cod_match(), device_cod = %d, specific_cod = %d, match = %d" )    
TRC_MSG(MMI_BT_G7_SRV_BT_CM_COPY_N_UTF8_CHAR, "[BTSRV] : srv_bt_cm_copy_n_utf8_chars, size_of_dest=%d, char_num=%d" )
TRC_MSG(MMI_BT_G7_SRV_BT_CM_COPY_N_UTF8_CHAR_FINISH, "[BTSRV] : srv_bt_cm_copy_n_utf8_chars finish, char_copied=%d, byte_copied=%d" )
TRC_MSG(SRV_BT_CM_GET_POWER_STATUS, "[BTSRV]: srv_bt_cm_get_power_status()=%d")
TRC_MSG(SRV_BT_CM_IS_PROFILE_CONNECTED, "[BTSRV]: srv_bt_cm_is_profile_connected() conn_type=%d, result=%d")
TRC_MSG(SRV_BT_CM_IS_ACTIVATED, "[BTSRV]: srv_bt_cm_get_visibility()=%d")
TRC_MSG(SRV_BT_CM_GET_VISIBILITY, "[BTSRV]: srv_bt_cm_get_visibility(), a2dp_prohibit_vis=%d,flag=0x%x,ram_flag=0x%x")
TRC_MSG(SRV_BT_CM_SET_VISIBILITY, "[BTSRV]: srv_bt_cm_set_visibility(), type=%d,state=%d")
TRC_MSG(SRV_BT_CM_SET_TEMP_VISIBILITY_TIMEOUT, "[BTSRV]: srv_bt_cm_set_temp_visibility_timeout()")
TRC_MSG(SRV_BT_CM_SET_LIMIT_VISIBILITY_TIMEOUT_HDLR, "[BTSRV]: srv_bt_cm_set_limit_visibility_timeout_hdlr()")
TRC_MSG(SRV_BT_CM_SET_LIMIT_VIS, "[BTSRV]: srv_bt_cm_set_limit_vis() vis=%d")
TRC_MSG(SRV_BT_CM_IS_LIMIT_VIS, "[BTSRV]: srv_bt_cm_is_limit_vis(), result=%d")
TRC_MSG(SRV_BT_CM_IS_AUTHENTICATION, "[BTSRV]: srv_bt_cm_is_authentication(), result=%d")
TRC_MSG(SRV_BT_CM_IS_AUDIO_PATH_TO_HEADSET, "[BTSRV]: srv_bt_cm_is_audio_path_to_headset(),result=%d")
TRC_MSG(SRV_BT_CM_IS_INCALL_AUD_SWAP2BT, "[BTSRV]: srv_bt_cm_is_incall_aud_swap2bt(),result=%d")
TRC_MSG(SRV_BT_CM_IS_AUDIO_LINK_ON, "[BTSRV]: srv_bt_cm_is_audio_link_on(), result=%d")
TRC_MSG(SRV_BT_CM_IS_DEV_CONN_ACTIVE, "[BTSRV]: srv_bt_cm_is_dev_conn_active(),result=%d,lap=0x%x,uap=0x%x,nap=0x%x")
TRC_MSG(SRV_BT_CM_IS_SIMAP_ACTIVATE, "[BTSRV]: srv_bt_cm_is_simap_activate()=%d")
TRC_MSG(SRV_BT_CM_GET_HOST_DEV_SECURITY_LEVEL, "[BTSRV]: srv_bt_cm_get_host_dev_security_level()level=%d")
TRC_MSG(SRV_BT_CM_SET_DISCOVERABLE_MODE, "[BTSRV]: srv_bt_cm_set_discoverable_mode(), mode=%d")
TRC_MSG(SRV_BT_CM_SET_HOST_DEV_NAME, "[BTSRV]: srv_bt_cm_set_host_dev_name(),name=%d")
TRC_MSG(SRV_BT_CM_DEV_PROPERTY_CHECK, "[BTSRV]: srv_bt_cm_dev_property_check(), lap=0x%x, uap=0x%x, nap=0x%x, prop=%d, result=%d")
TRC_MSG(SRV_BT_CM_GET_DEFAULT_DEV_ADDR, "[BTSRV]: srv_bt_cm_get_default_dev_addr()result=%d")
TRC_MSG(SRV_BT_CM_CHECK_DEV_PROFILE_SUPPORT_STATUS, "[BTSRV]: srv_bt_cm_check_dev_profile_support_status(), lap=0x%x, uap=0x%x, nap=0x%x, service_id=%d, result=%d")
TRC_MSG(SRV_BT_CM_SET_DEFAULT_DEV, "[BTSRV]: srv_bt_cm_set_default_dev(),dev_type=%d, lap=0x%x, uap=0x%x, nap=0x%x")
TRC_MSG(SRV_BT_CM_GET_DEV_COD, "[BTSRV]: srv_bt_cm_get_dev_cod(),dev_index=%d,cod=%d")
TRC_MSG(SRV_BT_CM_SET_DEV_COD, "[BTSRV]: srv_bt_cm_set_dev_cod(),dev_index=%d,cod=%d")
TRC_MSG(SRV_BT_CM_SET_DEV_NAME, "[BTSRV]: srv_bt_cm_set_dev_name() Addr:0x%02x:%02x:%02x:%02x:%02x:%02x,name_p=%d")
TRC_MSG(SRV_BT_CM_GET_DEV_NAME, "[BTSRV]: srv_bt_cm_get_dev_name() max_name_le=%d, name_p=%d")
TRC_MSG(SRV_BT_CM_GET_DEV_UCS2_NAME, "[BTSRV]: srv_bt_cm_get_dev_ucs2_name(), name_p[0]=%d")
TRC_MSG(SRV_BT_CM_READ_REMOTE_DEV_NAME, "[BTSRV]: srv_bt_cm_read_remote_dev_name(), Addr:0x%02x:%02x:%02x:%02x:%02x:%02x")
TRC_MSG(SRV_BT_CM_IS_HEADSET_CONNECTED, "[BTSRV]: srv_bt_cm_is_headset_connected(), index=%d, result=%d")
TRC_MSG(SRV_BT_CM_ACTIVATE_CNF_HDLER, "[BTSRV]: srv_bt_cm_activate_cnf_hdler(),profile_id=0x%x,state=%d, flag=0x%x, ram_flag=0x%x, deactivate_flag=0x%x")
TRC_MSG(SRV_BT_CM_DEACTIVATE_CNF_HDLER, "[BTSRV]: srv_bt_cm_deactivate_cnf_hdler()profile_id=0x%x, state=%d, flag=0x%x, ram_flag=0x%x, deactivate_flag=0x%x")
TRC_MSG(SRV_BT_CM_ALLOCATE_CONN_ID_INT, "[BTSRV]: srv_bt_cm_allocate_conn_id_int(), conn_id = %d")
TRC_MSG(SRV_BT_CM_FREE_CONNECTION_ID, "[BTSRV]: srv_bt_cm_free_connection_id(), conn_id=%d")
TRC_MSG(SRV_BT_CM_START_CONN, "[BTSRV]: srv_bt_cm_start_conn(), Addr:0x%02x:%02x:%02x:%02x:%02x:%02x, in_out=%d, profile_id=0x%x, dev_name=%d,state=%d")
TRC_MSG(SRV_BT_CM_CONNECT_IND, "[BTSRV]: srv_bt_cm_connect_ind(), state=%d, conn_id=%d")
TRC_MSG(SRV_BT_CM_STOP_CONN, "[BTSRV]: srv_bt_cm_stop_conn(),conn_id=%d,profile_id=0x%x")
TRC_MSG(SRV_BT_CM_SCO_CONNECT_CNF_HDLER, "[BTSRV] :srv_bt_cm_sco_connect_cnf_hdler, result=%d, conn_id=%d, state=%d")
TRC_MSG(SRV_BT_CM_SCO_CONNECT_IND_HDLER, "[BTSRV]: srv_bt_cm_sco_connect_ind_hdler(), state=%d, conn_id=%d")
TRC_MSG(SRV_BT_CM_SCO_DISCONNECT_IND_HDLER, "[BTSRV]: srv_bt_cm_sco_disconnect_ind_hdler(), state=%d, conn_id=%d")
TRC_MSG(SRV_BT_CM_INIT, "[BTSRV]: srv_bt_cm_init()")
TRC_MSG(SRV_BT_CM_GET_CONN_TYPE, "[BTSRV]: srv_bt_cm_get_conn_type(), profile_id=0x%x")
TRC_MSG(SRV_BT_CM_REGISTER_OPERATION_CALLBACK, "[BTSRV]: srv_bt_cm_register_operation_callback(), oper_type=%d, func_p=%d")
TRC_MSG(SRV_BT_CM_UNREGISTER_OPERATION_CALLBACK, "[BTSRV]: srv_bt_cm_unregister_operation_callback(), oper_type=%d")
TRC_MSG(SRV_BT_CM_REG_PAIRING_PERMISSION, "[BTSRV]: srv_bt_cm_reg_pairing_permission(), profile_id=0x%x, fp=%d")
TRC_MSG(SRV_BT_CM_UNREG_PAIRING_PERMISSION, "[BTSRV]: srv_bt_cm_unreg_pairing_permission(), profile_id=0x%x")
TRC_MSG(SRV_BT_CM_CONNECT_DEFAULT_HEADSET, "[BTSRV]: srv_bt_cm_connect_default_headset(), conn_cb=%d")
TRC_MSG(SRV_BT_CM_DEACTIVATE_PROFILES, "[BTSRV]: srv_bt_cm_deactivate_profiles(), state=%d, deactivate_flag=0x%x")
TRC_MSG(SRV_BT_CM_GET_EXISTED_CONN_NUM, "[BTSRV]: srv_bt_cm_get_existed_conn_num()=%d")
TRC_MSG(SRV_BT_CM_GET_EXISTED_CONN_INFO, "[BTSRV]: srv_bt_cm_get_existed_conn_info(), index=%d")
TRC_MSG(SRV_BT_CM_GET_SCO_STATUS, "[BTSRV] : srv_bt_cm_get_sco_status()=%d")
TRC_MSG(SRV_BT_CM_RELEASE_ALL_CONN_TIMEOUT_HDLR, "[BTSRV]: srv_bt_cm_release_all_conn_timeout_hdlr(),state=%d")
TRC_MSG(SRV_BT_CM_RELEASE_CONN, "[BTSRV]: srv_bt_cm_release_conn(), conn_id=%d, result=%d,profile_id=0x%x")
TRC_MSG(SRV_BT_CM_RELEASE_ALL_CONN, "[BTSRV] : srv_bt_cm_release_all_conn()")
TRC_MSG(SRV_BT_CM_RELEASE_DEV_CONN, "[BTSRV]: srv_bt_cm_release_dev_conn(),lap=0x%x, uap=0x%x, nap=0x%x")
TRC_MSG(SRV_BT_CM_RELEASE_PROFILE, "[BTSRV]: srv_bt_cm_release_profile(), Addr:0x%02x:%02x:%02x:%02x:%02x:%02x, profile_id=0x%x")
TRC_MSG(SRV_BT_CM_GET_SEARCHED_DEV_NUM, "[BTSRV]: srv_bt_cm_get_searched_dev_num()=%d")
TRC_MSG(SRV_BT_CM_GET_SEARCHED_DEV_INFO, "[BTSRV]: srv_bt_cm_get_searched_dev_info(), index=%d")
TRC_MSG(SRV_BT_CM_GET_PAIRED_DEV_NUM, "[BTSRV]: srv_bt_cm_get_paired_dev_num()=%d")
TRC_MSG(SRV_BT_CM_GET_PAIRED_DEV_INFO, "[BTSRV]: srv_bt_cm_get_paired_dev_info(), index=%d")
TRC_MSG(SRV_BT_CM_GET_DEV_INFO, "[BTSRV]: srv_bt_cm_get_dev_info(), Addr:0x%02x:%02x:%02x:%02x:%02x:%02x")
TRC_MSG(SRV_BT_CM_SEARCH, "[BTSRV]: srv_bt_cm_search(),max_response=%d, timeout=%d, cod=%d, name_discovery=%d, state=%d")
TRC_MSG(SRV_BT_CM_SEARCH_ABORT, "[BTSRV]: srv_bt_cm_search_abort() state=%d")
TRC_MSG(SRV_BT_CM_BOND, "[BTSRV}: srv_bt_cm_bond(),index=%d,state=%d")
TRC_MSG(SRV_BT_CM_DEBOND, "[BTSRV]: srv_bt_cm_debond(),index=%d,state=%d")
TRC_MSG(SRV_BT_CM_SEND_PASSKEY, "[BTSRV]: srv_bt_cm_send_passkey(), state=%d,flag=0x%x,ram_flag=0x%x,deactivate_flag=0x%x, Addr:0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x,result=%d")
TRC_MSG(SRV_BT_CM_SECURITY_NUMERIC_CONFIRM, "[BTSRV]: srv_bt_cm_security_numeric_confirm(), Addr:0x%02x:%02x:%02x:%02x:%02x:%02x, accept=%d,state=%d")
TRC_MSG(SRV_BT_CM_SECURITY_KEYPRESS_NOTIFY_CANCEL, "[BTSRV] : srv_bt_cm_security_keypress_notify_cancel()")
TRC_MSG(SRV_BT_CM_UNBLOCK, "[BTSRV]: srv_bt_cm_unblock(), Addr:0x%02x:%02x:%02x:%02x:%02x:%02x")
TRC_MSG(SRV_BT_CM_SET_AUTHORIZE, "[BTSRV]: srv_bt_cm_set_authorize(), Addr:0x%02x:%02x:%02x:%02x:%02x:%02x, type=%d")
TRC_MSG(SRV_BT_CM_GET_AUTHORIZE, "[BTSRV]: srv_bt_cm_get_authorize(), Addr:0x%02x:%02x:%02x:%02x:%02x:%02x, result=%d")
TRC_MSG(SRV_BT_CM_REFRESH_SERVICE_LIST, "srv_bt_cm_refresh_service_list(), service_list_num=%d")
TRC_MSG(SRV_BT_CM_DEV_DEL, "[BTSRV] : srv_bt_cm_mydev_del(),lap=0x%x,uap=0x%x,nap=0x%x")
TRC_MSG(SRV_BT_CM_DEV_DEL_ALL, "srv_bt_cm_dev_del_all()")
TRC_MSG(SRV_BT_CM_DEV_ADD, "srv_bt_cm_dev_add(),lap=0x%x,uap=0x%x,nap=0x%x")
TRC_MSG(SRV_BT_CM_DEV_REMOVE, "srv_bt_cm_dev_remove(),lap=0x%x,uap=0x%x, nap=0x%x")
TRC_MSG(SRV_BT_CM_GET_STATE, "srv_bt_cm_get_state()=%d")
TRC_MSG(SRV_BT_CM_ANTENNA_OFF, "srv_bt_cm_antenna_off()")
TRC_MSG(SRV_BT_CM_SWITCH_ON_TIMEOUT_HDLR, "[BTSRV]: srv_bt_cm_switch_on_timeout_hdlr()")
TRC_MSG(SRV_BT_CM_SWITCH_ON, "[BTSRV]: srv_bt_cm_switch_on(), state=%d")
TRC_MSG(SRV_BT_CM_SWITCH_OFF_TIMEOUT_HDLR, "[BTSRV]: srv_bt_cm_switch_off_timeout_hdlr()")
TRC_MSG(SRV_BT_CM_SWITCH_OFF, "[BTSRV]: srv_bt_cm_switch_off(), state=%d, flag=0x%x, ram_flag=0x%x, deactivate_flag=0x%x")
TRC_MSG(SRV_BT_CM_ACTIVATE_PROFILE, "[BTSRV]: srv_bt_cm_activate_profile()state=%d")
TRC_MSG(SRV_BT_CM_SET_AUTHENTICATION, "[BTSRV]: srv_bt_cm_set_authentication()auth=%d")
TRC_MSG(SRV_BT_CM_NVRAM_READ_INFO, "[BTSRV]: srv_bt_cm_nvram_read_info(), flag=0x%x,paired_dev_num=%d")
TRC_MSG(SRV_BT_CM_NVRAM_WRITE_INFO, "[BTSRV]: srv_bt_cm_nvram_write_info(), LID=%d, para=%d, BT_INFO_LID=%d, BT_SYS_INFO_LID=%d, BT_DEV_LIST_LID = %d")
TRC_MSG(SRV_BT_CM_GET_ACTION_ITEM_INDEX, "[BTSRV]: srv_bt_cm_get_action_item_index()=%d")
TRC_MSG(SRV_BT_CM_GET_FLAG_TRACE, "[BTSRV]: srv_bt_cm_get_flag(get_flag=%x)=%d")
TRC_MSG(SRV_BT_CM_RECOVER_PANIC_REQ, "[BTSRV]: srv_bt_cm_recover_panic_req()")
TRC_MSG(SRV_BT_CM_SET_NOTIFY, "[BTSRV]: srv_bt_cm_set_notify(), srv_hd=%d")
TRC_MSG(SRV_BT_CM_RESET_NOTIFY, "[BTSRV]: srv_bt_cm_reset_notify(), srv_hd=%d")
TRC_MSG(SRV_BT_CM_NOTIFY, "[BTSRV]: srv_bt_cm_notify(), event=0x%x")
TRC_MSG(SRV_BT_CM_POST_EVENT_PROC, "[BTSRV]: srv_bt_cm_post_event_proc(), ind_p->event=%d")
TRC_MSG(SRV_BT_CM_GET_DEV_NUM, "[BTSRV]: srv_bt_cm_get_dev_num(), dev_type=%d, num=%d")
TRC_MSG(SRV_BT_CM_GET_DEV_INDEX, "[BTSRV]: srv_bt_cm_get_dev_index(), Addr:0x%02x:%02x:%02x:%02x:%02x:%02x, dev_type=%d")
TRC_MSG(SRV_BT_CM_GET_DEV_INDEX_2, "[BTSRV]: srv_bt_cm_get_dev_index()=%d")
TRC_MSG(SRV_BT_CM_GET_DEV_INFO_BY_ADDR, "[BTSRV]: srv_bt_cm_get_dev_info_by_addr(), Addr:0x%02x:%02x:%02x:%02x:%02x:%02x, dev_type=%d")
TRC_MSG(SRV_BT_CM_GET_DEV_INFO_BY_INDEX, "[BTSRV]: srv_bt_cm_get_dev_info_by_index(), index=%d, dev_type=%d")
TRC_MSG(SRV_BT_CM_DEV_ADD_INT, "[BTSRV]: srv_bt_cm_dev_add_int(),Addr:0x%02x:%02x:%02x:%02x:%02x:%02x, dev_type=%d,recent_dev_num=%d,paired_dev_num=%d,name=%s")
TRC_MSG(SRV_BT_CM_DEV_ADD_INT_2, "[BTSRV]: srv_bt_cm_dev_add_int(),idx:%d,Addr:0x%02x:%02x:%02x:%02x:%02x:%02x, ref_cnf:%d")
TRC_MSG(SRV_BT_CM_DEV_ADD_INT_3, "[BTSRV]: srv_bt_cm_dev_add_int(),recent_dev_num:%d, recent_idx_list[%d]:%d")
TRC_MSG(SRV_BT_CM_DEV_ADD_INT_4, "[BTSRV]: srv_bt_cm_dev_add_int(),paired_dev_num:%d, paired_idx_list[%d]:%d")
TRC_MSG(SRV_BT_CM_DEV_DELETE_INT, "[BTSRV]: srv_bt_cm_dev_delete_int(),Addr:0x%02x:%02x:%02x:%02x:%02x:%02x, dev_type=%d,result=%d")
TRC_MSG(SRV_BT_CHIP_AVAILABLE, "[BTSRV]: srv_bt_chip_available(), res=%d")
TRC_MSG(SRV_BT_CM_PROFILE_REGISTER, "[BTSRV]: srv_bt_cm_profile_register(), profile_id = 0x%4x")
TRC_MSG(SRV_BT_CM_PROFILE_DEREGISTER, "[BTSRV]: srv_bt_cm_profile_deregister(), profile_id = 0x%4x")
TRC_MSG(SRV_BT_CM_INIT_EVENT_HANDLER, "[BTSRV]: srv_bt_cm_init_event_handler()")
TRC_MSG(SRV_BT_CM_ACTIVATE_PROFILES_INT, "[BTSRV]: srv_bt_cm_activate_profiles_int(),deactivate_flag=0x%x,flight_mode=%d,profile_id=0x%x")
TRC_MSG(SRV_BT_CM_IS_ALL_SUPPORTED_PROFILES_ACTIVATED, "[BTSRV]: srv_bt_cm_is_all_supported_profiles_activated()flight_mode=%d,profile_id=0x%04x,result=%d")
TRC_MSG(SRV_BT_CM_IS_ALL_SUPPORTED_PROFILES_DEACTIVATED, "[BTSRV]: srv_bt_cm_is_all_supported_profiles_deactivated()profile_id=0x%x,result=%d")
TRC_MSG(SRV_BT_CM_SET_DEACTIVATE_FLAG, "[BTSRV]: srv_bt_cm_set_deactivate_flag(),prof_flag=0x%x")
TRC_MSG(SRV_BT_CM_RESET_DEACTIVATE_FLAG, "[BTSRV]: srv_bt_cm_reset_deactivate_flag(),prof_flag=0x%x")
TRC_MSG(SRV_BT_CM_IS_PAIRING_PERMITTED, "[BTSRV]: srv_bt_cm_is_pairing_permitted(),profile_id=0x%x,result=%d")
TRC_MSG(SRV_BT_CM_SET_A2DP_PROHIBIT_VIS, "[BTSRV]: srv_bt_cm_set_a2dp_prohibit_vis()setting=%d")
TRC_MSG(SRV_BT_CM_INCREASE_PAIRED_DEV_NUM, "[BTSRV]: srv_bt_cm_increase_paired_dev_num()")
TRC_MSG(SRV_BT_CM_DECREASE_PAIRED_DEV_NUM, "[BTSRV]: srv_bt_cm_decrease_paired_dev_num()=%d")
TRC_MSG(SRV_BT_CM_SET_ACTION_INDEX, "[BTSRV]: srv_bt_cm_set_action_index(),index=%d")
TRC_MSG(SRV_BT_CM_ECHO_CONN_CNF_STACK, "[BTSRV]: srv_bt_cm_echo_conn_cnf_stack(),i=%d,profile_id=0x%x,conn_id=%d")
TRC_MSG(SRV_BT_CM_PUSH_CONN_CNF_STACK, "[BTSRV]: srv_bt_cm_push_conn_cnf_stack(),i=%d,profile_id=0x%x,conn_id=%d")
TRC_MSG(SRV_BT_CM_POP_CONN_CNF_STACK, "[BTSRV]: srv_bt_cm_pop_conn_cnf_stack()i=%d,profile_id=0x%x,conn_id=%d")
TRC_MSG(SRV_BT_CM_CLEAR_SPECIFIC_CONN_CNF_STACK, "[BTSRV]: srv_bt_cm_clear_specific_conn_cnf_stack() profile_id=0x%x,conn_id=%d")
TRC_MSG(SRV_BT_CM_LAWMO_CB_HDLR, "[BTSRV]: srv_bt_cm_lawmo_cb_hdlr() app_id=%d,cmd=%d,state=%d")
TRC_MSG(SRV_BT_CM_GET_ACTIVE_HFP_CONNECT_ID, "[BTSRV]: srv_bt_cm_get_active_hfp_connect_id()=%d")
TRC_MSG(SRV_BT_CM_INCREASE_DISCOVERED_DEV_NUM, "[BTSRV] : g_srv_bt_cm_cntx.discovered_dev_num++=%d")
TRC_MSG(SRV_BT_CM_MY_DEV_FUL_REJECT_PIN_REQ, "[BTSRV] :Reject Pin Req because of my device list full")
TRC_MSG(SRV_BT_CM_ANTENNA_ON_REQ_HDLER, "[BTSRV]: srv_bt_cm_antenna_on_req_hdler(),uart=%d")
TRC_MSG(SRV_BT_CM_ANTENNA_ON_REQ_HDLER_2, "[BTSRV]: srv_bt_cm_antenna_on_req_hdler()")
TRC_MSG(SRV_BT_CM_ANTENNA_ON_RSP_HDLER, "[BTSRV]: srv_bt_cm_antenna_on_rsp_hdler()")
TRC_MSG(SRV_BT_CM_ANTENNA_OFF_RSP_HDLER, "[BTSRV]: srv_bt_cm_antenna_off_rsp_hdler(),state=%d,flag=0x%x,ram_flag=0x%x,deactivate_flag=0x%x")
TRC_MSG(SRV_BT_CM_READY_IND_HDLER, "[BTSRV]: srv_bt_cm_ready_ind_hdler()")
TRC_MSG(SRV_BT_CM_RESTART_REQ_IND_HDLER, "[BTSRV]: srv_bt_cm_restart_req_ind_hdler()")
TRC_MSG(SRV_BT_CM_RESTART_RSP_HDLER, "[BTSRV]: srv_bt_cm_restart_rsp_hdler()")
TRC_MSG(SRV_BT_CM_DEV_UPDATE_NAME, "[BTSRV]: srv_bt_cm_dev_update_name(), Addr:0x%02x:%02x:%02x:%02x:%02x:%02x, dev_name=%d")
TRC_MSG(SRV_BT_CM_DISCOVERY_RESULT_IND_HDLER, "[BTSRV]: srv_bt_cm_discovery_result_ind_hdler(),cod=%d,Addr:0x%02x:%02x:%02x:%02x:%02x:%02x,state=%d,flag=0x%x,ram_flag=0x%x,deactivate_flag=0x%x")
TRC_MSG(SRV_BT_CM_DISCOVERY_CNF_HDLER, "[BTSRV]: srv_bt_cm_discovery_cnf_hdler()")
TRC_MSG(SRV_BT_CM_CANCEL_DISCOVERY_CNF_HDLER, "[BTSRV]: srv_bt_cm_cancel_discovery_cnf_hdler(),state=%d,flag=0x%x,ram_flag=0x%x,deactivate_flag=0x%x")
TRC_MSG(SRV_BT_CM_SET_LOCAL_NAME_CNF_HDLER, "[BTSRV]: srv_bt_cm_set_local_name_cnf_hdler()state=%d,flag=0x%x,ram_flag=0x%x")
TRC_MSG(SRV_BT_CM_READ_LOCAL_BD_ADDR_CNF_HDLER, "[BTSRV]: srv_bt_cm_read_local_bd_addr_cnf_hdler(),state=%d,flag=0x%x,ram_flag=0x%x,Addr:0x%02x:%02x:%02x:%02x:%02x:%02x")
TRC_MSG(SRV_BT_CM_READ_REMOTE_NAME_CNF_HDLER, "[BTSRV]: srv_bt_cm_read_remote_name_cnf_hdler(),state=%d,flag=0x%x,ram_flag=0x%x,Addr:0x%02x:%02x:%02x:%02x:%02x:%02x")
TRC_MSG(SRV_BT_CM_SDC_SEARCH_IND_HDLER, "[BTSRV]: srv_bt_cm_sdc_search_ind_hdler()state=%d,msg_p->uuid=0x%x")
TRC_MSG(SRV_BT_CM_SDC_SEARCH_CNF_HDLER, "[BTSRV]: srv_bt_cm_sdc_search_cnf_hdler(),state=%d,searched_number=%d,Addr:0x%02x:%02x:%02x:%02x:%02x:%02x")
TRC_MSG(SRV_BT_CM_LINK_CONNECT_ACCEPT_IND_HDLER, "[BTSRV]: srv_bt_cm_link_connect_accept_ind_hdler(),state=%d,flag=0x%x,ram_flag=0x%x,deactivate_flag=0x%x")
TRC_MSG(SRV_BT_CM_BOND_IND_HDLER, "[BTSRV]: srv_bt_cm_bond_ind_hdler(),state=%d,flag=0x%x,ram_flag=0x%x,deactivate_flag=0x%x")
TRC_MSG(SRV_BT_CM_BOND_IND_HDLER_2, "[BTSRV]: srv_bt_cm_bond_ind_hdler()change to normal mode during pair!")
TRC_MSG(SRV_BT_CM_BOND_CNF_HDLER, "[BTSRV]: srv_bt_cm_bond_cnf_hdler()")
TRC_MSG(SRV_BT_CM_DEBOND_CNF_HDLER, "[BTSRV]: srv_bt_cm_debond_cnf_hdler()")
TRC_MSG(SRV_BT_CM_PASSKEY_IND_HDLER, "[BTSRV]: srv_bt_cm_passkey_ind_hdler()")
TRC_MSG(SRV_BT_CM_SECURITY_USER_CONFIRM_IND_HDLER, "[BTSRV]: srv_bt_cm_security_user_confirm_ind_hdler(),state=%d,flag=0x%x,ram_flag=0x%x,deactivate_flag=0x%x")
TRC_MSG(SRV_BT_CM_SECURITY_PASSKEY_NOTIFY_IND_HDLER, "[BTSRV]: srv_bt_cm_security_passkey_notify_ind_hdler()state=%d,flag=0x%x,ram_flag=0x%x,deactivate_flag=0x%x")
TRC_MSG(SRV_BT_CM_SECURITY_KEYPRESS_NOTIFY_IND_HDLER, "[BTSRV]: srv_bt_cm_security_keypress_notify_ind_hdler(),state=%d,flag=0x%x,ram_flag=0x%x,deactivate_flag=0x%x")
TRC_MSG(SRV_BT_CM_SECURITY_KEYPRESS_NOTIFY_CANCEL_REQ_HDLER, "[BTSRV]: srv_bt_cm_security_keypress_notify_cancel_req_hdler()")
TRC_MSG(SRV_BT_CM_BLOCK_ACTIVE_LINK_REQ_HDLER, "[BTSRV]: srv_bt_cm_block_active_link_req_hdler()")
TRC_MSG(SRV_BT_CM_BLOCK_ACTIVE_LINK_CNF_HDLER, "[BTSRV]: srv_bt_cm_block_active_link_cnf_hdler(),state=%d,flag=0x%x,ram_flag=0x%x,deactivate_flag=0x%x")
TRC_MSG(SRV_BT_CM_BLOCK_LIST_UPDATE_REQ_HDLER, "[BTSRV]: srv_bt_cm_block_list_update_req_hdler()")
TRC_MSG(SRV_BT_CM_BLOCK_LIST_UPDATE_CNF_HDLER, "[BTSRV]: srv_bt_cm_block_list_update_cnf_hdler(),state=%d,flag=0x%x,ram_flag=0x%x,deactivate_flag=0x%x")
TRC_MSG(SRV_BT_CM_SECURITY_LEVEL_REQ_HDLER, "[BTSRV]: srv_bt_cm_security_level_req_hdler(), auth_flag=%d")
TRC_MSG(SRV_BT_CM_SECURITY_LEVEL_CNF_HDLER, "[BTSRV]: srv_bt_cm_security_level_cnf_hdler()state=%d,msg_p->result=%d,flag=0x%x,ram_flag=0x%x")
TRC_MSG(SRV_BT_CM_WRITE_SCANENABLE_MODE_REQ_HDLER, "[BTSRV]: srv_bt_cm_write_scanenable_mode_req_hdler(),connected_mode=%d")
TRC_MSG(SRV_BT_CM_WRITE_SCANENABLE_MODE_CNF_HDLER, "[BTSRV]: srv_bt_cm_write_scanenable_mode_cnf_hdler()state=%d,flag=0x%x,ram_flag=0x%x,deactivate_flag=0x%x,msg_p->result=%d")
TRC_MSG(SRV_BT_CM_LINK_STATE_IND_HDLER, "[BTSRV]: srv_bt_cm_link_state_ind_hdler(),state=%d,flat=0x%x,ram_flag=0x%x,deactivate_flag=0x%x")
TRC_MSG(SRV_BT_CM_ALLOW_ACL_LINK_ESTABLISHMENT_REQ_HDLER, "[BTSRV]: srv_bt_cm_allow_acl_link_establishment_req_hdler()")
TRC_MSG(SRV_BT_CM_ALLOW_ACL_LINK_ESTABLISHMENT_CNF_HDLER, "[BTSRV]: srv_bt_cm_allow_acl_link_establishment_cnf_hdler()state=%d,flag=0x%x,ram_flag=0x%x,deactivate_flag=0x%x")
TRC_MSG(SRV_BT_CM_DISALLOW_ACL_LINK_ESTABLISHMENT_CNF_HDLER, "[BTSRV]: srv_bt_cm_disallow_acl_link_establishment_cnf_hdler(),state=%d,flag=0x%x,ram_flag=0x%x,deactivate_flag=0x%x")
TRC_MSG(SRV_BT_CM_LOCK_BT_MODULE_REQ, "[BTSRV]: srv_bt_cm_lock_bt_module_req()")
TRC_MSG(SRV_BT_CM_START_CONN_3, "[BTSRV]: return -1")
TRC_MSG(SRV_BT_CM_SET_BQB_TEST_FLAG, "[BTSRV] srv_bt_cm_set_bqb_test_flag() bqb set = %d")

#Btcmsrv Dialer interface
TRC_MSG(SRV_BT_CM_GET_MAPPED_INDEX, "[BTSRV]: srv_bt_cm_get_mapped_index(), Addr:0x%02x:%02x:%02x:%02x:%02x:%02x, index=%d")
TRC_MSG(SRV_BT_CM_GET_EMPTY_LINKED_INDEX, "[BTSRV]: srv_bt_cm_get_empty_linked_index(), g_linked_dev_tbl[%d].dev_info=0x%08x, linked=%d")
TRC_MSG(SRV_BT_CM_IS_PROFILE_CONNECTED_EX, "[BTSRV]: srv_bt_cm_is_profile_connected_ex(), Addr:0x%02x:%02x:%02x:%02x:%02x:%02x, conn_type=%d, result=%d")
TRC_MSG(SRV_BT_CM_GET_LINKED_DEV_NUM, "[BTSRV]: srv_bt_cm_get_linked_dev_num(), g_linked_dev_tbl[%d].dev_info=0x%08x, linked=%d, linked_num=%d")
TRC_MSG(SRV_BT_CM_GET_LINKED_DEV_INFO, "[BTSRV]: srv_bt_cm_get_linked_dev_info(), index_order=%d, dev_info=0x%08x")
TRC_MSG(SRV_BT_CM_IS_DEV_BUSY, "[BTSRV]: srv_bt_cm_is_dev_busy(), index=%d, busy_conn_bit=%d, result=%d")
TRC_MSG(SRV_BT_CM_GET_BUSY_DEV, "[BTSRV]: srv_bt_cm_get_busy_dev(), index=%d, busy_dev_addr=0x%08x")
TRC_MSG(SRV_BT_CM_GET_EXISTED_CONN_NUM_BY_ADDR, "[BTSRV]: srv_bt_cm_get_existed_conn_num_by_addr(), Addr:0x%02x:%02x:%02x:%02x:%02x:%02x, index=%d")
TRC_MSG(SRV_BT_CM_GET_EXISTED_CONN_NUM_BY_ADDR_END, "[BTSRV]: srv_bt_cm_get_existed_conn_num_by_addr() END, existed_conn_num =%d")
TRC_MSG(SRV_BT_CM_SET_DEV_BUSY_STATE, "[BTSRV]: srv_bt_cm_set_dev_busy_state(), Addr:0x%02x:%02x:%02x:%02x:%02x:%02x, index=%d, conn_type=%d, state=%d")
TRC_MSG(SRV_BT_CM_SET_DEV_BUSY_STATE_END, "[BTSRV]: srv_bt_cm_set_dev_busy_state() END, stamp=%d, busy_conn=%d, linked=%d")
TRC_MSG(SRV_BT_CM_SET_DEV_LINK_STATE, "[BTSRV]: srv_bt_cm_set_dev_link_state(), Addr:0x%02x:%02x:%02x:%02x:%02x:%02x, index=%d, orignal_link_state=%d, link_state=%d, orignal_stamp=%d")
TRC_MSG(SRV_BT_CM_SET_DEV_LINK_STATE_END, "[BTSRV]: srv_bt_cm_set_dev_link_state() END, index=%d, stamp=%d")
TRC_MSG(SRV_BT_CM_GET_AUTO_RECONN_FLAG, "[BTSRV]: srv_bt_cm_get_auto_reconn_flag(), Addr:0x%02x:%02x:%02x:%02x:%02x:%02x, index=%d, reconn=%d")
TRC_MSG(SRV_BT_CM_SET_AUTO_RECONN_FLAG, "[BTSRV]: srv_bt_cm_set_auto_reconn_flag(), Addr:0x%02x:%02x:%02x:%02x:%02x:%02x, reconn=%d")
TRC_MSG(SRV_BT_CM_SET_AUTO_RECONN_FLAG_END, "[BTSRV]: srv_bt_cm_set_auto_reconn_flag() END, index=%d, reconn=%d")
TRC_MSG(SRV_BT_CM_IS_HEADSET_CONNECTED_EX, "[BTSRV]: srv_bt_cm_is_headset_connected_ex(), result=%d")
TRC_MSG(SRV_BT_CM_SET_PREVENT_PASSIVE_CONN_FLAG, "[BTSRV]: srv_bt_cm_set_prevent_passive_connect_flag(), flag=%d, state=%d")
TRC_MSG(SRV_BT_CM_LINK_STATE_IND_HDLER_2, "[BTSRV]: page or time out, reason=%d, Addr:0x%02x:%02x:%02x:%02x:%02x:%02x, device_type = %d")
TRC_MSG(SRV_BT_CM_SET_DEFAULT_DEV_2, "[BTSRV]: srv_bt_cm_set_default_dev g_srv_bt_cm_cntx.dev_list[i].dev_info.attribute= 0x%x")
TRC_MSG(SRV_BT_CM_START_CONN_2, "[BTSRV]: srv_bt_cm_start_conn()END,conn_id=%d,state=%d,profile_id=0x%x")
TRC_MSG(SRV_BT_SWITCH_FLIGHT_MODE, "[BTSRV]: srv_bt_switch_flight_mode(),select_flight_mode=%d, evt=%d")
TRC_MSG(SRV_BT_SWITCH_FLIGHT_MODE_2, "[BTSRV]: srv_bt_switch_flight_mode()END,iot_flag=%d")
TRC_MSG(SRV_BT_CM_INIT_POWER, "[BTSRV]:srv_bt_cm_init_power() ,iot_flag=%d")
TRC_MSG(SRV_BT_CM_ACTIVE_COMPLETE, "[BTSRV]: srv_bt_cm_active_complete(),iot_flag=%d, result=%d")
TRC_MSG(SRV_BT_CM_DEACTIVE_COMPLETE, "[BTSRV]: srv_bt_cm_deactive_complete(),iot_flag=%d")
TRC_MSG(SRV_BT_CM_GET_EMPTY_LINKED_INDEX_2, "[BTSRV]: srv_bt_cm_get_empty_linked_index()END,idx=%d")
TRC_MSG(SRV_BT_CM_IS_PROFILE_CONNECTED_EX_1, "[BTSRV]: srv_bt_cm_is_profile_connected_ex()start,idx=%d")
TRC_MSG(SRV_BT_CM_UPDATE_LINKED_ORDER, "[BTSRV]: srv_bt_cm_update_linked_order(),idx=%d, stamp=%d, link=%d")
TRC_MSG(SRV_BT_CM_UPDATE_LINKED_ORDER_2, "[BTSRV]: srv_bt_cm_update_linked_order()if,idx=%d, stamp=%d, max_order=%d")
TRC_MSG(SRV_BT_CM_UPDATE_LINKED_ORDER_3, "[BTSRV]: srv_bt_cm_update_linked_order()else,i=%d, stamp=%d, link=%d")
TRC_MSG(SRV_BT_CM_IS_BTDIALER, "[BTSRV]: srv_bt_cm_is_bt_dialer(),cod=0x%x, ret=%d")
TRC_MSG(SRV_BT_CM_GET_PREVENT_CONN_FLAG, "[BTSRV]: srv_bt_cm_get_prevent_connect_flag(),flag=%d")
TRC_MSG(SRV_BT_CM_RESET_PREVENT_CONN_FLAG, "[BTSRV]: srv_bt_cm_reset_prevent_connect_flag(),idx=%d, stamp=%d, link=%d")
TRC_MSG(SRV_BT_CM_GET_LINK_TYPE, "[BTSRV]: srv_bt_cm_get_link_type(), type=%d")
TRC_MSG(SRV_BT_CM_GET_DEV_LINK_TYPE, "[BTSRV]: srv_bt_cm_get_dev_link_type(), type=%d)")
TRC_MSG(SRV_BT_CM_GET_LINK_NUM, "[BTSRV]: srv_bt_cm_get_link_num(), type=%d,num=%d")
TRC_MSG(SRV_BT_CM_SET_DEV_BUSY_STATE_2, "[BTSRV]: assert, idx=%d")
TRC_MSG(SRV_BT_CM_CONNECT_IND_2, "[BTSRV]: srv_bt_cm_connect_ind()end,state=%d,conn_id=%d,para.profile_id=0x%x")
TRC_MSG(SRV_BT_CM_IS_DEV_CONN_ACTIVE_1, "[BTSRV]: srv_bt_cm_is_dev_conn_active()1,conn_id=%d,idx=%d,active=%d,profile_id=0x%x")
#BCC
TRC_MSG(MMI_BT_G7_BT_BCC_INIT, "[BTBCC] : BCC init" )
TRC_MSG(MMI_BT_G7_BT_BCC_INIT_EVENT, "[BTBCC] : BCC init event handler" )
TRC_MSG(MMI_BT_G7_BT_BCC_AUTHORIZE_REQ, "[BTBCC] : mmi_bth_bcc_authorize_req_hdler, Addr:0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x" )
TRC_MSG(MMI_BT_G7_BT_BCC_IS_AUTHORIZED_REQ, "[BTBCC] : mmi_bth_bcc_is_authorized_req_hdler, Addr:0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x" )
TRC_MSG(MMI_BT_G7_BT_BCC_IS_TRUSTED_REQ, "[BTBCC] : mmi_bth_bcc_is_trusted_req_hdler, Addr:0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x" )
TRC_MSG(MMI_BT_G7_BT_BCC_GET_SECURITY_MODE, "[BTBCC] : mmi_bth_bcc_get_security_mode_req_hdler" )
TRC_MSG(MMI_BT_G7_BT_BCC_GET_PREKNOWN_DEV_COUNT, "[BTBCC] : mmi_bth_bcc_get_preknown_device_count_req_hdler" )
TRC_MSG(MMI_BT_G7_BT_BCC_GET_PREKNOWN_DEV_LIST, "[BTBCC] : mmi_bth_bcc_get_preknown_device_req_hdler" )
TRC_MSG(MMI_BT_G7_BT_BCC_STATE_TRANS, "[BTBCC] : BCC State Trans, state=%d --> %d" )
TRC_MSG(MMI_BT_G7_BT_BCC_POWER_ON_REQ, "[BTBCC] : mmi_bth_bcc_power_on_req_hdler, cm state=%d, cm power status=%d" )
TRC_MSG(MMI_BT_G7_BT_BCC_QUERY_CM_STATUS, "[BTBCC] : query cm status, cm state=%d, cm power status=%d, bcc setting modified flag=%d, cm visibility=%d, cm discoverable mode=%d, cm security mode=%d" )
TRC_MSG(MMI_BT_G7_BT_BCC_GET_DISCOVERABLE_MODE, "[BTBCC] : mmi_bth_bcc_get_discoverable_mode_req_hdler" )    
TRC_MSG(MMI_BT_G7_BT_BCC_GET_HOST_DEV_NAME, "[BTBCC] : mmi_bth_bcc_get_host_device_name_req_hdler" )    
TRC_MSG(MMI_BT_G7_BT_BCC_NATIVE_PWR_STATUS_REQ, "[BTBCC] : mmi_bth_bcc_power_on_req_hdler, cm state=%d, cm power status=%d" )
TRC_MSG(BT_HF_SRV_FSM_BEGIN, "[BTHF-Srv] FSM begin -> Service[%d] In[%d] State[%d]")
TRC_MSG(BT_HF_SRV_FSM_END, "[BTHF-Srv] FSM end -> Service[%d] In[%d] State[%d]")
TRC_MSG(BT_HF_SRV_ADD_REQ, "[BTHF-Srv] Add request -> reqID[%d] para[%d]")
TRC_MSG(BT_HF_SRV_INSERT_REQ, "[BTHF-Srv] Insert request -> reqID[%d] para[%d]")
TRC_MSG(BT_HF_SRV_ABORT_REQ, "[BTHF-Srv] Abort request -> reqID[%d] status[%d]")
TRC_MSG(BT_HF_SRV_NOTIFY, "[BTHF-Srv] Notify -> evt[%d] para[%08x]")
TRC_MSG(BT_HF_SRV_SEND_DATA, "[BTHF-Srv] srv_bthf_send_data, inst:%x, type:%d, dev_count:%d")
TRC_MSG(BT_HF_SRV_IS_VALID, "[BTHF-Srv] bthf_is_request_valid, result:%d")
TRC_MSG(BT_HF_SRV_MSG_HDLR, "[BTHF-Srv][Receive]bthf_msg_hdlr, msg_id:%d")
TRC_MSG(BT_HF_SRV_INVALID_P, "[BTHF-Srv][Fatal Error], invalid pContext:%x")
TRC_MSG(BT_HF_SRV_ERR_REQ_ID, "[BTHF-Srv][Fatal Error], req_id:%d")
TRC_MSG(BT_HF_SRV_ADD_REQ_BUSY, "[BTHF-Srv] bthf_add_req[BUSY], send, type:%d")
TRC_MSG(BT_HF_SRV_ADD_REQ_BUSY_OTHER, "[BTHF-Srv] bthf_add_req[BUSY], others, req_id:%d")
TRC_MSG(BT_HF_SRV_SEND_MSG, "[BTHF-Srv][Send] bthf_send_msg, msg_id:%d")
TRC_MSG(BT_HF_SRV_INT_SEND_DATA, "[BTHF-Srv] bthf_send_data, req:%x, dev:%x")
TRC_MSG(BT_HF_SRV_INT_DATA_TYPE, "[BTHF-Srv] data_p->type:%d")
TRC_MSG(BT_HF_SRV_NEW_INST, "[BTHF-Srv] bthf_new, inst:%x")
TRC_MSG(BT_HF_SRV_DEL_INST, "[BTHF-Srv] bthf_delete, inst:%x")
TRC_MSG(BT_HF_SRV_NEW_REQ, "[BTHF-Srv] bthf_new_req, type:%d")
TRC_MSG(BT_HF_SRV_DEL_REQ, "[BTHF-Srv] bthf_del_req, type:%d")
TRC_MSG(BT_AUD_SRV_OPEN, "[BTAUD] Open -> Inst[%x] level[%d] chnl[%d]")
TRC_MSG(BT_AUD_SRV_SET_NOTIFY, "[BTAUD] SetNotify -> Inst[%x] events[%d] notify[%x]")
TRC_MSG(BT_AUD_SRV_CLOSE, "[BTAUD] Close -> Inst[%x]")
TRC_MSG(BT_AUD_SRV_ATTACH, "[BTAUD] Attach -> Inst[%x] status[%d]")
TRC_MSG(BT_AUD_SRV_DETACH, "[BTAUD] Detach -> Inst[%x] active_chnl[%x]")
TRC_MSG(BT_AUD_SRV_SWITCH, "[BTAUD] Switch -> Inst[%x] on[%d] active_chnl[%x]")
TRC_MSG(BT_AUD_SRV_ACCEPT, "[BTAUD] Accept -> Inst[%x] link_chnl[%x]")
TRC_MSG(BT_AUD_SRV_REJECT, "[BTAUD] Reject -> Inst[%x] link_chnl[%x]")
TRC_MSG(BT_AUD_SRV_SET_VOLUME, "[BTAUD] SetVolume -> volume[%d] active_chnl[%x]")
TRC_MSG(BT_AUD_SRV_ABORT, "[BTAUD] Abort -> inst[%x] link_chnl[%x]")
TRC_MSG(BT_AUD_SRV_FSM_BEGIN, "[BTAUD] FSM begin -> chnl[%d] state[%d] op_code[%d]")
TRC_MSG(BT_AUD_SRV_FSM_END, "[BTAUD] FSM end -> chnl[%d] state[%d]")
TRC_MSG(BT_AUD_SRV_UCM_IND, "[BTAUD] UCM indication -> type[%d] chnl[%x]")
TRC_MSG(BT_AUD_SRV_SPEECH_IND, "[BTAUD] Speech indication -> status[%d] chnl[%x]")
TRC_MSG(BT_AUD_SRV_NOTIFY, "[BTAUD] Notify -> inst[%x] event[%x] arg[%d]")
TRC_MSG(MMI_BT_G7_BT_HIDD_STATE_TRANS, "[BTCORE-HIDD] : HIDD State Trans, state=%d --> %d" )
TRC_MSG(MMI_BT_HID_ACCEPT_FILE_RECV, "[HID MMI] mmi_bth_hidd_accept_conn()")
TRC_MSG(MMI_BT_HID_REJECT_FILE_RECV, "[HID MMI] mmi_bth_hidd_reject_conn()")
TRC_MSG(MMI_BT_HID_AUTH_CONFIRM_DEL_CB, "[HID MMI] mmi_bth_hidd_authorize_confirm_del_cb(), HID_state: %d")
TRC_MSG(MMI_BT_HID_ENTRY_CONN_CONFIRM_SCR, "[HID MMI] mmi_bt_hid_entry_conn_confirm_scr()")
TRC_MSG(DESKTOPX_KEY_UP_EVENT_CALLBACK, "[HID MMI] mmi_bt_hid_desktop_key_up_event_callback(),key code = %d,  key type = %d")
TRC_MSG(MEDIA_PLAYER_KEY_UP_EVENT_CALLBACK, "[HID MMI] mmi_bt_hid_media_player_key_up_event_callback(),key code = %d,  key type = %d")
TRC_MSG(PRESENTER_KEY_UP_EVENT_CALLBACK, "[HID MMI] mmi_bt_hid_presenter_key_up_event_callback(),key code = %d,  key type = %d")
TRC_MSG(MMI_BT_HID_INTERRUPT_DATA, "[HID MMI]mmi_bth_hidd_interrupt_data_req_hdler(),data = 0x%x 0x%x 0x%x 0x%x")
TRC_MSG(SRV_BT_SPP_OPEN, "[SRV_SPP]: srv_spp_open()" ) 
TRC_MSG(SRV_BT_SPP_SET_NOTIFY, "[SRV_SPP]: srv_spp_set_notify_hdlr(handle:%d,event_mask:%08x,notifier:%08x,user_data:%08x)" )
TRC_MSG(SRV_BT_SPP_DEBUG_DISPLAY_UUID, "[SRV_SPP]: uuid:(0x%x,0x%x,0x%x,0x%x)")
TRC_MSG(SRV_BT_SPP_NULL_UUID, "[SRV_SPP]: input uuid is null " ) 
TRC_MSG(SRV_BT_SPP_PORT_ACTIVATE_CNF, "[SRV_SPP]: srv_spp_port_activate_cnf()" ) 
TRC_MSG(SRV_BT_SPP_CONVERT_UUID_TO_128BIT, "[SRV_SPP]:srv_spp_uuid_convert_16bit_to_128bit(16 bit uuid:0x%x)" )
TRC_MSG(SRV_BT_SPP_CONVERT_UUID_TO_16BIT1, "[SRV_SPP]: srv_spp_uuid_convert_128bit_to_16bit() start" ) 
TRC_MSG(SRV_BT_SPP_CONVERT_UUID_TO_16BIT2, "[SRV_SPP]: srv_spp_uuid_convert_128bit_to_16bit() end:0x%x " ) 
TRC_MSG(SRV_BT_SPP_BIND_128BIT_UUID, "[SRV_SPP]: srv_spp_bind_128bit_uuid(handle:%d) inst:%d" )
TRC_MSG(SRV_BT_SPP_CONNECT_128BIT_UUID_EX, "[SRV_SPP]: srv_spp_connect_128bit_uuid_ex() handle:%d;conn_type:%d;tx_size:%d,rx_size:%d" )
TRC_MSG(SRV_BT_SPP_BIND, "[SRV_SPP]: srv_spp_bind(handle:%d, uuid:%08x) inst:%d" )
TRC_MSG(SRV_BT_SPP_DEBUG_DISPLAY_CNTX_INST, "[SRV_SPP]:  srv_spp_debug_display_cntx()Inst:handle(%d);req_id(%08x)" )
TRC_MSG(SRV_BT_SPP_DEBUG_DISPLAY_CNTX_CONN, "[SRV_SPP]: srv_spp_debug_display_cntx()Connect:conn_id(%d);conn_state(%d);port(%d)" )
TRC_MSG(SRV_BT_SPP_AUTHORIZE_RSP, "[SRV_SPP]: srv_spp_authorize_rsp()conn_id:%d;tx_size:%d;rx_size:%d;ret:%d" )
TRC_MSG(SRV_BT_SPP_CONNECT_EX, "[SRV_SPP]: srv_spp_connect_ex()handle:%d;uuid:%08x;conn_type:%d" )
TRC_MSG(SRV_BT_SPP_READ, "[SRV_SPP]: srv_spp_read()conn_id:%d;buf:%d;size:%d;send_size:%d" )
TRC_MSG(SRV_BT_SPP_WRITE, "[SRV_SPP]: srv_spp_write()conn_id:%d;buf:%d;size:%d;write_size:%d" )
TRC_MSG(SRV_BT_SPP_DISCONNECT, "[SRV_SPP]: srv_spp_disconnect()conn_id:%d" )
TRC_MSG(SRV_BT_SPP_CLOSE, "[SRV_SPP]: srv_spp_close() handle(%d)" )
TRC_MSG(SRV_BT_SPP_NOTIFY_APP, "[SRV_SPP]: srv_spp_notify_app()evt_id:%08x" )
TRC_MSG(SRV_BT_SPP_CREATE_INST, "[SRV_SPP]: srv_spp_create_inst()" )
TRC_MSG(SRV_BT_SPP_DESTROY_INST, "[SRV_SPP]: srv_spp_destroy_inst()inst: %d" )
TRC_MSG(SRV_BT_SPP_CREATE_CONN, "[SRV_SPP]: srv_spp_create_conn()for inst: %d" )
TRC_MSG(SRV_BT_SPP_DESTROY_CONN, "[SRV_SPP]: srv_spp_destroy_conn()inst: %d, port: %d" )
TRC_MSG(MMI_OBEX_GET_RECV_DRV, "[MMIOBEX]:bth_get_receive_drive: drive[%d]")
TRC_MSG(MMI_OBEX_GET_RECV_FDR1, "[MMIOBEX]:bth_get_receive_folder: mime_type[%d] subtype[%d]")
TRC_MSG(MMI_OBEX_GET_RECV_FDR2, "[MMIOBEX]:bth_get_receive_folder2: mime_type[%d] subtype[%d]")
TRC_MSG(MMI_OBEX_SEL_DRV_SCR_HDLR, "[MMIOBEX]:mmi_bt_seldrv_scr_hdlr() behavior[%d]")
TRC_MSG(MMI_OBEX_BTSEND_USBMODE, "[MMIOBEX]Not forward -> USB normal mode")
TRC_MSG(MMI_OBEX_BTSEND_DRMFORBIDDEN, "[MMIOBEX]Not forward -> DRM object")
TRC_MSG(MMI_OBEX_BTSEND_BADOBJECT, "[MMIOBEX]Not forward -> File access fail")
TRC_MSG(MMI_OBEX_BTSEND_USERDATA, "[MMIOBEX]Save UserData -> APP[%d] Prof[%d] Option[%d]")
TRC_MSG(MMI_OBEX_BTSEND_LOCALFILTER, "[MMIOBEX]Local Filter -> Prof[%x] Avail[%x]")
TRC_MSG(MMI_OBEX_BTSEND_PEERFILTER, "[MMIOBEX]Peer Filter -> Prof[%x] Avail[%x]")
TRC_MSG(MMI_OBEX_BTSEND_DEVICECALLBACK, "[MMIOBEX]Device callback -> result[%d] lap[%d] uap[%d] nap[%d]")
TRC_MSG(MMI_OBEX_BTSEND_APPCALLBACK, "[MMIOBEX]App callback -> result[%d] inst[%x]")
TRC_MSG(MMI_OBEX_BTSEND_APPCALLBACK1, "[MMIOBEX]App callback -> state[%d] sent[%d]")
TRC_MSG(MMI_OBEX_BTSEND_BEGIN, "[MMIOBEX]mmi_bt_send_begin() -> prof[%d] option[%d]")
TRC_MSG(MMI_OBEX_BTSEND_OBJ, "[MMIOBEX]mmi_bt_send_obj -> hSend[%x]")
TRC_MSG(MMI_OBEX_BTSEND_END, "[MMIOBEX]mmi_bt_send_end -> hSend[%x]")
TRC_MSG(MMI_OBEX_BTSEND_POPUP, "[MMIOBEX]btsend_popup -> result[%d]")
TRC_MSG(MMI_OBEX_STORAGE2CARD_DISALLOWED, "[MMIOBEX]mmi_bt_storage2card_hdlr() NOT allow change to card")
TRC_MSG(MMI_OBEX_STORAGE2CARD_ALLOWED, "[MMIOBEX]mmi_bt_storage2card_hdlr() allow change to card")
TRC_MSG(MMI_BT_SETTING_STORAGE_FMGR_NOTIFY_HDLR_NOT_ALLOW, "[MMIOBEX] mmi_bt_setting_storage_fmgr_notify_hdlr() not allow, event->state(%d)")
TRC_MSG(MMI_BT_SETTING_STORAGE_FMGR_NOTIFY_HDLR_ALLOW, "[MMIOBEX] mmi_bt_setting_storage_fmgr_notify_hdlr() allow, event->state(%d)")
TRC_MSG(MMI_OBEX_DISABLE_RECEIVING, "[MMIOBEX]mmi_bt_disable_receiving")
TRC_MSG(MMI_OBEX_ENABLE_RECEIVING, "[MMIOBEX]mmi_bt_enable_receiving")
TRC_MSG(MMI_OBEX_RECEIVING_DISABLED, "[MMIOBEX]mmi_bt_receiving_disabled -> disabled[%d]")
TRC_MSG(MMI_OBEX_RELEASE_TEMP_OBJ, "[MMIOBEX]mmi_bt_release_temp_obj(): retval(%d)")
TRC_MSG(MMI_OBEX_GEN_FOLDER, "[MMIOBEX]mmi_bt_gen_folder(): retval(%d)")
TRC_MSG(MMI_OBEX_GEN_TEMP_OBJ, "[MMIOBEX]mmi_bt_gen_temp_obj(): retval(%d)")
TRC_MSG(BT_SENDING_CUI_CREATE, "[SENDING_CUI] sending cui create, parentid:%d, cui id:%d")
TRC_MSG(BT_SENDING_CUI_RUN_FAIL, "[SENDING_CUI] sending cui run, new instance fail")
TRC_MSG(BT_SENDING_CUI_CLOSE, "[SENDING_CUI] sending cui close, id:%d")
TRC_MSG(BT_SENDING_CUI_GROUP_CLOSE, "[SENDING_CUI] sending cui group close, id:%d")
TRC_MSG(BT_SENDING_CUI_LAUNCH, "[SENDING_CUI] sending cui launch")
TRC_MSG(BT_SENDING_CUI_RUN, "[SENDING_CUI] sending cui run")
TRC_MSG(BT_SENDING_CUI_CONTINUE, "[SENDING_CUI] sending cui continue, id:%d")
TRC_MSG(BT_SENDING_CUI_LAUNCH_PROC, "[SENDING_CUI] sending cui launch proc, event_id:%d")
TRC_MSG(BT_SENDING_CUI_SEL_DEVICE_HDLR, "[SENDING_CUI] sending cui select device hdlr")
TRC_MSG(BT_SENDING_GROUP_PROC, "[SENDING_CUI] sending cui btsend_group_proc, group_id:%d, evt_id:%d")
TRC_MSG(SRV_OPP_STATE_TRANSITION, "[OPP_SRV] state transition. (%d -> %d)")
TRC_MSG(SRV_OPP_STATE_ERROR, "[OPP_SRV] wrong state. (%d)")
TRC_MSG(SRV_OPP_CURR_STATE, "[OPP_SRV] OPPS (%d), OPPC(%d)")
TRC_MSG(SRV_OPP_PATH_LOG, "[OPP_SRV] obj_path:")
TRC_MSG(SRV_OPP_PATH_IS_NULL, "[OPP_SRV] obj_path== NULL")
TRC_MSG(SRV_OPPC_SEND_BEGIN, "[OPP_SRV] srv_oppc_send_begin(), srv_hd: %d")
TRC_MSG(SRV_OPPC_SEND_OBJ, "[OPP_SRV] srv_oppc_send_obj(),srv_hd: %d")
TRC_MSG(SRV_OPPC_SEND_END, "[OPP_SRV] srv_oppc_send_end(),srv_hd: %d")
TRC_MSG(SRV_OPPS_ACTIVATE, "[OPP_SRV] srv_opps_activate(),srv_hd: %d")
TRC_MSG(SRV_OPPS_DEACTIVATE, "[OPP_SRV] srv_opps_deactivate(),srv_hd:%d")
TRC_MSG(SRV_OPPS_DISCONN_CLIENT, "[OPP_SRV] srv_opps_disconn_client(),srv_hd: %d, conn_id: %d")
TRC_MSG(SRV_OPPS_SEND_TPDISCONN, "[OPP_SRV] srv_opps_send_disconnect_req()")
TRC_MSG(SRV_OPPS_ACCEPT, "[OPP_SRV] srv_opps_accept(),srv_hd:%d, conn_id:%d")
TRC_MSG(SRV_OPPS_REJECT, "[OPP_SRV] srv_opps_reject(),srv_hd:%d, conn_id:%d")
TRC_MSG(SRV_OPPC_CONN_SERVER, "[OPP_SRV] srv_oppc_connect_server()")
TRC_MSG(SRV_OPPC_SEND_FIRST_PACKET_FS_OPEN, "[OPP_SRV] srv_oppc_send_first_packet(),h_snd: %d")
TRC_MSG(SRV_OPPC_MAX_PACKET_SIZE, "[OPP_SRV] srv_oppc_connect_rsp_handler(), max packet size (%d)")
TRC_MSG(SRV_OPPC_PUSH_RSP_REMAIN_LEN, "[OPP_SRV] srv_oppc_push_rsp_handler(), remain len (%d, %d)")
TRC_MSG(SRV_OPPC_PUSH_RSP_FS_READ, "[OPP_SRV] srv_oppc_push_rsp_handler(), FS_read (%d)")
TRC_MSG(SRV_OPPC_ABORT_RSP, "[OPP_SRV] srv_oppc_abort_rsp_handler(), state: %d")
TRC_MSG(SRV_OPPC_DISC_CONN_IND, "[OPP_SRV] srv_oppc_disconnect_ind_handler()")
TRC_MSG(SRV_OPPC_SUPPORTED_FORMAT, "[OPP_SRV] srv_oppc_supported_formats_ind_handler(), support_format: %d")
TRC_MSG(SRV_OPPC_CONN_TERM, "[OPP_SRV] srv_oppc_connection_terminated()")
TRC_MSG(SRV_OPPC_POST_EVENT_PROC, "[OPP_SRV] srv_oppc_post_proc()")
TRC_MSG(SRV_OPPS_DISABLE_CONNECT, "[OPP_SRV] srv_opps_connect_ind_handler(disable) ")
TRC_MSG(SRV_OPPS_FIRST_PUSH_IND, "[OPP_SRV] srv_opps_first_push_ind_handler(), state:%d ")
TRC_MSG(SRV_OPPS_NEXT_PUSH_IND, "[OPP_SRV] srv_opps_normal_push_ind_handler()")
TRC_MSG(SRV_OPPS_NEXT_PUSH_IND_FRAG_LEN, "[OPP_SRV] srv_opps_normal_push_ind_handler(), frag len (%d), total obj len (%d)")
TRC_MSG(SRV_OPPS_FINAL_PUSH_IND, "[OPP_SRV] srv_opps_final_push_ind_handler()")
TRC_MSG(SRV_OPPS_GEN_TEMP_OBJ, "[OPP_SRV] srv_opps_proc_first_push_data()-->gen_temp_file, retval: %d")
TRC_MSG(SRV_OPPS_PROC_FIRST_PUSH_IND, "[OPP_SRV] srv_opps_proc_first_push_data()")
TRC_MSG(SRV_OPPS_DISC_CONN_IND, "[OPP_SRV] srv_opps_disconnect_ind_handler()")
TRC_MSG(SRV_OPPS_CONN_TERM, "[OPP_SRV] srv_opps_connection_terminated()")
TRC_MSG(SRV_OPPS_WRITE_FILE, "[OPP_SRV] srv_opps_write_file() handle[%d] len[%d] retval[%d]") 
TRC_MSG(SRV_OPPS_POST_EVENT_PROC, "[OPP_SRV] srv_opps_post_proc()")
TRC_MSG(SRV_OPPS_CLEAN_TEMP_OBJ_1, "[OPP_SRV] srv_opp_close_temp_obj() , h_recv[%d] ")
TRC_MSG(SRV_OPPS_CLEAN_TEMP_OBJ, "[OPP_SRV] srv_opp_close_temp_obj() ,retval[%d]")
TRC_MSG(SRV_OPP_DELECT_DRM_OBJECT, "[OPP_SRV] srv_opp_check_drm_right()")
TRC_MSG(MMI_OPP_INIT, "[OPP_MMI] mmi_bt_opp_init()")
TRC_MSG(MMI_OPP_DEINIT, "[OPP_MMI] mmi_bt_opp_deinit()")
TRC_MSG(MMI_OPP_SEND_FILE_TO_DEV, "[OPP_MMI] mmi_bt_opp_send_file_to_dev()")
TRC_MSG(MMI_OPP_MULTI_SEND_TO_DEV, "[OPP_MMI] mmi_bt_opp_multi_send_to_dev()")
TRC_MSG(MMI_OPP_SEND_CONN_REQ, "[OPP_MMI] mmi_bt_oppc_send_conn_req(), result: %d")
TRC_MSG(MMI_OPP_SEND_OBJ, "[OPP_MMI] mmi_bt_opp_send_obj(), is_short: %d")
TRC_MSG(MMI_OPP_JUSTFY_JAR_FILE, "[OPP_MMI] mmi_opp_is_Jar_file(), mime_subtype(%s) ")
TRC_MSG(MMI_OPPC_DISCONN_SERVER, "[OPP_MMI] mmi_bt_oppc_disconnect_server(), conn_id (%d)")
TRC_MSG(MMI_OPP_ALLOC_BUFF, "[OPP_MMI] mmi_opp_alloc_buffer()")
TRC_MSG(MMI_OPP_FREE_BUFF, "[OPP_MMI] mmi_opp_free_buffer()")
TRC_MSG(MMI_OPP_ASM_ALLOC_CALLBACK, "[OPP_MMI] mmi_opp_asm_alloc_callback()")
TRC_MSG(MMI_OPP_ASM_NOT_ALLOC_CALLBACK, "[OPP_MMI] mmi_opp_asm_not_alloc_callback()")
TRC_MSG(MMI_OPP_ASM_STOP_APP_CALLBACK, "[OPP_MMI] mmi_opp_asm_stop_app_callback()")
TRC_MSG(MMI_OPP_PRE_SEND_FAIL, "[OPP_MMI] mmi_oppc_pre_send(failed by cm)")
TRC_MSG(MMI_OPP_SEND_CANCEL, "[OPP_MMI] mmi_oppc_send_cancel()")
TRC_MSG(MMI_OPP_SEND_IND_HANDLE, "[OPP_MMI] mmi_oppc_send_ind_handle(), type: %d")
TRC_MSG(MMI_OPP_OPPS_ACTIVATE, "[OPP_MMI] mmi_bt_opps_activate()")
TRC_MSG(MMI_OPP_OPPS_DEACTIVATE, "[OPP_MMI] mmi_bt_opps_deactivate()")
TRC_MSG(MMI_OPP_AUTHORIZE_RSP_HDLR, "[OPP_MMI] mmi_bt_opp_authorize_rsp_hdler(), result: %d")
TRC_MSG(MMI_OPP_ACCEPT_FILE_RECV, "[OPP_MMI] mmi_opps_accept_file_recv()")
TRC_MSG(MMI_OPP_REJECT_FILE_RECV, "[OPP_MMI] mmi_opps_reject_file_recv()")
TRC_MSG(MMI_OPP_RECV_IND_HANDLE, "[OPP_MMI] mmi_opps_recv_ind_handle(), type: %d")
TRC_MSG(MMI_OPP_RECV_NOTIFY, "[OPP_MMI] mmi_opps_recv_notify(), event: %d, retval: %d")
TRC_MSG(MMI_OPP_USB_PLUG_IN, "[OPP_MMI] mmi_opp_usb_plugin_hdlr()")
TRC_MSG(MMI_OPP_PATH_IS_NULL, "[OPP_MMI] obj_path== NULL")
TRC_MSG(MMI_SIMAP_AUTHORIZE_IND, "[MMISIMAP]mmi_bth_simap_authorize_ind, state = %d")
TRC_MSG(MMI_SIMAP_AUTHORIZE_RSP, "[MMISIMAP]mmi_bt_simap_authorize_rsp, state = %d result = %d")
TRC_MSG(MMI_BT_SIMAP_ACTIVATE, "[MMISIMAP]mmi_bt_simap_activate: state = %d")
TRC_MSG(MMI_BT_SIMAP_ACTIVATE_CNF, "[MMISIMAP]mmi_bt_simap_activate_cnf: state = %d")
TRC_MSG(MMI_BT_SIMAP_DEACTIVATE, "[MMISIMAP]mmi_bt_simap_deactivate: state = %d")
TRC_MSG(MMI_BTH_SIMAP_DEACTIVATE_CNF, "[MMISIMAP]mmi_bth_simap_deactivate_cnf state = %d")
TRC_MSG(MMI_BT_SIMAP_DISCONNECT, "[MMISIMAP]mmi_bt_simap_disconnect: state = %d")
TRC_MSG(MMI_BTH_SIMAP_DISCONNECT_CNF, "[MMISIMAP]mmi_bth_simap_disconnect_cnf: state = %d")
TRC_MSG(MMI_BTH_SIMAP_DISCONNECT_IND, "[MMISIMAP]mmi_bth_simap_disconnect_ind: state = %d")
TRC_MSG(MMI_BT_IS_SIMAP_ACTIVATE, "[MMISIMAP]mmi_bt_is_simap_activate: state = %d")
TRC_MSG(MMI_BTH_SIMAP_CONNECT_IND, "[MMISIMAP]mmi_bth_simap_connect_ind: state = %d")
TRC_MSG(SRV_FTP_INIT, "[SRVFTP_GOEP] srv_ftp_init()")
TRC_MSG(SRV_FTP_DEINIT, "[SRVFTP_GOEP] srv_ftp_deinit()")
TRC_MSG(SRV_FTP_EVENT_HANDLE, "[SRVFTP_GOEP] srv_ftp_event_handle()")
TRC_MSG(SRV_FTP_CNTX_INIT, "[SRVFTP_GOEP] srv_ftp_cntx_init()")
TRC_MSG(SRV_FTP_WORK_FOLDER_INIT, "[SRVFTP_GOEP] srv_ftp_work_folder_init()")
TRC_MSG(SRV_FTP_WORK_FOLDER_INIT_OPEN_NO_ERROR, "[SRVFTP_GOEP] srv_ftp_work_folder_init() open no error")
TRC_MSG(SRV_FTP_WORK_FOLDER_INIT_OPEN_ERROR, "[SRVFTP_GOEP] srv_ftp_work_folder_init() open error")
TRC_MSG(SRV_FTP_CHECK_FOLDER_EXISTED, "[SRVFTP_GOEP] srv_ftp_check_folder_existed(), path:(%s)")   
TRC_MSG(SRV_FTP_CHECK_FOLDER_EXISTED_ERROR, "[SRVFTP_GOEP] srv_ftp_check_folder_existed(), return(%d)")   
TRC_MSG(SRV_FTP_DISCONNECT_IND_HANDLE_FAILED, "[FTPMMI_GOEP] srv_ftp_disconnect_ind_handle()-- all open FTS and FTC:find index failed")   
TRC_MSG(SRV_FTP_INVALID_HDLR, "[SRVFTP_GOEP] ftp invalid handle hd(%d)")
TRC_MSG(SRV_FTPC_DISCONNECT_IND_HANDLE, "[SRVFTP_GOEP] srv_ftp_disconnect_ind_handle() ind->goep_id:(%d), ind->req_id:(%d), client->goep_id:(%d), client->req_id:(%d), client->state:(%d)")
TRC_MSG(SRV_FTPC_DISCONN_IND_HANDLE_FAILED, "[SRVFTP_GOEP] srv_ftp_disconnect_ind_handle()--client connect cacel case: find index failed")
TRC_MSG(SRV_FTPC_CONNECT_SERVER, "[SRVFTP_GOEP] srv_ftpc_connect_server() state:(%d), req_id:(%d), lap:(%d), uap:(%d), nap:(%d)")
TRC_MSG(SRV_FTPC_IS_RUNNING, "[SRVFTP_GOEP] srv_ftpc_is_running() state:(%d)")
TRC_MSG(SRV_FTPC_IS_ABORTING, "[SRVFTP_GOEP] srv_ftpc_is_aborting() state:(%d)")
TRC_MSG(SRV_FTPC_ABORT, "[SRVFTP_GOEP] srv_ftpc_abort() state:(%d)")
TRC_MSG(SRV_FTPC_SEND_DISCONNECT, "[SRVFTP_GOEP] mmi_bt_ftp_ftpc_send_disconnect() state:(%d)")
TRC_MSG(SRV_FTPC_SEND_TPDISCONNECT, "[SRVFTP_GOEP] srv_ftpc_send_tpdisconnect() state:(%d)")
TRC_MSG(SRV_FTPC_BACK_FOLDER, "[SRVFTP_GOEP] srv_ftpc_back_folder(), state:(%d), goep_conn_id:(%d)")   
TRC_MSG(SRV_FTPC_BACK_ROOT_FOLDER, "[SRVFTP_GOEP] srv_ftpc_back_root_folder() state:(%d), goep_conn_id:(%d)")
TRC_MSG(SRV_FTPC_CHANGE_FOLDER_INTERNAL, "[SRVFTP_GOEP] srv_ftpc_change_folder_internal() state:(%d), goep_conn_id:(%d)")
TRC_MSG(SRV_FTPC_CHANGE_FOLDER_FORWARD, "[SRVFTP_GOEP] srv_ftpc_change_folder_internal(): Forward Folder")
TRC_MSG(SRV_FTPC_CHANGE_FOLDER_REFRESH, "[SRVFTP_GOEP] srv_ftpc_change_folder_internal(): Refresh Folder")
TRC_MSG(SRV_FTPC_GET_FILE, "[SRVFTP_GOEP] srv_ftpc_get_file(), state:(%d)")
TRC_MSG(SRV_FTPC_CNTX_INIT, "[SRVFTP_GOEP] srv_ftpc_cntx_init()")  
TRC_MSG(SRV_FTPC_WRITE_OBJ, "[SRVFTP_GOEP] srv_ftpc_write_obj(), rsp->pkt_type(%d)")
TRC_MSG(SRV_FTPC_WRITE_OBJ_WRITE, "[SRVFTP_GOEP] srv_ftpc_write_obj(), file write FS_WRITE(%d)")
TRC_MSG(SRV_FTPC_WRITE_OBJ_CONTINUE, "[SRVFTP_GOEP] srv_ftpc_write_obj_continue(), rsp->pkt_type(%d)")
TRC_MSG(SRV_FTPC_WRITE_OBJ_CONTINUE_WRITE, "[SRVFTP_GOEP] srv_ftpc_write_obj_continue(), file write FS_WRITE(%d)")
TRC_MSG(SRV_FTPC_GET_FOLDER, "[SRVFTP_GOEP] srv_ftpc_get_folder(), rsp->rsp_code(%d), rsp->pkt_type(%d)")
TRC_MSG(SRV_FTPC_GET_FOLDER_PARSE_RESUME, "[SRVFTP_GOEP] srv_ftpc_parse_folder_content_continue()--parse resume, entity of cur folder:(%d), parsed cnt of cur folder:(%d)")
TRC_MSG(SRV_FTPC_GET_FOLDER_PARSE_DONE, "[SRVFTP_GOEP] srv_ftpc_parse_folder_content_complete()--parse done, parse_return:(%d), entity of cur folder:(%d), parsed cnt of cur folder:(%d)")
TRC_MSG(SRV_FTPC_SEND_PARSE_CONTINUE_MSG, "[SRVFTP_GOEP] srv_ftpc_send_parse_continue_msg()")
TRC_MSG(SRV_FTPC_GET_FOLDER_CNTX_INIT_OPEN, "[SRVFTP_GOEP] srv_ftpc_get_folder_cntx_init(), file open FS_OPEN(%d)")
TRC_MSG(SRV_FTPC_GET_FOLDER_WRITE, "[SRVFTP_GOEP] srv_ftpc_get_folder(), file write FS_WRITE(%d)")
TRC_MSG(SRV_FTPC_GET_OBJ, "[SRVFTP_GOEP] srv_ftpc_get_obj(), rsp->rsp_code(%d), rsp->pkt_type(%d)")
TRC_MSG(SRV_FTPC_PARSE_FOLDER_CONTENT, "[SRVFTP_GOEP] srv_ftpc_parse_folder_content()")
TRC_MSG(SRV_FTPC_PARSE_FOLDER_CONTENT_PAUSE, "[SRVFTP_GOEP] srv_ftpc_parse_folder_content() -- parsing pause!!, entity of cur folder:(%d)")
TRC_MSG(SRV_FTPC_FOLDER_LISTING_START_EL, "[SRVFTP_GOEP] srv_ftpc_folder_listing_startElement()--parsing pause!!, entity of cur folder:(%d)")
TRC_MSG(SRV_FTPC_GET_FOLDER_CONTENT, "[SRVFTP_GOEP] srv_ftpc_get_folder_content(), state:(%d), goep_conn_id:(%d)")
TRC_MSG(SRV_FTPC_CONNECT_RSP_HANDLE, "[SRVFTP_GOEP] srv_ftpc_connect_rsp_handle(), state:(%d)")
TRC_MSG(SRV_FTPC_PULL_RSP_HANDLE, "[SRVFTP_GOEP] srv_ftpc_pull_rsp_handle(), state:(%d)")
TRC_MSG(SRV_FTPC_SET_FOLDER_RSP_HANDLE, "[SRVFTP_GOEP] srv_ftpc_set_folder_rsp_handle(), state:(%d)")
TRC_MSG(SRV_FTPC_ABORT_RSP_HANDLE, "[SRVFTP_GOEP] srv_ftpc_abort_rsp_handle(), state:(%d)")
TRC_MSG(SRV_FTPC_CONNECTION_TERMINATED, "[SRVFTP_GOEP] srv_ftpc_connection_terminated()")
TRC_MSG(SRV_FTPC_PARSE_EL_START_ERR, "[SRVFTP_GOEP] srv_ftpc_folder_listing_startElement()--parser error and stopped")
TRC_MSG(SRV_FTPC_PARSE_EL_END_ERR, "[SRVFTP_GOEP] srv_ftpc_folder_listing_endElement() -- parser error and stopped")
TRC_MSG(SRV_FTPC_ABORTED_HANDLE, "[SRVFTP_GOEP] srv_ftpc_receiving_aborted_handle()")
TRC_MSG(SRV_FTPC_SET_FLAG_ABORT_REQ_SENT, "[SRVFTP_GOEP] srv_ftpc_set_abort_req_sent_flag()")
TRC_MSG(SRV_FTPC_RESET_FLAG_ABORT_REQ_SENT, "[FTPMMI_GOEP] srv_ftpc_reset_abort_req_sent_flag()")
TRC_MSG(SRV_FTPC_BROWSE_FILES_FAILED_TIMER, "[SRVFTP_GOEP] srv_ftpc_browse_files_failed_timer_expire_handle()")
TRC_MSG(SRV_FTPC_PARSE_FOLDER_CONTENT_ERROR_HANDLE, "[SRVFTP_GOEP] srv_ftpc_parse_folder_content_error_handle(), status(%d)")
TRC_MSG(SRV_FTPC_WRITE_BUF2FILE_FS_WRITE, "[SRVFTP_GOEP] srv_ftpc_write_buf2file(), FS_WRITE(%d)")
TRC_MSG(SRV_FTPC_SET_FS_FLAG, "[SRVFTP_GOEP] srv_ftpc_set_fs_flag() = %d")
TRC_MSG(SRV_FTPC_INTBUF_WRITE_OBJ_CONTINUE, "[SRVFTP_GOEP] srv_ftpc_intbuf_write_obj_continue()")   
TRC_MSG(SRV_FTPC_INTBUF_WRITE_OBJ_CONTINUE_WRITE, "[SRVFTP_GOEP] srv_ftpc_intbuf_write_obj_continue(), file write FS_WRITE(%d)")
TRC_MSG(SRV_FTPC_STOP_RECEIVING,"[SRVFTP_GOEP] srv_ftpc_stop_receiving()")
TRC_MSG(SRV_FTPC_WRITE_LNAME2FILE, "[SRVFTP_GOEP] srv_ftpc_write_lname2file()")
TRC_MSG(SRV_FTPC_WRITE_LNAME2FILE_FS_OPEN, "[SRVFTP_GOEP] srv_ftpc_write_lname2file() FS_OPEN(%d)")
TRC_MSG(SRV_FTPC_WRITE_LNAME2FILE_FS_SEEK, "[SRVFTP_GOEP] srv_ftpc_write_lname2file() FS_SEEK(%d)")
TRC_MSG(SRV_FTPC_WRITE_LNAME2FILE_FS_WRITE,"[SRVFTP_GOEP] srv_ftpc_write_lname2file() FS_WRITE(%d)")
TRC_MSG(SRV_FTPC_STATE_TRANSITION, "[SRVFTP_GOEP] ftpc state transition state:(%d -> %d)")
TRC_MSG(SRV_FTPC_STATE_ERROR, "[SRVFTP_GOEP] ftpc wrong state. state:(%d)")
TRC_MSG(SRV_FTPC_IS_VALID_HANDLE, "[SRVFTP_GOEP] srv_ftpc_is_valid_handle() hd(%d)")
TRC_MSG(SRV_FTPC_INVALID_HDLR, "[SRVFTP_GOEP] ftpc invalid handle hd(%d)")
TRC_MSG(SRV_FTPC_DISCONNECT_SERVER, "[SRVFTP_GOEP] srv_ftpc_disconnect_server()")
TRC_MSG(SRV_FTPC_NOTIFY, "[SRVFTP_GOEP] srv_ftpc_notify(), event(%d)")
TRC_MSG(SRV_FTPC_REFRESH_FOLDER, "[SRVFTP_GOEP] srv_ftpc_refresh_folder(), state(%d)")
TRC_MSG(SRV_FTPC_CHANGE_FOLDER, "[SRVFTP_GOEP] srv_ftpc_change_folder(), state(%d)")
TRC_MSG(SRV_FTPC_GET_OBJ_DETAIL_INFO_ERR, "[SRVFTP_GOEP] srv_ftpc_get_obj_detail_info() FS_ERROR(%d)")
TRC_MSG(SRV_FTPC_GET_OBJ_INFO_ERR, "[SRVFTP_GOEP] srv_ftpc_get_obj_info() FS_ERROR(%d)")
TRC_MSG(SRV_FTPC_GET_OBJ_INFO_INTERNAL_ERR, "[SRVFTP_GOEP] srv_ftpc_get_obj_info_internal() FS_ERROR(%d)")
TRC_MSG(SRV_FTPC_FLUSH_OBJ_ENTITY_ERR, "[SRVFTP_GOEP] srv_ftpc_flush_obj_entity() FS_ERROR(%d)")
TRC_MSG(SRV_FTPC_PARSE_FOLDER_INIT_ERR, "[SRVFTP_GOEP] srv_ftpc_parse_folder_init()")
TRC_MSG(SRV_FTPC_GET_FILE_COMPLETE, "[SRVFTP_GOEP] srv_ftpc_get_file_complete() cause(%d)")
TRC_MSG(SRV_FTPS_ACTIVATE, "[SRVFTP_GOEP] srv_ftps_activate()")
TRC_MSG(SRV_FTPS_DEACTIVATE, "[SRVFTP_GOEP] srv_ftps_deactivate() state(%d)")
TRC_MSG(SRV_FTPS_DISCONNECT_CLIENT, "[SRVFTP_GOEP] srv_ftps_disconnect_client() state:(%d), cntx.g_conn_id:(%d), cm.g_conn_id(%d)")
TRC_MSG(SRV_FTPS_AUTHORIZE_ACCEPT_INTERNAL, "[SRVFTP_GOEP] srv_ftps_authorize_accept_internal() state:(%d), cur_goep_conn_id:(%d)")
TRC_MSG(SRV_FTPS_AUTHORIZE_REJECT, "[SRVFTP_GOEP] srv_ftps_authorize_reject() state:(%d), cur_goep_conn_id:(%d)")
TRC_MSG(SRV_FTPS_DISCONNECT_IND_HANDLE, "[SRVFTP_GOEP] srv_ftp_disconnect_ind_handle() ind->goep_id:(%d), ind->req_id:(%d), server->goep_id:(%d), server->state:(%d) ")
TRC_MSG(SRV_FTPS_CONNECTION_TERMINATED, "[SRVFTP_GOEP] srv_ftps_connection_terminated()")
TRC_MSG(SRV_FTPS_WRITER_FLUSH_FS_WRITE, "[SRVFTP_GOEP] srv_ftps_writer_flush(), FS_WRITE(%d)")
TRC_MSG(SRV_FTPS_PUSH_OBJ_ERR, "[SRVFTP_GOEP] srv_ftps_push_obj()--ERROR")
TRC_MSG(SRV_FTPS_PUSH_DELETE, "[SRVFTP_GOEP] srv_ftps_push_delete()")
TRC_MSG(SRV_FTPS_PUSH_DELETE_INVALID_NAME, "[SRVFTP_GOEP] srv_ftps_push_delete()--invalid name")
TRC_MSG(SRV_FTPS_PUSH_DELETE_WITHOUT_NAME, "[SRVFTP_GOEP] srv_ftps_push_delete()--without name")
TRC_MSG(SRV_FTPS_PUSH_CONTINUE, "[SRVFTP_GOEP] srv_ftps_write_obj_continue(), push_ind->pkt_type(%d)")
TRC_MSG(SRV_FTPS_PUSH_CONTINUE_WRITE, "[SRVFTP_GOEP] srv_ftps_write_obj_continue(), file write FS_WRITE(%d)")
TRC_MSG(SRV_FTPS_PUSH_INBUF_CONTINUE, "[SRVFTP_GOEP] srv_ftps_inbuf_write_obj_continue()")
TRC_MSG(SRV_FTPS_PUSH_INBUF_CONTINUE_WRITE, "[SRVFTP_GOEP] srv_ftps_inbuf_write_obj_continue(), file write FS_WRITE(%d)")
TRC_MSG(SRV_FTPS_CREATE_FOLDER, "[SRVFTP_GOEP] srv_ftps_create_folder(), goep_conn_id(%d)")
TRC_MSG(SRV_FTPS_CREATE_FOLDER_CREATE_DIR, "[SRVFTP_GOEP] srv_ftps_create_folder(), FS_CreateDir(%d)")
TRC_MSG(SRV_FTPS_SET_FOLDER, "[SRVFTP_GOEP] srv_ftps_set_folder(), goep_conn_id(%d)")
TRC_MSG(SRV_FTPS_SET_PARENT_FOLDER, "[SRVFTP_GOEP] srv_ftps_set_parent_folder(), goep_conn_id(%d)")
TRC_MSG(SRV_FTPS_PULL_CONTINUE, "[SRVFTP_GOEP] srv_ftps_pull_continue(), goep_conn_id(%d)")
TRC_MSG(SRV_FTPS_SEND_OBJ, "[SRVFTP_GOEP] srv_ftps_send_obj(), goep_conn_id(%d)")
TRC_MSG(SRV_FTPS_SEND_FOLDER_CONTENT, "[SRVFTP_GOEP] srv_ftps_send_folder_content(), goep_conn_id(%d)")
TRC_MSG(SRV_FTPS_SEND_FOLDER_CONTENT_OPEN_ERROR, "[SRVFTP_GOEP] srv_ftps_send_folder_content()--open folder content file error ")
TRC_MSG(SRV_FTPS_SDP_DEREGISTER_CNF_HANDLE, "[SRVFTP_GOEP] srv_ftps_sdp_deregister_cnf_handle(), state(%d)")
TRC_MSG(SRV_FTPS_REGISTER_SERVER_RSP_HANDLE, "[SRVFTP_GOEP] srv_ftps_register_server_rsp_handle(), state(%d)")
TRC_MSG(SRV_FTPS_DEREGISTER_SERVER_RSP_HANDLE, "[SRVFTP_GOEP] srv_ftps_deregister_server_rsp_handle(), state(%d)")
TRC_MSG(SRV_FTPS_CONNECT_IND_HANDLE, "[SRVFTP_GOEP] srv_ftps_connect_ind_handle(), state(%d)")
TRC_MSG(SRV_FTPS_PUSH_IND_HANDLE, "[SRVFTP_GOEP] srv_ftps_push_ind_handle(), state(%d)")
TRC_MSG(SRV_FTPS_PULL_IND_HANDLE, "[SRVFTP_GOEP] srv_ftps_pull_ind_handle(), state(%d), ind->pkt_type(%d)")  
TRC_MSG(SRV_FTPS_SET_FOLDER_IND_HANDLE, "[SRVFTP_GOEP] srv_ftps_set_folder_ind_handle(), state(%d), ind->setpath_flag(%d)")
TRC_MSG(SRV_FTPS_ABORT_IND_HANDLE, "[SRVFTP_GOEP] srv_ftps_abort_ind_handle(), state(%d)")
TRC_MSG(SRV_FTPS_AUTHORIZE_IND_HANDLE, "[SRVFTP_GOEP] srv_ftps_authorize_ind_handle(), state(%d)")
TRC_MSG(SRV_FTPS_SET_FS_FLAG, "[SRVFTP_GOEP] srv_ftps_set_fs_flag() = %d")
TRC_MSG(SRV_FTPS_PUSH_DELETE_PROC, "[SRVFTP_GOEP] srv_ftps_push_delete_proc() param->job_id(%d), param->result(%d)")
TRC_MSG(MMI_FTPS_PUSH_FILE_NOTIFY, "[SRV_FTP_GOEP] mmi_ftps_push_file_notify() event(%d), retval(%d)")
TRC_MSG(SRV_FTPS_STOP_RECEIVING, "[SRVFTP_GOEP] srv_ftps_stop_receiving() state:(%d)")   
TRC_MSG(SRV_FTPS_CNTX_INIT, "[SRVFTP_GOEP] srv_ftps_cntx_init()")
TRC_MSG(SRV_FTPS_WRITE_OBJ, "[SRVFTP_GOEP] srv_ftps_write_obj(), push_ind->pkt_type(%d)")
TRC_MSG(SRV_FTPS_WRITE_OBJ_WRITE, "[SRVFTP_GOEP] srv_ftps_write_obj(), file write FS_WRITE(%d)")
TRC_MSG(SRV_FTPS_PUSH_OBJ, "[SRVFTP_GOEP] srv_ftps_push_obj()")
TRC_MSG(SRV_FTPS_STATE_TRANSITION, "[SRVFTP_GOEP] ftps state transition state:(%d -> %d)")
TRC_MSG(SRV_FTPS_STATE_ERROR, "[SRVFTP_GOEP] ftps wrong state. state:(%d)")
TRC_MSG(SRV_FTPS_IS_VALID_HANDLE, "[SRVFTP_GOEP] srv_ftpS_is_valid_handle() hd(%d)")
TRC_MSG(SRV_FTPS_INVALID_HDLR, "[SRVFTP_GOEP] ftps invalid handle hd(%d)")
TRC_MSG(SRV_FTPS_NOTIFY, "[SRVFTP_GOEP] srv_ftps_notify(), event(%d)")
TRC_MSG(SRV_FTPS_GEN_FOLDER_CONTENT_ERROR_HANDLE, "[SRVFTP_GOEP] srv_ftps_gen_folder_content_error_handle()")
TRC_MSG(SRV_FTPS_SEND_GEN_FOLDER_CONTINUE, "[SRVFTP_GOEP] srv_ftps_send_gen_folder_continue()")
TRC_MSG(SRV_FTPS_SEND_PULL_ERROR, "[SRVFTP_GOEP] srv_ftps_send_pull_error()")
TRC_MSG(SRV_FTPS_GEN_FOLDER_CONTENT_CONTINUE, "[SRVFTP_GOEP] srv_ftps_gen_folder_content_continue()")
TRC_MSG(SRV_FTPS_WRITE_FOLDER_CONTENT, "[SRVFTP_GOEP] srv_ftps_write_folder_content()")
TRC_MSG(SRV_FTPS_WRITER_FLUSH, "[SRVFTP_GOEP] srv_ftps_writer_flush()")
TRC_MSG(SRV_FTPS_SDP_REGISTER_CNF_HANDLE, "[SRVFTP_GOEP] srv_ftps_sdp_register_cnf_handle() cnf->result(%d)")
TRC_MSG(SRV_FTPS_COMPOSE_END_ELEMENT, "[SRVFTP_GOEP] srv_ftps_compose_end_element()")
TRC_MSG(SRV_FTPS_GEN_ROOT_CONTENT, "[SRVFTP_GOEP] srv_ftps_gen_root_content()")
TRC_MSG(SRV_FTPS_GEN_FOLDER_CONTENT, "[SRVFTP_GOEP] srv_ftps_gen_folder_content()")
TRC_MSG(SRV_FTP_POST_EVENT_PROC, "[SRVFTP_GOEP] srv_ftp_post_event_proc() role(%d)")
TRC_MSG(SRV_FTPS_ACCEPT_PUSH_OBJ, "[SRVFTP_GOEP] srv_ftps_accept_push_obj()")
TRC_MSG(SRV_FTPS_REJECT_PUSH_OBJ, "[SRVFTP_GOEP] srv_ftps_reject_push_obj()")
TRC_MSG(SRV_FTPS_SET_PERMISSION, "[SRVFTP_GOEP] srv_ftps_set_permission(%d)")
TRC_MSG(MMI_FTPS_READ_ERROR_FLAG_AND_POPUP, "[FTPMMI_GOEP] mmi_ftps_read_error_flag_and_popup(), error_flag(%d)")
TRC_MSG(MMI_FTP_POPUP_HANDLE, "[FTPMMI_SCR] mmi_ftp_popup_hdlr(), behavior[%d]")
TRC_MSG(MMI_BT_FTPC_CONNECT_SERVER, "[FTPMMI_GOEP] mmi_bt_ftpc_connect_server()")
TRC_MSG(MMI_FTPC_GET_LIST_FILES, "[FTPMMI_SCR] mmi_ftpc_get_list_files() ftpc_start_recv_hd(%d),list_obj_cnt(%d)")   
TRC_MSG(MMI_FTPC_GET_ALL, "[FTPMMI_SCR] mmi_ftpc_get_all_files(), ftpc_start_recv_hd(%d),file_cnt_cur_folder(%d)")
TRC_MSG(MMI_FTPC_CHECK_LIST, "[FTPMMI_SCR] mmi_ftpc_check_list()")
TRC_MSG(MMI_FTPC_FREE_LIST, "[FTPMMI_SCR] mmi_ftpc_free_list()")
TRC_MSG(MMI_FTPC_GET_NEXT_FILE, "[FTPMMI_SCR] mmi_ftpc_get_next_file()")
TRC_MSG(MMI_FTP_POPUP_HDLR, "[FTPMMI_SCR] mmi_ftp_popup_hdlr(), string(%s)")
TRC_MSG(MMI_FTPS_OPERATION_BEGIN_IND_HANDLE, "[FTPMMI_SCR] mmi_ftps_operation_begin_ind_handle() op=%d")
TRC_MSG(MMI_FTPS_OPERATION_END_IND_HANDLE, "[FTPMMI_SCR] mmi_ftps_operation_end_ind_handle() op=%d")
TRC_MSG(MMI_FTPS_DISCONNECT_IND_HANDLE, "[FTPMMI_SCR] mmi_ftps_disconnect_ind_handle(), g_mmi_ftp_scr_cntx_p->ftps_disconn_from_cm(%d)")
TRC_MSG(MMI_FTPS_CONNECT_IND_HANDLE, "[FTPMMI_SCR] mmi_ftps_connect_ind_handle()")
TRC_MSG(MMI_BTH_FTPS_CONNECTION_AUTHORIZE_RSP_HDLER, "[FTPMMI_SCR] mmi_bth_ftps_connection_authorize_rsp_hdler(), result(%d)")
TRC_MSG(MMI_FTPS_AUTHORIZE_IND_HANDLE, "[FTPMMI_SCR] mmi_ftps_authorize_ind_handle()")
TRC_MSG(MMI_FTPS_STOP_IND_HANDLE, "[FTPMMI_SCR] mmi_ftps_stop_ind_handle()")
TRC_MSG(MMI_FTPS_START_IND_HANDLE, "[FTPMMI_SCR] mmi_ftps_start_ind_handle(), start_ind_p->result(%d)")
TRC_MSG(MMI_BT_FTPS_DISCONNECT_CLIENT, "[FTPMMI_SCR] mmi_bt_ftps_disconnect_client()")
TRC_MSG(MMI_BT_FTPS_DEACTIVATE, "[FTPMMI_SCR] mmi_bt_ftps_deactivate()")
TRC_MSG(MMI_BT_FTPS_ACTIVATE, "[FTPMMI_SCR] mmi_bt_ftps_activate(), ftps_srv_hd(%d)")
TRC_MSG(MMI_FTPS_EVENT_HANDLE, "[FTPMMI_SCR] mmi_ftps_event_handle(), event(%d)")
TRC_MSG(MMI_FTPS_OPERATION_PUSH_END_IND_HANDLE, "[FTPMMI_SCR] mmi_ftps_operation_push_end_ind_handle(), op_end_ind_p->result(%d)")
TRC_MSG(MMI_FTPS_OPERATION_PUSH_BEGIN_IND_HANDLE, "[FTPMMI_SCR] mmi_ftps_operation_push_begin_ind_handle(), op_begin_ind_p->result(%d)")
TRC_MSG(MMI_FTPC_LIST_OPTION_DELETE, "[FTPMMI_SCR] mmi_ftpc_list_option_delete(), item_index(%d)") 
TRC_MSG(MMI_FTPC_DISCONNECT_SERVER_RSP_HD, "[FTPMMI_SCR] mmi_ftpc_disconnect_server_rsp_hd() ftpc_disconn_from_cm(%d)")
TRC_MSG(MMI_FTPC_GET_FILE_CONTENT_RSP_HD, "[FTPMMI_SCR] mmi_ftpc_get_file_content_rsp_hd() is_abort_from_client(%d) result(%d)")
TRC_MSG(MMI_FTPC_GET_FOLDER_CONTENT_RSP_HD, "[FTPMMI_SCR] mmi_ftpc_get_folder_content_rsp_hd() result(%d), entity_cnt(%d), file_cnt(%d)")
TRC_MSG(SRV_FTPC_DISP_FOLDER_CONTENT, "[FTPMMI_SCR] srv_ftpc_disp_folder_content(), status(%d)")
TRC_MSG(MMI_FTPC_SET_FOLDER_RSP_HD, "[FTPMMI_SCR] mmi_ftpc_set_folder_rsp_hd() result_p->result(%d)")
TRC_MSG(MMI_FTPC_CONNECT_RSP_HD, "[FTPMMI_SCR] mmi_ftpc_connect_rsp_hd() connect_result(%d)")
TRC_MSG(MMI_FTPC_EVENT_HANDLE, "[FTPMMI_SCR] mmi_ftpc_event_handle() event(%d)")
TRC_MSG(MMI_FTPC_GET_SINGLE_FILE, "[FTPMMI_SCR] mmi_ftpc_get_single_file(), ftpc_start_recv_hd(%d)")
TRC_MSG(MMI_FTPC_OBJ_RECEIVE_IND, "[FTPMMI_SCR] mmi_ftpc_obj_receive_ind()")
TRC_MSG(MMI_FTPC_ADDHISTORY, "[FTPMMI_SCR] mmi_ftpc_addhistory()")
TRC_MSG(MMI_FTPC_BROWSER_HISTORY_REPLACE, "[FTPMMI_SCR] mmi_ftpc_browser_history_replace() got_root_flag(%d)")
TRC_MSG(MMI_FTPC_NOTIFY_RECV_ERR, "[FTPMMI_SCR] mmi_ftpc_notify_recv_err() cause(%d)")
TRC_MSG(MMI_FTPC_ENTRY_IDLE_NOTIFY_SCR, "[FTPMMI_SCR] mmi_ftpc_entry_idle_notify_scr()")
TRC_MSG(MMI_FTPC_ENTRY_OBJ_DETAIL, "[FTPMMI_SCR] mmi_ftpc_entry_obj_detail()")
TRC_MSG(MMI_FTPC_GET_SEVERAL_OPTION_HDLR, "[FTPMMI_SCR] mmi_ftpc_get_several_option_hdlr(), menu_id(%d)")
TRC_MSG(MMI_FTPC_MARK_UNMARK_CHANGE, "[FTPMMI_SCR] mmi_ftpc_mark_unmark_change(), index(%d)")
TRC_MSG(MMI_BT_FTPC_DISCONNECT_SERVER, "[FTPMMI_SCR] mmi_bt_ftpc_disconnect_server")
TRC_MSG(MMI_FTPC_GET_FILE_NOTIFY, "[FTPMMI_SCR] mmi_ftpc_get_file_notify(), hd(%d), event(%d), retval(%d)")
TRC_MSG(MMI_BT_MMI_OBEX_GET_PROFILE_SHARED_BUF, "[BTMMIOBEX] mmi_bt_obex_get_profile_shared_buffer().")
TRC_MSG(MMI_BPP_IS_READY, "[BPPMMI] bpp_is_ready: auto_on[%d], power[%d]")   
TRC_MSG(MMI_BPP_PRINTING, "[BPPMMI] printing_progress: inst[0x%x]")
TRC_MSG(MMI_BPP_ENTRY_PREVIEW, "[BPPMMI] entry_preview")     
TRC_MSG(MMI_BPP_AUTO_ON_DONE, "[BPPMMI] auto_on_done: inst[0x%x] result[%d]")
TRC_MSG(MMI_BPP_GET_PRINTER_DONE,  "[BPPMMI] get_printer_done: inst[0x%x] result[%d] addr[%x-%x-%x]")
TRC_MSG(MMI_BPP_POWER_ON,  "[BPPMMI] power_on: auto_on[%d] status[%d]")
TRC_MSG(BPP_MMI_LAUNCH, "[BPP][MMI] cui_launch -> gid[%d] type[%x]")
TRC_MSG(BPP_MMI_DRM_METHOD, "[BPP][MMI] cui_launch -> drm_method[%d]")
TRC_MSG(BPP_MMI_SET_DATA, "[BPP][MMI] cui_set_data -> inst[%x] type[%x] size[%d]")
TRC_MSG(BPP_MMI_STYLE_RULE, "[BPP][MMI] cui_style_rule -> inst[%x]")
TRC_MSG(BPP_MMI_START_APP, "[BPP][MMI] bpp_start_app -> inst[%x]")
TRC_MSG(BPP_MMI_STOP_APP, "[BPP][MMI] bpp_stop_app -> inst[%x] result[%d]")
TRC_MSG(BPP_MMI_NEW_PREVIEW, "[BPP][MMI] bpp_new_preview -> w_page[%d] h_page[%d] obj_type[%d] w_obj[%d] h_obj[%d]")
TRC_MSG(BPP_MMI_NOTIFY_START, "[BPP][MMI] bpp_notify_start -> inst[%x] w_page[%d] h_page[%d]")
TRC_MSG(BPP_MMI_NOTIFY_DATA_REQ, "[BPP][MMI] bpp_notify_data_req -> inst[%x] app_type[%x] gid[%d]")
TRC_MSG(BPP_MMI_NOTIFY_COMPLETE, "[BPP][MMI] bpp_notify_complete -> inst[%x] result[%d] gid[%d]")
TRC_MSG(BPP_MMI_DRAW_PREVIEW, "[BPP][MMI] draw_preview -> bkg[%d %d %d %d] page[%d %d] obj[%d %d]")
TRC_MSG(BPP_MMI_DRAW_IMAGE, "[BPP][MMI] draw_image -> region[%d %d] obj[%d %d] last[%d %d] retval[%d]")
TRC_MSG(BPP_MMI_PAGE_INFO, "[BPP][MMI] set_page_info -> real[%d %d] obj[%d %d] media_size[%x] orient[%x]")
TRC_MSG(BPP_MMI_UPD_PAGE_INFO, "[BPP][MMI] set_page_info -> page[%d %d] obj[%d %d]")
TRC_MSG(BPP_MMI_BEARER, "[BPP][MMI] bearer_hdlr -> flags[%x] inst[%x]")
TRC_MSG(BPP_SRV_OPEN, "[BPP][SRV] srv_bpp_open -> mode[%d] inst[%x]")
TRC_MSG(BPP_SRV_CLOSE, "[BPP][SRV] srv_bpp_close -> hd[%x] inst[%x]")
TRC_MSG(BPP_SRV_LIST, "[BPP][SRV] srv_bpp_list -> inst[%x] count[%d]")
TRC_MSG(BPP_SRV_EDIT, "[BPP][SRV] srv_bpp_edit -> inst[%x] job_id[%d]")
TRC_MSG(BPP_SRV_CREATE, "[BPP][SRV] srv_bpp_create -> inst[%x] job_id[%d]")
TRC_MSG(BPP_SRV_SAVE, "[BPP][SRV] srv_bpp_create -> inst[%x] job_id[%d]")
TRC_MSG(BPP_SRV_CANCEL, "[BPP][SRV] srv_bpp_cancel -> inst[%x] job_id[%d]")
TRC_MSG(BPP_SRV_DELETE, "[BPP][SRV] srv_bpp_delete -> inst[%x] job_id[%d]")
TRC_MSG(BPP_SRV_ACCEPT, "[BPP][SRV] srv_bpp_accept -> inst[%x] job_id[%d]")
TRC_MSG(BPP_SRV_ABORT, "[BPP][SRV] srv_bpp_abort -> inst[%x] job_id[%d]")
TRC_MSG(BPP_SRV_BIND, "[BPP][SRV] srv_bpp_bind -> inst[%x] job_id[%d] lap[%x] uap[%x] nap[%x]")
TRC_MSG(BPP_SRV_SET_DEFAULT_OPTION, "[BPP][SRV] srv_bpp_set_option(default) -> inst[%x] job_id[%d]")
TRC_MSG(BPP_SRV_SET_OPTION, "[BPP][SRV] srv_bpp_set_option -> inst[%x] job_id[%d] media_size[%x] copies[%d] orient[%x] quality[%x] sides[%x]")
TRC_MSG(BPP_SRV_SET_DATA, "[BPP][SRV] srv_bpp_set_data -> inst[%x] job_id[%d] type[%x] size[%d]")
TRC_MSG(BPP_SRV_SET_PASSWD, "[BPP][SRV] srv_bpp_set_passwd -> inst[%x] job_id[%d]")
TRC_MSG(BPP_SRV_UPDATE, "[BPP][SRV] srv_bpp_update -> inst[%x] job_id[%d]")
TRC_MSG(BPP_SRV_PRINT, "[BPP][SRV] srv_bpp_print -> inst[%x] job_id[%d]")
TRC_MSG(BPP_SRV_GET_INFO, "[BPP][SRV] srv_bpp_get_info -> inst[%x] job_id[%d] filter[%d]")
TRC_MSG(BPP_SRV_NOTIFY, "[BPP][SRV] srv_bpp_notify -> inst[%x] event[%x] param[%x]")
TRC_MSG(BPP_SRV_STATE_HDLR_BEGIN, "[BPP][SRV] srv_bpp_state_begin -> in[%d] state[%d]")
TRC_MSG(BPP_SRV_STATE_HDLR_END, "[BPP][SRV] srv_bpp_state_end -> retval[%d] state[%d]")
TRC_MSG(MMI_A2DP_STATE_TRANSITION, "[A2DPMMI] state transition: (%d -> %d)")
TRC_MSG(MMI_A2DP_STATE_ERROR, "[A2DPMMI] wrong state: (%d)")
TRC_MSG(MMI_A2DP_STATE_CURRENT, "[A2DPMMI] current state: (%d)")   
TRC_MSG(MMI_A2DP_INIT_EVENT_HDLR, "[A2DPMMI] mmi_bchs_avrcp_init_event_handler()")
TRC_MSG(SRV_BIP_INIT, "[BIP_SRV] srv_bip_init...") 
TRC_MSG(SRV_BIP_DEINIT, "[BIP_SRV] srv_bip_deinit...")
TRC_MSG(SRV_BIPI_DEINIT, "[BIP_SRV] srv_bipi_deinit... state = %d")
TRC_MSG(SRV_BIP_SEND_BEGIN, "[BIP_SRV] srv_bipi_send_begin...srv_hd=%d")   
TRC_MSG(SRV_BIP_SEND_END, "[BIP_SRV] srv_bipi_send_end() srv_hd=%d")
TRC_MSG(SRV_BIP_SEND_IMG, "[BIP_SRV] srv_bipi_send_img() srv_hd=%d")  
TRC_MSG(SRV_BIP_SEND_IMG_CASE1, "[BIP_SRV] srv_bipi_send_img() get_capability")
TRC_MSG(SRV_BIP_SEND_CANCEL, "[BIP_SRV] srv_bip_send_cancel()")
TRC_MSG(SRV_BIPS_ACTIVATE, "[BIP_SRV] srv_bipr_activate(), srv_hd = %d")   
TRC_MSG(SRV_BIPS_DEACTIVATE, "[BIP_SRV] srv_bipr_deactivate() srv_hd = %d")
TRC_MSG(SRV_BIPR_ACCEPT_CONN, "[BIP_SRV] srv_bipr_accept_conn() srv_hd = %d, conn_id = %d") 
TRC_MSG(SRV_BIPR_REJECT_CONN, "[BIP_SRV] srv_bipr_reject_conn() srv_hd = %d, conn_id = %d")
TRC_MSG(SRV_BIPR_CONTINUE_IND, "[BIP_SRV] srv_bip_continue_ind_hdlr(Responder)")
TRC_MSG(SRV_BIPR_CONTINUE_IND_LAST_PKT, "[BIP_SRV] srv_bip_continue_ind_hdlr(Responder_last_pkt) thumbnail = %d")
TRC_MSG(SRV_BIPI_POST_EVENT_PROC, "[BIP_SRV] srv_bip_post_proc(initiator)")
TRC_MSG(SRV_BIPR_POST_EVENT_PROC, "[BIP_SRV] srv_bip_post_proc(Responder)")
TRC_MSG(SRV_BIPI_CONNECT_CNF, "[BIP_SRV] srv_bipi_connect_cnf_hdlr() cnf_code = %d, state = %d")
TRC_MSG(SRV_BIP_ABORT_CNF, "[BIP_SRV] srv_bipi_abort_cnf_hdlr() cnf_code = %d, state = %d")
TRC_MSG(SRV_BIPI_PUSH_ABORT_CNF, "[BIP_SRV] srv_bipi_push_abort_cnf_hdlr()")
TRC_MSG(SRV_BIPI_GET_CAPABILITIES_CNF, "[BIP_SRV] srv_bipi_push_get_capabilities_cnf_hdlr() cnf_code = %d, state = %d")
TRC_MSG(SRV_BIPI_PUT_IMG_CNF, "[BIP_SRV] srv_bipi_push_img_cnf_hdlr() cnf_code = %d, state = %d")
TRC_MSG(SRV_BIPI_PUT_THM_CNF, "[BIP_SRV] srv_bipi_push_thm_cnf_hdlr() cnf_code = %d, state = %d")
TRC_MSG(SRV_BIPI_PUSH_CONTINUE_IND, "[BIP_SRV] srv_bipi_push_continue_ind_hdlr() cnf_code = %d, state = %d")
TRC_MSG(SRV_BIPI_DISCONNECT_IND, "[BIP_SRV] srv_bipi_disconnect_ind_hdlr() state = %d")
TRC_MSG(SRV_BIP_REQUEST_TIMEOUT, "[BIP_SRV] srv_bip_request_timeout_hdlr() state = %d")
TRC_MSG(SRV_BIPI_CONNECTION_TERMINATED, "[BIP_SRV] srv_bipi_connection_terminated() state = %d")
TRC_MSG(SRV_BIPR_ACTIVATE_CNF, "[BIP_SRV] srv_bipr_activate_cnf_hdlr() state = %d")
TRC_MSG(SRV_BIPR_DEACTIVATE_CNF, "[BIP_SRV] srv_bipr_deactivate_cnf_hdlr() state = %d")
TRC_MSG(SRV_BIPR_SDP_REGISTER_CNF, "[BIP_SRV] srv_bipr_sdp_register_cnf_hdlr() cnf_code = %d")
TRC_MSG(SRV_BIPR_SDP_DEREGISTER_CNF, "[BIP_SRV] srv_bipr_sdp_deregister_cnf_hdlr() state = %d")
TRC_MSG(SRV_BIPS_DISCONNECT_CLIENT, "[BIP_SRV] srv_bipr_disconn_client() state = %d, srv_hd = %d, conn_id = %d")
TRC_MSG(SRV_BIPR_AUTHORIZE_IND, "[BIP_SRV] srv_bipr_authorize_ind_hdlr() state = %d")
TRC_MSG(SRV_BIPR_CONNECT_IND, "[BIP_SRV] srv_bipr_connect_ind_hdlr()  state = %d")
TRC_MSG(SRV_BIPR_GET_CAPABILITIES_IND, "[BIP_SRV] srv_bipr_get_capabilities_ind_hdlr() state = %d")
TRC_MSG(SRV_BIPR_PUSH_IMG_IND, "[BIP_SRV] srv_bipr_push_img_ind_hdlr() state = %d")
TRC_MSG(SRV_BIPR_RECEIVING_DISABLED, "[BIP_SRV] srv_bipr_push_img_ind_hdlr(receiving disable) ")
TRC_MSG(SRV_BIPR_PUSH_THM_IND, "[BIP_SRV] srv_bipr_push_thm_ind_hdlr() state = %d")
TRC_MSG(SRV_BIPR_COMPLETE_IND, "[BIP_SRV] srv_bipr_complete_ind_hdlr() state = %d")
TRC_MSG(SRV_BIPR_ABORT_IND, "[BIP_SRV] srv_bipr_aborted_ind_hdlr() state = %d")
TRC_MSG(SRV_BIPR_DISCONNECT_IND, "[BIP_SRV] srv_bipr_disconnect_ind_hdlr() state = %d")
TRC_MSG(SRV_BIPR_CONNECTION_TERMINATED, "[BIP_SRV] srv_bipr_connection_terminated() state = %d")
TRC_MSG(SRV_BIP_CHECK_IS_IMAGE_FILE, "[BIP_SRV] srv_bip_send_is_imagefile() ")
TRC_MSG(SRV_BIP_MIME_NULL, "[BIP_SRV] srv_bip_get_image_type_from_postfix(mime_type == NULL) ")
TRC_MSG(SRV_BIP_MIME_SUBTYPE, "[BIP_SRV] srv_bip_get_image_type_from_postfix() mime_type = %d")
TRC_MSG(SRV_BIP_GET_IMAGE_TYPE_FROM_CNTX, "[BIP_SRV] srv_bip_get_image_type_from_cntx() img_type = %d")
TRC_MSG(SRV_BIP_ENCODE_TO_THUMBNAIL, "[BIP_SRV] srv_bip_encode_file_to_thumbnail()")
TRC_MSG(SRV_BIP_GET_DIMENSION_FOR_THM_FAILED, "[BIP_SRV] srv_bip_encode_file_to_thumbnail(FAIL) ")
TRC_MSG(SRV_BIP_THUMBNAIL_DIMENSION, "[BIP_SRV] srv_bip_encode_file_to_thumbnail() width = %d, height = %d")
TRC_MSG(SRV_BIP_ENCODE_TO_JPEG_FAILED, "[BIP_SRV] srv_bip_encode_file_to_thumbnail(Encode jpeg fail)")
TRC_MSG(SRV_BIP_DRAW_RESIZED_FILE_FAILED, "[BIP_SRV] srv_bip_encode_file_to_thumbnail(redraw resize failed)")
TRC_MSG(SRV_BIP_THM_DIMENSION, "[BIP_SRV] srv_bip_get_dimension_for_thumbnail(finish calculate) width = %d, height = %d")
TRC_MSG(SRV_BIP_GET_DIMENSION_FAILED, "[BIP_SRV] srv_bip_get_dimension_for_thumbnail(failed) gdi_ret = %d")
TRC_MSG(SRV_BIP_GENERATE_THM, "[BIP_SRV] srv_bip_generate_thumbnail()")
TRC_MSG(SRV_BIP_THM_PATH, "[BIP_SRV] srv_bip_generate_thumbnail() thumbnail_path:")
TRC_MSG(SRV_BIP_FS_OPEN_ZERO_SIZE_RETURN_, "[BIP_SRV] srv_bip_generate_thumbnail() FS_Open return 0x%x ---No.(%d)")
TRC_MSG(SRV_BIP_ALLOC_APPLIBMEM, "[BIP_SRV] srv_bip_generate_thumbnail() BUF_SIZE = %d")
TRC_MSG(SRV_BIP_APPLIBMEM_ALLOC_FAILED, "[BIP_SRV] srv_bip_generate_thumbnail( allocate buffer fail)")
TRC_MSG(SRV_BIP_GDI_ENCODING_SUCCESS, "[BIP_SRV] srv_bip_generate_thumbnail(gdi encoding success) ")
TRC_MSG(SRV_BIP_GDI_ENCODING_FAILED, "[BIP_SRV] srv_bip_generate_thumbnail(gdi encoding failed)")
TRC_MSG(SRV_BIP_CONSTRUCT_SEND_THM_PATH, "[BIP_SRV] srv_bip_construct_send_thm_path()")
TRC_MSG(SRV_BIP_GEN_DUP_NAME, "[BIP_SRV] srv_bip_gen_dup_name()")
TRC_MSG(SRV_BIP_GEN_DUP_NAME_LENERROR, "[BIP_SRV] srv_bip_gen_dup_name() LENTH ERROR len = %d, prx_len = %d")
TRC_MSG(SRV_BIP_GEN_DUP_NAME_TOOLONG, "[BIP_SRV] srv_bip_gen_dup_name() name too long src_path_len = %d, tmp_name_len = %d")
TRC_MSG(SRV_BIP_GEN_NEW_NAME, "[BIP_SRV] srv_bip_gen_dup_name() GEN NEW NAME")
TRC_MSG(SRV_BIP_GEN_DUP_NAME_FAILED, "[BIP_SRV] srv_bip_gen_dup_name()dup name failed")
TRC_MSG(SRV_BIP_GET_IMGTYPE, "[BIP_SRV] srv_bip_get_image_type() ")
TRC_MSG(SRV_BIP_PNG_MACRO_DEFINED, "[BIP_SRV] PNG_DECODER macro defined!")
TRC_MSG(SRV_BIP_PNG_MACRO_NOT_DEFINED, "[BIP_SRV] PNG_DECODER macro NOT defined!")
TRC_MSG(SRV_BIP_PUSH_GET_IMGTYPE_RETURN, "[BIP_SRV]srv_bip_push_get_image_type return (%d)")
TRC_MSG(SRV_BIP_GEN_PUSHED_THM, "[BIP_SRV]srv_bip_gen_thm_filename(), img_name: ")
TRC_MSG(SRV_BIP_RENAME_PUSHED_THM_DST_NAME, "[BIP_SRV]srv_bip_rename_pushed_thm: thm_name=")
TRC_MSG(SRV_BIP_RENAME_PUSHED_THM, "[BIP_SRV]srv_bip_rename_pushed_thm(), img_name: ")
TRC_MSG(SRV_BIP_RENAME_RECVED_FILE, "[BIP_SRV]srv_bip_rename_recved_file() ")
TRC_MSG(SRV_BIP_RENAME_RECVED_FILE_DST_FILE,"[BIP_SRV]SRV_bip_rename_recved_file ..dst_file: ")
TRC_MSG(SRV_BIP_CHECK_INIT_STATE, "[BIP_SRV]-- srv_bipi_is_idle(): state=(%d)")
TRC_MSG(SRV_BIP_SERVER_IS_WORKING, "[BIP_SRV]srv_bipr_is_working()...state=%d")
TRC_MSG(SRV_BIP_PUSH_IS_SENDING,"[BIP_SRV] srv_bipi_is_sending(). initiator state=(%d)")
TRC_MSG(SRV_BIP_PROCESS_FS_ERR, "[BIP_SRV] bip_process_fs_error: %d")
TRC_MSG(SRV_BIP_SENDFILE_IS_IMAGE, "[BIP_SRV]==file to push IS BIP image file!")
TRC_MSG(SRV_BIP_SENDFILE_ISNOT_IMAGE, "[BIP MMI]==file to push is NOT BIP image file!")
TRC_MSG(SRV_BIP_FS_OPEN_RETURN, "[BIP_SRV] FS_Open return 0x%x ---No.(%d)")
TRC_MSG(SRV_BIP_FS_CREATEDIR_RETURN, "[BIP_SRV] FS_CreateDir return 0x%x ---No.(%d)")
TRC_MSG(SRV_BIP_FS_GETFILESIZE_RETRUN,"[BIP_SRV]FS_GetFileSize return ret=0x%x, size=%d")
TRC_MSG(SRV_BIP_FS_READ_RETURN,"[BIP_SRV]FS_Read return 0x%x ---No.(%d) ")
TRC_MSG(SRV_BIP_FS_WRITE_RETURN,"[BIP_SRV]FS_WRITE return 0x%x ---No.(%d) ")
TRC_MSG(SRV_BIP_FS_SEEK_RETURN,"[BIP_SRV]FS_Seek return 0x%x")
TRC_MSG(SRV_BIP_FS_CLOSE_RETURN,"[BIP_SRV]FS_Close return ret=0x%x")
TRC_MSG(SRV_BIP_FS_DELETE_RETURN,"[BIP_SRV]FS_Delete return ret=0x%x")
TRC_MSG(SRV_BIP_GDI_GET_DIMENSION,"[BIP_SRV] gdi_image_get_dimension_file return: result=%d, w=%d, h=%d")
TRC_MSG(SRV_BIP_FS_GETATTRIBUTE_RETURN,"[BIP_SRV]FS_GetAttribute return 0x%x  ")
TRC_MSG(SRV_BIP_FS_RENAME_RETURN,"[BIP_SRV]FS_Rename return 0x%x  ")
TRC_MSG(SRV_BIP_OSLMALLOC_FAILED, "[BT BIP] OslMalloc FAILED!!!")
TRC_MSG(SRV_BIP_PATH_LOG, "[BIP_SRV] path: %s")
TRC_MSG(SRV_BIP_PATH_IS_NULL, "[BIP_SRV] path is NULL")
TRC_MSG(SRV_BIP_INITOR_STATE_TRANS, "[BIP_SRV]initiator trans state from (%d) to (%d)")
TRC_MSG(SRV_BIP_RESPDOR_STATE_TRANS, "[BIP_SRV]responder trans state from (%d) to (%d)")
TRC_MSG(SRV_BIP_INITOR_STATE, "[BIP_SRV]initiator state: (%d)")
TRC_MSG(SRV_BIP_RESPDOR_STATE, "[BIP_SRV]responder state: (%d)\n")
TRC_MSG(SRV_BIP_CREATE_OUTSIDE_MEM_FAILED, "[BIP_SRV] gdi_layer_create_using_outside_memory FAILED!")
TRC_MSG(MMI_BIP_SEND_IMAGE_TO_DEV, "[BIP_MMI] mmi_bt_bip_send_image_to_dev:LAP=0x%x,UAP=0x%x,NAP=0x%x,isShN=%d")   
TRC_MSG(MMI_BIP_CONNECT_PULL_RESPONDER, "[BIP_MMI]mmi_bt_bipi_connect_pull_responder()")
TRC_MSG(MMI_BIP_PUSH_CALLBACK,"[BIP_MMI]-- call PUSH callback with rst=%d")	
TRC_MSG(MMI_BIPS_DISCONNECT_CLIENT, "[BIP_MMI] mmi_bt_bipr_disconnect_client() cm_id=%d")   
TRC_MSG(MMI_BIPI_SEND_BEGIN, "[BIP_MMI] mmi_bipi_send_begin(), event_mask=%d")
TRC_MSG(MMI_BIPI_SEND_IMG, "[BIP_MMI] mmi_bipi_send_img(), is_sfn=%d")   
TRC_MSG(MMI_BIP_SEND_CANCEL, "[BIP_MMI] mmi_bipi_send_cancel()")   
TRC_MSG(MMI_BIP_SEND_IND_HANDLE, "[BIP_MMI] mmi_bipi_send_ind_handle(), type =%d")   
TRC_MSG(MMI_BIP_GET_CAPABILITY_IND_HANDLE, "[BIP_MMI] mmi_bipi_get_capability_ind_handle()")
TRC_MSG(MMI_BIPI_NOTIFY_ERR,"[BIP MMI]mmi_bipi_notify_recv_err, cause=%d, suppress_level=0x%x")
TRC_MSG(MMI_BIP_AUTHORIZE_RSP, "[BIP_MMI] mmi_bt_bip_connection_authorize_rsp_hdler(), result = %d") 
TRC_MSG(MMI_BIPS_DISCONNECT_RESPONDER, "[BIP_MMI] mmi_bt_bipi_disconnect_responder(),cm_id=%d")
TRC_MSG(MMI_BIP_RECV_IND_HANDLE, "[BIP_MMI] mmi_bipr_recv_ind_hdlr(), type =%d")   
TRC_MSG(MMI_BIPR_ACCEPT_FILE,"[BIP_MMI]mmi_bipr_accept_file()")
TRC_MSG(MMI_BIPR_REJECT_FILE,"[BIP_MMI]mmi_bipr_reject_file()")
TRC_MSG(MMI_BIPR_GET_DRIVE_CB,"[BIP_MMI]mmi_bipr_get_recv_drive_callback uuid=0x%x,drv=%d,selected=%d")
TRC_MSG(MMI_BIP_APP_MEM_STOP_CALLBACK,"[BIP_MMI]mmi_bip_app_mem_stop_callback...")
TRC_MSG(MMI_BIP_APPLIBMEM_ALLOC_FAILED, "[MMI_BIP] applib_mem_ap_alloc FAILED!!!")
TRC_MSG(MMI_BIP_GET_DIMENSION_FAILED, "[BIP_MMI]gdi_image_get_dimension_file failed!, ret=%d")
TRC_MSG(MMI_BIP_CREATE_OUTSIDE_MEM_FAILED, "[BIP_MMI] gdi_layer_create_using_outside_memory FAILED!")
TRC_MSG(MMI_BIP_ENCODE_TO_JPEG_FAILED, "[BIP_MMI] gdi_image_encode_layer_to_jpeg FAILED!")
TRC_MSG(MMI_BIP_DRAW_RESIZED_FILE_FAILED, "[BIP_MMI] gdi_image_draw_resized_file FAILED!")
TRC_MSG(MMI_BIP_INTERRUPT_REQUEST_HDLR,"[BIP MMI]mmi_bip_interrupt_request_hdlr() behavior[%d], opt_scr_flag[%d]")
TRC_MSG(MMI_BIP_CANCEL_INTERRUPT_REQUEST_HDLR, "[BIP MMI]mmi_bip_cancel_interrupt_request_hdlr()")                    
TRC_MSG(MMI_BIP_REQUEST_NOTIFY_ERROR_HDLR, "[BIP MMI]mmi_bip_request_notify_err_hdlr(), behavior[%d]")
TRC_MSG(MMI_BIP_NOTIFY_RECV_ERR, "[BIP MMI]mmi_bip_notify_err_info, cause=(%d)")
TRC_MSG(MMI_BIP_GET_RECV_IMG_CNT,"[BIP MMI]bip_get_recv_images_cnt :(%d)")
TRC_MSG(MMI_BIP_SET_RECV_IMG_CNT,"[BIP MMI]bip_set_recv_images_cnt :(%d)")
TRC_MSG(MMI_BIP_USB_MODE_CHECK, "[BIP_MMI]mmi_bt_bip_usb_mode_check()")
TRC_MSG(MMI_BIP_ENDTER_USB_MODE, "[BIP MMI]mmi_bt_bip_enter_usb_mode_hdlr...")
TRC_MSG(MMI_BIP_USB_MODE_CNF_HDLR, "[BIP MMI]mmi_bt_bip_usb_mode_cnf_hdlr...")
TRC_MSG(MMI_BIP_USB_MODE_CHECK_RETURN, "[BIP MMI]mmi_bt_bip_usb_mode_check return (%d)")
TRC_MSG(MMI_BIP_FS_OPER_PAUSED, "[BIP MMI] responder FS_OPER PAUSED!")
TRC_MSG(MMI_BIP_CONTINUE_FS_OPER, "[BIP MMI] mmi_bt_bip_server_continue_fs_operation is called")
TRC_MSG(MMI_BIP_PAUSE_FS_OPER, "[BIP MMI] mmi_bt_bip_server_pause_fs_operation is called")
TRC_MSG(MMI_BIP_ENTRY_SENDING_SCR,"[BIP MMI]mmi_bipi_entry_sending_scr...")
TRC_MSG(MMI_BIP_EXIT_SENDING_SCR,"[BIP MMI]mmi_bipi_exit_sending_scr...")
TRC_MSG(MMI_BIP_ENTRY_CANCELLING_SCR,"[BIP MMI]mmi_bipi_entry_cancelling_scr()")
TRC_MSG(MMI_BIP_PULL_ENTRY_COTINUE_SEND_CONFIRM_SCR, "[BIP MMI]mmi_bipi_entry_continue_send_cnf_scr()")
TRC_MSG(MMI_BIP_CONTINUE_CFM_SCR_LSK, "[BIP MMI]mmi_bt_bipi_continue_send_cfm_scr_LSK...")
TRC_MSG(MMI_BIP_CONTINUE_CFM_SCR_RSK,"[BIP MMI]mmi_bt_bipi_continue_send_cfm_scr_RSK...")
TRC_MSG(MMI_BIP_CONTINUE_CFM_SCR_DEL_CB,"[BIP MMI]mmi_bipi_continue_cfm_screen_del_cb...")
TRC_MSG(MMI_BIP_SENDING_SCR_DEL_CB,"[BIP MMI]mmi_bipi_sending_screen_del_cb...")
TRC_MSG(MMI_BIP_SCR_RECV_IMG_IND,"[BIP MMI]mmi_bipr_scr_recv_img_notify...")
TRC_MSG(MMI_BIPR_DETAIL_CONFIRM_HDLR,"[BIP MMI]mmi_bipr_detail_confirm_hdlr()")
TRC_MSG(MMI_BIP_SUPPRESS_LEVEL,"[BIP MMI]mmi BIP: suppress_level=0x%x")
TRC_MSG(MMI_BIP_GEN_JPG_FILENAME, "[BIP MMI]mmi_bt_bip_gen_jpg_filename")
TRC_MSG(MMI_BIP_INT_LEVEL3_SO_REJECT, "[BIP MMI] MMI_FRM_INT_BT_LEVEL_3 is set! So reject the connection.")		
TRC_MSG(MMI_BIP_OSLMALLOC_FAILED, "[BT BIP] OslMalloc FAILED!!!")
TRC_MSG(MMI_BIP_ENCODE_TO_JPG_FIALED, "[BIP MMI] BIP_encode_to_jpg_failed")
TRC_MSG(MMI_BIP_CALL_GET_DRIVE_BEFORE_RECVIMAGE,"[BIP MMI]mmi_bipr_put_img_ind_hdlr call mmi_bth_get_receive_drive")
TRC_MSG(MMI_BIP_ENCODE_TO_JPEG, "[BIP MMI]mmi_bt_bip_encode_file_to_jpeg...")
TRC_MSG(MMI_BIP_GDI_GET_DIMENSION,"[BIP_MMI] gdi_image_get_dimension_file return: result=%d, w=%d, h=%d")
TRC_MSG(MMI_BIP_ALLOC_APPLIBMEM, "[BIP MMI] applib_mem_ap_alloc size=%d")
TRC_MSG(MMI_BIP_RECV_FILE_CONFIRM_DEL_CB,"[BIP_MMI]mmi_bipr_detail_confirm_del_cb()")
TRC_MSG(MMI_BIP_PATH_LOG, "[BIP MMI] path: %s")
TRC_MSG(MMI_BIP_PATH_IS_NULL, "[BIP MMI] path is NULL")
TRC_MSG(SRV_PBAP_SERVER_LOG_STATE, "[PBAP_SRV] pbap server state is (%d)")
TRC_MSG(SRV_PBAP_SERVER_STATE_TRAN, "[PBAP_SRV] pbap server state trans from (%d)--> (%d) ")    
TRC_MSG(SRV_PBAP_SERVER_ACTIVATE, "[PBAP_SRV] srv_pbap_activate()")
TRC_MSG(SRV_PBAP_CONNECT_IND_STATE_ERROR,"[PBAP_SRV]===pbap_connect_ind_hdlr state != SRV_PBAP_STATE_ACTIVE, response with FAILED!")
TRC_MSG(SRV_PBAP_SET_EVENT_HDLR, "[PBAP_SRV] srv_pbap_set_event_hdlr()")
TRC_MSG(SRV_PBAP_SERVER_INIT, "[PBAP_SRV] srv_pbap_init()")
TRC_MSG(SRV_PBAP_SERVER_CNTX_INIT, "[PBAP_SRV] srv_pbap_cntx_init()")
TRC_MSG(SRV_PBAP_SERVER_IS_ACTIVATE, "[PBAP_SRV] srv_pbap_activate(), server is activate already")
TRC_MSG(SRV_PBAP_SERVER_ACTIVATE_CNF, "[PBAP_SRV] srv_pbap_activate_cnf_hdlr()")
TRC_MSG(SRV_PBAP_SERVER_SDP_REGISTER, "[PBAP_SRV] srv_pbap_activate_cnf_hdlr(), start sdp registing")
TRC_MSG(SRV_PBAP_SERVER_SDP_REGISTER_CNF, "[PBAP_SRV] srv_pbap_sdp_register_cnf_hdlr()")
TRC_MSG(SRV_PBAP_SERVER_SDP_REGISTER_FAIL_RESULT, "[PBAP_SRV] srv_pbap_sdp_register_cnf_hdlr(), sdp register fail!!!  result = %d")
TRC_MSG(SRV_PBAP_SERVER_DEINIT, "[PBAP_SRV] srv_pbap_deinit()")
TRC_MSG(SRV_PBAP_SERVER_CONN_TERMINATED, "[PBAP_SRV] srv_pbap_connection_terminated()")
TRC_MSG(SRV_PBAP_SERVER_DEACTIVATE, "[PBAP_SRV] srv_pbap_deactivate()")
TRC_MSG(SRV_PBAP_SERVER_SDP_DEREGISTER_REQ,"[PBAP_SRV] srv_pbap_deactivate(), sdp deregister req sent")
TRC_MSG(SRV_PBAP_SERVER_DEACTIVATE_CNF, "[PBAP_SRV] srv_pbap_deactivate_cnf_hdlr()")
TRC_MSG(SRV_PBAP_SERVER_SDP_DEREGISTER_CNF, "[PBAP_SRV] srv_pbap_sdp_deregister_cnf_hdlr()")
TRC_MSG(SRV_PBAP_SERVER_SDP_DEREGISTR_FAIL_RESULT, "[PBAP_SRV] srv_pbap_sdp_deregister_cnf_hdlr(), sdp deregister fail!!!  result = %d")
TRC_MSG(SRV_PBAP_SERVER_SETPATH_HDLR, "[PBAP_SRV] srv_pbap_setpath_ind_hdlr()")
TRC_MSG(SRV_PBAP_SERVER_READ_ENTRY_HDLR, "[PBAP_SRV] srv_pbap_readentry_ind_hdlr()")
TRC_MSG(SRV_PBAP_SERVER_READ_FOLDER_HDLR, "[PBAP_SRV] srv_pbap_readfolder_ind_hdlr()")
TRC_MSG(SRV_PBAP_SERVER_VERIFY_PATH_FAIL, "[PBAP_SRV] pbap server read folder path error")
TRC_MSG(SRV_PBAP_SERVER_READ_LIST_HDLR, "[PBAP_SRV] srv_pbap_readlist_ind_hdlr()")
TRC_MSG(SRV_PBAP_CONNECT_IND_HDLR, "[PBAP_SRV] srv_pbap_connect_ind_hdlr()")
TRC_MSG(SRV_PBAP_SERVER_THIS_DEVICE_IS_AUTHRIZED, "[PBAP_SRV] srv_pbap_authrize_ind_hdlr(), server is a trust device.")
TRC_MSG(SRV_PBAP_CONNECT_SUPPRESS_LEVEL, "[PBAP_SRV] srv_pbap_authrize_ind_hdlr(), server suppress level = %d")
TRC_MSG(SRV_PBAP_SERVER_CONNECT_RSP_HDLR, "[PBAP_SRV] srv_pbap_connect_rsp_hdlr(), result = %d")
TRC_MSG(SRV_PBAP_SERVER_DISCONNECT_IND_HDLR, "[PBAP_SRV] srv_pbap_disconnect_ind_hdlr()")
TRC_MSG(SRV_PBAP_SERVER_AUTH_IND_HDLR, "[PBAP_SRV] srv_pbap_auth_ind_hdlr()")
TRC_MSG(SRV_PBAP_SERVER_ENTRY_AUTHENICATING, "[PBAP_SRV] srv_pbap_entry_authenticating()")
TRC_MSG(SRV_PBAP_SERVER_VERIFY_PATH_RESULT, "[PBAP_SRV] srv_pbap_get_pbtype(),  pb_type = %d")
TRC_MSG(SRV_PBAP_SERVER_ADD_HISTORY_BEFORE_CM_MARKER, "[PBAP_SRV] srv_pbap_add_history_before_cm_marker()")
TRC_MSG(SRV_PBAP_AUTHRIZE_IND_HDLR, "[PBAP_SRV] srv_pbap_authrize_ind_hdlr()")
TRC_MSG(SRV_PBAP_AUTHRIZE_IND_STATE_ERROR, "[PBAP_SRV] srv_pbap_authrize_ind_hdlr(), state error")
TRC_MSG(SRV_PBAP_PROVIDE_ENTRY, "[PBAP_SRV]srv_pbap_provide_entry()")
TRC_MSG(SRV_PBAP_PROVIDE_ENTRY_FS_OPEN, "[PBAP_SRV]srv_pbap_provide_entry(), FS_OPEN error code(%d)")
TRC_MSG(SRV_PBAP_WRITE_ENTRY_CBK, "[PBAP_SRV]srv_pbap_write_entry_cbk(), cbk error code(%d), fs error(%d)")
TRC_MSG(SRV_PBAP_PROVIDE_FOLDER, "[PBAP_SRV]mmi_bt_pabp_provide_folder()")
TRC_MSG(SRV_PBAP_GET_FOLDER_ARRAY_CBK, "[PBAP_SRV]srv_pbap_get_folder_array_cbk() cbk error code(%d), fs error(%d), array_size(%d)")
TRC_MSG(SRV_PBAP_GET_FOLDER_ARRAY_CBK_FS_OPEN, "[PBAP_SRV]srv_pbap_get_folder_array_cbk() FS_OPEN error code(%d)")
TRC_MSG(SRV_PBAP_WRITE_FOLDER_ENTRY_CBK, "[PBAP_SRV]srv_pbap_write_folder_entry_cbk() cbk error code(%d), fs error(%d)")
TRC_MSG(SRV_PBAP_GET_FOLDER_SIZE_CBK, "[PBAP_SRV]srv_pbap_get_fodler_size_cbk() cbk error code(%d), fs error(%d), size(%d)")
TRC_MSG(SRV_PBAP_GET_FOLDER_MCSIZE_CBK, "[PBAP_SRV]srv_pbap_get_folder_mcsize_cbk() cbk error code(%d), fs error(%d), size(%d)")
TRC_MSG(SRV_PBAP_PROVIDE_LIST, "[PBAP_SRV] mmi_bt_pabp_provide_list()")
TRC_MSG(SRV_PBAP_GET_LIST_ARRAY_CBK, "[PBAP_SRV] srv_pbap_get_list_array_cbk(), cbk error code(%d), fs error(%d), size(%d)")
TRC_MSG(SRV_PBAP_GET_INFO_CBK, "[PBAP_SRV] srv_pbap_get_info_cbk() cbk error code(%d), fs error(%d)")
TRC_MSG(SRV_PBAP_COMPOSE_LIST_HEADER, "[PBAP_SRV]srv_pbap_compose_list_header()")
TRC_MSG(SRV_PBAP_COMPOSE_LIST_HEADER_FS_WRITE, "[PBAP_SRV]srv_pbap_compose_list_header() FS_WRITE error code(%d)")
TRC_MSG(SRV_PBAP_COMPOSE_LIST_MIDDLE, "[PBAP_SRV]srv_pbap_compose_list_middle()")
TRC_MSG(SRV_PBAP_COMPOSE_LIST_ELEMENT, "[PBAP_SRV]srv_pbap_compose_list_element()")
TRC_MSG(SRV_PBAP_COMPOSE_LIST_ELEMENT_FS_WRITE, "[PBAP_SRV]srv_pbap_compose_list_element() FS_WRITE error code(%d)")
TRC_MSG(SRV_PBAP_COMPOSE_LIST_LIST_TAIL, "[PBAP_SRV]srv_pbap_compose_list_tail()")
TRC_MSG(SRV_PBAP_COMPOSE_LIST_LIST_TAIL_FS_WRITE, "[PBAPSRV]srv_pbap_compose_list_tail() FS_WRITE error_code(%d)")
TRC_MSG(SRV_PBAP_GET_LIST_SIZE_CBK, "[PBAP_SRV]srv_pbap_get_list_size_cbk() cbk error code(%d), fs error(%d), size(%d)")
TRC_MSG(SRV_PBAP_GET_LIST_MCSIZE_CBK, "[PBAP_SRV]srv_pbap_get_list_mcsize_cbk() cbk error code(%d), fs error(%d), size(%d)")
TRC_MSG(SRV_PBAP_GET_PHB_FILTER, "[PBAP_SRV] srv_pbap_get_phb_filter(), filter(%x)")
TRC_MSG(SRV_PBAP_GET_PHB_FORMAT, "[PBAP_SRV] srv_pbap_get_phb_format(), format(%d)")
TRC_MSG(SRV_PBAP_GET_PHB_ORDER, "[PBAP_SRV] srv_pbap_get_phb_order(), order(%d)")
TRC_MSG(SRV_PBAP_AUTHORIZE_SCR_HDLR, "[PBAP_SRV] mmi_bt_ftps_auth_scr_hdlr(), behavior(%d)")
TRC_MSG(SRV_PBAP_SERVER_GET_CALL_HISTORY, "[PBAP_SRV] pbap server get call history : result = %d, count = %d")
TRC_MSG(SRV_PBAP_SERVER_BUILD_VCARD_OPEN_FILE_FAIL, "[PBAP_SRV] pbap server build vcard open file fail")
TRC_MSG(SRV_PBAP_SERVER_PHONEBOOK_IS_NOT_READY, "[PBAP_SRV] pbap server phonebook is not ready")
TRC_MSG(SRV_PBAP_SERVER_BUILD_VCARD_PATH, "[PBAP_SRV] pbap server build vcard path flag = %d")
TRC_MSG(SRV_PBAP_SERVER_SET_PATH_INFO, "[PBAP_SRV] pbap server set path info : reset = %d, flags = %d, path = %s, storePath = %s")
TRC_MSG(SRV_PBAP_SERVER_GET_PROVIDE_PARAMS, "[PBAP_SRV] pbap server get provide params")
TRC_MSG(SRV_PBAP_SERVER_DISCONNECT_CLIENT, "[MMI_PBAP] srv_pbap_disconnect_client()")
TRC_MSG(MMI_BT_SIM_EVENT_HDLR, "[BTMMI]:mmi_bt_sim_event_hdlr(), msg->sim:%d, menu_gid:%d, active_id:%d")
TRC_MSG(MMI_BT_SET_MENU_GROUP_PROC_1, "[BTMMI]:mmi_bt_set_menu_group_proc(), sim available, flag:0x%x")
TRC_MSG(MMI_BT_SET_MENU_GROUP_PROC_2, "[BTMMI]:mmi_bt_set_menu_group_proc(), sim unavailable, flag:0x%x")
TRC_MSG(MMI_BT_SIM_HOT_SWAP_HDLR, "[BTMMI]:mmi_bt_sim_hot_swap_hdlr(), event->type:%d, flag:0x%x, menu_gid:%d, active_id:%d")
TRC_MSG(MMI_BT_ENTRY_POWER_ON_CONFIRM_DEL_CB, "[BTMMI]:mmi_bt_entry_power_on_confirm_del_cb(), flag=0x%x, pwr_on_cb_with_result=0x%x")
TRC_MSG(MMI_BT_SWITCH_FLIGHT_MODE, "[BTMMI]:mmi_bt_switch_flight_mode(), select_flight_mode=%d")
TRC_MSG(MMI_BT_POWER_SWITCHING, "[BTMMI]:mmi_bt_power_switching()")
TRC_MSG(MMI_BT_PASSKEY_INPUT_SCR_DEL_CB, "[BTMMI]:mmi_bt_passkey_input_scr_del_cb()")
TRC_MSG(MMI_BT_SEND_PASSKEY, "[BTMMI]:mmi_bt_send_passkey(), CODE:%x,%x,%x,%x,%x,%x,%x,%x")
TRC_MSG(MMI_BT_ENTRY_SECURITY_USER_CONFIRM_SCREEN, "[BTMMI]:mmi_bt_entry_security_user_confirm_screen()")
TRC_MSG(MMI_BT_ENTRY_MYDEV_CONN_FTP, "[BTMMI]:mmi_bt_entry_mydev_conn_ftp()")
/* BT Dialer HFP Traces */
/*BT Dialer Init/Deinit Operation*/
TRC_MSG(SRV_BT_DIALER_INIT_OPERATION, "[BTDialerSrv]BT Dialer service init")
TRC_MSG(SRV_BT_DIALER_DEINIT_OPERATION, "[BTDialerSrv]BT Dialer service Deinit")
/*Service Handler*/
TRC_MSG(SRV_BT_DIALER_HF_OPEN, "[BTDialerSrv] open, srv_hd:%d")
TRC_MSG(SRV_BT_DIALER_HF_CLOSE, "[BTDialerSrv] close, srv_hd:%d")
TRC_MSG(SRV_BT_DIALER_HF_CLOSE_FAIL, "[BTDialerSrv] already close")
/*Register Callback*/
TRC_MSG(SRV_BT_DIALER_HF_INDICATORS, "[BTDialerSrv] register indicators,event : %d")
/* Pending Action */
TRC_MSG(SRV_BT_DIALER_HF_PENDING_ACTION, "[BTDialerSrv]Pending Action : %d")
/* Reset state*/
TRC_MSG(SRV_BT_DIALER_HF_RESET, "[BTDialerSrv] reset call state, conn_id;%d")
/* sco */
TRC_MSG(SRV_BT_DIALER_HF_SCO_CONN, "[BTDialerSrv] Sco connection, conn_id:%d, err:%d, open:%d")
/* device management*/
TRC_MSG(SRV_BT_DIALER_HF_NEW_DEV, "[BTDialerSrv] new_device, cur_dev:%d, Addr:0x%02x:%02x:%02x:%02x:%02x:%02x")
TRC_MSG(SRV_BT_DIALER_HF_NEW_DEV_SUC, "[BTDialerSrv] new Device, %x")
TRC_MSG(SRV_BT_DIALER_HF_NEW_DEV_FAIL, "[BTDialerSrv] new dev fail")
TRC_MSG(SRV_BT_DIALER_HF_NEW_DEV_SPEC, "[BTDialerSrv] new dev special,dev_p:%x, ind:%d, cm_id:%d")
TRC_MSG(SRV_BT_DIALER_HF_INVALID_ADDR, "[BTDialerSrv] invalid BT addr")
TRC_MSG(SRV_BT_DIALER_HF_DEV_EXIST, "[BTDialerSrv] Device already exist, %x")
TRC_MSG(SRV_BT_DIALER_HF_DEL_DEV, "[BTDialerSrv] delete device, srv_hd:%d, alloc:%d, dev:%x")
TRC_MSG(SRV_BT_DIALER_HF_DEL_CM_ID, "[BTDialerSrv] delete cm_id:%d")
TRC_MSG(SRV_BT_DIALER_HF_DEL_REF_CNT, "[BTDialerSrv] dev_reference count:%d")
TRC_MSG(SRV_BT_DIALER_HF_NOT_FIND_DEV, "[BTDialerSrv] don't find device, srv_hd:%d")
TRC_MSG(SRV_BT_DIALER_HF_DEV_NOT_READY, "[BTDialerSrv] dev not ready")
TRC_MSG(SRV_BT_DIALER_HF_GET_DEV_BY_HD, "[BTDialerSrv] srv_bt_dialer_get_dev_info_by_hd, hd:%d")
TRC_MSG(SRV_BT_DIALER_HF_GET_DEV_INFO, "[BTDialerSrv] [get] hd:%d, conn_id:%d")
/* CM ID */
TRC_MSG(SRV_BT_DIALER_HF_ALLOC_CM_ID, "[BTDialerSrv] alloc cm_id:%d")
TRC_MSG(SRV_BT_DIALER_HF_FREE_CM_ID, "[BTDialerSrv] free cm_id:%d")
/* connection notify */
TRC_MSG(SRV_BT_DIALER_HF_CONN_NOTIFY, "[BTDialerSrv] connection notify, cb:%x, evt:%d")
/* Call State check*/
TRC_MSG(SRV_BT_DIALER_HF_IS_ANY_CALL,"[BTDialerSrv] is any call, setup:%d, call:%d, held:%d")
TRC_MSG(SRV_BT_DIALER_HF_IS_IN_CALL,"[BTDialerSrv] is in call, call:%d, held:%d")
TRC_MSG(SRV_BT_DIALER_HF_NOTIFY,"[BTDialerSrv] notify, setup:%d,call:%d,held:%d")
TRC_MSG(SRV_BT_DIALER_HF_BT_CALL_ALLOWED,"[BTDialerSrv] bt_call_check, unallowed:%d, setup:%d, call:%d, held:%d")
TRC_MSG(SRV_BT_DIALER_HF_BT_CALL_ALLOWED_RESULT,"[BTDialerSrv] bt_call_check_result, result:%d")
/*Activate/Deactivate*/
TRC_MSG(SRV_BT_DIALER_ACTIVATE_REQ, "[BTDialerSrv]BT_Dialer send activate req")
TRC_MSG(SRV_BT_DIALER_ACTIVATE_CNF_FAIL, "[BTDialerSrv]BT_Dialer activate cnf hdlr :failed")
TRC_MSG(SRV_BT_DIALER_ACTIVATE_CNF_SUCCESS, "[BTDialerSrv]BT_Dialer activate cnf hdlr :activated")
TRC_MSG(SRV_BT_DIALER_DEACTIVATE, "[BTDialerSrv]BT_Dialer Deactivate req")
TRC_MSG(SRV_BT_DIALER_DEACTIVATE_FAIL, "[BTDialerSrv]BT_Dialer Deactivate cnf hdlr :failed")
TRC_MSG(SRV_BT_DIALER_DEACTIVATED, "[BTDialerSrv]BT_Dialer Deactivate cnf hdlr :Deactivated")
/*Connect/Disconnect*/
TRC_MSG(SRV_BT_DIALER_FATAL_ERR,"[BTDialerSrv] [Fatal Error] err:%d, conn_id:%d, addr:%d%d%d")
TRC_MSG(SRV_BT_DIALER_DUMP_CUR_DEV,"[BTDialerSrv] dump device info: bt_addr:%d,%d,%d; cm_id:%d; conn_id:%d; srv_hd:%d; state:%d")
TRC_MSG(SRV_BT_DIALER_CONNECT_REQ,"[BTDialerSrv]Connect_Req , bt_addr: %d,%d,%d")
TRC_MSG(SRV_BT_DIALER_CONNECT_CNF_FAIL,"[BTDialerSrv]Connect Fail")
TRC_MSG(SRV_BT_DIALER_CONNECT_CNF_PASSED,"[BTDialerSrv]Connected")
TRC_MSG(SRV_BT_DIALER_CONNECT_IND,"[BTDialerSrv] Connect_ind, conn_id:%d, bt_addr:0x%02x:%02x:%02x:%02x:%02x:%02x")
TRC_MSG(SRV_BT_DIALER_CONNECT_IND_RSP, "[BTDialerSrv]Connect_ind_rsp,accept : %d")
TRC_MSG(SRV_BT_DIALER_DISCONNECT_ERR, "[BTDialerSrv]Dis Fatal Error, dev_info:%x, cm_cb:%x")
TRC_MSG(SRV_BT_DIALER_DISCONNECT_REQ, "[BTDialerSrv]BT_Dialer Disconnect req")
TRC_MSG(SRV_BT_DIALER_DISCONNECT_FAIL, "[BTDialerSrv]BT_Dialer Disconnect cnf hdlr :failed")
TRC_MSG(SRV_BT_DIALER_DISCONNECT_IND, "[BTDialerSrv]BT_Dialer Disconnect indication")
TRC_MSG(SRV_BT_DIALER_IS_SCO_ALLOW, "[BTDialerSrv] is sco allow, allow:%d, cur:%d")
/* indication notify */
TRC_MSG(SRV_BT_DIALER_HF_IND_NOTIFY,"[BTDialerSrv] ind notify, conn_id:%d, evt_id:%d")
/* cnf notify */
TRC_MSG(SRV_BT_DIALER_HF_CNF_NOTIFY, "[BTDialerSrv] cmd_cnf, pending:%d, evt_id:%d")
/*Handle AT command*/
TRC_MSG(SRV_BT_DIALER_HF_PROC_FUNC, "[BTDialerSrv] HF_PROC_FUNC- Initiate AT command execution")
TRC_MSG(SRV_BT_DIALER_SEND_AT_CMD, "[BTDialerSrv] send at cmd, srv_hd:%d, conn_id:%d")
TRC_MSG(SRV_BT_DIALER_EXEC_AT_CMD, "[BTDialerSrv] exec next cmd:%d, conn_id:%d")
/*ATA Command Handling*/
TRC_MSG(SRV_BT_DIALER_ATA_CMD, "[BTDialerSrv] AT-Answer Req")
TRC_MSG(SRV_BT_DIALER_ATA_CMD_CNF_HDLR, "[BTDialerSrv] :AT-Answer Cnf:%d")
/*ATD Command Handling*/
TRC_MSG(SRV_BT_DIALER_ATD_CMD, "[BTDialerSrv] Dial number Req:%s")
TRC_MSG(SRV_BT_DIALER_ATD_CMD_CNF_HDLR, "[BTDialerSrv] :Dial Number Cnf:%d")
/*Memory Dialing Command Handling*/
TRC_MSG(SRV_BT_DIALER_AT_MEM, "[BTDialerSrv] Memory dial Req:%d")
TRC_MSG(SRV_BT_DIALER_ATMEM_CMD_CNF_HDLR, "[BTDialerSrv] :Memory Dial Cnf:%d")
/*BLDN Command Handling*/
TRC_MSG(SRV_BT_DIALER_AT_BLDN, "[BTDialerSrv]Last Dialed number Call")
TRC_MSG(SRV_BT_DIALER_AT_BLDN_CMD_CNF_HDLR, "[BTDialerSrv] :Last Dialed Number Call Cnf:%d")
/*CHUP Command Handling*/
TRC_MSG(SRV_BT_DIALER_AT_CHUP_CMD, "[BTDialerSrv](CHUP Cmd)Hang Up active calls")
TRC_MSG(SRV_BT_DIALER_AT_CHUP_CMD_CNF_HDLR, "[BTDialerSrv]:CHUP Cmd Cnf:%d")
/*CMEE Command Handling*/
TRC_MSG(SRV_BT_DIALER_AT_CMEE, "[BTDialerSrv](CMEE)Event Reporting enable:%d")
TRC_MSG(SRV_BT_DIALER_AT_CMEE_CMD_CNF_HDLR, "[BTDialerSrv](CMEE)Event Reporting Cnf:%d")
/*NREC Command Handling*/
TRC_MSG(SRV_BT_DIALER_AT_NREC, "[BTDialerSrv](NREC)Noise Reduction Req")
TRC_MSG(SRV_BT_DIALER_AT_NREC_RSP, "[BTDialerSrv](NREC)Noise Reduction Cnf:%d")
/*VTS Command Handling*/
TRC_MSG(SRV_BT_DIALER_AT_VTS, "[BTDialerSrv](VTS)DTMF tone req,tone:%d")
TRC_MSG(SRV_BT_DIALER_AT_VTS_CMD_CNF_HDLR, "[BTDialerSrv]DTMF tone Cnf:%d")
/*Ring Alert*/
TRC_MSG(SRV_BT_DIALER_RING_ALERT, "[BTDialerSrv]Ring Alert")
/*VGS Command Handling*/
TRC_MSG(SRV_BT_DIALER_AT_VGS, "[BTDialerSrv]Volume gain req,gain:%d")
TRC_MSG(SRV_BT_DIALER_AT_VGS_CMD_CNF_HDLR, "[BTDialerSrv]Volume Gain Cnf:%d")
/*VGM Command Handling*/
TRC_MSG(SRV_BT_DIALER_AT_VGM, "[BTDialerSrv]Mic gain req,gain:%d")
TRC_MSG(SRV_BT_DIALER_AT_VGM_CMD_CNF_HDLR, "[BTDialerSrv]Mic Gain Cnf:%d")
/*CHLD Command Handling*/
TRC_MSG(SRV_BT_DIALER_AT_CHLD, "[BTDialerSrv]Call Hold Req,number:%d")
TRC_MSG(SRV_BT_DIALER_AT_CHLD_CMD_CNF_HDLR, "[BTDialerSrv]Call Hold Cnf:%d")
/*CLIP Command Handling*/
TRC_MSG(SRV_BT_DIALER_AT_CLIP, "[BTDialerSrv]Calling Line Indentification enable:%d")
TRC_MSG(SRV_BT_DIALER_AT_CLIP_CMD_CNF_HDLR, "[BTDialerSrv]Calling Line Indentification Cnf:%d")
/*CCWA Command Handling*/
TRC_MSG(SRV_BT_DIALER_AT_CCWA, "[BTDialerSrv]Call Wait Notify:%d")
TRC_MSG(SRV_BT_DIALER_AT_CCWA_CMD_CNF_HDLR, "[BTDialerSrv]Call Wait Notify Cnf:%d")
/*COPS Command Handling*/
TRC_MSG(SRV_BT_DIALER_SET_AT_COPS, "[BTDialerSrv]Set Network Operator Format")
TRC_MSG(SRV_BT_DIALER_SET_AT_COPS_CNF_HDLR, "[BTDialerSrv]Set Network Operator Format Cnf:%d")
TRC_MSG(SRV_BT_DIALER_AT_COPS, "[BTDialerSrv]Get Network Operator Req")
TRC_MSG(SSRV_BT_DIALER_AT_COPS_CNF_HDLR, "[BTDialerSrv]Get Network Operator Cnf:%d")
/*CNUM Command Handling*/
TRC_MSG(SRV_BT_DIALER_AT_CNUM, "[BTDialerSrv]Subscribe Number Info")
TRC_MSG(SRV_BT_DIALER_AT_CNUM_CNF, "[BTDialerSrv]Subscribe Number result :%d")
/*BVRA Command Handling*/
TRC_MSG(SRV_BT_DIALER_AT_BVRA, "[BTDialerSrv]Voice Recognition Activation:%d")
TRC_MSG(SRV_BT_DIALER_AT_BVRA_CNF, "[BTDialerSrv]Voice Recog Act Response:%d")
/*BNIP Command Handling*/
TRC_MSG(SRV_BT_DIALER_AT_BNIP, "[BTDialerSrv]Attach num to voice tag")
TRC_MSG(SRV_BT_DIALER_AT_BNIP_CNF, "[BTDialerSrv]Attach num to voice tag response :%d")
/*BTRH Command Handling*/
TRC_MSG(SRV_BT_DIALER_AT_BTRH, "[BTDialerSrv]Query res and hold status")
TRC_MSG(SRV_BT_DIALER_AT_BTRH_CNF, "[BTDialerSrv]Res and hold status result:%d,%d")
/*CLCC Command Handling*/
TRC_MSG(SRV_BT_DIALER_CLCC_REQ, "[BTDialerSrv]Call List Req")
TRC_MSG(SRV_BT_DIALER_CLCC_CNF, "[BTDialerSrv]Call List Response:%d")
/*In band ringing Ind*/
TRC_MSG(SRV_BT_DIALER_IN_BAND_RING_IND, "[BTDialerSrv]Ring Indication : %d")
/*CIEV call Ind*/
TRC_MSG(SRV_BT_DIALER_LOG_CIEV_CALL_IND, "[BTDialerSrv]CIEV call ind : %d")
/*CIEV call setup Ind*/
TRC_MSG(SRV_BT_DIALER_CIEV_CALLSETUP_IND, "[BTDialerSrv]Call setup ind : %d")
/*CIEV call held Ind*/
TRC_MSG(SRV_BT_DIALER_CALL_HELD_IND, "[BTDialerSrv]Call held ind : %d")
/*BATTCH IND*/
TRC_MSG(SRV_BT_DIALER_BATTCH_IND, "[BTDialerSrv]Battery Charge Ind:%d")
/*BATTCH IND*/
TRC_MSG(SRV_BT_DIALER_ROAMING_IND, "[BTDialerSrv]Roaming Ind:%d")
/*CIEV Signal IND*/
TRC_MSG(SRV_BT_DIALER_SIGNAL_IND, "[BTDialerSrv]Signal Strength Ind:%d")
/*CIEV Service IND*/
TRC_MSG(SRV_BT_DIALER_LOG_CIEV_SERVICE_IND, "[BTDialerSrv]Service Ind:%d")
/*BTRH Set Req*/
TRC_MSG(SRV_BT_DIALER_AT_BTRH_SET, "[BTDialerSrv]Set Res and Hold:%d")
/*BTRH Set CNF*/
TRC_MSG(SRV_BT_DIALER_AT_BTRH_SET_CNF, "[BTDialerSrv]Set Res and hold status result :%d,%d")
/*XAPL REQ*/
TRC_MSG(SRV_BT_DIALER_AT_XAPL_REQ, "[BTDialerSrv]AT+XAPL REQ, features:%d")
/*XAPL CNF*/
TRC_MSG(SRV_BT_DIALER_AT_XAPL_CNF, "[BTDialerSrv]AT+XAPL CNF, result:%d, features:%d")
/*ACCEV REQ*/
TRC_MSG(SRV_BT_DIALER_AT_ACCEV_REQ, "[BTDialerSrv]AT+IPHONEACCEV REQ, key:%d, value:%d")
/*ACCEV CNF*/
TRC_MSG(SRV_BT_DIALER_AT_ACCEV_CNF, "[BTDialerSrv]AT+IPHONEACCEV CNF, result:%d")
/*CCWA  Ind*/
TRC_MSG(SRV_BT_DIALER_LOG_CCWA_IND, "[BTDialerSrv]Call Wait notify ind")
/*BVRA  Ind*/
TRC_MSG(SRV_BT_DIALER_LOG_BVRA_IND, "[BTDialerSrv]Voice recognition ind:%d")
/*BTRH  Ind*/
TRC_MSG(SRV_BT_DIALER_LOG_BTRH_IND, "[BTDialerSrv]Query res and hold ind:%d")
/*VGS  Ind*/
TRC_MSG(SRV_BT_DIALER_VGS_IND, "[BTDialerSrv]Volume gain ind:%d")
/*VGM  Ind*/
TRC_MSG(SRV_BT_DIALER_VGM_IND, "[BTDialerSrv]Mic gain ind:%d")
/*Callback pointer error handling*/
TRC_MSG(SRV_BT_DIALER_CB_PTR_ERR,"[BTDialerSrv]UCM Callback pointer is not set")
/*CLIP IND*/
TRC_MSG(SRV_BT_DIALER_CLIP_IND,"[BTDialerSrv]Caller Line Indentification Ind")

/* MAP CLIENT TRACES */
TRC_MSG(SRV_MAPC_STATE_CHANGE, "[Map client] state from %d --> %d")
TRC_MSG(SRV_MAPC_DISCONNECT, "[Map client] Disconnect request  conn_id %d")
TRC_MSG(SRV_MAPC_DISCONNECT_STATE, "[Map client] Disconnect request state = %d")
TRC_MSG(SRV_MAPC_DISCONNECT_FROM_CM, "[Map client]srv_mapc_disconnect_from_cm")
TRC_MSG(SRV_MAPC_ACTIVATE_REQ, "[Map client] activate request")
TRC_MSG(SRV_MAPC_DEACTIVATE_REQ, "[Map client] deactivate request")
TRC_MSG(SRV_MAPC_INIT, "[Map client] init")
TRC_MSG(SRV_MAPC_DEINIT, "[Map client] deinit")
TRC_MSG(SRV_MAPC_OPEN, "[Map client] open srv_hd %d")
TRC_MSG(SRV_MAPC_CLOSE, "[Map client] close srv_hd %d")
TRC_MSG(SRV_BT_MAPC_RECV_BUFFER_TRACE,"BT MAPCBUF")
TRC_MSG(SRV_MAPC_CONNECT, "[Map client] connect bt addr lap %d, nap %d,uap %d conn_id %d")
TRC_MSG(SRV_MAPC_REGISTRATION_REQ, "[Map client] MNS registration request state %d and val %d")
TRC_MSG(SRV_MAPC_CONNECT_CNF, "[Map client]connect cnf state %d,result %d")
TRC_MSG(SRV_MAPC_DISCONNECT_IND, "[Map client] disconnect ind state %d mas id %d")
TRC_MSG(SRV_MAPC_DISCONNECT_IND_BUSY, "[map client]srv_bt_mapc_disconnect_cnf, SRV_BT_MAPC_FAIL_BUSY")
TRC_MSG(SRV_MAPC_DISCONNECT_CNF, "[Map client]disconnect cnf state %d")
TRC_MSG(SRV_MAPC_ABORT_CNF, "[Map client]Abort cnf result %d")
TRC_MSG(SRV_MAPC_ABORT_REQ, "[Map client]Abort req state %d")
TRC_MSG(SRV_MAPC_SET_FOLDER_REQ, "[Map client] cntx_index %d, set folder req state %d")
TRC_MSG(SRV_MAPC_CHANGE_FOLDER_REQ, "[Map client] Change folder request state %d")
TRC_MSG(SRV_MAPC_SET_FOLDER_CNF, "[Map client] set folder cnf state %d and result %d msg_list %d ")
TRC_MSG(SRV_MAPC_SET_FOLDER_CNF1, "[Map client] set folder depth %d")
TRC_MSG(SRV_MAPC_GET_MSG_LISTING_SIZE_REQ, "[Map client] Get message listing size req state %d ,folder %s")
TRC_MSG(SRV_MAPC_GET_MSG_LISTING_REQ, "[Map client] Get message listing req state %d ,folder %s")
TRC_MSG(SRV_MAPC_GET_MSG_LISTING_SIZE_CNF, "[Map client] Get message listing size cnf state %d ,result %d")
TRC_MSG(SRV_MAPC_GET_MSG_LISTING_CNF, "[Map client] Get message listing cnf state %d ,result %d")
TRC_MSG(SRV_MAPC_GET_MSG_LISTING_CNF_1, "[Map client] srv_bt_mapc_get_message_listing_cnf, SRV_MAPC_STATE_DISCONNECTING")
TRC_MSG(SRV_MAPC_GET_MSG_REQ,"[Map client] Get msg req, index %d ,attachment  %d, charset %d")
TRC_MSG(SRV_MAPC_GET_MSG_CNF, "[Map client] Get msg cnf ,result %d, fraction_rsp %d")
TRC_MSG(SRV_MAPC_SET_MSG_STATUS, "[Map client] Set msg status ,status %d, state %d, index %d")
TRC_MSG(SRV_MAPC_SET_MSG_LIST_PROP_INDEX, "[Map client] srv_bt_mapc_set_msg_listing_prop:index %d")
TRC_MSG(SRV_MAPC_PUSH_MSG_REQ, "[Map client] Push msg req index %d, folder %s, state %d")
TRC_MSG(SRV_MAPC_PUSH_MSG_CNF, "[Map client] Push msg cnf result %d")
TRC_MSG(SRV_MAPC_UPDATE_INBOX, "[Map client] update inbox state %d")
TRC_MSG(SRV_MAPC_UPDATE_INBOX_CNF, "[Map client] update inbox confirmation")
TRC_MSG(SRV_MAPC_SET_NOTIFY_REG_CNF, "[Map client] Set notification reg cnf result %d")
TRC_MSG(SRV_MAPC_SET_MSG_STATUS_CNF, "[Map client] Set msg status cnf result %d")
TRC_MSG(SRV_MAPC_ACTIVATE_CNF, "[Map client] Activate cnf state %d result %d")
TRC_MSG(SRV_MAPC_DEACTIVATE_CNF, "[Map client] Deactivate cnf state %d result %d")
TRC_MSG(SRV_MAPC_MNS_EVENT_IND, "[Map client] MNS event ind state %d file %s")
TRC_MSG(SRV_MAPC_MNS_EVENT_IND_RSP, "[Map client] MNS event ind response %d")
TRC_MSG(SRV_MAPC_SEND_EVENT_RSP_INDEX, "[Map client] MNS event ind response index = %d")
TRC_MSG(SRV_MAPC_GET_DEV_CNTX_IDX_MAS_ID, "[Map client] srv_bt_mapc_get_dev_cntx_index,mas_id: %d")
TRC_MSG(SRV_MAPC_GET_DEV_CNTX_IDX, "[Map client] srv_bt_mapc_get_dev_cntx_index,cur_index: %d")
TRC_MSG(SRV_MAPC_GET_DEV_CNTX_IDX_NOTFOUND, "[Map client] srv_bt_mapc_get_dev_cntx_index,cur_index: MAX_MAPC_LINK_SUPPORT")
TRC_MSG(SRV_MAPC_CONNECT_MAS_ID, "[Map client][MAPADP]mas_id:%d")
TRC_MSG(SRV_MAPC_GET_MSG_LISTING_BY_MAPC, "[Map client]get_message_listing,conn_type = MAPC")
TRC_MSG(SRV_MAPC_GET_ADDR_BY_INDEX, "[Map client]srv_bt_mapc_get_bt_addr_by_idx :index_order = %d")
TRC_MSG(SRV_MAPC_GET_ADDR_BY_INDEX_RET, "[Map client]srv_bt_mapc_get_bt_addr_by_idx:ret = %d")
TRC_MSG(SRV_MAPC_CON_REQ_FROM_CM_CALLBACK, "[Map client]srv_bt_mapc_connect_req_from_cm :srv_cm_cb = 0x%x ")
TRC_MSG(SRV_MAPC_CON_REQ_FROM_CM_GET_INDEX, "[Map client]srv_bt_mapc_connect_req_from_cm g_gmap_client_cntx[%d].mas_id=%d")
TRC_MSG(SRV_MAPC_CON_REQ_FROM_CM_GET_INDEX0, "[Map client]srv_bt_mapc_connect_req_from_cm 0:cur_index = %d")
TRC_MSG(SRV_MAPC_CON_REQ_FROM_CM_GET_INDEX1, "[Map client]srv_bt_mapc_connect_req_from_cm 1:cur_index = %d")
TRC_MSG(SRV_MAPC_CON_REQ_FROM_CM_GET_INDEX2, "[Map client]srv_bt_mapc_connect_req_from_cm 2:cur_index = %d")
TRC_MSG(SRV_MAPC_CON_REQ_FROM_CM_GET_INDEX3, "[Map client]srv_bt_mapc_connect_req_from_cm 3:cur_index=%d,cntx_index_temp=%d")
TRC_MSG(SRV_MAPC_CON_REQ_FROM_CM_GET_INDEX4, "[Map client]srv_bt_mapc_connect_req_from_cm 4:cur_index = %d")
TRC_MSG(SRV_MAPC_CON_REQ_FROM_CM_GET_INDEX5, "[Map client]srv_bt_mapc_connect_req_from_cm 5:cur_index = %d")
TRC_MSG(SRV_MAPC_CON_REQ_FROM_CM_GET_INDEX6, "[Map client]srv_bt_mapc_connect_req_from_cm 6:cur_index=%d,cntx_index_temp=%d")
TRC_MSG(SRV_MAPC_CON_REQ_FROM_CM_GET_INDEX_TEMP, "[Map client]srv_bt_mapc_connect_req_from_cm:cntx_index_temp = %d")
TRC_MSG(SRV_MAPC_CON_REQ_FROM_CM_G_INDEX, "[Map client]srv_bt_mapc_connect_req_from_cm :g_gmap_cur_index = %d")
TRC_MSG(SRV_MAPC_GET_MESSAGE_LISTING_INDEX, "[Map client]srv_bt_mapc_get_message_listing :cntx_index = %d")
TRC_MSG(SRV_MAPC_SET_CUR_INDEX, "[Map client]srv_bt_mapc_set_cur_order_index = %d")
TRC_MSG(SRV_MAPC_ADP_DUMP_DEV_ADDR, "[Map client]dump dev Addr:0x%02x:%02x:%02x:%02x:%02x:%02x")
TRC_MSG(SRV_MAPC_ADP_STATE_CHANGE, "[Map client][MAPADP]State Change: %d-->%d")
TRC_MSG(SRV_MAPC_ADP_IS_NO_CONNECTED, "[Map client][MAPADP]srv_bt_mapc_adp_is_connected: %d")
TRC_MSG(SRV_MAPC_ADP_GEN_CMD_SET_FOLDER, "[Map client][MAPADP]SetfolderCMD")
TRC_MSG(SRV_MAPC_ADP_GEN_CMD_GET_LISTING, "[Map client][MAPADP]listCMD: size:%d, offset:%d, maxLen:%d, folder:%d")
TRC_MSG(SRV_MAPC_ADP_GEN_CMD_GET_MSG, "[Map client][MAPADP]GetmsgCMD")
TRC_MSG(SRV_MAPC_ADP_GEN_CMD_PUSH_MSG, "[Map client][MAPADP]PushMsgCMD")
TRC_MSG(SRV_MAPC_ADP_GEN_CMD_SET_STATUS, "[Map client][MAPADP]SetStatusCMD")
TRC_MSG(SRV_MAPC_ADP_GEN_CMD_CONN_STATUS, "[Map client][MAPADP]GenConnCMD")
TRC_MSG(SRV_MAPC_ADP_SET_FOLDER_REQ_FAIL, "[Map client][MAPADP]set_folder_false")
TRC_MSG(SRV_MAPC_ADP_SET_FOLDER_REQ_BAD_STATE, "[Map client][MAPADP]set_folder_bad_state,cntx_index = %d,state = %d")
TRC_MSG(SRV_MAPC_ADP_GET_LIST_REQ_FAIL, "[Map client][MAPADP]get_list_false")
TRC_MSG(SRV_MAPC_ADP_GET_LIST_REQ_BAD_STATE, "[Map client][MAPADP]get_list_bad_state,cntx_index = %d,state = %d")
TRC_MSG(SRV_MAPC_ADP_GET_LIST_SIZE_REQ, "[Map client][MAPADP]GetListSize_REQ")
TRC_MSG(SRV_MAPC_ADP_GET_MSG_REQ_FAIL, "[Map client][MAPADP]get_msg_false")
TRC_MSG(SRV_MAPC_ADP_GET_MSG_REQ_BAD_STATE, "[Map client][MAPADP]get_msg_bad_state,cntx_index = %d,state = %d")
TRC_MSG(SRV_MAPC_ADP_PUSH_MSG_REQ, "[Map client][MAPADP]send prefix result:%d")
TRC_MSG(SRV_MAPC_ADP_PUSH_MSG_REQ_FAIL, "[Map client][MAPADP]push_msg_false")
TRC_MSG(SRV_MAPC_ADP_PUSH_MSG_REQ_BAD_STATE, "[Map client][MAPADP]push_msg_bad_state,cntx_index = %d,state = %d")
TRC_MSG(SRV_MAPC_ADP_CONN_REQ_FAIL, "[Map client][MAPADP]map_conn_false")
TRC_MSG(SRV_MAPC_ADP_SET_STATUS_REQ_FAIL, "[Map client][MAPADP]set_status_false")
TRC_MSG(SRV_MAPC_ADP_SET_STATUS_REQ_BAD_STATE, "[Map client][MAPADP]set_status_bad_state,cntx_index = %d,state = %d")
TRC_MSG(SRV_MAPC_ADP_SET_FOLDER_RSP, "[Map client][MAPADP]setFolder cntx_index:%d,is_number: %d,error_code:%d,is_bad_state:%d")
TRC_MSG(SRV_MAPC_ADP_GET_LISTING_RSP, "[Map client][MAPADP]GetListRsp,cntx_index:%d,Retcode:%d,is_bad_state:%d")
TRC_MSG(SRV_MAPC_ADP_GET_MSG_RSP, "[Map client][MAPADP]GetMsgRsp, cntx_index:%d,Retcode:%d,is_bad_state:%d")
TRC_MSG(SRV_MAPC_ADP_SET_STATUS_RSP, "[Map client][MAPADP]Set_Status cntx_index:%d,is_number:%d,error_code:%d,is_bad_state:%d")
TRC_MSG(SRV_MAPC_ADP_PUSH_MSG_RSP, "[Map client][MAPADP]pus_msg_rsp cntx_index:%d,is_number:%d,error_code:%d,is_bad_state:%d")
TRC_MSG(SRV_MAPC_ADP_CONN_RSP, "[Map client][MAPADP]map_conn_rsp is_number: %d, error_code:%d")
TRC_MSG(SRV_MAPC_ADP_HANDLE_EVT_RPT, "[Map client][MAPADP]hadle_evt_report: %d, error_code:%d")
TRC_MSG(SRV_MAPC_ADP_SPP_CONN_CNF, "[Map client][MAPADP]MAP by SPP Connected: %d")
TRC_MSG(SRV_MAPC_ADP_SPP_DISCONN_CNF, "[Map client][MAPADP]MAP by SPP DisConnected: %d")
TRC_MSG(SRV_MAPC_ADP_CMD_NOTIFY, "[Map client][MAPADP]receive cmd notify,cntx_index = %d,curr_state:%d")
TRC_MSG(SRV_MAPC_ADP_SPP_CONN_CNF0, "[Map client][MAPADP]srv_bt_mapc_adp_conn_cnf0 cntx_index = %d")
TRC_MSG(SRV_MAPC_ADP_SPP_CONN_CNF1, "[Map client][MAPADP]srv_bt_mapc_adp_conn_cnf1 g_gmap_client_cntx[%d].state=%d,mas_id=%d")
TRC_MSG(SRV_MAPC_ADP_SPP_CONN_CNF2, "[Map client][MAPADP]srv_bt_mapc_adp_conn_cnf2 cntx_index = MAX_MAPC_LINK_SUPPORT")
TRC_MSG(SRV_MAPC_ADP_SPP_CONN_CNF3, "[Map client][MAPADP]srv_bt_mapc_adp_conn_cnf3 cntx_index=%d,noti_evt->is_connected=%d")
TRC_MSG(SRV_MAPC_ADP_SPP_CONN_CNF4, "[Map client][MAPADP]srv_bt_mapc_adp_conn_cnf4 conn_type == SRV_BT_MAPC_CONN_SPP")
TRC_MSG(SRV_MAPC_ADP_SPP_CONN_CNF5, "[Map client][MAPADP]srv_bt_mapc_adp_conn_cnf5 conn_type == SRV_BT_MAPC_CONN_MAP")
TRC_MSG(SRV_MAPC_ADP_SPP_CONN_CNF6, "[Map client][MAPADP]srv_bt_mapc_adp_conn_cnf6 noti_evt->is_connected = %d")
TRC_MSG(SRV_MAPC_CONNECT_TYPE, "[Map client]srv_bt_mapc_connect_type,index_order =%d,conn_type=%d")
TRC_MSG(SRV_MAPC_IS_AVAILABLE_1, "[Map client]srv_bt_mapc_is_available,conn_type = SRV_BT_MAPC_CONN_MAP,state = %d")
TRC_MSG(SRV_MAPC_IS_AVAILABLE_2, "[Map client]srv_bt_mapc_is_available,conn_type = SRV_BT_MAPC_CONN_SPP,state = %d")
TRC_MSG(SRV_MAPC_IS_AVAILABLE_3, "[Map client]srv_bt_mapc_is_available,index_order =%d,ret =%d")

/* PBAP CLIENT TRACES */
TRC_MSG(SRV_PBAP_CLIENT_INIT, "[PBAPC_SRV] srv_pbapc_init()")
TRC_MSG(SRV_PBAP_CLIENT_CNTX_INIT, "[PBAPC_SRV] srv_pbapc_cntx_init()")
TRC_MSG(SRV_PBAP_CLIENT_ENABLE_REQ, "[PBAPC_SRV] srv_pbapc_enable_req()")
TRC_MSG(SRV_PBAP_CLIENT_DISABLE_REQ, "[PBAPC_SRV] srv_pbapc_disable_req()")
TRC_MSG(SRV_PBAP_CLIENT_DISCONNECT, "[PBAPC_SRV] srv_pbapc_disconnect_req()")
TRC_MSG(SRV_PBAP_CLIENT_ABORT_REQ, "[PBAPC_SRV] srv_pbapc_abort_req()")
TRC_MSG(SRV_PBAP_CLIENT_OPEN, "[PBAPC_SRV] srv_pbapc_open()")
TRC_MSG(SRV_PBAP_CLIENT_CLOSE, "[PBAPC_SRV] srv_pbapc_close()")
TRC_MSG(SRV_PBAP_CLIENT_DISCONNECT_CLIENT, "[PBAPC_SRV] srv_pbapc_disconnect_client()")
TRC_MSG(SRV_PBAP_CLIENT_SEND_BEGIN, "[PBAPC_SRV] srv_pbapc_send_begin()")
TRC_MSG(SRV_PBAP_CLIENT_CONNECT_SERVER, "[PBAPC_SRV] srv_pbapc_connect_server()")
TRC_MSG(SRV_PBAP_CLIENT_DISCONNECT_IND, "[PBAPC_SRV] srv_pbapc_disconnect_ind_hdlr()")
TRC_MSG(SRV_PBAP_CLIENT_ABORT_IND, "[PBAPC_SRV] srv_pbapc_abort_ind_hdlr()")
TRC_MSG(SRV_PBAP_CLIENT_AUTHT_IND, "[PBAPC_SRV] srv_pbapc_auth_ind_hdlr()")
TRC_MSG(SRV_PBAP_CLIENT_SET_PATH_REQ, "[PBAPC_SRV]srv_pbapc_set_path_req  Folder type: %d ,name: %s")
TRC_MSG(SRV_PBAP_CLIENT_READ_FOLDER_REQ, "[PBAPC_SRV]srv_pbapc_read_folder_req  format: %d ,maxListCount: %d, foldername: %s")
TRC_MSG(SRV_PBAP_CLIENT_READ_LIST_REQ, "[PBAPC_SRV]srv_pbapc_read_list_req  searchAttribute: %d ,order:%d, foldername: %s")
TRC_MSG(SRV_PBAP_CLIENT_READ_ENTRY_REQ, "[PBAPC_SRV]srv_pbapc_read_entry_req  format: %d, objectName: %s")
TRC_MSG(SRV_PBAP_CLIENT_ENABLE_CNF, "[PBAPC_SRV]srv_pbapc_enable_cnf_hdlr result: %d")
TRC_MSG(SRV_PBAP_CLIENT_SET_PATH_RSP_CNF, "[PBAPC_SRV]srv_pbapc_set_path_cnf_hdlr result: %d")
TRC_MSG(SRV_PBAP_CLIENT_READ_FOLDER_RSP_CNF, "[PBAPC_SRV]srv_pbapc_read_folder_cnf_hdlr result: %d")
TRC_MSG(SRV_PBAP_CLIENT_READ_LIST_RSP_CNF, "[PBAPC_SRV]srv_pbapc_read_list_cnf_hdlr result: %d")
TRC_MSG(SRV_PBAP_CLIENT_DISABLE_CNF, "[PBAPC_SRV]srv_pbapc_disable_cnf_hdlr result: %d")
TRC_MSG(SRV_PBAP_CLIENT_READ_ENTRY_CNF, "[PBAPC_SRV]srv_pbapc_read_entry_cnf_hdlr result: %d")
TRC_MSG(SRV_PBAP_CLIENT_CONNECT_CNF, "[PBAPC_SRV]srv_pbapc_disconnect_cnf_hdlr result: %d, conn_id: %d")
TRC_MSG(SRV_PBAP_CLIENT_DISCONNECT_CNF, "[PBAPC_SRV]srv_pbapc_auth_rsp result: %d")
TRC_MSG(SRV_PBAP_CLIENT_AUTHT_RSP, "[PBAPC_SRV] srv_pbapc_auth_rsp() is passowrd: %d, state: %d")
TRC_MSG(SRV_PBAP_CLIENT_XML_START, "[PBAPC_SRV] srv_pbapc_xml_start_element_hdlr() num entries: %d, more: %d")
TRC_MSG(SRV_PBAP_CLIENT_XML_BEGIN, "[PBAPC_SRV] srv_pbapc_parse_xml_file start")
TRC_MSG(SRV_PBAP_CLIENT_XML_END, "[PBAPC_SRV] srv_pbapc_parse_xml_file end  num entries: %d, more: %d")
TRC_MSG(SRV_BT_DIALER_RECV_BUFFER_TRACE, "BT Dailer:")
TRC_MSG(SRV_BT_DIALER_PBAP_RECV_BUFFER_TRACE, "BT  PBAPC:")

/*Dialer and Speaker APP Traces*/
TRC_MSG(MMI_BT_DIALER_APP_LAUNCH, "[DIALERAPP]MMI BT Dialer Launch Fucntion")
TRC_MSG(MMI_BT_DIALER_APP_WRITE_VOL_LEVEL_TO_NVRAM, "[DIALERAPP]Write Volume level to NVRAM :%d")
TRC_MSG(MMI_BT_DIALER_APP_SET_VOL_LEVEL_TO_MDI, "[DIALERAPP]Set Volume level to MDI :%d")   
TRC_MSG(MMI_BT_DIALER_APP_REG_VOL_CALLBACK_DIALER_SERVICE, "[DIALERAPP]Set Volume Sync Callback for Dialer Service") 
TRC_MSG(MMI_BT_DIALER_APP_EMIT_EVENT_TO_UCM, "[DIALERAPP]Emit Event to UCM : %d")   
TRC_MSG(MMI_BT_DIALER_APP_EXIT_FUNC, "[DIALERAPP]MMI BT Dialer Exit Fucntion")   
TRC_MSG(MMI_BT_SPEAKER_APP_VOL_UP, "[BTSPEAKER]MMI BT Speaker Volume UP level : %d")   
TRC_MSG(MMI_BT_SPEAKER_APP_SET_VOL_UP_TO_MDI, "[BTSPEAKER]MMI BT Speaker Set Volume UP to MDI, level : %d")   
TRC_MSG(MMI_BT_SPEAKER_APP_VOL_DOWN, "[BTSPEAKER]MMI BT Speaker Volume DOWN level : %d")   
TRC_MSG(MMI_BT_SPEAKER_APP_SET_VOL_DOWN_TO_MDI, "[BTSPEAKER]MMI BT Speaker Set Volume DOWN to MDI, level : %d")   
TRC_MSG(MMI_BT_SPEAKER_CLOSE_LOADING_SCR, "[BTSPEAKER]MMI BT Speaker Close Loading Screen")   
TRC_MSG(MMI_BT_SPEAKER_SHOW_LOADING_SCR, "[BTSPEAKER]MMI BT Speaker show loading screen")   
TRC_MSG(MMI_BT_SPEAKER_LAUNCH_FUNC, "[BTSPEAKER]MMI BT Speaker launch function,paraent_gid:%d")   
TRC_MSG(MMI_BT_SPEAKER_DELAUNCH_FUNC, "[BTSPEAKER]MMI BT Speaker Delaunch function")   
TRC_MSG(MMI_BT_SPEAKER_SEND_AVRCP_CMD, "[BTSPEAKER]MMI BT Speaker send AVRCP send command,evt_id : %d;key_type : %d")   
TRC_MSG(MMI_BT_SPEAKER_DRAW_BUTTON, "[BTSPEAKER]MMI BT Speaker draw button, state:%d")   
TRC_MSG(MMI_BT_SPEAKER_INIT_MAIN, "[BTSPEAKER]MMI BT Speaker init_main")   
TRC_MSG(MMI_BT_SPEAKER_REDRAW_BG, "[BTSPEAKER]MMI BT Speaker redraw background")   
TRC_MSG(MMI_BT_SPEAKER_REDRAW_SOFTKEY, "[BTSPEAKER]MMI BT Speaker redraw soft key")   

TRC_MSG(MMI_BT_SPEAKER_REDRAW_MAIN_BUTTONS, "[BTSPEAKER]MMI BT Speaker redraw main buttons")   
TRC_MSG(MMI_BT_SPEAKER_REDRAW_MAIN_TITLE, "[BTSPEAKER]MMI BT Speaker redraw main title")  

TRC_MSG(MMI_BT_SPEAKER_REDRAW_MAIN_ALL, "[BTSPEAKER]MMI BT Speaker redraw main all")   
TRC_MSG(MMI_BT_SPEAKER_UPDATE_MAIN_SCREEN, "[BTSPEAKER]MMI BT Speaker update main screen, state:%d")   

TRC_MSG(MMI_BT_SPEAKER_PEN_DOWN_HDLR, "[BTSPEAKER]MMI BT Speaker Pen Down HDLR")   
TRC_MSG(MMI_BT_SPEAKER_PEN_UP_HDLR, "[BTSPEAKER]MMI BT Speaker Pen UP HDLR")   
TRC_MSG(MMI_BT_SPEAKER_PEN_HDLR, "[BTSPEAKER]MMI BT Speaker Pen HDLR,event:%d")  

TRC_MSG(MMI_BT_G7_DIALER_CALLBACK,"[BT_CM_SRV]BT Dialer callback , conn_type:%d,result :%d,is_connect : %d")
TRC_MSG(MMI_BT_G7_DIALER_CALLBACK_INVOKE_MAP_CONNECT_REQ,"[BT_CM_SRV]BT Dialer callback -Invoke MAP Connect request")
TRC_MSG(MMI_BT_G7_DIALER_CALLBACK_INVOKE_MAP_DISCONNECT_REQ,"BT_CM_SRV]BT Dialer callback - invoke MAP disconnect req ,is_disconn_req:%d")
TRC_MSG(MMI_BT_G7_DIALER_CALLBACK_INVOKE_PABP_REQ,"[BT_CM_SRV]BT Dialer callback,invoke PBAP conenct request,is_connect:%d,is_disconn_req:%d")
TRC_MSG(MMI_BT_G7_DIALER_CALLBACK_INVOKE_UCM_A2DP_DELAUNCH,"[BT_CM_SRV]BT Dialer callback,UCM,A2DP Delaunch fucntion call")
TRC_MSG(MMI_BT_G7_DIALER_CALLBACK_INVOKE_A2DP_DISCONN_REQ,"[BT_CM_SRV]BT Dialer callback,Invoke A2DP disconnect request")
TRC_MSG(MMI_BT_G7_DIALER_CALLBACK_INVOKE_UPDATE_RESULT,"[BT_CM_SRV]BT Dialer callback,update connection result")
TRC_MSG(MMI_BT_G7_DIALER_CALLBACK_INVOKE_UPDATE_FINAL_RESULT,"[BT_CM_SRV]BT Dialer callback,invoke final connection result")
#bt conn start
TRC_MSG(MMI_BT_CONN_POPUP_STR, "[BTCONN]string = %s, menu_num = %d")  
TRC_MSG(MMI_BT_CONN_BY_APP, "[BTCONN]mmi_bt_connected_by_app") 
TRC_MSG(MMI_BT_CONN_POWER_ON, "[BTCONN]mmi_bt_dialer_power_on") 
TRC_MSG(MMI_BT_CONN_CONNECTING, "[BTCONN]mmi_bt_dialer_connecting") 
TRC_MSG(MMI_BT_CONN_DISCONN_NOTIFY, "[BTCONN]mmi_bt_dialer_disconnect_notify") 
TRC_MSG(MMI_BT_CONN_AUTO, "[BTCONN][AUTO]mmi_bt_dialer_auto_connect") 
TRC_MSG(MMI_BT_CONN_BT_NOT_OPEN, "[BTCONN][AUTO]bt is not open") 
TRC_MSG(MMI_BT_CONN_BT_NOT_PAIRED, "[BTCONN][AUTO]have not paired device") 
TRC_MSG(MMI_BT_CONN_BT_NOT_CONNED, "[BTCONN][AUTO]have not recent connected device") 
TRC_MSG(MMI_BT_CONN_INDEX_ERROR, "[BTCONN][AUTO]index is error") 
TRC_MSG(MMI_BT_CONN_AUTO_CASE, "[BTCONN][AUTO]auto connect") 
TRC_MSG(MMI_BT_CONN_NUM_ITEMS, "[BTCONN]num_items = %d") 
TRC_MSG(MMI_BT_CONN_CM_DEV, "[BTCONN]dev_p = %s, i = %d") 
TRC_MSG(MMI_BT_CONN_NAME, "[BTCONN]dev_p->name = %s, i = %d") 
TRC_MSG(MMI_BT_CONN_EVENT, "[BTCONN]EVT_ID_DIALER_CONN_EVENT_ID") 
TRC_MSG(MMI_BT_CONN_RESULT, "[BTCONN]result = %d")
TRC_MSG(MMI_BT_CONN_MAPC, "[BTCONN]SRV_BT_CM_MAPC_CONNECTION")
TRC_MSG(MMI_BT_CONN_MAPC_IF, "[BTCONN]mmi_bt_dialor_callback->mmi_pbapc_connect_req_from_cm")
TRC_MSG(MMI_BT_CONN_MAPC_ELSE, "[BTCONN]mmi_bt_dialor_callback->mmi_pbapc_cm_disconnect_req")
TRC_MSG(MMI_BT_CONN_PBAPC, "[BTCONN]SRV_BT_CM_PBAPC_CONNECTION")
TRC_MSG(MMI_BT_CONN_PBAPC_IF, "[BTCONN]mmi_bt_dialor_callback->srv_bt_dialer_cm_connect_req")
TRC_MSG(MMI_BT_CONN_PBAPC_ELSE, "[BTCONN]mmi_bt_dialor_callback->srv_bt_dialer_cm_disconnect_req")
TRC_MSG(MMI_BT_CONN_DIS_EVENT, "[BTCONN]EVT_ID_DIALER_DISCONN_EVENT_ID")
TRC_MSG(MMI_BT_CONN_FAIL, "[BTCONN]CONN fail")
TRC_MSG(MMI_BT_CONN_FAIL_POPUP, "[BTCONN]CONN fail POPUP")
TRC_MSG(MMI_BT_CONN_PROFILE_FUN, "[BTCONN]mmi_bt_dialer_conn_profile")
TRC_MSG(MMI_BT_CONN_PROFILE_MAPC, "[BTCONN]SRV_BT_CM_MAPC_CONNECTION")
TRC_MSG(MMI_BT_CONN_PROFILE_PBAPC, "[BTCONN]SRV_BT_CM_PBAPC_CONNECTION")
TRC_MSG(MMI_BT_CONN_PROFILE_A2DP, "[BTCONN]SRV_BT_CM_A2DP_CONNECTION")
TRC_MSG(MMI_BT_CONN_IS_CONNECTED, "[BTCONN]TURE")
TRC_MSG(MMI_BT_CONN_IS_NOT_CONNECTED, "[BTCONN]FALSE")
TRC_MSG(MMI_BT_CONN_CENT, "[BTCONN]mmi_bt_dialer_cent")
TRC_MSG(MMI_BT_CONN_GET_MODE, "[BTCONN]srv_bt_cm_get_btdialor_app_mode() = MMI_TRUE")
TRC_MSG(MMI_BT_CONN_DIS_FROM_DAILER, "[BTCONN]disconnect from bt dialer,addr: %04x:%08x:%02x")
TRC_MSG(MMI_BT_CONN_CONNECT_FROM_DIALER, "[BTCONN]connect from bt dialer")
TRC_MSG(MMI_BT_CONN_CONNECT_FROM_DIALER_INT, "[BTCONN]connect from bt dialer int,addr: %04x:%08x:%02x, is connected : %d")
TRC_MSG(MMI_BT_CONN_DIS_FROM_BT, "[BTCONN]disconnect from bt")
TRC_MSG(MMI_BT_CONN_RENAME_FROM_BT, "[BTCONN]rename from bt")
TRC_MSG(MMI_BT_CONN_PAIRED_FLAG, "[BTCONN]g_bt_paired_from_dialer = %d")
TRC_MSG(MMI_BT_CONN_CONNECTING_STATUS, "[BTCONN]in connecting process, g_bt_dialer_connecting = %d")
TRC_MSG(MMI_BT_CONN_CALLBACK, "[BTCONN]mmi_bt_dialor_callback, result = %d, is_connect = %d, conn_type = %d, is_indicate = %d")
TRC_MSG(MMI_BT_CONN_CALLBACK_INT, "[BTCONN]mmi_bt_dialor_callback_int, result = %d, is_connect = %d, addr: %04x:%08x:%02x")
TRC_MSG(MMI_BT_CONN_CBITEM_NULL, "[BTCONN]callback_item != NULL")
TRC_MSG(MMI_BT_CONN_CBITEM_CONN_NULL, "[BTCONN]callback_item->conn != NULL")
TRC_MSG(MMI_BT_CONN_CBTBL, "[BTCONN]g_mmi_btdialer_callback_tbl[%d].type = %d")
TRC_MSG(MMI_BT_CONN_CB_NEXTITEM, "[BTCONN]mmi_bt_dialer_next_callback_item, i = %d, total = %d")
TRC_MSG(MMI_BT_CONN_CB_DONE, "[BTCONN]mmi_bt_dialer_callback_done, result = %d, is_connect = %d, addr: %04x:%08x:%02x")
TRC_MSG(MMI_BT_CONN_CB_DONE_INT, "[BTCONN]mmi_bt_dialer_callback_done_int, is_connect = %d,addr: %04x:%08x:%02x")
TRC_MSG(MMI_BT_CONN_MAPC_CONN_FUNC, "[BTCONN]mmi_bt_dialer_mapc_conn_adp")
TRC_MSG(MMI_BT_CONN_BT_DIALER_CB, "[BTCONN]mmi_bt_dialer_cb")
TRC_MSG(MMI_BT_CONN_SHUTDOWN, "[BTCONN]mmi_bt_dialer_shutdown,%04x:%08x:%02x ")
TRC_MSG(MMI_BT_CONN_SHUTDOWN_TIMER, "[BTCONN]mmi_bt_dialer_shutdown   StartTimer")
TRC_MSG(MMI_BT_CONN_SHUTDOWN_HDLR, "[BTCONN]mmi_bt_dialer_disconn_hdlr")
TRC_MSG(MMI_BT_CONN_SHUTDOWN_STOP_TIMER, "[BTCONN]mmi_bt_dialer_disconn_hdlr   StopTimer")
TRC_MSG(MMI_BT_CONN_TIME_OUT_FLAG, "[BTCONN]time_out_flag = %d")
TRC_MSG(MMI_BT_CONN_CB_NULL, "[BTCONN]callback_item = NULL")
TRC_MSG(MMI_BT_CONN_QUICK_CONNECTHS, "[BTCONN]QUICK CONNECT HS")
TRC_MSG(MMI_BT_CONN_TIMER_OUT_HDLR, "[BTCONN]mmi_bt_dialer_connect_time_out_hdlr")
TRC_MSG(MMI_BT_CONN_TIMER_OUT_HDLR_SET_TRUE, "[BTCONN]mmi_bt_dialer_connect_time_out_hdlr   set true")
TRC_MSG(MMI_BT_CONN_DIALER_CONNECT_LOST, "[BTConn] time out and BT Dialer disconnected. Addr:%02x:%02x:%02x:%02x:%02x:%02x")
TRC_MSG(MMI_BT_CONN_DIALER_AUTO_RECONN_STATUS, "[BTConn]auto-reconn mmi_bt_dialer_auto_reconn_first_start_check(), conn_status = %d, reconn_flag = %d, accu_time = %d")
TRC_MSG(MMI_BT_G_DIALER_SEARCH_CANCEL, "[BTCONN]g_bt_search_cancel = %d")
TRC_MSG(MMI_BT_G_DIALER_PAIR_FROM_SEARCH, "[BTCONN]g_bt_pair_from_search = %d")
TRC_MSG(MMI_BT_CONN_DISCONN_DEV_FUNC, "[BTCONN]mmi_bt_dialer_diconn_dev_func : %04x:%08x:%02x")
TRC_MSG(MMI_BT_CONN_BT_HEADSET, "[BTCONN]mmi_bt_dialer_diconn_dev_func:headset")
TRC_MSG(MMI_BT_CONN_BT_PHONE, "[BTCONN]mmi_bt_dialer_diconn_dev_func:phone")
TRC_MSG(MMI_BT_CONN_NOT_SEND_MAPC_REQ, "[BTCONN]not send mapc req, callback next profile")
TRC_MSG(MMI_BT_CONN_SEND_MAPC_REQ, "[BTCONN]srv_bt_mapc_connect_req_from_cm")
TRC_MSG(MMI_BT_CONN_SEND_SPP_REQ, "[BTCONN]mmi_spp_connect_req_from_cm")
TRC_MSG(MMI_BT_CONN_NOT_SEND_SPP_REQ, "[BTCONN]not send spp req, callback next profile")
TRC_MSG(MMI_BT_CONN_SRV_NO_BUSY, "[BTCONN]srv_bt_cm_get_busy_dev() = NULL")
TRC_MSG(MMI_BT_CONN_ALL_DISCONN_FLAG, "[BTCONN]g_bt_is_all_disconn = %d")
TRC_MSG(MMI_BT_CONN_SET_CONNECTED_DEV_FUNC, "[BTCONN]mmi_bt_dialer_set_connected_dev_info : %04x:%08x:%02x")
TRC_MSG(MMI_BT_CONN_ALREADAY_EXIST, "[BTCONN]already exist, no need to add. i = %d  addr: %04x:%08x:%02x")
TRC_MSG(MMI_BT_CONN_FIRST_FIT, "[BTCONN]first fit. j = %d  addr: %04x:%08x:%02x")
TRC_MSG(MMI_BT_CONN_QUICK_LIST_HILITE_HANDLE_FUN, "[BTCONN]mmi_bt_dialer_quick_list_hilite_handler  g_quick_conn_idx = %d")
TRC_MSG(MMI_BT_CONN_QUICK_CONN_DEV_NUM_FUN, "[BTCONN]mmi_bt_dialer_quick_conn_dev_num   count = %d")
TRC_MSG(MMI_BT_CONN_VIS_CHANGE_FLAG, "[BTCONN]g_mmi_is_vis_change_in_busy_state = %d")
TRC_MSG(MMI_BT_CONN_ADDR_NOT_EQUAL_ZERO, "[BTCONN]mmi_bt_dialer_is_addr_equal_0 false, addr:  %04x:%08x:%02x")
TRC_MSG(MMI_BT_CONN_ADDR_EQUAL_ZERO, "[BTCONN]mmi_bt_dialer_is_addr_equal_0 true,addr:  %04x:%08x:%02x")
TRC_MSG(MMI_BT_ANTILOST_HDR_FUNC, "[BTCONN][antilost] mmi_bt_cm_anti_lost_hdr ,,anti_lost_data->rssi_value = %d, addr: %04x:%08x:%02x, anti_lost_data->threshold = %d")
TRC_MSG(MMI_BT_ANTILOST_ADDR_EQUAL, "[BTCONN][antilost] the addr have exist.  index = %d")
TRC_MSG(MMI_BT_ANTILOST_TEMP_INDEX, "[BTCONN][antilost] temp_index = %d,temp_index_1 = %d")
TRC_MSG(MMI_BT_ANTILOST_IND_NMGR_CALLBACK, "[BTCONN][antilost]   mmi_bt_antilost_ind_nmgr_callback(), index = %d, addr:%04x:%08x:%02x")
TRC_MSG(MMI_BT_ANTILOST_IND_GROUP_IS_PRESENT, "[BTCONN][antilost]   GRP_ID_BT_ANTI_LOST_IND is present")
TRC_MSG(MMI_BT_ANTILOST_IND_EXT_FUNC, "[BTCONN][antilost]   mmi_bt_anti_lost_entry_indication_screen_ext(), index = %d, addr:%04x:%08x:%02x")
TRC_MSG(MMI_BT_ANTILOST_IND_LSK_EXT_FUNC, "[BTCONN][antilost]   mmi_bt_anti_lost_ind_lsk_hdlr_ext(), active id = %d")
TRC_MSG(MMI_BT_ANTILOST_IND_CANCEL_EXT_FUNC, "[BTCONN][antilost]   mmi_bt_anti_lost_indication_cancle_hdlr_ext()")
TRC_MSG(MMI_BT_ANTILOST_CLEAN_ADDR_FUNC, "[BTCONN][antilost]mmi_bt_anti_lost_clean_addr, addr:%04x:%08x:%02x")
TRC_MSG(MMI_BT_ANTILOST_RSSI_CNF_FUNC, "[BTCONN][antilost]mmi_bt_anti_lost_read_rssi_cnf, read_rssi_ind->rssi_value = %d, read_rssi_ind->result = %d,addr: %04x:%08x:%02x")
TRC_MSG(MMI_BT_ANTILOST_IND_CANCEL, "[BTCONN][antilost]mmi_bt_anti_lost_indication_cancle_hdlr()")
TRC_MSG(MMI_BT_ANTILOST_IND_LSK_TIME_OUT_FUNC, "[BTCONN][antilost]time_out FUNC, index = %d")
TRC_MSG(MMI_BT_ANTILOST_DISCONN_EVT_HDLR, "[BTCONN][antilost]mmi_bt_anti_lost_disconn_complete_hdlr,profile %x")
TRC_MSG(MMI_BT_ANTILOST_ENTRY_SETTING, "[BTCONN][antilost]mmi_bt_entry_anti_lost_setting()")
TRC_MSG(MMI_BT_ANTILOST_ENTRY_SETTING_LSK, "[BTCONN][antilost]mmi_bt_anti_lost_setting_lsk_hdlr() , g_mmi_bt_anti_lost_cntx.curr_status = %d, g_mmi_bt_anti_lost_cntx.alert_mode = %d")
TRC_MSG(MMI_BT_ANTILOST_ENTRY_SETTING_SAVE, "[BTCONN][antilost]mmi_bt_anti_lost_setting_lsk_hdlr() current_status: %d, alert_mode: %d")
TRC_MSG(MMI_BT_ANTILOST_GET_ALERTMODE, "[BTCONN][antilost]mmi_bt_anti_lost_get_alert_mode(): %d")
TRC_MSG(MMI_BT_ANTILOST_GET_STATUS, "[BTCONN][antilost]mmi_bt_anti_lost_get_status(): %d")
TRC_MSG(MMI_BT_ANTILOST_READ_RSSI_REQ_FUNC, "[BTCONN][antilost]mmi_bt_anti_lost_read_rssi_req , addr:  %04x:%08x:%02x")
TRC_MSG(MMI_BT_ANTILOST_INIT_FUNC, "[BTCONN][antilost]mmi_bt_anti_lost_init g_mmi_bt_anti_lost_cntx.curr_status = %d, g_mmi_bt_anti_lost_cntx.alert_mode = %d")
TRC_MSG(MMI_BT_ANTILOST_CLEAR_ALM_FUNC, "[BTCONN][antilost]mmi_bt_antilost_clear_alertmode , mode = %d")
TRC_MSG(MMI_BT_ANTILOST_ALERT_FUNC, "[BTCONN][antilost]mmi_bt_antilost_alert")
TRC_MSG(MMI_BT_ANTILOST_RSSI_CNF_SCR_PRESENT, "[BTCONN][antilost]mmi_bt_anti_lost_read_rssi_cnf, alt scr is in present, the screen is %d   %d ")
TRC_MSG(MMI_BT_ANTILOST_HDR_SCR_PRESENT, "[BTCONN][antilost]mmi_bt_cm_anti_lost_hdr ,  alt scr is in present, the screen is %d   %d ")
TRC_MSG(MMI_BT_ANTILOST_ADD_ADDR_FUNC, "[BTCONN][antilost]mmi_bt_anti_lost_add_addr ,  addr:  %04x:%08x:%02x")
TRC_MSG(MMI_BT_ANTILOST_GET_IDX_FUNC, "[BTCONN][antilost]mmi_bt_anti_lost_list_get_idx")
TRC_MSG(MMI_BT_ANTILOST_IS_IN_LIST_FUNC, "[BTCONN][antilost]mmi_bt_anti_lost_is_in_list")
TRC_MSG(MMI_BT_CONN_ANTI_LOST_ADD_DEV_INFOR, "[BTCONN][antilost]add info,i=%d, addr = %04x:%08x:%02x")
TRC_MSG(MMI_BT_ANTILOST_CLOSE_SCR_FUNC, "[BTCONN][antilost]mmi_bt_anti_lost_close_scr(),scr=%d, addr = %04x:%08x:%02x")
TRC_MSG(MMI_BT_CONN_GET_HS_FLAG, "[BTCONN]get g_mmi_bt_dialer_headset_flag = %d")
TRC_MSG(MMI_BT_CONN_SET_HS_FLAG, "[BTCONN]set g_mmi_bt_dialer_headset_flag = %d")
TRC_MSG(MMI_BT_CONN_GET_DISCONN_REQ_FLAG, "[BTCONN] mmi_bt_dialer_get_disconn_req  g_mmi_is_disconn_req= %d")
TRC_MSG(MMI_BT_CONN_SET_DISCONN_REQ_FLAG, "[BTCONN] mmi_bt_dialer_set_disconn_req  g_mmi_is_disconn_req= %d")
TRC_MSG(MMI_BT_CONN_NEXE_CB_FUNC, "[btconn]mmi_bt_dialer_next_callback_item type = %d, is_connect = %d, is_indicate = %d")
TRC_MSG(MMI_BT_CONN_NEXE_CB_SET_BUSY_STATE, "[BTCONN] srv_bt_cm_set_dev_busy_state  type = %d, addr:  %04x:%08x:%02x")
TRC_MSG(MMI_BT_CONN_SHOW_CONN_STATUS_NMGR, "[BTCONN] mmi_bt_dialer_show_conn_status_nmgr_popup, timer_exist = %d")
TRC_MSG(MMI_BT_CONN_A2DP_SRC, "[BTCONN] mmi_bt_dialer_connect_a2dp_src, addr:  %04x:%08x:%02x")
TRC_MSG(MMI_BT_CONN_A2DP_SRC_CB, "[BTCONN] mmi_bt_dialor_connect_a2dp_src_cb, is_connect = %d, result = %d, addr:  %04x:%08x:%02x")
TRC_MSG(MMI_BT_CONN_BTAUD_ATTACH_DONE, "[BTCONN] btaud_attach_done, result = %d")
TRC_MSG(MMI_BT_CONN_NEXE_CB_RESET_BUSY_STATE, "[BTCONN] srv_bt_cm_set_dev_busy_state FALSE  type = %d, addr:  %04x:%08x:%02x")
TRC_MSG(MMI_BT_CONN_A2DP_SRC_FUNC, "[BTCONN] mmi_bt_entry_connectingCALL mmi_bt_dialer_connect_a2dp_src")
TRC_MSG(MMI_BT_CONN_MYDEV_CSK_HDLR_FUNC, "[BTCONN] mmi_bt_mydev_csk_connect_hdlr")
TRC_MSG(MMI_BT_CONN_CLN_DEV_INFO_FUN, "[BTCONN] mmi_bt_dialer_clean_connected_dev_info")
TRC_MSG(MMI_BT_CONN_DEV_INFOR, "[BTCONN]g_connected_dev_info[%d] = addr:  %04x:%08x:%02x")
TRC_MSG(MMI_BT_CONN_DIS_BY_DEV_INFO_FUNC, "[BTCONN]mmi_bt_dialer_disconnect_by_dev_info addr:  %04x:%08x:%02x")
TRC_MSG(MMI_BT_CONN_DIS_SET_VIS_STATE_FUNC, "[BTCONN]mmi_bt_dialer_conn_set_vis_state,  vis_dev.g_vis_type = %d")
TRC_MSG(MMI_BT_CONN_DIS_GET_VIS_STATE_FUNC, "[BTCONN]mmi_bt_dialer_get_conn_vis_enum , g_vis_type = %d")
TRC_MSG(MMI_BT_CONN_DIS_SET_VIS_ENUM_FUNC, "[BTCONN]mmi_bt_dialer_set_conn_vis_enum, g_vis_type = %d, prevent_conn_flag = %d")
TRC_MSG(MMI_BT_CONN_SHOW_POP, "[BTCONN]auto-reconn done_int show_pop = %d")
TRC_MSG(MMI_BT_CONN_AUTO_RECONN_RESET, "[BTCONN]auto-reconn mmi_bt_dialer_auto_reconn_reset(), addr:  %04x:%08x:%02x")
TRC_MSG(MMI_BT_CONN_AUTO_RECONN_SET_DEV, "[BTCONN]auto-reconn mmi_bt_dialer_set_autoreconn_dev(), i = %d, addr: %04x:%08x:%02x")
TRC_MSG(MMI_BT_CONN_AUTO_RECONN_CLEAN_DEV, "[BTCONN]auto-reconn mmi_bt_dialer_clean_autoreconn_dev(), i = %d, addr: %04x:%08x:%02x")
TRC_MSG(MMI_BT_CONN_DIALER_AUTO_RECONN, "[BTConn]auto-reconn mmi_bt_dialer_auto_reconn_start()addr: %04x:%08x:%02x, reconn_flag = %d, accu_time = %d")
TRC_MSG(MMI_BT_CONN_SHOW_POP_STRING, "[btconn]STRING = %s")
TRC_MSG(MMI_BT_CONN_DIS_STRING_1, "[btconn]STRING = %s")
TRC_MSG(MMI_BT_CONN_DIS_STRING_NAME, "[btconn]STRING = %s")
TRC_MSG(MMI_BT_CONN_AUTO_HIBERNATION, "[BTConn]Hibernatin mode")
TRC_MSG(MMI_BT_AUTO_RECONN_1,   "[btconn]WWWW")
TRC_MSG(MMI_BT_AUTO_RECONN_2,   "[btconn]SDGFSGDFDF")
TRC_MSG(MMI_BT_CONN_MOVE_RIGHT,  "[btconn]mmi_bt_dialer_move_right_hdlr, %d")
TRC_MSG(MMI_BT_CONN_MOVE_RIGHT_DISABLE,  "[btconn]MMI_RET_ERR")
TRC_MSG(MMI_BT_CONN_MOVE_RIGHT_SET, "[btconn]set g_mmi_bt_dialer_move_rgt = %d")
TRC_MSG(MMI_BT_CONN_MOVE_RIGHT_GET, "[btconn]get g_mmi_bt_dialer_move_rgt = %d")
TRC_MSG(MMI_BT_CONN_INSERT_DEV_INFO, "new dev: %x %s")
TRC_MSG(MMI_BT_ANTILOST_LOS_IDX, "[BTCONN]antilost anti_lost_idx = %d")
TRC_MSG(MMI_BT_ANTILOST_LOS_STRING,  "[btconn]anti lost STRING = %s")
TRC_MSG(MMI_BT_ANTILOST_SINK_CONN,  "HUGO mmi_bt_anti_lost_add_addr Sink Connection")
TRC_MSG(MMI_BT_ANTILOST_NOTIFY_HDLR_BY_HUGO, "HUGO mmi_bt_anti_lost_notify_hdlr arg:%x, idx:%d")
TRC_MSG(MMI_BT_G7_CONNECT_COMPELTED,   "[btconn]mmi_bt_connect_complete ")
TRC_MSG(MMI_BT_G7_CONNECT_COMPELTED_A2DP, "[btconn]SRV_BT_CM_ADVANCED_AUDIO_PROFILE_UUID event_conn->profile_id = %d")
TRC_MSG(MMI_BT_G7_CONNECT_COMPELTED_A2DP_GET_ROLE, "[btconn]srv_a2dp_get_role(event_conn->dev_addr) == BT_A2DP_SOURCE")
TRC_MSG(MMI_BT_G7_GEN_UPDATE_STATUS_CONN_TYPE, "[BT_MMI]conn_type %d")
TRC_MSG(MMI_BT_G7_GEN_UPDATE_STATUS_CONN_TYPE_BLE, "[BT_MMI]BLE")
TRC_MSG(MMI_BT_G7_GEN_UPDATE_STATUS_CONN_TYPE_DUAL, "[BT_MMI]DUAL")
TRC_MSG(MMI_BT_G7_BT_POWER_OFF_PRE_PROCESS, "mmi_bt_power_off_pre_process")

#bt conn end

TRC_MSG(MMI_BT_SPEAKER_POWER_OFF_FUNC_CALLED, "[BTSPEAKER]MMI BT Speaker Power Off function called, result:%d")  
TRC_MSG(MMI_BT_SPEAKER_POWER_OFF, "[BTSPEAKER]MMI BT Speaker Power Off")
TRC_MSG(MMI_BT_SPEAKER_BG_CALLBACK_HDLR, "[BTSPEAKER]MMI BT Speaker BG callback hdlr called, result:%d")  
TRC_MSG(MMI_BT_SPEAKER_POWER_ON, "[BTSPEAKER]MMI BT Speaker Power On")

/* pbapc srv */
TRC_MSG(TRC_SRV_PBAPC_CNTX_INIT, "[SrvPbapc]cntx_init--ret: %d\n")
TRC_MSG(TRC_SRV_PBAPC_CHECK_PARA, "[SrvPbapc]check_para--type: %d, ret: %d\n")
TRC_MSG(TRC_SRV_PBAPC_DISABLE_REQ, "[SrvPbapc]disable_req\n")
TRC_MSG(TRC_SRV_PBAPC_ENABLE_REQ, "[SrvPbapc]enable_req\n")
TRC_MSG(TRC_SRV_PBAPC_SET_PATH_REQ1, "[SrvPbapc]set_path_req(1)--path: %d\n")
TRC_MSG(TRC_SRV_PBAPC_SET_PATH_REQ2, "[SrvPbapc]set_path_req(2)--path: %d\n")
TRC_MSG(TRC_SRV_PBAPC_SET_PATH_CNF_HDLR, "[SrvPbapc]set_path_cnf_hdlr--cnf_code: %d, path: %d, bt_index: %d\n")
TRC_MSG(TRC_SRV_PBAPC_CONNECT_REQ, "[SrvPbapc]connect_req--ret: %d")
TRC_MSG(TRC_SRV_PBAPC_CONNECT, "[SrvPbapc]connect--lap: 0x%x, uap: 0x%x, nap: 0x%x, cb: 0x%x\n")
TRC_MSG(TRC_SRV_PBAPC_DISCONNECT, "[SrvPbapc]disconnect--lap: 0x%x, uap: 0x%x, nap: 0x%x, cb: 0x%x\n")
TRC_MSG(TRC_SRV_PBAPC_BTD_PUSH, "[SrvPbapc]btd_push--lap: 0x%x, uap: 0x%x, nap: 0x%x, ret: %d\n")/* spp mmi */
TRC_MSG(TRC_SRV_PBAPC_RD_FLD_HDLR, "[SrvPbapc]read_folder_cnf_hdlr--state: %d, hd: 0x%x\n")
TRC_MSG(TRC_SRV_PBAPC_RD_LIST_CNF, "[SrvPbapc]read_list_cnf_hdlr--state: %d, hd: 0x%x\n")
TRC_MSG(TRC_SRV_PBAPC_RD_LIST_CNF_I, "[SrvPbapc]read_list_cnf_hdlr--hd_state: %d\n")
TRC_MSG(TRC_SRV_PBAPC_RD_ENTRY_HD, "[SrvPbapc]read_entry_cnf_hdlr--state: %d, hd: 0x%x\n")
TRC_MSG(TRC_SRV_PBAPC_RD_ENTRY_HD_I, "[SrvPbapc]read_entry_cnf_hdlr--hd_state: %d\n")
TRC_MSG(TRC_SRV_PBAPC_CONN_HD, "[SrvPbapc]connect_cnf_hdlr--state: %d, hd: 0x%x\n")
TRC_MSG(TRC_SRV_PBAPC_DISCONN_HD, "[SrvPbapc]disconnect_cnf_hdlr--state: %d, hd: 0x%x\n")
TRC_MSG(TRC_SRV_PBAPC_DISCONN_HD_I, "[SrvPbapc]disconnect_cnf_hdlr--hd_state: %d\n")
TRC_MSG(TRC_SRV_PBAPC_DISCONN_IND_HD, "[SrvPbapc]disconnect_ind_hdlr--state: %d, hd: 0x%x\n")
TRC_MSG(TRC_SRV_PBAPC_DISCONN_IND_HD_I, "[SrvPbapc]disconnect_ind_hdlr--hd_state: %d\n")
TRC_MSG(TRC_SRV_PBAPC_IS_DISCONN, "[SrvPbapc]is_connect--btd->flag: 0x%x, index: %d, ret: %d\n")
TRC_MSG(TRC_SRV_PBAPC_GET_BTD, "[SrvPbapc]get_btd_from_bt_addr--lap: 0x%x, uap: 0x%x, nap: 0x%x, flag: %x\n")
TRC_MSG(TRC_SRV_PBAPC_GET_BTD_ADDR, "[SrvPbapc]get_btd_addr--lap: 0x%x, uap: 0x%x, nap: 0x%x, index: %d, btd->flag: 0x%x, ret: %d\n")
TRC_MSG(TRC_SRV_PBAPC_GET_BTD_INDX, "[SrvPbapc]get_btd_index--lap: 0x%x, uap: 0x%x, nap: 0x%x, flag: 0x%x, ret: %d\n")
/* spp mmi */
/* spp mmi */
TRC_MSG(MMI_BT_SPP_SERVER_INIT,"[MMI_SPP]mmi_bt_spp_server_init()")
TRC_MSG(MMI_BT_SPP_SERVER_OPEN,"[MMI_SPP]spp server init--handle[%d]:%d")
TRC_MSG(MMI_BT_SPP_SERVER_DISCONN,"[MMI_SPP]mmi_bt_spp_disconnect--conn_id: %d, ret:%d")
TRC_MSG(MMI_BT_SPP_SERVER_DISCONN_GET_CONN_ID,"[MMI_SPP] spp server disconnect--conn_id: %d")
TRC_MSG(MMI_BT_SPP_GET_ADDR,"[MMI_SPP]get addr: %04x:%08x:%02x")
TRC_MSG(MMI_BT_SPP_GET_CTNX,"[MMI_SPP]mmi_bt_spp_get_cntx_by_handle--handle:%d")
TRC_MSG(MMI_BT_SPP_GET_CTNX_INDEX,"[MMI_SPP]mmi_bt_spp_get_cntx_by_handle--index:%d")
TRC_MSG(MMI_BT_SPP_GET_NO_CTNX,"[MMI_SPP]mmi_bt_spp_get_cntx_by_handle--no handle")
TRC_MSG(MMI_BT_SPP_IS_CONNECTED, "[MMI_SPP]if other profiles is connected:TURE")
TRC_MSG(MMI_BT_SPP_IS_NOT_CONNECTED, "[MMI_SPP]if other profiles is connected:FALSE")
TRC_MSG(MMI_BT_SPP_SERVER_CONN_IND,"[MMI_SPP]mmi_bt_spp_connect_ind--conn_id:%d, ret: %d")
TRC_MSG(MMI_BT_SPP_SERVER_INFORM_DISCONN_INFO,"[MMI_SPP]inform CM about spp server disconnect")
TRC_MSG(MMI_BT_SPP_SERVER_BIND_HANDLER,"[MMI_SPP]mmi_bt_spp_bind_handler")
TRC_MSG(MMI_BT_SPP_SERVER_AUTHORIZE_IND,"[MMI_SPP]mmi_bt_spp_authorize_ind--conn_id: %d, ret:%d") 
TRC_MSG(MMI_BT_SPP_SERVER_DISCONN_FROM_CM,"[MMI_SPP]mmi_bt_spps_send_disconnect_req_from_cm--addr:%04x:%08x:%02x")
TRC_MSG(MMI_BT_SPP_SERVER_DISCONN_FROM_CM_ERROR,"[MMI_SPP]mmi_bt_spps_send_disconnect_req_from_cm no cntx")
TRC_MSG(MMI_BT_SPP_SERVER_IS_CONNECTED,"[MMI_SPP]mmi spp server is connected: %d")
TRC_MSG(MMI_BT_SPP_GET_HANDLE_BY_ADDR,"[MMI_SPP]get handle by addr:[%d]")
TRC_MSG(MMI_BT_SPP_SERVER_READY_TO_WRITE_IND,"[MMI_SPP]mmi_bt_spps_handle_ready_to_write_ind()--conn_id: %d, ret:%d")
TRC_MSG(MMI_BT_SPP_SERVER_READY_TO_READ_IND,"[MMI_SPP]mmi_bt_spps_handle_ready_to_read_ind()--conn_id: %d, ret:%d")
TRC_MSG(MMI_BT_SPP_SERVER_GET_EVENT_ID,"[MMI_SPP]mmi_bt_spp_event_handler()--event_id: %04x")
TRC_MSG(MMI_BT_SPP_GET_NO_HANDLE,"[MMI_SPP]Can't get valid handle")

/* BTB */
TRC_MSG(MMI_BT_ANTILOST_INIT,"[BTB]mmi_bt_anti_lost_init, times:%d, curr_times0:%d, curr_times1:%d")
TRC_MSG(MMI_BT_ANTILOST_CLOSE,"[BTB]mmi_bt_anti_lost_screen_close")
TRC_MSG(MMI_BT_ANTILOST_SEND_NOTIFY,"[BTB]mmi_bt_anti_lost_send_notify, notify:%d")
TRC_MSG(MMI_BT_ANTILOST_GET_NOTIFY,"[BTB]mmi_bt_anti_lost_get_notify, type:%d, idx:%d, notify:%d")
TRC_MSG(MMI_BT_ANTILOST_NOTIFY_CB,"[BTB]mmi_bt_anti_lost_notify_callback, result:%d")TRC_MSG(MMI_BT_ANTILOST_INPUT_EVENT_PROC,"[BTB]mmi_bt_anti_lost_input_event_proc, evt:%d")
TRC_MSG(MMI_BT_ANTILOST_RECONN_FINISH,"[BTB]mmi_bt_anti_lost_reconnect_finish, idx:%d, notify:%d")
TRC_MSG(MMI_BT_ANTILOST_NOTIFY_HDLR,"[BTB]mmi_bt_anti_lost_notify_hdlr, idx:%d, notify:%d")

/* GATT Factory Srv*/
TRC_MSG(TRC_SRV_GATT_F_FIND_USER_BY_CTX,       "[gatts_f]find_user_by_appctx ctx(%d) user_ctx(%d).")
TRC_MSG(TRC_SRV_GATT_F_LIST_AND_USER,       "[gatts_f]head:(%d) user(%d)")
TRC_MSG(TRC_SRV_GATT_F_REG_CB_CTX,       "[gatts_f]reg_cb ctx(%d)")
TRC_MSG(TRC_SRV_GATT_F_REG_CB_USER_CB_NULL,       "[gatts_f]srv_factory_user_regeistered:user_reg_cb is NULL.")
TRC_MSG(TRC_SRV_GATT_F_REG_CB_APP_UUID_NOT_EXIST,       "[gatts_f]srv_factory_user_regeistered:uuid not exist.")
TRC_MSG(TRC_SRV_GATT_F_XML_S_EL_HDR_ALLOC_FAILED,       "[gatts_f]srv_factory_xml_start_element_hdlr alloc file info failed.")
TRC_MSG(TRC_SRV_GATT_F_XML_S_EL_HDR_ERR,       "[gatts_f]srv_factory_xml_start_element_hdlr err:(%d).")
TRC_MSG(TRC_SRV_GATT_F_DUMP_DEP_SRV_FILE_PROFILE_ID,       "[gatts_f]DUMP dep service file profile ID:(%d).")
TRC_MSG(TRC_SRV_GATT_F_XML_E_EL_HDR_ERR,       "[gatts_f]srv_factory_xml_end_element_hdlr err:(%d).")
TRC_MSG(TRC_SRV_GATT_F_NEW_PARSER_FAILED,       "[gatts_f]parse dep files failed. new parser failed.")
TRC_MSG(TRC_SRV_GATT_STR_TO_UUID_NO_MEM,       "[gatts_f]srv_facotry_str_to_uuid: no memory.")
TRC_MSG(TRC_SRV_GATT_SRV_TYPE_INVALID,       "[gatts_f]Service type is invalid.")
TRC_MSG(TRC_SRV_GATT_F_NEW_SRV_NODE_NO_MEM,       "[gatts_f]New srv node err no memory.")
TRC_MSG(TRC_SRV_GATT_F_NEW_CHAR_NODE_NO_MEM,       "[gatts_f]New Char node err no memory.")
TRC_MSG(TRC_SRV_GATT_F_PARSE_CHAR_IN_ERR_STATE,       "[gatts_f]Parse characteristic in wrong state.")
TRC_MSG(TRC_SRV_GATT_F_NEW_DES_NODE_NO_MEM,       "[gatts_f]New Des node err no memory.")
TRC_MSG(TRC_SRV_GATT_F_PARSE_DES_IN_WRONG_STATE,       "[gatts_f]Parse descriptor in wrong state")
TRC_MSG(TRC_SRV_GATT_F_SRVS_XML_S_EL_HDLR_USER_NULL,       "[gatts_f]srv_factory_srvs_xml_start_element_hdlr err:user is null.")
TRC_MSG(TRC_SRV_GATT_F_SRVS_XML_S_EL_HDLR_ERR,       "[gatts_f]srv_factory_srvs_xml_start_element_hdlr err:(%d).")
TRC_MSG(TRC_SRV_GATT_F_SRVS_XML_E_EL_HDLR_ERR,       "[gatts_f]srv_factory_srvs_xml_end_element_hdlr err:(%d).")
TRC_MSG(TRC_SRV_GATT_F_UNKNOW_DECL_TYPE,       "[gatts_f]Unknow decl type:(%d).")
TRC_MSG(TRC_SRV_GATT_F_CAN_NOT_FIND_ID_SRV,       "[gatts_f]Can't find profile ID:(%d) srvs.")
TRC_MSG(TRC_SRV_GATT_F_PARSE_FAILED_USER_NO_EXIST,       "[gatts_f]parse services failed user no exist")
TRC_MSG(TRC_SRV_GATT_F_ADD_CONITUE_FUN_ENTRY,       "[gatts_f] srv_factory_service_continue_add_declaration enter")
TRC_MSG(TRC_SRV_GATT_F_ADD_DECLARATION_UNKNOW_TYPE,       "[gatts_f]add_declaration, unknow type(%d)")
TRC_MSG(TRC_SRV_GATT_F_ADD_CONITUE_REG_CB_NULL,       "[gatts_f]srv_factory_service_continue_add_declaration:user_reg_cb is NULL")
TRC_MSG(TRC_SRV_GATT_F_ADD_SRV_CB_NODE_NULL,       "[gatts_f]srv_factory_service_added_callback, user or srv node is null.")
TRC_MSG(TRC_SRV_GATT_F_ADD_CHAR_CB_NODE_NULL,       "[gatts_f]srv_factory_charac_added_callback, user or srv node is null.")
TRC_MSG(TRC_SRV_GATT_F_ADD_DES_CB_NODE_NULL,       "[gatts_f]srv_factory_des_added_callback, user or srv node is null.")
TRC_MSG(TRC_SRV_GATT_F_DEL_SRV_CB_REG_CB_NULL,       "[gatts_f]srv_factory_srv_del_callback:user_reg_cb is NULL.")
TRC_MSG(TRC_SRV_GATT_F_DEL_SRV_CB_NODE_NULL,       "[gatts_f]srv_factory_srv_del_callback, user or srv node is null.")
TRC_MSG(TRC_SRV_GATT_F_INIT_ENTER,       "[gatts_f]gatt_profile_factory_init enter")
TRC_MSG(TRC_SRV_GATT_F_INIT_LEAVE,       "[gatts_f]gatt_profile_factory_init leave")
TRC_MSG(TRC_SRV_GATT_F_DEINIT_ENTER,       "[gatts_f]srv_gatts_profile_factory_deinit enter")
TRC_MSG(TRC_SRV_GATT_F_DEINIT_LEAVE,       "[gatts_f]srv_gatts_profile_factory_deinit leave")
TRC_MSG(TRC_SRV_GATT_F_REG_ENTER,       "[gatts_f]srv_gatts_profile_factory_register enter")
TRC_MSG(TRC_SRV_GATT_F_REG_FAILED_USER_NULL,       "[gatts_f]regist failed. user is NULL")
TRC_MSG(TRC_SRV_GATT_F_REG_FAILED_CB_NULL,       "[gatts_f]regist failed. callback is NULL")
TRC_MSG(TRC_SRV_GATT_F_REG_FAILED_UID_NULL_OR_REG_ALREADY,       "[gatts_f]regist failed. userid is NULL or registered already")
TRC_MSG(TRC_SRV_GATT_F_REG_LEAVE,       "[gatts_f]srv_gatts_profile_factory_register leave")
TRC_MSG(TRC_SRV_GATT_F_DEREG_ENTER,       "[gatts_f]srv_gatts_profile_factory_deregister enter")
TRC_MSG(TRC_SRV_GATT_F_DEREG_LEAVE,       "[gatts_f]srv_gatts_profile_factory_deregister leave")
TRC_MSG(TRC_SRV_GATT_F_DEREG_CB_ENTRY,       "[gatts_f]srv_factory_user_deregeistered enter")
TRC_MSG(TRC_SRV_GATT_F_DEREG_CB_LEAVE,       "[gatts_f]srv_factory_user_deregeistered leave")
TRC_MSG(TRC_SRV_GATT_F_GET_SRV_FUN_ENTER,       "[gatts_f]srv_gatts_profile_factory_get_services enter ctx(%d)")
TRC_MSG(TRC_SRV_GATT_F_GET_SRV_IN_STATE,       "[gatts_f]get_services user state:(%d)")
TRC_MSG(TRC_SRV_GATT_F_GET_SRV_FAILED_CTX_NULL,       "[gatts_f]Get services fiald reg_ctx or services is NULL")
TRC_MSG(TRC_SRV_GATT_F_GET_SRV_FUN_LEAVE,       "[gatts_f]srv_gatts_profile_factory_get_services leave")
TRC_MSG(TRC_SRV_GATT_F_CLR_SRV_FUN_ENTER,       "[gatts_f]srv_gatts_profile_factory_clear_services enter")
TRC_MSG(TRC_SRV_GATT_F_CLR_SRV_FUN_LEAVE,       "[gatts_f]srv_gatts_profile_factory_clear_services leave")
TRC_MSG(TRC_SRV_GATT_F_ADD_SRV_FUN_ENTER,       "[gatts_f]srv_gatts_profile_factory_add_services enter")
TRC_MSG(TRC_SRV_GATT_F_ADD_SRV_FAILED_HEAD_NOT_SRV,       "[gatts_f]add services failed Head node is not srv.")
TRC_MSG(TRC_SRV_GATT_F_ADD_SRV_FAILED_STATE_IS_WRONG,       "[gatts_f]add services failed Service sate is wrong")
TRC_MSG(TRC_SRV_GATT_F_ADD_SRV_FAILED_USER_NULL,       "[gatts_f]add services failed User is null")
TRC_MSG(TRC_SRV_GATT_F_ADD_SRV_FAILED_NOT_IDLE,       "[gatts_f]add services failed state is not idle (%d)")    
TRC_MSG(TRC_SRV_GATT_F_ADD_SRV_FAILED_REG_CB_NULL,       "[gatts_f]Add srv failed:user_reg_cb is NULL")
TRC_MSG(TRC_SRV_GATT_F_ADD_SRV_FAILED_NODE_NULL,       "[gatts_f]srv_factory_service_add srv.  user or srv node is null")
TRC_MSG(TRC_SRV_GATT_F_ADD_SRV_LEAVE,       "[gatts_f]srv_gatts_profile_factory_add_services leave")
TRC_MSG(TRC_SRV_GATT_F_DEL_SRV_FUN_ENTER,       "[gatts_f]srv_gatts_profile_factory_del_services enter")
TRC_MSG(TRC_SRV_GATT_F_DEL_SRV_FAILED_INIT_STATE_ERR,       "[gatts_f]del services failed Service init sate or srv is wrong")
TRC_MSG(TRC_SRV_GATT_F_DEL_SRV_FAILED_USER_NULL,       "[gatts_f]del services failed User is null")
TRC_MSG(TRC_SRV_GATT_F_DEL_SRV_FAILED_NOT_IDLE,       "[gatts_f]del services failed state is not idle (%d)")
TRC_MSG(TRC_SRV_GATT_F_DEL_SRV_FAILED_CB_NULL,       "[gatts_f]del srv fialed callback is NULL")
TRC_MSG(TRC_SRV_GATT_F_DEL_SRV_FAILED_SRV_NODE_NULL,       "[gatts_f]delete srv failed. user or srv node is null")
TRC_MSG(TRC_SRV_GATT_F_DEL_SRV_FUN_LEAVE,       "[gatts_f]srv_gatts_profile_factory_del_services leave")
TRC_MSG(TRC_SRV_GATT_F_ERR_NO_PROP_IN_DES,       "[gatts_f]err No property in descriptor.")
TRC_MSG(TRC_SRV_GATT_F_PARSER_PROP_IN_WRONG_STATE,       "[gatts_f]parser property data in wrong state.")
TRC_MSG(TRC_SRV_GATT_F_PARSER_PERM_IN_WRONG_STATE,       "[gatts_f]parser permission data in wrong state.")
TRC_MSG(TRC_SRV_GATT_F_PARSER_DATA_IN_WRONG_STATE,       "[gatts_f]parser data in wrong state.")
TRC_MSG(TRC_SRV_GATT_F_SRVS_XML_END_ELEM_HDLR_ERR,       "[gatts_f]srv_factory_srvs_xml_end_element_hdlr err:(%d).")
TRC_MSG(TRC_SRV_GATT_F_PARSER_SRV_FAILED_NEW_PARESR_FAILED,       "[gatts_f]parse service failed new parser failed.")
TRC_MSG(TRC_SRV_GATT_F_PARSER_SRV_FAILED_XML_PARESR_FAILED,       "[gatts_f]parse service failed xml_parse failed.")
TRC_MSG(TRC_SRV_GATT_F_PARSER_DEP_FILES_FAILED,       "[gatts_f]parse dep files fialed.")
TRC_MSG(TRC_SRV_GATT_F_PARSER_DEP_FILES_FAILED_USER_NULL,       "[gatts_f]parse dep files fialed. user is NULL")
TRC_MSG(TRC_SRV_GATT_F_MEM_CREATE_SUCCESS, "[gatts_f][kal_adm_create] create adm buffer success!")
TRC_MSG(TRC_SRV_GATT_F_MEM_CREATE_FAIL, "[gatts_f][ERR][kal_adm_create] create adm buffer failed!")
TRC_MSG(TRC_SRV_GATT_F_MEM_ALLOC_SIZE, "[gatts_f][adm malloc] size:%d")
TRC_MSG(TRC_SRV_GATT_F_MEM_ALLOC_ERR, "[gatts_f][adm malloc][ERR] buffer is NULL!")
TRC_MSG(TRC_SRV_GATT_F_MEM_ALLOC_SUCCESS, "[gatts_f][adm malloc] ptr:%x, size:%d")
TRC_MSG(TRC_SRV_GATT_F_MEM_FREE, "[gatts_f][adm free] ptr:%x")
TRC_MSG(TRC_SRV_GATT_F_MEM_FREE_ERR1, "[gatts_f][adm free][ERR] ptr is NULL!")
TRC_MSG(TRC_SRV_GATT_F_MEM_FREE_ERR2, "[gatts_f][adm free][ERR] buffer is NULL!")
TRC_MSG(TRC_SRV_GATT_DEV_ADDR, "[gattsrv]dev_addr: %x %x %x %x %x %x")
TRC_MSG(TRC_SRV_GATT_UPDATE_NAME_ERR1, "[gattsrv][update name][ERROR]dev_name is NULL!")
TRC_MSG(TRC_SRV_GATT_UPDATE_NAME_ERR2, "[gattsrv][update name][ERROR]dev_addr is NULL!")
TRC_MSG(TRC_SRV_GATT_UPDATE_NAME_STR, "[gattsrv][update name]dev_name:%s")
TRC_MSG(TRC_SRV_GATT_UPDATE_NAME_UPDATED, "[gattsrv][update name]Has been update name to CM!")
TRC_MSG(TRC_SRV_GATT_CONN_STATE_ENTER, "[gattsrv][conn state]is_conn:%d, is_ind:%d, result:%d, LastInd:%d")
TRC_MSG(TRC_SRV_GATT_CONN_STATE_CONN, "[gattsrv][conn state]fgResult:%d, u1DevNum:%d")
TRC_MSG(TRC_SRV_GATT_CONN_STATE_INDICATED, "[gattsrv][conn state]Has been indicated CM! ")
TRC_MSG(TRC_SRV_GATT_CONN_STATE_IND2CM, "[gattsrv][conn state]Indicated to CM! is_ind_cm:%d ")
TRC_MSG(TRC_SRV_GATT_CONN_STATE_NAME, "[gattsrv][conn state]Name:%s ")
TRC_MSG(TRC_SRV_GATT_CONN_STATE_GET_DEV_FLAG, "[gattsrv][get device] flag:%d ")
TRC_MSG(TRC_SRV_GATT_CONN_STATE_FIND_EXIST_DEV, "[gattsrv][get device][GET_DEVICE_EXIST]Find iDevice:%d ")
TRC_MSG(TRC_SRV_GATT_CONN_STATE_FIND_VALID_DEV, "[gattsrv][get device][GET_DEVICE_VALID]Find iDevice:%d ")
TRC_MSG(TRC_SRV_GATT_CONN_STATE_GET_DEV_RESULT, "[gattsrv][get device] fgResult:%d, iDevice:%d ")
TRC_MSG(TRC_SRV_GATT_CONN_STATE_GET_DEV_IND_FLAG, "[gattsrv][get device] ind_conn:%d, ind_disconn:%d, update_name:%d ")

/* anp client srv */
TRC_MSG(TRC_SRV_ANPC_APP_CB_IS_NULL,       "[ANPC][Err]app cb is NULL.")
TRC_MSG(TRC_SRV_ANPC_REG_CB_ENTRY,       "[ANPC]anp reg cb entry.")
TRC_MSG(TRC_SRV_ANPC_APP_UUID_IS_WRONG,       "[ANPC][Error]app uuid is wrong Return.")
TRC_MSG(TRC_SRV_ANPC_REG_CB_IN_WRONG_STATE,       "[ANPC][Error]reg cb in wrong state:(%d).")
TRC_MSG(TRC_SRV_ANPC_LISTEN_CB_ENTRY,       "[ANPC]anp listen cb entry.")
TRC_MSG(TRC_SRV_ANPC_LISTEN_CB_ERR_REG_CTX,       "[ANPC][Err]listen cb err reg_ctx.")
TRC_MSG(TRC_SRV_ANPC_CNN_CB_ENTRY_STATE,       "[ANPC]anp connection cb entry.state:(%d).")
TRC_MSG(TRC_SRV_ANPC_CNN_CB_BDADDR,       "[ANPC]anp connection cb addr:(0x%2x:0x%2x:0x%2x:0x%2x:0x%2x:0x%2x)")
TRC_MSG(TRC_SRV_ANPC_CNN_CB_ERR_REG_CTX,       "[ANPC][Err]connection cb err reg_ctx.")
TRC_MSG(TRC_SRV_ANPC_CNN_CB_PARAM_ERR,       "[ANPC][Err]connection cb param err conn(%x) addr(%x).")
TRC_MSG(TRC_SRV_ANPC_SRC_COMPLETE_CB_STATE,       "[ANPC]anpc_search_complete_callback.state:(%d)")
TRC_MSG(TRC_SRV_ANPC_SRC_COMPLETE_CB_ADDR,       "[ANPC]anpc_search_complete addr:(0x%2x:0x%2x:0x%2x:0x%2x:0x%2x:0x%2x)")
TRC_MSG(TRC_SRV_ANPC_SRC_COMPLETE_CB_ERR_REG_CTX,       "[ANPC][Err]anpc_search_complete_callback err reg_ctx.")
TRC_MSG(TRC_SRV_ANPC_SRC_RESULT_CB,       "[ANPC]anpc_search_result_callback.")
TRC_MSG(TRC_SRV_ANPC_SRC_FOUND,       "[ANPC]anpc service found.")
TRC_MSG(TRC_SRV_ANPC_GET_CHAR_CB_STATE,       "[ANPC]anpc_get_characteristic_callback.state:(%d)")
TRC_MSG(TRC_SRV_ANPC_UNKNOW_CMD,       "[ANPC]Unknow cp cmd:(%d)")
TRC_MSG(TRC_SRV_ANPC_INVALID_UUID_IN_OPER,       "[ANPC]invalid uuid:(0x%x) in oper(0x%x)")
TRC_MSG(TRC_SRV_ANPC_GET_CHAR_CB_ERR_REG_CTX,       "[ANPC][Err]anpc_get_characteristic_callback err reg_ctx.")
TRC_MSG(TRC_SRV_ANPC_GET_DES_CB_STATE,       "[ANPC]anpc_get_descriptor_callback.state:(%d)")
TRC_MSG(TRC_SRV_ANPC_GET_DES_CB_ERR_REG_CTX,       "[ANPC][Err]anpc_get_descriptor_callback err reg_ctx.")
TRC_MSG(TRC_SRV_ANPC_REG_NOTIFY_CB_STATE,       "[ANPC]anpc_register_for_notification_callback.state:(%d)")
TRC_MSG(TRC_SRV_ANPC_REG_NOTIFY_CB_ERR_REG_CTX,       "[ANPC][Err]anpc_register_for_notification_callback err reg_ctx.")
TRC_MSG(TRC_SRV_ANPC_NOTIFY_CB_STATE,       "[ANPC]anpc_notify_callback.state:(%d)")
TRC_MSG(TRC_SRV_ANPC_NOT_CONNECTIED_DEV,       "[ANPC]Not connection device.")
TRC_MSG(TRC_SRV_ANPC_NOTIFY_CB_ERR_REG_CTX,       "[ANPC][Err]anpc_notify_callback err reg_ctx.")
TRC_MSG(TRC_SRV_ANPC_READ_CHA_CB_STATE,       "[ANPC]anpc_read_characteristic_callback.state:(%d)")
TRC_MSG(TRC_SRV_ANPC_READ_CHAR_ERR_REG_CTX,       "[ANPC][Err]anpc_read_characteristic_callback err reg_ctx.")
TRC_MSG(TRC_SRV_ANPC_WRITE_CHA_CB_STATE,       "[ANPC]anpc_write_characteristic_callback.state:(%d)")
TRC_MSG(TRC_SRV_ANPC_WRITE_CHAR_ERR_REG_CTX,       "[ANPC][Err]anpc_write_characteristic_callback err reg_ctx.")
TRC_MSG(TRC_SRV_ANPC_WRITE_DES_CB_STATE,       "[ANPC]anpc_write_descriptor_callback state:(%d)")
TRC_MSG(TRC_SRV_ANPC_WRITE_DES_ERR_REG_CTX,       "[ANPC][Err]anpc_write_descriptor_callback err reg_ctx.")
TRC_MSG(TRC_SRV_ANPC_ENABLE_ENTRY_STATE,       "[ANPC]anp enable entry state:(%d)")
TRC_MSG(TRC_SRV_ANPC_ALREADY_ENABLED,       "[ANPC]anp enable success Already Enabled.")
TRC_MSG(TRC_SRV_ANPC_ENABLE_FAILE_CB_IS_NULL,       "[ANPC]anp enable failed cb is null.")
TRC_MSG(TRC_SRV_ANPC_DISABLE_ENTRY_STATE,       "[ANPC]anp disable entry state:(%d)")
TRC_MSG(TRC_SRV_ANPC_LISTEN_ENTRY,       "[ANPC]srv_anp_client_listen:(%d)")
TRC_MSG(TRC_SRV_ANPC_LISTEN_FAILED_STATE,       "[ANPC]srv_anp_client_listen failed state:(%d).")
TRC_MSG(TRC_SRV_ANPC_CONNECT_REQ_STATE,       "[ANPC]connect req entry state:(%d) addr:(0x%2x:0x%2x:0x%2x:0x%2x:0x%2x:0x%2x)")
TRC_MSG(TRC_SRV_ANPC_OPER_FAILED_CONN_OTHER_DEV,       "[ANPC]Oper  failed. Already cnn with (0x%2x:0x%2x:0x%2x:0x%2x:0x%2x:0x%2x)")
TRC_MSG(TRC_SRV_ANPC_DISCONNECTING,       "[ANPC]anp is disconnecting.")
TRC_MSG(TRC_SRV_ANPC_CONNECTING,       "[ANPC]anp is connecting.")
TRC_MSG(TRC_SRV_ANPC_CONNECTED,       "[ANPC]anp is already connected.")
TRC_MSG(TRC_SRV_ANPC_CONNECT_FAILED_WITH_WRONG_STATE,       "[ANPC]anp connect failed state is wrong (%d).")
TRC_MSG(TRC_SRV_ANPC_CONNECT_FAILED_ADDR_IS_NULL,       "[ANPC]anp connect failed addr is null.")
TRC_MSG(TRC_SRV_ANPC_DISCONNECT_REQ_STATE,       "[ANPC]disc req entry state:(%d) addr:(0x%2x:0x%2x:0x%2x:0x%2x:0x%2x:0x%2x)")
TRC_MSG(TRC_SRV_ANPC_DISC_FAILED_ADDR_IS_NULL,       "[ANPC]anp disconnect failed. addr is null.")
TRC_MSG(TRC_SRV_ANPC_READ_SUP_NEW_ALERT_REQ_STATE,       "[ANPC]Read supported new alert req. state:(%d), addr:(0x%2x:0x%2x:0x%2x:0x%2x:0x%2x:0x%2x)")
TRC_MSG(TRC_SRV_ANPC_OPER_FAILED_OPER_NOT_IDLE,       "[ANPC]read failed. Oper not idl.(%d).")
TRC_MSG(TRC_SRV_ANPC_OPER_FAILED_NOT_IN_CNN,       "[ANPC]read failed. Not in connection.")
TRC_MSG(TRC_SRV_ANPC_OPER_FAILED_ADDR_IS_NULL,       "[ANPC]read failed. addr is null.")
TRC_MSG(TRC_SRV_ANPC_READ_SUP_UNREAD_ALERT_REQ_STATE,       "[ANPC]Read supported unread alert req. state:(%d), addr:(0x%2x:0x%2x:0x%2x:0x%2x:0x%2x:0x%2x)")
TRC_MSG(TRC_SRV_ANPC_UNKNOW_CP_CMD,       "[ANPC]unknow control point cmd:(%d)")
TRC_MSG(TRC_SRV_ANPC_WRITE_CP_REQ_STATE,       "[ANPC]write control point req.state:(%d), addr:(0x%2x:0x%2x:0x%2x:0x%2x:0x%2x:0x%2x)")
TRC_MSG(TRC_SRV_ANPC_WRITE_CP_REQ_CMD,       "[ANPC]write control point req.cmd:(%d), category_id:(%d)")
TRC_MSG(TRC_SRV_ANPC_CONFIG_ALERT_REQ_STATE,       "[ANPC]config alert req.state:(%d), addr:(0x%2x:0x%2x:0x%2x:0x%2x:0x%2x:0x%2x)")
TRC_MSG(TRC_SRV_ANPC_CONFIG_ALERT_REQ_OPER,       "[ANPC]config alert req.oper:(%d), on_off:(%d)")
TRC_MSG(TRC_SRV_ANPC_CONN_ADD_DEVICE,             "[ANP]add successful")
TRC_MSG(TRC_SRV_ANPC_CONN_CALLBACK_DISCON,         "[ANP]already have info")
TRC_MSG(TRC_SRV_ANPC_CONN_CALLBACK_COMPELETE_1,         "[ANPC]wrong device searched")
TRC_MSG(TRC_SRV_ANPC_CONN_CALLBACK_COMPELETE_2,         "[ANP]get device result, %d")
TRC_MSG(TRC_SRV_ANPC_CONN_CALLBACK_COMPELETE_3,         "[ANPC]wrong device searched 2")


/* Time Client Traces */
TRC_MSG(TIPC_SRV_DBG_REGISTER, "[TIPC][SRV] srv_tipc_register().")
TRC_MSG(TIPC_SRV_WRN_REGISTER_IN_USE, "[TIPC][SRV][WRN] srv_tipc_register(). Failed. in_use: %d, state: %d")
TRC_MSG(TIPC_SRV_ERR_REGISTER_NULL_APP_CB, "[TIPC][SRV][ERR] srv_tipc_register(). NULL app_cb")

TRC_MSG(TIPC_SRV_DBG_DEREGISTER, "[TIPC][SRV] srv_tipc_deregister().")
TRC_MSG(TIPC_SRV_WRN_DEREGISTER_STATE, "[TIPC][SRV][WRN] srv_tipc_deregister(). in state: %d")
TRC_MSG(TIPC_SRV_ERR_DEREGISTER_INVALID_CNTX, "[TIPC][SRV][ERR] srv_tipc_deregister(). Invalide context: %d, tipc_cntx: %d")

TRC_MSG(TIPC_SRV_WRN_GATTC_REG_CB_FAILED, "[TIPC][SRV][WRN] tipc_gattc_register_callback(). Failed. status: %d")
TRC_MSG(TIPC_SRV_WRN_GATTC_REG_CB_STATE, "[TIPC][SRV][WRN] tipc_gattc_register_callback(). Unexpected state: %d")

TRC_MSG(TIPC_SRV_DBG_GATTC_LTN_CB_READY, "[TIPC][SRV] Ready for incomming connection.")
TRC_MSG(TIPC_SRV_WRN_GATTC_LTN_CB_START_FAILED, "[TIPC][SRV][WRN] tipc_gattc_listen_callback(). Start listen failed. status: %d")
TRC_MSG(TIPC_SRV_WRN_GATTC_LTN_CB_STOP_FAILED, "[TIPC][SRV][WRN] tipc_gattc_listen_callback(). Stop listen failed. status: %d")
TRC_MSG(TIPC_SRV_WRN_GATTC_LTN_CB_STATE, "[TIPC][SRV][WRN] tipc_gattc_listen_callback(). Unexpected state: %d")

TRC_MSG(TIPC_SRV_DBG_GATTC_CNN_CB_INCOMMING_BD_ADDR, "[TIPC][SRV] Incoming connection. bd_addr %02x:%02x%02x:%02x:%02x:%02x")
TRC_MSG(TIPC_SRV_DBG_GATTC_CNN_CB_CONNECTED, "[TIPC][SRV] Server connected.")
TRC_MSG(TIPC_SRV_DBG_GATTC_CNN_CB_DISCONNECTED, "[TIPC][SRV] Disconnected from Time server.")
TRC_MSG(TIPC_SRV_WRN_GATTC_CNN_CB_CONNECT_FAILED_BD_ADDR, "[TIPC][SRV][WRN] Connect failed. bd_addr %02x:%02x%02x:%02x:%02x:%02x")
TRC_MSG(TIPC_SRV_WRN_GATTC_CNN_CB_INVALID_ARGS, "[TIPC][SRV][WRN] Invalid args: bd_addr %02x:%02x%02x:%02x:%02x:%02x, State: %d, Connected: %d")
TRC_MSG(TIPC_SRV_WRN_GATTC_CNN_CB_STATE, "[TIPC][SRV][WRN] tipc_gattc_connect_callback(). Unexpected state: %d")

TRC_MSG(TIPC_SRV_WRN_GATTC_SSR_CB_STATE, "[TIPC][SRV][WRN] tipc_gattc_search_service_result_callback(). Unexpected state: %d")

TRC_MSG(TIPC_SRV_DBG_GATTC_SSC_CB_COMPLETE, "[TIPC][SRV] Service search completed. srv_flags: %d")
TRC_MSG(TIPC_SRV_WRN_GATTC_SSC_CB_STATE, "[TIPC][SRV][WRN] tipc_gattc_search_service_complete_callback(). Unexpected state: %d")

TRC_MSG(TIPC_SRV_WRN_GATTC_GCH_CB_STATE, "[TIPC][SRV][WRN] tipc_gattc_get_char_callback(). Unexpected state: %d")

TRC_MSG(TIPC_SRV_DBG_GATTC_RCH_CB_VALUE_LEN, "[TIPC][SRV] Read char value len: %d")
TRC_MSG(TIPC_SRV_WRN_GATTC_RCH_CB_STATE, "[TIPC][SRV][WRN] tipc_gattc_read_char_callback(). Unexpected state: %d")

TRC_MSG(TIPC_SRV_DBG_GET_TIME_INFO, "[TIPC][SRV] Get time info.")
