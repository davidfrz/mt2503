[APP NAME] = DLAgent
[SCOPE] = PLUTO, COSMOS
[MODULE] = MOD_MMI_CONN_APP

#starttrace
TRC_MSG(MMI_DA_TRC_ENTER_IDLE,              "[DA] Enter Idle screen")
TRC_MSG(MMI_DA_TRC_SHUTDOWN_CLEAN,          "[DA] Shutdown clean: job->state = %d, delete file(Y/N): %c, result = %d")
TRC_MSG(MMI_DA_TRC_STOP_PDL,                "[DA] mmi_da_stop_pdl(%d);")
TRC_MSG(MMI_DA_TRC_STOP_DL,                 "[DA] mmi_da_stop_dl(%d);")
TRC_MSG(MMI_DA_TRC_REMOVE_DL,               "[DA] mmi_da_remove_dl(%d);")
TRC_MSG(MMI_DA_TRC_RESUME_DL,               "[DA] mmi_da_resume_dl(%d);")
TRC_MSG(MMI_DA_TRC_API_JOB_STATE,           "[DA]   => Job %d found, job->state = %d")
TRC_MSG(MMI_DA_TRC_START_OMA_DL,            "[DA] mmi_da_start_oma_download(0x%x, 0x%x, %d, 0x%x);")
TRC_MSG(MMI_DA_TRC_SAVE_FILE,               "[DA] mmi_da_save_file(): AppID: %d, MIME string = 0x%x, Extra_info: %d/0x%x")
TRC_MSG(MMI_DA_TRC_REGISTER_TYPE_HANDLER,   "[DA] mmi_da_register_type_handler(%d, %d, 0x%x, 0x%x, 0x%x);")
TRC_MSG(MMI_DA_TRC_FILEPATH_HDLR,           "[DA] Call filepath_hdlr(): job_id = %d")
TRC_MSG(MMI_DA_TRC_REPORT_TO_APP,           "[DA] Report to app: job_id = %d, job->state = %d, cause = %d, acc_size = %d")
TRC_MSG(MMI_DA_TRC_DISPATCH_TO_APP,         "[DA] Dispatch to app: MIME type = %Mapplib_mime_type_enum/%Mapplib_mime_subtype_enum, Hook/Dispatch = %c, index = %d")
TRC_MSG(MMI_DA_TRC_SETTING,                 "[DA] Storage: %Mmmi_da_storage_enum, Drv: %c, c_push = %d, c_dis = %d, do_dis = %d")
TRC_MSG(MMI_DA_TRC_PUSH_TEMP_WARNING,       "[DA][PUSH] *WARNING* Dispatch_hdlr 0x%x did not delete the file")
TRC_MSG(MMI_DA_TRC_AUTO_RESUME_TRY,         "[DA] Try to resume, job_id = %d, curr_size = %d")
TRC_MSG(MMI_DA_TRC_AUTO_RESUME_HTTP_RSP,    "[DA] Auto-Resume HttpRsp, job_id = %d, result = %d, status = %d; %d + %d = %d")
TRC_MSG(MMI_DA_OMA_WELL_INTENT_ATTEMPT,     "[DA][OMA] Release because no response(Well-Int. Attempt), OMA job ID = %d")
TRC_MSG(MMI_DA_OMA_SEND_REPORT,             "[DA][OMA] #%d Send report, num-to-try = %d")
TRC_MSG(MMI_DA_OMA_SEND_REPORT_STOP_RETRY,  "[DA][OMA] #%d Stop retrying, num-to-try = %d")
TRC_MSG(MMI_DA_OMA_SEND_REPORT_CANCEL,      "[DA][OMA] #%d Cancel sending report, num-to-try = %d")
TRC_MSG(MMI_DA_TRC_DRM_PROCESS,                 "[DA][DRM] Process(Install): serial = %d, result = %c0x%x")
TRC_MSG(MMI_DA_TRC_DRM_PROCESS_RESULT,          "[DA][DRM] Process result: serial = %d, result = %c0x%x, %Mapplib_mime_subtype_enum")
TRC_MSG(MMI_DA_TRC_DRM_PROCESS_CANCEL,          "[DA][DRM] Cancel processing: serial = %d")
TRC_MSG(MMI_DA_TRC_DRM_WAIT_FOR_RIGHTS,         "[DA][DRM] Wait for rights: serial = %d, time-to-wait = %d")
TRC_MSG(MMI_DA_TRC_DRM_WAIT_FOR_RIGHTS_RESULT,  "[DA][DRM] Result of waiting for rights: serial = %d, result = %d")
TRC_MSG(MMI_DA_TRC_DRM_WAIT_FOR_RIGHTS_CANCEL,  "[DA][DRM] Cancel waiting for rights: serial = %d, result = %d")
TRC_MSG(MMI_DA_WPS_SEND_SET_CHANNEL_REQ,    "[DA][WPS] Send SetChannelReq, req_id(ch) = %d")
TRC_MSG(MMI_DA_WPS_RECV_SET_CHANNEL_RSP,    "[DA][WPS] Recv SetChannelRsp, req_id(ch) = %d, channel_id = %d")
TRC_MSG(MMI_DA_WPS_SEND_UNSET_CHANNEL_REQ,  "[DA][WPS] Send UnsetChannelReq, channel_id = %d")
TRC_MSG(MMI_DA_WPS_RECV_UNSET_CHANNEL_RSP,  "[DA][WPS] Recv UnsetChannelRsp, channel_id = %d")
TRC_MSG(MMI_DA_WPS_SEND_HTTP_REQ,           "[DA][WPS] Send HttpReq, channel_id = %d, req_id = %d")
TRC_MSG(MMI_DA_WPS_RECV_HTTP_RSP,           "[DA][WPS] Recv HttpRsp, channel_id = %d, req_id = %d, server-rsp = %d")
TRC_MSG(MMI_DA_WPS_SEND_CANCEL_REQ,         "[DA][WPS] Send CancelReq, channel_id = %d, req_id = %d")
TRC_MSG(MMI_DA_WPS_RECV_CANCEL_RSP,         "[DA][WPS] Recv CancelRes, channel_id = %d, req_id = %d, result = %d")
TRC_MSG(MMI_DA_WPS_RECV_DL_PROGRESS_IND,    "[DA][WPS] Recv DlProgressInd, req_id = %d, seq = %d, size = %d")
TRC_MSG(MMI_DA_WPS_SEND_DL_PROGRESS_RES,    "[DA][WPS] Send DlProgressRes, req_id = %d, seq = %d")
TRC_MSG(MMI_DA_TRC_SELECT_STORAGE_INST,     "[DA] Select-storage: Instance Create/Destroy: %c, [%d]:0x%x")
TRC_MSG(MMI_DA_TRC_PUSH_FUNC,               "[DA][PUSH] Func[0x%x], (#P=%d) %d, %d, %d")
TRC_MSG(MMI_DA_TRC_PUSH_FREE_ITEM,          "[DA][PUSH] Free item %d, TBN/P/S: %d, %d, %d before free")
TRC_MSG(MMI_DA_TRC_RECV_WAP_NOTIFY_IND,     "[DA] Received WAP_NOTIFY_IND: %Mmmi_da_wap_notify_enum ; setuping_job = 0x%x")
TRC_MSG(MMI_DA_TRC_RECV_FILE_DL_IND,        "[DA][HTTP] Received FILE_DL_IND: session_id = %d")
TRC_MSG(MMI_DA_TRC_PREFETCHING_PROCESS,     "[DA][HTTP] do_prefetching_process: session_id = %d, with_content = %d, cntx->state = %d")
TRC_MSG(MMI_DA_TRC_RECV_PREFETCH_ABORTED,   "[DA][HTTP] PREFETCH_ABORTED: session_id = %d, cause = %d, cntx->state = %d")
TRC_MSG(MMI_DA_TRC_FUNC,                    "[DA][DL] Func[0x%x], (#D=%d)")
TRC_MSG(MMI_DA_TRC_FUNC_EX,                 "[DA][DL] Func[0x%x], (#D=%d): %d, %d, %d")
TRC_MSG(MMI_DA_TRC_END_FUNC,                "[DA][DL] Func[0x%x] - End, (#:%d)")
TRC_MSG(MMI_DA_TRC_MIMETYPE,                "[DA] MIME-type: %Mapplib_mime_subtype_enum")
TRC_MSG(MMI_DA_TRC_ALLOW_TO_TRIGGER_CONNECTION, "[DA] Allow to trigger connection: %d")
TRC_MSG(MMI_DA_TRC_UTIL_CHECK_FREE_SPACE,   "[DA][UTIL] Check free space: %c:\\, need/free space = %db / %db")
TRC_MSG(MMI_DA_TRC_UTIL_IS_DRIVE_AVAILABLE, "[DA][UTIL] Drive %c:\\ available: %c")
TRC_MSG(MMI_DA_TRC_UTIL_DECIDE_DRIVE_TO_SAVE, "[DA][UTIL] decide_drive_to_save(size = %d) => Succ: %d, Save to %c:\\(%d)")
TRC_MSG(MMI_DA_TRC_UTIL_FMGR_MOVE_RESULT,   "[DA][UTIL] FMGR Move, callback = 0x%x, result = %d")
