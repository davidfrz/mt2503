[APP NAME] = USB
[SCOPE] = PLUTO
[MODULE] = MOD_MMI_COMMON_APP

#starttrace
    
TRC_MSG(TRC_MMI_USB_PENDING_TIMEOUT_HDLR_PLUG_IN, "[MMIUSB]PendingUsbDetectionTimeoutHdlr(), plug-in")
TRC_MSG(TRC_MMI_USB_PENDING_TIMEOUT_HDLR_PLUT_OUT, "[MMIUSB]PendingUsbDetectionTimeoutHdlr(), plug-out")
TRC_MSG(TRC_MMI_USB_PENDING_TIMEOUT_HDLR_LEAVING_MS, "[MMIUSB]PendingUsbDetectionTimeoutHdlr(), leaving ms")
TRC_MSG(TRC_MMI_USB_PENDING_SEND_ACK_TO_PS, "[MMIUSB]mmi_usb_send_detect_ack(), action = %d")
TRC_MSG(TRC_MMI_USB_PWRON_THEN_PWRON, "[MMIUSB]UsbPwnOnThenPwnOn()")
TRC_MSG(TRC_MMI_USB_APP_DEINIT, "[MMIUSB]mmi_usb_app_deinit()")
TRC_MSG(TRC_MMI_USB_APP_DEINIT_COUNTER, "[MMIUSB]mmi_usb_app_deinit(), counter_of_deinit = %d")
TRC_MSG(TRC_MMI_USB_APP_DEINIT_COUNTER_MINUS1_PROCEDURE, "[MMIUSB]mmi_usb_app_deinit(), counter-1 procedure")
TRC_MSG(TRC_MMI_USB_APP_DEINIT_EVENT_ID_RETURN, "[MMIUSB]mmi_usb_app_deinit(), event id return")
TRC_MSG(TRC_MMI_USB_CONF_SCR_NOT_ALLOW_FALSE, "[MMIUSB]PermitUsbCfgScreenDisplay(): FALSE")
TRC_MSG(TRC_MMI_USB_CONF_SCR_NOT_ALLOW_TURE, "[MMIUSB]PermitUsbCfgScreenDisplay(): TRUE")
TRC_MSG(TRC_MMI_USB_FUNC_DETECT_QUERY_SCR, "[MMIUSB]EntryUsbDetectQueryScr()")
TRC_MSG(TRC_MMI_USB_FUNC_EXIT_DETECT_QUERY_SCR, "[MMIUSB]ExitUsbDetectQueryScr()")
TRC_MSG(TRC_MMI_USB_FUNC_DETECT_SCR_END_KEY_HDLR, "[MMIUSB]UsbDetectScrENDKeyHdlr()")
TRC_MSG(TRC_MMI_USB_DETECT_IND_ERR_ACT, "[MMIUSB] Err USB detect action(%d)")
TRC_MSG(TRC_MMI_USB_FUNC_CONF_FIRST_PAGE, "[MMIUSB]UsbConfigFirstPage(): mode = %d")
TRC_MSG(TRC_MMI_USB_FUNC_GET_UART_PORT_RSP_HDLE, "[MMIUSB]UsbGetUartPortRspHdlr()")
TRC_MSG(TRC_MMI_USB_CONF_AS_MS, "[MMIUSB]UsbDetectScrLskHdlr(), MS Selected")
TRC_MSG(TRC_MMI_USB_CONF_AS_CDCACM, "[MMIUSB] UsbDetectScrLskHdlr(), CDCACM Selected ")
TRC_MSG(TRC_MMI_USB_CONF_AS_NOTHING, "[MMIUSB] UsbDetectScrLskHdlr(), Unrecognized! ")
TRC_MSG(TRC_MMI_USB_PEND_DETECT_TIMEOUT_ALLOW, "[MMIUSB]PendingUsbDetectionTimeoutHdlr(), Enter Config Screen")
TRC_MSG(TRC_MMI_USB_PEND_DETECT_TIMEOUT_NOT_ALLOW, "[MMIUSB]PendingUsbDetectionTimeoutHdlr(), Wait again")
TRC_MSG(TRC_MMI_USB_SEND_SWITCH_PORT, "[MMIUSB]SendUsbUartSwitchToHW(), app = %d, new_port = %d")
TRC_MSG(TRC_MMI_USB_PERMIT_USB_CFG_SCREEN_DISPLAY_NOTIFY, "[USB MMI] mmi_usb_permit_usb_cfg_screen_display_notify, state=%d")
TRC_MSG(TRC_MMI_USB_HANDLE_PLUG_IN, "[USBMMI] mmi_usb_handle_plug_in")
TRC_MSG(TRC_MMI_USB_ENTRY_PROGRESS_SCREEN_INT, "[USB MMI] mmi_usb_entry_progress_screen_int")
TRC_MSG(TRC_MMI_USB_PROGRESS_LEAVE_PROC, "[USB MMI] mmi_usb_progress_leave_proc")
TRC_MSG(TRC_MMI_USB_CONFIG_RSP_CALLBACK, "[USBMMI] mmi_usb_config_rsp_callback: mode %d, suc %d")
TRC_MSG(TRC_MMI_USB_ENTER_NORMAL_GROUP, "[USBMMI] mmi_usb_enter_normal_group, %d")
TRC_MSG(TRC_MMI_USB_GET_NORMAL_GROUP_ID, "[USB MMI] mmi_usb_get_normal_group_id, group not exist")
TRC_MSG(TRC_MMI_USB_NORMAL_GROUP_PROC, "[USBMMI] mmi_usb_normal_group_proc(%d) ")
TRC_MSG(TRC_MMI_USB_EVT_ID_GROUP_DEINIT, "[USBMMI] EVT_ID_GROUP_DEINIT")
TRC_MSG(TRC_MMI_USB_EVT_ID_CUI_MENU_ITEM_SELECT, "[USBMMI] EVT_ID_CUI_MENU_ITEM_SELECT")
TRC_MSG(TRC_MMI_USB_EVT_ID_CUI_MENU_CLOSE_REQUEST, "[USBMMI] EVT_ID_CUI_MENU_CLOSE_REQUEST")
TRC_MSG(TRC_MMI_USB_QUERY_LIST_SELECT_HDLR, "[USBMMI] mmi_usb_query_list_select_hdlr(%d)")
TRC_MSG(TRC_MMI_USB_CLOSE_DETECT_QUERY_LIST, "[USBMMI] mmi_usb_close_detect_query_list")
TRC_MSG(TRC_MMI_USB_DETECT_CFG_LEAVE_PROC, "[USBMMI] mmi_usb_detect_cfg_leave_proc, state=%d")
TRC_MSG(TRC_MMI_USB_NEED_TO_REBOOT, "[USB MMI] mmi_usb_need_to_reboot, %d")

