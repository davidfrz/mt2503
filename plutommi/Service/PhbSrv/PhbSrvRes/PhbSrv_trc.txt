[APP NAME] = Phonebook
[SCOPE] = PLUTO, COSMOS
[MODULE] = MOD_MMI_COMMON_APP

#start trace
TRC_MSG(TRC_SRV_PHB_FREE_LINK, "[SrvPhb] srv_phb_free_link(), head = %x; tail = %x; tail->next = %x")
TRC_MSG(TRC_SRV_PHB_FREE_HANDLE, "[SrvPhb] srv_phb_free_handle(), is_canceled = %d")
TRC_MSG(TRC_SRV_PHB_QUERY_GET_COUNT, "[SrvPhb] srv_phb_query_get_count(), total = %d; name_matched = %d; num_matched = %d")
TRC_MSG(TRC_SRV_PHB_QUERY_GET_CLOG_COUNT, "[SrvPhb] srv_phb_query_get_clog_count(), clog_count = %d")
TRC_MSG(TRC_SRV_PHB_QUERY_GET_ALPHA_COUNT, "[SrvPhb] srv_phb_query_get_alpha_count(), alpha = %d; start = %d; count = %d")
/* phb startup */
TRC_MSG(TRC_SRV_PHB_STARTUP_SEND_READY_EVENT, "[SrvPhb] srv_phb_startup_send_ready_event(), phb_ready = %d, sim_refresh = %d, phb_storage = %d")
TRC_MSG(TRC_SRV_PHB_STARTUP_IS_PHB_READY, "[SrvPhb] srv_phb_startup_is_phb_ready(), phb_ready = %d")
TRC_MSG(TRC_SRV_PHB_STARTUP_SIM_REFRESH_HDLR, "[SrvPhb] srv_phb_startup_refresh_event_hdlr() sim_id: %d")
/* phb sse */
TRC_MSG(TRC_SRV_PHB_SSE_NAME_SORT, "[SrvPhb] srv_phb_sse_build_name_index(), entry_count = %d")
TRC_MSG(TRC_SRV_PHB_SSE_NUMBER_SORT, "[SrvPhb] srv_phb_sse_lookup_table_sort(), number_count = %d")
TRC_MSG(TRC_SRV_PHB_SSE_NUMBER_CONVERT, "[SrvPhb]srv_phb_sse_convert_number_to_int(), number:%d")
TRC_MSG(TRC_SRV_PHB_SSE_FILTER_CONTACT, "[SrvPhb]srv_phb_sse_build_contact_list(), storage = %d, field_filter = %d, count = %d")
TRC_MSG(TRC_SRV_PHB_SSE_ALPHA_TABLE, "[SrvPhb]srv_phb_sse_build_alpha_jump_table(), index = %d, count = %d")
TRC_MSG(TRC_SRV_PHB_SSE_SEARCH_NUMBER, "[SrvPhb]srv_phb_sse_lookup_table_search(), number = %d, store_index = %d, number_type = %x")
TRC_MSG(TRC_SRV_PHB_SSE_SEARCH_NAME, "[SrvPhb]srv_phb_sse_binary_search_name(), store_index = %d")
TRC_MSG(TRC_SRV_PHB_SSE_INSERT_NAME, "[SrvPhb]srv_phb_sse_get_name_pos(), store_index = %d")
TRC_MSG(TRC_SRV_PHB_SSE_QUERY, "[SrvPhb]srv_phb_sse_query(), alpha_table = %d align_field = %x item_order = %d")
TRC_MSG(TRC_SRV_PHB_SSE_QUERY_CLG_END, "[SrvPhb]srv_phb_sse_query(), call log finish")
TRC_MSG(TRC_SRV_PHB_SSE_QUERY_END, "[SrvPhb]srv_phb_sse_query(), finish, entry_count = %d")
/* phb data management */
TRC_MSG(TRC_SRV_PHB_DMGR_STARTUP_SET_READY,"[SrvPhb] srv_phb_datamgr_set_startup_ready(), phb_storage = %d, ready_status = %d")
TRC_MSG(TRC_SRV_PHB_DMGR_READ_CONTACT, "[SrvPhb] srv_phb_datamgr_read_contact(), store_index = %d, field_mask = %x")
TRC_MSG(TRC_SRV_PHB_DMGR_ADD_CONTACT, "[SrvPhb] srv_phb_datamgr_add_contact(), is_busy = %d, storage = %d, index = %d, field_mask = %x")
TRC_MSG(TRC_SRV_PHB_DMGR_UPD_CONTACT, "[SrvPhb] srv_phb_datamgr_update_contact(), is_busy = %d, store_index = %d, field_mask = %x")
TRC_MSG(TRC_SRV_PHB_DMGR_DEL_CONTACT, "[SrvPhb] srv_phb_datamgr_delete_contact(), is_busy = %d, store_index = %d")
TRC_MSG(TRC_SRV_PHB_DMGR_COPY_CONTACT, "[SrvPhb] srv_phb_datamgr_copy_contact(), is_busy = %d, store_index = %d")
TRC_MSG(TRC_SRV_PHB_DMGR_OP_RESULT, "[SrvPhb] srv_phb_datamgr_op_done(), store_index = %d, result = %d, op_type = %d")
TRC_MSG(TRC_SRV_PHB_DMGR_ADD_MEMBER, "[SrvPhb] srv_phb_datamgr_add_group_members(), entry_count = %d, group_id = %d")
TRC_MSG(TRC_SRV_PHB_DMGR_RMV_MEMBER, "[SrvPhb] srv_phb_datamgr_remove_group_member(), store_index = %d, group_id = %d")
TRC_MSG(TRC_SRV_PHB_DMGR_RMV_ALL_MEMBER, "[SrvPhb] srv_phb_datamgr_remove_all_group_members(), group_id = %d")
TRC_MSG(TRC_SRV_PHB_DMGR_ADD_GROUP, "[SrvPhb] srv_phb_datamgr_add_group(), result = %d, group_id = %d")
TRC_MSG(TRC_SRV_PHB_DMGR_DEL_GROUP, "[SrvPhb] srv_phb_datamgr_delete_group(), group_id = %d, order_id = %d")
TRC_MSG(TRC_SRV_PHB_DMGR_UPD_GROUP, "[SrvPhb] srv_phb_datamgr_update_group_info(), result = %d, group_id = %d, order_id = %d")
TRC_MSG(TRC_SRV_PHB_DMGR_CHECK_SPACE, "[SrvPhb]srv_phb_datamgr_res_check_data_space(), field_mask = %d, result = %d")
TRC_MSG(TRC_SRV_PHB_DMGR_GET_RES, "[SrvPhb]srv_phb_datamgr_get_res_path(), field_mask = %d, index = %d, from_file = %d")
TRC_MSG(TRC_SRV_PHB_DMGR_UPD_RES, "[SrvPhb]srv_phb_datamgr_update_res_path(), field_mask = %d, original_id = %d, original_type = %d, new_id = %d, new_type = %d")
/* phb memory management */
TRC_MSG(TRC_SRV_PHB_MEM_INIT, "[SrvPhb] mem_init, adm size = %d")
TRC_MSG(TRC_SRV_PHB_FREE_MEM, "[SrvPhb] mem_free, block: %x")
TRC_MSG(TRC_SRV_PHB_MEM_MALLOC_MEM_ENTER, "[SrvPhb] mem_alloc, type: %d <0:CTR|1:ADM> size: %d")
TRC_MSG(TRC_SRV_PHB_MEM_MALLOC_MEM, "[SrvPhb] mem_alloc, block: %x leftsize: %d")
TRC_MSG(TRC_SRV_PHB_MEM_MIN_SIZE, "[SrvPhb] mem_alloc, leftsize: %d")
TRC_MSG(TRC_SRV_PHB_MEM_ADM, "[SrvPhb] srv_phb_mem_is_adm(), mem adm, address: %x")
TRC_MSG(TRC_SRV_PHB_MEM_CTR, "[SrvPhb] srv_phb_mem_is_adm(), mem ctr, address: %x")
/*phb sim service*/
TRC_MSG(TRC_SRV_PHB_SIM_STARTUP_READ_FINISH, "[SrvPhb]srv_phb_sim_startup_read_finish(), phb_storage = %d, used = %d, total = %d")
TRC_MSG(TRC_SRV_PHB_SIM_STARTUP_READ_IND, "[SrvPhb] srv_phb_sim_startup_read_ind(), record_index: %d, storage: %d")
TRC_MSG(TRC_SRV_PHB_SIM_SET_SIM_NUMBER_RSP, "[SrvPhb]srv_phb_set_sim_number_rsp(), op_status: %d")
/*phb phone*/
TRC_MSG(TRC_SRV_PHB_PHONE_STARTUP_READ_FINISH, "[SrvPhb]srv_phb_startup_read_phone_finish(), phb_storage = %d, used = %d, total = %d")
TRC_MSG(TRC_SRV_PHB_PHONE_STARTUP_READ_PHONE, "[SrvPhb] srv_phb_startup_read_phone(), store_index = %d, count = %d")
/*phb T card*/
TRC_MSG(TRC_SRV_PHB_TCARD_INIT, "[SrvPhb] srv_phb_tcard_init(), ready_status: %d")
TRC_MSG(TRC_SRV_PHB_TCARD_INIT_START, "[SrvPhb] srv_phb_tcard_init_start()")
TRC_MSG(TRC_SRV_PHB_TCARD_ON_TCARD_READY, "[SrvPhb] srv_phb_tcard_on_tcard_ready(), is_ready: %d")
/*phb contact*/
TRC_MSG(TRC_SRV_PHB_CONTACT_CREATE_CONTACT, "[SrvPhb]srv_phb_create_contact(), src_contact: %d, dest_contact: %d")
TRC_MSG(TRC_SRV_PHB_CONTACT_FREE_CONTACT, "[SrvPhb]srv_phb_free_contact(), contact: %d")
TRC_MSG(TRC_SRV_PHB_CONTACT_GET_NAME_FIELD, "[SrvPhb]srv_phb_contact_get_name_field(), name: %d, alloc_new: %d")
TRC_MSG(TRC_SRV_PHB_CONTACT_GET_LINK_FIELD, "[SrvPhb]srv_phb_contact_get_link_field(), field: %d, alloc_new: %d")
/* phb oplib */
TRC_MSG(TRC_SRV_PHB_OPLIB_COPY_CONTACT, "[SrvPhb] srv_phb_oplib_copy_several_contact")
/* phb op service */
TRC_MSG(TRC_SRV_PHB_CREATE_SINGLE_HANDLE, "[SrvPhb] srv_phb_create_single_handle() cb_type: %d")
TRC_MSG(TRC_SRV_PHB_SINGLE_OP_DONE, "[SrvPhb] srv_phb_single_op_done() result: %d, contact_id: %d")
TRC_MSG(TRC_SRV_PHB_CREATE_MULTI_HANDLE, "[SrvPhb] srv_phb_create_multi_handle() cb_type: %d, src_storage: %d, dest_storage: %d, total_count: %d")
TRC_MSG(TRC_SRV_PHB_MULTI_OP_DONE, "[SrvPhb] srv_phb_multi_op_done() result: %d")
/* phb sdk */
TRC_MSG(TRC_SRV_PHB_SDK_GET_CONTACT, "[SrvPhb] srv_phb_sdk_get_contact, storage: %d, index: %d")
TRC_MSG(TRC_SRV_PHB_SDK_GET_CONTACT_2, "[SrvPhb] srv_phb_sdk_get_contact, store_index: %d, result: %d, contact_name: %s")
TRC_MSG(TRC_SRV_PHB_SDK_GET_USED_CONTACT_1, "[SrvPhb] srv_phb_sdk_get_used_contacts, storage: %d, pos_array: %d")
TRC_MSG(TRC_SRV_PHB_SDK_GET_USED_CONTACT_2, "[SrvPhb] srv_phb_sdk_get_used_contacts, storage: %d, index: %d")
TRC_MSG(TRC_SRV_PHB_SDK_GET_USED_CONTACT_3, "[SrvPhb] srv_phb_sdk_get_used_contacts, used: %d")

/* phb asm & adm */
TRC_MSG(TRC_SRV_PHB_OP_ASM_ALLOC, "[SrvPhb] srv_phb_query_get_num_item(asm), ptr: 0x%x, size: %d, user_data: 0x%x, free_func: 0x%x\n")
TRC_MSG(TRC_SRV_PHB_OP_ADM_ALLOC, "[SrvPhb] srv_phb_query_get_num_item(adm), ptr: 0x%x, size: %d\n")
TRC_MSG(TRC_SRV_PHB_OP_ALLOC_NUMBER, "[SrvPhb] srv_phb_query_get_num_item(total), number_malloc: %d\n")
TRC_MSG(TRC_SRV_PHB_OP_ASM_FREE, "[SrvPhb] srv_phb_query_get_num_item(asm), ptr: 0x%x, user_data: 0x%x, free_func: 0x%x\n")
TRC_MSG(TRC_SRV_PHB_OP_ADM_FREE, "[SrvPhb] srv_phb_query_get_num_item(adm), ptr: 0x%x\n")
TRC_MSG(TRC_SRV_PHB_OP_GET_ITEM, "[SrvPhb] srv_phb_query_get_num_item, handle: 0x%x, item_index: %d, malloc_count: %d, total_item: %d\n")
TRC_MSG(TRC_SRV_PHB_SSE_SET_MEM_ENTRY, "[SrvPhb] srv_phb_contact_filter_set_mem_entry, filter: 0x%x, alloc_func: 0x%x, free_func: 0x%x, user_data: 0x%x\n")

/* phb sse async query */
TRC_MSG(TRC_SRV_PHB_SSE_SET_QUERY_ENTRY, "[SrvPhb] srv_phb_contact_filter_set_query_entry, filter: 0x%x, callback_func: 0x%x, start_index: %d, query_time: %d, user_data: 0x%x\n")
TRC_MSG(TRC_SRV_PHB_OP_QUERY_START, "[SrvPhb] srv_phb_query, handle: 0x%x\n")
TRC_MSG(TRC_SRV_PHB_OP_QUERY_REQ, "[SrvPhb] srv_phb_query, alpha_table: %d, item_order: %d, align_field: %d, filter: 0x%x, handle: 0x%x\n")
TRC_MSG(TRC_SRV_PHB_OP_QUERY_INIT, "[SrvPhb] srv_phb_query_init, handle->pid: %d, ret: %d\n")
TRC_MSG(TRC_SRV_PHB_OP_QUERY_RESET, "[SrvPhb] srv_phb_query_init(reset), handle->pid: %d, ret: %d, query_index: %d, start_index: %d\n")
TRC_MSG(TRC_SRV_PHB_OP_QUERY_RESET_EX, "[SrvPhb] srv_phb_query_init(reset ex), handle->pid: %d, ret: %d\n")
TRC_MSG(TRC_SRV_PHB_SSE_QUERY_N_DIALER_SEARCH, "[SrvPhb] srv_phb_sse_query(n dialer search), result: %d, user_data: 0x%x, cb_func: 0x%x\n")
TRC_MSG(TRC_SRV_PHB_SSE_QUERY_NDS, "[SrvPhb] srv_phb_sse_query(nds), pid: %d, ret_pid: %d\n")
TRC_MSG(TRC_SRV_PHB_SSE_QUERY_NDS_NULL, "[SrvPhb] srv_phb_sse_query(nds null)\n")
TRC_MSG(TRC_SRV_PHB_SSE_QUERY_ASYNC_HANDLE_START, "[SrvPhb] srv_phb_sse_query(async handle start), query_index: %d, start_index: %d, query_time: %d, now_match_field: %d, cb: 0x%x, user: 0x%x\n")
TRC_MSG(TRC_SRV_PHB_SSE_QUERY_DS_CALLBACK, "[SrvPhb] srv_phb_sse_query(call back)\n")
TRC_MSG(TRC_SRV_PHB_SSE_QUERY_DS_N_CALLBACK, "[SrvPhb] srv_phb_sse_query(n call back)\n")
TRC_MSG(TRC_SRV_PHB_SSE_QUERY_NEED_CB, "[SrvPhb] srv_phb_sse_query(need cb), query_index: %d, query_time: %d, req: 0x%x, handle: 0x%x, match_field: %d\n")
TRC_MSG(TRC_SRV_PHB_SSE_QUERY_ASYNC_CB, "[SrvPhb] srv_phb_sse_async_query(async cb) ret.result: %d, ret.user_data: 0x%x, cb: 0x%x\n")
TRC_MSG(TRC_SRV_PHB_SSE_QUERY_ASYNC_PROCESS, "[SrvPhb] srv_phb_sse_async_query(async process) pid: %d, req: 0x%x, handle: 0x%x, user_data: 0x%x\n")
TRC_MSG(TRC_SRV_PHB_SSE_QUERY_ASYNC_HDLR_DATA, "[SrvPhb] srv_phb_sse_async_query_hdlr(hdlr data) user_data: 0x%x, pid: %d, req: 0x%x, handle: 0x%x, user_data: 0x%x\n")
TRC_MSG(TRC_SRV_PHB_SSE_QUERY_ASYNC_HDLR_CD, "[SrvPhb] srv_phb_sse_async_query_hdlr(hdlr cd)\n")
TRC_MSG(TRC_SRV_PHB_SSE_QUERY_ASYNC_HDLR_CANCEL, "[SrvPhb] srv_phb_sse_async_query_hdlr(hdlr cancle) pid: %d\n")
TRC_MSG(TRC_SRV_PHB_SSE_QUERY_ASYNC_NAME_DONE, "[SrvPhb] srv_phb_sse_query(name done) result: %d, user_data: 0x%x, total_item: %d, contact_item: %d, number_item: %d, start_index: %d\n")
TRC_MSG(TRC_SRV_PHB_SSE_QUERY_ASYNC_NUMBER_DONE, "[SrvPhb] srv_phb_sse_query(number done) result: %d, user_data: 0x%x, total_item: %d, contact_item: %d, number_item: %d, pid: %d, malloc_count: %d, number_malloc: %d\n")
TRC_MSG(TRC_SRV_PHB_SSE_START_ASYNC_QUERY, "[SrvPhb] srv_phb_sse_start_async_query, req: 0x%x, handle: 0x%x, pid: %d, query_async_handle: 0x%x\n")

/* phb cloud */
TRC_MSG(TRC_SRV_PHB_CLOUD_BACKUP_BEGIN_IND, "[SrvPhb] srv_phb_cloud_data_op_handler(backup begin ind), type: %d\n")
TRC_MSG(TRC_SRV_PHB_CLOUD_PUT_DATA_RES_IND, "[SrvPhb] srv_phb_cloud_data_op_handler(put data res ind), type: %d, result: %d\n")
TRC_MSG(TRC_SRV_PHB_CLOUD_GET_DATA_IND, "[SrvPhb] srv_phb_cloud_data_op_handler(get data ind), index: %d, over_flag: %d, type: %d, is_add: %d\n")
TRC_MSG(TRC_SRV_PHB_CLOUD_OP_HANDLER, "[SrvPhb] srv_phb_cloud_data_op_handler, evt_id: %d, base_id: %d\n")
TRC_MSG(TRC_SRV_PHB_CLOUD_ERROR_HANDLER, "[SrvPhb] srv_phb_cloud_error_handler, evt_id: %d, base_id: %d\n")
TRC_MSG(TRC_SRV_PHB_CLOUD_ERROR_IND, "[SrvPhb] srv_phb_cloud_error_handler(error ind), type: %d, error_type: %d\n")
TRC_MSG(TRC_SRV_PHB_CLOUD_CLOSE_DONE_IND, "[SrvPhb] srv_phb_cloud_error_handler(close done ind), type: %d, result: %d\n")
TRC_MSG(TRC_SRV_PHB_CLOUD_SET_UID_DONE, "[SrvPhb] srv_phb_cloud_set_uid_done, evt_id: %d, base_id: %d\n")
TRC_MSG(TRC_SRV_PHB_CLOUD_BUILD_VCARD_CB, "[SrvPhb] srv_phb_cloud_build_vcard_cb, id: %d, mask: %d, cloud_handle: %d\n")
TRC_MSG(TRC_SRV_PHB_CLOUD_ADD_CONTACT_CB, "[SrvPhb] srv_phb_cloud_add_contact_cb, id: %d, mask: %d, result: %d, finish: %d, fail: %d\n")

/* data mgr */
TRC_MSG(TRC_SRV_PHB_DATA_MGR_SCAN_DB_FILE_FINISH, "[SrvPhb] mmi_data_scan_db_file drv: %d, record_num: %d, max_record_num: %d, MAX_RECORD_SIZE: %d, MAX_RECORD_NUM: %d\n")
TRC_MSG(TRC_SRV_PHB_DATA_MGR_SCAN_DB_FILE_FAIL, "[SrvPhb] mmi_data_scan_db_file drv: %d, fd: %d, MAX_RECORD_SIZE: %d, MAX_RECORD_NUM: %d\n")

/* pbapc */
TRC_MSG(TRC_SRV_PHB_PBAPC_CREATE_HANDLE, "[SrvPhb_PBAPC]srv_phb_pbapc_create_handle ret: %d, handle: 0x%x\n")
TRC_MSG(TRC_SRV_PHB_PBAPC_CREATE_HANDLE_OK, "[SrvPhb_PBAPC]srv_phb_pbapc_create_handle(ok) used_flag: %d, srv_hd: %d, is_busy: %d, job_type: %d, user_data: 0x%x, func: 0x%x\n")
TRC_MSG(TRC_SRV_PHB_PBAPC_DESTORY_HANDLE_B, "[SrvPhb_PBAPC]srv_phb_pbapc_destory_handle ret: %d, handle: 0x%x, used_flag: %d, srv_hd: %d, is_busy: %d, job_type: %d, user_data: 0x%x, func: 0x%x\n")
TRC_MSG(TRC_SRV_PHB_PBAPC_INIT_PARA, "[SrvPhb_PBAPC]srv_phb_pbapc_init_para job_type: %d, para: 0x%x, ret: %d, size: %d\n")
TRC_MSG(TRC_SRV_PHB_PBAPC_BUFFER_TRACE, "[SrvPhb_PBAPC]: ")
TRC_MSG(TRC_SRV_PHB_PBAPC_INIT_B, "[SrvPhb_PBAPC]srv_phb_pbap_init(init done)")
TRC_MSG(TRC_SRV_PHB_PBAPC_BT_NOTIFY_B, "[SrvPhb_PBAPC]srv_phb_pbapc_bt_notify(msg)--type: %d, srvhd: %d, data: 0x%x\n")
TRC_MSG(TRC_SRV_PHB_PBAPC_BT_NOTIFY_FOLDER_RSP, "[SrvPhb_PBAPC]srv_phb_pbapc_bt_notify(folder rsp)--cnf_code: %d, pbs: %d, nms: %d, ud: 0x%x, f-rsp: 0x%x\n")
TRC_MSG(TRC_SRV_PHB_PBAPC_BT_NOTIFY_LIST_RSP, "[SrvPhb_PBAPC]srv_phb_pbapc_bt_notify(list rsp)--cnf_code: %d, pbs: %d, nms: %d, ud: 0x%x, l-rsp: 0x%x\n")
TRC_MSG(TRC_SRV_PHB_PBAPC_BT_NOTIFY_DATA_RSP, "[SrvPhb_PBAPC]srv_phb_pbapc_bt_notify(data rsp)--more: %d, entries: %d, ud: 0x%x, d-rsp: 0x%x\n")
TRC_MSG(TRC_SRV_PHB_PBAPC_BT_NOTIFY_DATA_RSP_ASYNC, "[SrvPhb_PBAPC]srv_phb_pbapc_bt_notify(data rsp async)")
TRC_MSG(TRC_SRV_PHB_PBAPC_BT_NOTIFY_DATA_RSP_SYNC, "[SrvPhb_PBAPC]srv_phb_pbapc_bt_notify(data rsp sync)")
TRC_MSG(TRC_SRV_PHB_PBAPC_BT_NOTIFY_ENTRY_RSP, "[SrvPhb_PBAPC]srv_phb_pbapc_bt_notify(entry rsp)--cnf_code: %d, ud: 0x%x, e-rsp: 0x%x\n")
TRC_MSG(TRC_SRV_PHB_PBAPC_BT_NOTIFY_PATH_RSP, "[SrvPhb_PBAPC]srv_phb_pbapc_bt_notify(path rsp)--cnf_code: %d, ud: 0x%x, p-rsp: 0x%x\n")
TRC_MSG(TRC_SRV_PHB_PBAPC_UPDATE_HD_USAGE, "[SrvPhb_PBAPC]srv_phb_pbapc_update_handle_usage--handle_exhausted: %d\n")
TRC_MSG(TRC_SRV_PHB_PBAPC_CHANGE_JOB_TYPE, "[SrvPhb_PBAPC]srv_phb_pbapc_change_job_type--srv_hd: %d, from-type: %d, to-type: %d")
TRC_MSG(TRC_SRV_PHB_PBAPC_CHANGE_PSE_PATH, "[SrvPhb_PBAPC]srv_phb_pbapc_change_pse_path--srv_hd: %d, from-path: %d, to-path: %d")
TRC_MSG(TRC_SRV_PHB_PBAPC_GET_HD_FROM_SRVHD, "[SrvPhb_PBAPC]srv_phb_pbapc_get_handle_from_srv_hd--ret: %d, srv_hd: %d, handle: 0x%x\n")
TRC_MSG(TRC_SRV_PHB_PBAPC_READ_LIST_HDLR_FREE, "[SrvPhb_PBAPC]srv_phb_pbapc_read_pse_list_hdlr(free)--async_para->para: 0x%x, para: 0x%x\n")
TRC_MSG(TRC_SRV_PHB_PBAPC_READ_LIST_HDLR_END, "[SrvPhb_PBAPC]srv_phb_pbapc_read_pse_list_hdlr(end)--cb: 0x%x, ud: 0x%x, ret: %d\n")
TRC_MSG(TRC_SRV_PHB_PBAPC_READ_LIST_DATA_HDLR_FREE, "[SrvPhb_PBAPC]srv_phb_pbapc_read_pse_list_data_hdlr(free)--async_para->para: 0x%x, para: 0x%x\n")
TRC_MSG(TRC_SRV_PHB_PBAPC_READ_LIST_DATA_HDLR_END, "[SrvPhb_PBAPC]srv_phb_pbapc_read_pse_list_data_hdlr(end)--cb: 0x%x, ud: 0x%x, ret: %d\n")
TRC_MSG(TRC_SRV_PHB_PBAPC_READ_ENTRY_HDLR_FREE, "[SrvPhb_PBAPC]srv_phb_pbapc_read_pse_entry_hdlr(free)--async_para->para: 0x%x, para: 0x%x\n")
TRC_MSG(TRC_SRV_PHB_PBAPC_READ_ENTRY_HDLR_END, "[SrvPhb_PBAPC]srv_phb_pbapc_read_pse_entry_hdlr(end)--cb: 0x%x, ud: 0x%x, ret: %d\n")
TRC_MSG(TRC_SRV_PHB_PBAPC_READ_FOLDER_HDLR_FREE, "[SrvPhb_PBAPC]srv_phb_pbapc_read_pse_folder_hdlr(free)--async_para->para: 0x%x, para: 0x%x\n")
TRC_MSG(TRC_SRV_PHB_PBAPC_READ_FOLDER_HDLR_END, "[SrvPhb_PBAPC]srv_phb_pbapc_read_pse_folder_hdlr(end)--cb: 0x%x, ud: 0x%x, ret: %d\n")
TRC_MSG(TRC_SRV_PHB_PBAPC_PATH_HDLR_FREE, "[SrvPhb_PBAPC]srv_phb_pbapc_set_pse_path_hdlr(free)--async_para->para: 0x%x, para: 0x%x\n")
TRC_MSG(TRC_SRV_PHB_PBAPC_PATH_HDLR_END, "[SrvPhb_PBAPC]srv_phb_pbapc_set_pse_path_hdlr(end)--cb: 0x%x, ud: 0x%x, ret: %d\n")
TRC_MSG(TRC_SRV_PHB_PBAPC_GET_JOB_TYPE, "[SrvPhb_PBAPC]srv_phb_pbapc_get_job_type--job_type: %d\n")
TRC_MSG(TRC_SRV_PHB_PBAPC_PREPARE_ENTRY, "[SrvPhb_PBAPC]srv_phb_pbapc_prepare_read_pse_entry--prepare_entry: 0x%x, ud: 0x%x, cb: 0x%x\n")
TRC_MSG(TRC_SRV_PHB_PBAPC_PREPARE_ENTRY_RET, "[SrvPhb_PBAPC]srv_phb_pbapc_prepare_read_pse_entry(set pse path)--ret: %d\n")
TRC_MSG(TRC_SRV_PHB_PBAPC_PREPARE_ENTRY_HDLR, "[SrvPhb_PBAPC]srv_phb_pbapc_prepare_read_pse_entry_hdlr--prepare_entry: 0x%x, ud: 0x%x, cb: 0x%x\n")
TRC_MSG(TRC_SRV_PHB_PBAPC_PREPARE_ENTRY_HDLR_RET, "[SrvPhb_PBAPC]srv_phb_pbapc_prepare_read_pse_entry_hdlr(read_pse_entry)--ret: %d\n")
TRC_MSG(TRC_SRV_PHB_PBAPC_PREPARE_LIST, "[SrvPhb_PBAPC]srv_phb_pbapc_prepare_read_pse_list--prepare_list: 0x%x, ud: 0x%x, cb: 0x%x, list_ex: 0x%x, folder: 0x%x, pattern: 0x%x\n")
TRC_MSG(TRC_SRV_PHB_PBAPC_PREPARE_LIST_RET, "[SrvPhb_PBAPC]srv_phb_pbapc_prepare_read_pse_list(set pse path)--ret: %d\n")
TRC_MSG(TRC_SRV_PHB_PBAPC_PREPARE_LIST_HDLR, "[SrvPhb_PBAPC]srv_phb_pbapc_prepare_read_pse_list_hdlr--prepare_list: 0x%x, ud: 0x%x, cb: 0x%x, list_ex: 0x%x, folder: 0x%x, pattern: 0x%x\n")
TRC_MSG(TRC_SRV_PHB_PBAPC_PREPARE_LIST_HDLR_RET, "[SrvPhb_PBAPC]srv_phb_pbapc_prepare_read_pse_list_hdlr(read_pse_list)--ret: %d\n")
TRC_MSG(TRC_SRV_PHB_PBAPC_PREPARE_FOLDER, "[SrvPhb_PBAPC]srv_phb_pbapc_prepare_read_pse_folder--prepare_folder: 0x%x, ud: 0x%x, cb: 0x%x, folder: 0x%x\n")
TRC_MSG(TRC_SRV_PHB_PBAPC_PREPARE_FOLDER_RET, "[SrvPhb_PBAPC]srv_phb_pbapc_prepare_read_pse_folder(set pse path)--ret: %d\n")
TRC_MSG(TRC_SRV_PHB_PBAPC_PREPARE_FOLDER_HDLR, "[SrvPhb_PBAPC]srv_phb_pbapc_prepare_read_pse_folder_hdlr--prepare_folder: 0x%x, ud: 0x%x, cb: 0x%x, folder: 0x%x\n")
TRC_MSG(TRC_SRV_PHB_PBAPC_PREPARE_FOLDER_HDLR_RET, "[SrvPhb_PBAPC]srv_phb_pbapc_prepare_read_pse_folder_hdlr(read_pse_folder)--ret: %d\n")
TRC_MSG(TRC_SRV_PHB_PBAPC_SET_PATH_SEND_REQ, "[SrvPhb_PBAPC]srv_phb_pbapc_set_pse_path(send req)--Fail, ret: %d\n")
TRC_MSG(TRC_SRV_PHB_PBAPC_SET_PATH_REQ, "[SrvPhb_PBAPC]srv_phb_pbapc_set_pse_path(req)--folder: %d, storage: %d, ud: 0x%x, cb: 0x%x\n")
TRC_MSG(TRC_SRV_PHB_PBAPC_SET_PATH_END, "[SrvPhb_PBAPC]srv_phb_pbapc_set_pse_path(end)--ret: %d\n")
TRC_MSG(TRC_SRV_PHB_PBAPC_CREATE_HD_OPEN, "[SrvPhb_PBAPC]srv_phb_pbapc_create_handle(client_open)--srv_hd: %d\n")
TRC_MSG(TRC_SRV_PHB_PBAPC_CREATE_HD_REGISTER_CB, "[SrvPhb_PBAPC]srv_phb_pbapc_create_handle(register_cb)--fail!\n")
TRC_MSG(TRC_SRV_PHB_PBAPC_DESTORY_HANDLE_END, "[SrvPhb_PBAPC]srv_phb_pbapc_destory_handle(end)--ret: %d\n")
TRC_MSG(TRC_SRV_PHB_PBAPC_READ_LIST_REQ, "[SrvPhb_PBAPC]srv_phb_pbapc_read_pse_list(req)--cb: 0x%x, ud: 0x%x, storage: %d, cur_path: %d\n")
TRC_MSG(TRC_SRV_PHB_PBAPC_READ_LIST_REQ_E, "[SrvPhb_PBAPC]srv_phb_pbapc_read_pse_list(req-1)--attr: %d, order: %d, q-len: %d, q-cnt: %d, q-oset: %d\n")
TRC_MSG(TRC_SRV_PHB_PBAPC_READ_LIST_SEND_REQ, "[SrvPhb_PBAPC]srv_phb_pbapc_read_pse_list(send req)Fail, ret: %d\n")
TRC_MSG(TRC_SRV_PHB_PBAPC_READ_LIST_END, "[SrvPhb_PBAPC]srv_phb_pbapc_read_pse_list(end)--ret: %d\n")
TRC_MSG(TRC_SRV_PHB_PBAPC_READ_ENTRY_REQ, "[SrvPhb_PBAPC]srv_phb_pbapc_read_pse_entry(req)--cb: 0x%x, ud: 0x%x, index: 0x%x, v-format: %d\n")
TRC_MSG(TRC_SRV_PHB_PBAPC_READ_ENTRY_REQ_E, "[SrvPhb_PBAPC]srv_phb_pbapc_read_pse_entry(req-1)--v-filter: 0x%x, to_path: %d, cur_path: %d\n")
TRC_MSG(TRC_SRV_PHB_PBAPC_READ_ENTRY_FAIL, "[SrvPhb_PBAPC]srv_phb_pbapc_read_pse_entry(entry)--Fail\n")
TRC_MSG(TRC_SRV_PHB_PBAPC_READ_ENTRY_END, "[SrvPhb_PBAPC]srv_phb_pbapc_read_pse_entry(end)--ret: %d\n")
TRC_MSG(TRC_SRV_PHB_PBAPC_READ_FOLDER_REQ, "[SrvPhb_PBAPC]srv_phb_pbapc_read_pse_folder(req)--cb: 0x%x, ud: 0x%x, storage: %d, cur_path: %d\n")
TRC_MSG(TRC_SRV_PHB_PBAPC_READ_FOLDER_REQ_E, "[SrvPhb_PBAPC]srv_phb_pbapc_read_pse_folder(req-1)--v-format: %d, v-filter: 0x%x, cnt: %d, o-set: %d\n")
TRC_MSG(TRC_SRV_PHB_PBAPC_READ_FOLDER_END, "[SrvPhb_PBAPC]srv_phb_pbapc_read_pse_folder(end)--ret: %d\n")
TRC_MSG(TRC_SRV_PHB_PBAPC_ASYNC_N_PARSE_DATA, "[SrvPhb_PBAPC]srv_phb_pbapc_read_pse_list_hdlr--Async Notify pbap srv start to parse data\n")
TRC_MSG(TRC_SRV_PHB_PBAPC_START_PARSE_DATA, "[SrvPhb_PBAPC]srv_phb_pbapc_start_read_data--Notify pbap srv start to parse data\n")

/* test pbapc */
TRC_MSG(TRC_SRV_PHB_PBAPC_TEST_READ_LIST_CREATE_HD, "[SrvPhb_PBAPC_T]srv_phb_pbapc_test_read_list(create hd)--path: %d, hd: 0x%x, ret: %d\n")
TRC_MSG(TRC_SRV_PHB_PBAPC_TEST_READ_LIST, "[SrvPhb_PBAPC_T]srv_phb_pbapc_test_read_list(read list)--ret: %d\n")
TRC_MSG(TRC_SRV_PHB_PBAPC_TEST_READ_LIST_CB, "[SrvPhb_PBAPC_T]srv_phb_pbapc_test_read_list_cb(start)--ret: %d, valid: %d, user_data: 0x%x, more_data: %d\n")
TRC_MSG(TRC_SRV_PHB_PBAPC_TEST_READ_FOLDER_CREATE_HD, "[SrvPhb_PBAPC_T]srv_phb_pbapc_test_read_folder(create hd)--path: %d, hd: 0x%x, ret: %d\n")
TRC_MSG(TRC_SRV_PHB_PBAPC_TEST_READ_FOLDER, "[SrvPhb_PBAPC_T]srv_phb_pbapc_test_read_folder(read folder)--ret: %d\n")
TRC_MSG(TRC_SRV_PHB_PBAPC_TEST_READ_FOLDER_CB, "[SrvPhb_PBAPC_T]srv_phb_pbapc_test_read_folder_cb(start)--ret: %d, user_data: 0x%x\n")
TRC_MSG(TRC_SRV_PHB_PBAPC_TEST_READ_ENTRY_CREATE_HD, "[SrvPhbPBAPC]srv_phb_pbapc_test_read_entry(create hd)--path: %d, hd: 0x%x, ret: %d\n")
TRC_MSG(TRC_SRV_PHB_PBAPC_TEST_READ_ENTRY, "[SrvPhb_PBAPC_T]srv_phb_pbapc_test_read_entry(read entry)--ret: %d\n")
TRC_MSG(TRC_SRV_PHB_PBAPC_TEST_READ_ENTRY_CB, "[SrvPhb_PBAPC_T]srv_phb_pbapc_test_read_entry_cb(start)--ret: %d, user_data: 0x%x\n")


/* pbapc */
TRC_MSG(TRC_SRV_PHB_PBAPC_INIT, "[SrvPhb][PBAPC]init\n")
TRC_MSG(TRC_SRV_PHB_PBAPC_BT_NOTIFY, "[SrvPhb][PBAPC]bt_notify--type: %d, bt_index: %d, job_type: %d\n")
TRC_MSG(TRC_SRV_PHB_PBAPC_START_READ_DATA, "[SrvPhb][PBAPC]start_read_data\n")
TRC_MSG(TRC_SRV_PHB_PBAPC_GET_FREE_HD, "[SrvPhb][PBAPC]get_free_hd--index: %d, used: %d\n")
TRC_MSG(TRC_SRV_PHB_PBAPC_FREE_HANDLE, "[SrvPhb][PBAPC]free_handle--index: %d, used: %d\n")
TRC_MSG(TRC_SRV_PHB_PBAPC_FREE_JOB, "[SrvPhb][PBAPC]free_job--job_type: %d, job_state: %d, bt_index: %d, hd_index: %d, func_cb: 0x%x\n")
TRC_MSG(TRC_SRV_PHB_PBAPC_GET_FREE_JOB, "[SrvPhb][PBAPC]get_free_job--job_type: %d, bt_index: %d, hd_index: %d\n")
TRC_MSG(TRC_SRV_PHB_PBAPC_GET_NEXT_JOB, "[SrvPhb][PBAPC]get_next_job--i: %d, pid: %d, job_type: %d, bt_index: %d, hd_index: %d\n")
TRC_MSG(TRC_SRV_PHB_PBAPC_JOB_CONTINUE_HDLR, "[SrvPhb][PBAPC]job_continue_hdlr--job: 0x%x, used: %d\n")
TRC_MSG(TRC_SRV_PHB_PBAPC_JOB_FOLDER, "[SrvPhb][PBAPC]job_folder--storage: %d, path: %d\n")
TRC_MSG(TRC_SRV_PHB_PBAPC_ERR_HANDLER, "[SrvPhb][PBAPC]err_handler--job_type: %d, ret: %d\n")
TRC_MSG(TRC_SRV_PHB_PBAPC_CREATE_HANDLE_INT, "[SrvPhb][PBAPC]create_handle_int--ret: %d\n")
TRC_MSG(TRC_SRV_PHB_PBAPC_DESTORY_HANDLE, "[SrvPhb][PBAPC]destory_handle--ret: %d\n")
TRC_MSG(TRC_SRV_PHB_PBAPC_READ_PSE_LIST, "[SrvPhb][PBAPC]read_pse_list--ret: %d, cb: 0x%x\n")
TRC_MSG(TRC_SRV_PHB_PBAPC_READ_PSE_ENTRY, "[SrvPhb][PBAPC]read_pse_entry--ret: %d, cb: 0x%x\n")
TRC_MSG(TRC_SRV_PHB_PBAPC_READ_PSE_FOLDER, "[SrvPhb][PBAPC]read_pse_folder--ret: %d, cb: 0x%x\n")

/* Load contact */
TRC_MSG(TRC_SRV_PHB_PBAPC_CHECK_CONTINUE, "[SrvPhb_load]srv_phb_pbapc_check_continue--job: %d, phone_count: %d, sim_count: %d")
TRC_MSG(TRC_SRV_PHB_PBAPC_PUSH_CONTACT, "[SrvPhb_load]srv_phb_pbapc_push_contact--field_mask: 0x%x, num_count: %d")
TRC_MSG(TRC_SRV_PHB_PBAPC_UPDATE_SYNC_STATUS, "[SrvPhb_load]srv_phb_pbapc_update_sync_status--pse_count: %d, phone_total: %d, sim_total: %d")
TRC_MSG(TRC_SRV_PHB_PBAPC_READ_CB, "[SrvPhb_load]srv_phb_pbapc_read_cb--job: %d, phone_count: %d, sim_count: %d")
TRC_MSG(TRC_SRV_PHB_PBAPC_JOB_HDLR, "[SrvPhb_load]srv_phb_pbapc_job_hdlr--job: %d, phone_time: %d, sim_time: %d")
TRC_MSG(TRC_SRV_PHB_PBAPC_LOAD_CONTACT, "[SrvPhb_load]srv_phb_pbapc_load_contact--ret: %d")
TRC_MSG(TRC_SRV_PHB_PBAPC_BUILD_CONTACT_LIST, "[SrvPhb_load]srv_phb_pbapc_build_contact_list--entry_count: %d")

/*phb pbapcsrv*/
TRC_MSG(TRC_SRV_PHB_PBAPC_CY_LIST, "[SrvPhb_PBAPC-wap]srv_phb_pbapc_copy_list_entry(data)--index: %x, name: %s\n")
TRC_MSG(TRC_SRV_PHB_PBAPC_GET_FOLER_NAME, "[SrvPhb_PBAPC-wap]name: %s\n")
TRC_MSG(TRC_SRV_PHB_PBAPC_GET_FILE_NAME, "[SrvPhb_PBAPC-wap]name: %s\n")
TRC_MSG(TRC_SRV_PHB_PBAPC_CP_FILE, "[SrvPhb_PBAPCcopy_file: ret1: %d, ret2: %d, ret3: %d\n")
TRC_MSG(TRC_SRV_PHB_PBAPC_NOTI_APP, "[SrvPhb_load]srv_phb_pbapc_notify_app--op_stop: %d, phone_count: %d, sim_count: %d")
TRC_MSG(TRC_SRV_PHB_PBAPC_LD_CANCEL, "[SrvPhb_load]srv_phb_pbapc_load_contact_cancel")
TRC_MSG(TRC_SRV_PHB_PBAPC_BD_JP_TAB, "[SrvPhb_PBAPC]build_alpha_jump_table--pos: %d, alpha: %d\n")
TRC_MSG(TRC_SRV_PHB_PBAPC_DISCONN_HDLR, "[SrvPhb_load]srv_phb_pbapc_disconn_hdlr--type: %d")
TRC_MSG(TRC_SRV_PHB_PBAPC_DISCONN_HDLR_I, "[SrvPhb_load]srv_phb_pbapc_disconn_hdlr--new_btd: %d, ret: %d")
TRC_MSG(TRC_SRV_PHB_PBAPC_PUSH_CLOG, "[SrvPhb_load]srv_phb_pbapc_push_clog--field_mask: %d")
TRC_MSG(TRC_SRV_PHB_PBAPC_COPY_FILE, "[SrvPhb][PBAPC]copy_file: ret1: %d, ret2: %d, ret3: %d\n")
TRC_MSG(TRC_SRV_PHB_PBAPC_CLG_JOB_HDLR, "[SrvPhb_load]srv_phb_pbapc_clog_job_hdlr--job: %d, read_time: %d")
TRC_MSG(TRC_SRV_PHB_PBAPC_CLG_NOTI_APP, "[SrvPhb_load]srv_phb_pbapc_clog_notify_app--op_stop: %d")
TRC_MSG(TRC_SRV_PHB_PBAPC_LOAD_CLG, "[SrvPhb_load]srv_phb_pbapc_load_clog--ret: %d")
TRC_MSG(TRC_SRV_PHB_PBAPC_BUILD_CLG_LIST, "[SrvPhb_load]srv_phb_pbapc_build_clog_list--entry_count: %d")
TRC_MSG(TRC_SRV_PHB_CLG_DISCONN_HDLR, "[SrvPhb_load]srv_phb_pbapc_clog_disconn_hdlr--type: %d")
TRC_MSG(TRC_SRV_PHB_CLG_DISCONN_HDLR_I, "[SrvPhb_load]srv_phb_pbapc_clog_disconn_hdlr--new_btd: %d, ret: %d")
TRC_MSG(TRC_SRV_PHB_CLG_GET_NAME_ORDER, "[SrvPhb_PBAPC-wap]get_name_order--order: 0x%x, bt_index: %d, ret: %d\n")
TRC_MSG(TRC_SRV_PHB_CLG_SET_NAME_ORDER, "[SrvPhb_PBAPC-wap]set_name_order--order: 0x%x, bt_index: %d, set_order: %d\n")