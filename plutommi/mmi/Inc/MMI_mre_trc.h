/*****************************************************************************
*  Copyright Statement:
*  --------------------
*  This software is protected by Copyright and the information contained
*  herein is confidential. The software may not be copied and the information
*  contained herein may not be used or disclosed except with the written
*  permission of MediaTek Inc. (C) 2005
*
*  BY OPENING THIS FILE, BUYER HEREBY UNEQUIVOCALLY ACKNOWLEDGES AND AGREES
*  THAT THE SOFTWARE/FIRMWARE AND ITS DOCUMENTATIONS ("MEDIATEK SOFTWARE")
*  RECEIVED FROM MEDIATEK AND/OR ITS REPRESENTATIVES ARE PROVIDED TO BUYER ON
*  AN "AS-IS" BASIS ONLY. MEDIATEK EXPRESSLY DISCLAIMS ANY AND ALL WARRANTIES,
*  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE IMPLIED WARRANTIES OF
*  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE OR NONINFRINGEMENT.
*  NEITHER DOES MEDIATEK PROVIDE ANY WARRANTY WHATSOEVER WITH RESPECT TO THE
*  SOFTWARE OF ANY THIRD PARTY WHICH MAY BE USED BY, INCORPORATED IN, OR
*  SUPPLIED WITH THE MEDIATEK SOFTWARE, AND BUYER AGREES TO LOOK ONLY TO SUCH
*  THIRD PARTY FOR ANY WARRANTY CLAIM RELATING THERETO. MEDIATEK SHALL ALSO
*  NOT BE RESPONSIBLE FOR ANY MEDIATEK SOFTWARE RELEASES MADE TO BUYER'S
*  SPECIFICATION OR TO CONFORM TO A PARTICULAR STANDARD OR OPEN FORUM.
*
*  BUYER'S SOLE AND EXCLUSIVE REMEDY AND MEDIATEK'S ENTIRE AND CUMULATIVE
*  LIABILITY WITH RESPECT TO THE MEDIATEK SOFTWARE RELEASED HEREUNDER WILL BE,
*  AT MEDIATEK'S OPTION, TO REVISE OR REPLACE THE MEDIATEK SOFTWARE AT ISSUE,
*  OR REFUND ANY SOFTWARE LICENSE FEES OR SERVICE CHARGE PAID BY BUYER TO
*  MEDIATEK FOR SUCH MEDIATEK SOFTWARE AT ISSUE. 
*
*  THE TRANSACTION CONTEMPLATED HEREUNDER SHALL BE CONSTRUED IN ACCORDANCE
*  WITH THE LAWS OF THE STATE OF CALIFORNIA, USA, EXCLUDING ITS CONFLICT OF
*  LAWS PRINCIPLES.  ANY DISPUTES, CONTROVERSIES OR CLAIMS ARISING THEREOF AND
*  RELATED THERETO SHALL BE SETTLED BY ARBITRATION IN SAN FRANCISCO, CA, UNDER
*  THE RULES OF THE INTERNATIONAL CHAMBER OF COMMERCE (ICC).
*
*****************************************************************************/

/*******************************************************************************
 * Filename:
 * ---------
 *  MMI_mre_trc.h
 *
 * Project:
 * --------
 *  MAUI
 *
 * Description:
 * ------------
 *  
 *
 * Author:
 * -------
 * -------
 *
 *==============================================================================
 *             HISTORY
 * Below this line, this part is controlled by PVCS VM. DO NOT MODIFY!! 
 *------------------------------------------------------------------------------
 * removed!
 *
 * removed!
 * removed!
 * removed!
 *
 * removed!
 * removed!
 * removed!
 *
 * removed!
 * removed!
 * removed!
 *
 * removed!
 * removed!
 * removed!
 *
 * removed!
 * removed!
 * removed!
 *
 * removed!
 * removed!
 * removed!
 *
 * removed!
 * removed!
 * removed!
 *
 * removed!
 * removed!
 * removed!
 *
 * removed!
 * removed!
 * removed!
 *
 * removed!
 * removed!
 * removed!
 *
 * removed!
 * removed!
 * removed!
 *
 * removed!
 * removed!
 * removed!
 *
 * removed!
 * removed!
 *
 * removed!
 * removed!
 * removed!
 *
 * removed!
 * removed!
 *
 * removed!
 * removed!
 * removed!
 *
 * removed!
 * removed!
 * removed!
 *
 * removed!
 * removed!
 *
 * removed!
 * removed!
 * removed!
 *
 * removed!
 * removed!
 * removed!
 *
 * removed!
 * removed!
 * removed!
 *
 * removed!
 * removed!
 * removed!
 *
 * removed!
 * removed!
 * removed!
 *
 * removed!
 * removed!
 * removed!
 *
 * removed!
 * removed!
 * removed!
 *
 * removed!
 * removed!
 * removed!
 *
 * removed!
 * removed!
 * removed!
 *
 * removed!
 * removed!
 * removed!
 *
 * removed!
 * removed!
 * removed!
 * removed!
 * removed!
 * removed!
 * removed!
 * removed!
 * removed!
 * removed!
 * removed!
 * removed!
 * removed!
 * removed!
 * removed!
 * removed!
 * removed!
 * removed!
 * removed!
 * removed!
 * removed!
 * removed!
 * removed!
 * removed!
 * removed!
 * removed!
 * removed!
 * removed!
 * removed!
 * removed!
 * removed!
 * removed!
 * removed!
 * removed!
 * removed!
 * removed!
 * removed!
 * removed!
 * removed!
 * removed!
 * removed!
 * removed!
 * removed!
 * removed!
 * removed!
 * removed!
 * removed!
 *
 * removed!
 * removed!
 * removed!
 *
 * removed!
 * removed!
 * removed!
 *
 * removed!
 * removed!
 * removed!
 *
 * removed!
 * removed!
 * removed!
 *
 * removed!
 * removed!
 * removed!
 *
 * removed!
 * removed!
 * removed!
 *
 * removed!
 * removed!
 * removed!
 *
 * removed!
 * removed!
 * removed!
 *
 * removed!
 * removed!
 * removed!
 *
 * removed!
 * removed!
 * removed!
 *
 * removed!
 * removed!
 * removed!
 *
 * removed!
 * removed!
 * removed!
 *
 * removed!
 * removed!
 * removed!
 *
 * removed!
 * removed!
 * removed!
 *
 * removed!
 * removed!
 * removed!
 *
 * removed!
 * removed!
 * removed!
 *
 * removed!
 * removed!
 * removed!
 *
 * removed!
 * removed!
 * removed!
 *
 * removed!
 * removed!
 * removed!
 *
 * removed!
 * removed!
 * removed!
 *
 * removed!
 * removed!
 * removed!
 * removed!
 *
 * removed!
 * removed!
 * removed!
 *
 * removed!
 * removed!
 * removed!
 *
 * removed!
 * removed!
 * removed!
 *
 * removed!
 * removed!
 * removed!
 *
 * removed!
 * removed!
 * removed!
 *
 * removed!
 * removed!
 * removed!
 *
 * removed!
 * removed!
 * removed!
 *
 * removed!
 * removed!
 * removed!
 *
 * removed!
 * removed!
 * removed!
 *
 * removed!
 * removed!
 * removed!
 *
 * removed!
 * removed!
 * removed!
 *
 * removed!
 * removed!
 * removed!
 *
 * removed!
 * removed!
 * removed!
 *
 * removed!
 * removed!
 * removed!
 *
 * removed!
 * removed!
 * removed!
 *
 * removed!
 * removed!
 * removed!
 *
 * removed!
 * removed!
 * removed!
 *
 * removed!
 * removed!
 * removed!
 *
 * removed!
 * removed!
 * removed!
 *
 * removed!
 * removed!
 * removed!
 *
 * removed!
 * removed!
 * removed!
 *
 * removed!
 * removed!
 * removed!
 *
 * removed!
 * removed!
 * removed!
 *
 * removed!
 * removed!
 * removed!
 *
 * removed!
 * removed!
 * removed!
 *
 * removed!
 * removed!
 * removed!
 *
 * removed!
 * removed!
 * removed!
 *
 * removed!
 * removed!
 * removed!
 *
 * removed!
 * removed!
 * removed!
 *
 * removed!
 * removed!
 * removed!
 *
 * removed!
 * removed!
 * removed!
 *
 * removed!
 * removed!
 * removed!
 *
 * removed!
 * removed!
 * removed!
 *
 * removed!
 * removed!
 * removed!
 *
 * removed!
 * removed!
 * removed!
 *
 * removed!
 * removed!
 * removed!
 *
 * removed!
 * removed!
 * removed!
 *
 * removed!
 * removed!
 * removed!
 *
 * removed!
 * removed!
 * removed!
 *
 * removed!
 * removed!
 * removed!
 *
 * removed!
 * removed!
 * removed!
 *
 * removed!
 * removed!
 * removed!
 *
 * removed!
 * removed!
 * removed!
 *
 * removed!
 * removed!
 * removed!
 *
 * removed!
 * removed!
 * removed!
 *
 * removed!
 * removed!
 * removed!
 *
 * removed!
 * removed!
 * removed!
 *
 * removed!
 * removed!
 * removed!
 *
 * removed!
 * removed!
 * removed!
 *
 * removed!
 * removed!
 * removed!
 * removed!
 * removed!
 *------------------------------------------------------------------------------
 * Upper this line, this part is controlled by PVCS VM. DO NOT MODIFY!! 
 *==============================================================================
 *******************************************************************************/
#ifndef _MMI_MRE_TRC_H_
#define _MMI_MRE_TRC_H_

/* for generate PS trace definition */
#include "kal_trace.h"


#define MMI_MRE_TRC_FUNC           TRACE_FUNC
#define MMI_MRE_TRC_STATE          TRACE_STATE
#define MMI_MRE_TRC_INFO           TRACE_INFO
#define MMI_MRE_TRC_WARNING        TRACE_WARNING
#define MMI_MRE_TRC_ERROR          TRACE_ERROR

#define MMI_MRE_TRC_G1_AM           TRACE_GROUP_1
#define MMI_MRE_TRC_G2_SERVICE      TRACE_GROUP_2
#define MMI_MRE_TRC_G2_APPMGR_SRV   TRACE_GROUP_2
#define MMI_MRE_TRC_G2_DLTM_SRV     TRACE_GROUP_2
#define MMI_MRE_TRC_G2_SERVICE_DL   TRACE_GROUP_2
#define MMI_MRE_TRC_G2_CHSET   TRACE_GROUP_2
#define MMI_MRE_TRC_G2_IME   TRACE_GROUP_2
#define MMI_MRE_TRC_G2_SYS   TRACE_GROUP_2

#define MMI_MRE_TRC_G4_SOC          TRACE_GROUP_4
#define MMI_MRE_TRC_G4_HTTP         TRACE_GROUP_4
#define MMI_MRE_TRC_G4_WPS          TRACE_GROUP_4

#define MMI_MRE_TRC_G8_FRM          TRACE_GROUP_8
#define MMI_MRE_TRC_G8_PRO          TRACE_GROUP_8

#define MMI_MRE_TRC_MOD_VMCAMERA TRACE_GROUP_6
#define MMI_MRE_TRC_MOD_VMCHSET TRACE_GROUP_6
#define MMI_MRE_TRC_MOD_VMIME TRACE_GROUP_6
#define MMI_MRE_TRC_MOD_VMMACROSTUB TRACE_GROUP_6
#define MMI_MRE_TRC_MOD_ELFLDR TRACE_GROUP_6
#define MMI_MRE_TRC_MOD_HTTPUTIL TRACE_GROUP_6
#define MMI_MRE_TRC_MOD_VMBITSTREAM TRACE_GROUP_6
#define MMI_MRE_TRC_MOD_VMCERENV TRACE_GROUP_6
#define MMI_MRE_TRC_MOD_VMCERMNG TRACE_GROUP_6
#define MMI_MRE_TRC_MOD_VMCERVAR TRACE_GROUP_6
#define MMI_MRE_TRC_MOD_VMDDRAW TRACE_GROUP_6
#define MMI_MRE_TRC_MOD_VMGETTAG TRACE_GROUP_6
#define MMI_MRE_TRC_MOD_VMGFXOLD TRACE_GROUP_6
#define MMI_MRE_TRC_MOD_VMHTTP TRACE_GROUP_7
#define MMI_MRE_TRC_MOD_VMMMS TRACE_GROUP_6
#define MMI_MRE_TRC_MOD_VMPERMNG TRACE_GROUP_6
#define MMI_MRE_TRC_MOD_VMPROMNG TRACE_GROUP_6
#define MMI_MRE_TRC_MOD_VMRES TRACE_GROUP_6
#define MMI_MRE_TRC_MOD_VMRESMNG TRACE_GROUP_6
#define MMI_MRE_TRC_MOD_VMSHORTCUT TRACE_GROUP_6
#define MMI_MRE_TRC_MOD_VMSM TRACE_GROUP_6
#define MMI_MRE_TRC_MOD_VMSO TRACE_GROUP_6
#define MMI_MRE_TRC_MOD_VMVIDEO TRACE_GROUP_6
#define MMI_MRE_TRC_MOD_VMVIP TRACE_GROUP_6
#define MMI_MRE_TRC_MOD_VMBTCM TRACE_GROUP_7
#define MMI_MRE_TRC_MOD_VMBTSPP TRACE_GROUP_7
#define MMI_MRE_TRC_MOD_VMCONTACT TRACE_GROUP_6
#define MMI_MRE_TRC_MOD_VMENV TRACE_GROUP_6
#define MMI_MRE_TRC_MOD_VMGPS TRACE_GROUP_6
#define MMI_MRE_TRC_MOD_VMGRAPH TRACE_GROUP_6
#define MMI_MRE_TRC_MOD_VMIO TRACE_GROUP_7
#define MMI_MRE_TRC_MOD_VMLOG TRACE_GROUP_6
#define MMI_MRE_TRC_MOD_VMMM TRACE_GROUP_6
#define MMI_MRE_TRC_MOD_VMNVRAM TRACE_GROUP_6
#define MMI_MRE_TRC_MOD_VMOPTIONS TRACE_GROUP_6
#define MMI_MRE_TRC_MOD_VMPAYMENT TRACE_GROUP_6
#define MMI_MRE_TRC_MOD_VMSALBITSTREAM TRACE_GROUP_6
#define MMI_MRE_TRC_MOD_VMSALCELL TRACE_GROUP_6
#define MMI_MRE_TRC_MOD_VMSALCONTACT TRACE_GROUP_6
#define MMI_MRE_TRC_MOD_VMSALGPS TRACE_GROUP_6
#define MMI_MRE_TRC_MOD_VMSALMM TRACE_GROUP_6
#define MMI_MRE_TRC_MOD_VMSALMMS TRACE_GROUP_6
#define MMI_MRE_TRC_MOD_VMSALSMS TRACE_GROUP_6
#define MMI_MRE_TRC_MOD_VMSMS TRACE_GROUP_6
#define MMI_MRE_TRC_MOD_VMSOCK TRACE_GROUP_7
#define MMI_MRE_TRC_MOD_VMSTATUSBAR TRACE_GROUP_6
#define MMI_MRE_TRC_MOD_VMSYS TRACE_GROUP_6
#define MMI_MRE_TRC_MOD_VMTEL TRACE_GROUP_6
#define MMI_MRE_TRC_MOD_VMTIMER TRACE_GROUP_6
#define MMI_MRE_TRC_MOD_VMXML TRACE_GROUP_6
#define MMI_MRE_TRC_MOD_HTTPS TRACE_GROUP_7
#define MMI_MRE_TRC_MOD_ALARM TRACE_GROUP_3
#define MMI_MRE_TRC_MOD_COMMONUI TRACE_GROUP_4

#define MMI_MRE_TRC_MOD_VMDA TRACE_GROUP_8

#define MMI_MRE_TRC_MOD_SSO TRACE_GROUP_7

#define MMI_MRE_TRC_MOD_SETTING_SRV TRACE_GROUP_3
#define MMI_MRE_TRC_MOD_BTPDMS TRACE_GROUP_7
#define MMI_MRE_TRC_MOD_BTHFP TRACE_GROUP_7

// The following group names are just examples. If you want to use these group, please give a meaningful name.
#define MMI_MRE_TRC_G2         TRACE_GROUP_2
#define MMI_MRE_TRC_G3         TRACE_GROUP_3
#define MMI_MRE_TRC_G4      TRACE_GROUP_4
#define MMI_MRE_TRC_G5         TRACE_GROUP_5
#define MMI_MRE_TRC_G6  TRACE_GROUP_6
#define MMI_MRE_TRC_G7	      TRACE_GROUP_7
#define MMI_MRE_TRC_G8        TRACE_GROUP_8
#define MMI_MRE_TRC_G9    TRACE_GROUP_9
#define MMI_MRE_TRC_G10        TRACE_GROUP_10
#define MAX_MRE_TRACE_LOG_TYPE     (MMI_MRE_TRC_G10+1)



/* For MOD_MRE */
#if !defined(GEN_FOR_PC)
#if defined(__TST_MODULE__) || defined(__CUSTOM_RELEASE__)
    #include "MMI_mre_trc_gen.h"
#endif /* TST Trace Defintion */
#endif
BEGIN_TRACE_MAP(MOD_MRE)

    /*****************************************************************************************************************
     * MMI MRE AM trace
     *****************************************************************************************************************/
    /* Group 1 trace - MMI_MRE_TRC_G1_AM */
    /* AMShortcut.c */
    TRC_MSG(TRC_MMI_AM_SET_AS_SHORTCUT, "[MRE][AM] mmi_am_set_as_shortcut()")
    TRC_MSG(TRC_MMI_AM_SHORTCUT_ICON_SIZE_FAIL, "[MRE][AM] MMI_AM_SHORTCUT_ICON_SIZE_FAIL") 
    TRC_MSG(TRC_MMI_AM_SHORTCUT_DUPLICATE_ID, "[MRE][AM] MMI_AM_SHORTCUT_DUPLICATE_ID")
    TRC_MSG(TRC_MMI_AM_SHORTCUT_VERIFY_FAIL, "[MRE][AM] MRE Verify fail=%d")
    TRC_MSG(TRC_MMI_AM_SHORTCUT_STRUCTURE_FAIL, "[MRE][AM] MMI_AM_SHORTCUT_STRUCTURE_FAIL,i=%d")
    TRC_MSG(TRC_MMI_AM_SHORTCUT_FILE_FAIL, "[MRE][AM] MMI_AM_SHORTCUT_FILE_FAIL")
    TRC_MSG(TRC_MMI_AM_SHORTCUT_INFO, "[MRE][AM] id=%d,is_used=%d,number=%d,i=%d")
    TRC_MSG(TRC_MMI_AM_SHORTCUT_NUMBER, "[MRE][AM] shortcut_number =%d")
    TRC_MSG(TRC_MMI_AM_SHORTCUT_ICON, "[MRE][AM] mmi_am_get_shortcut_icon()")
    TRC_MSG(TRC_MMI_AM_SHORTCUT_ICON_ID, "[MRE][AM] icon_id =%d")
    TRC_MSG(TRC_MMI_AM_SHORTCUT_CANCEL, "[MRE][AM] mmi_am_cancel_shortcut()")
    TRC_MSG(TRC_MMI_AM_SHORTCUT_LAUNCH, "[MRE][AM] mmi_am_launch_shortcut:id=%d")
    /* AM trace */
    TRC_MSG(TRC_MMI_AM_START_S, "[MRE][AM] mmi_am_start <Begin><dyn_mem_pool:%d, adm_pool_id:%d>")
    TRC_MSG(TRC_MMI_AM_START_E, "[MRE][AM] mmi_am_start <End><dyn_mem_pool:%d, adm_pool_id:%d>")
    TRC_MSG(TRC_MMI_AM_START_INT_S, "[MRE][AM] mmi_am_start_int <Begin>")
    TRC_MSG(TRC_MMI_AM_MRE_LOAD_RESULT, "[MRE][AM] mmi_am_start_int <load_mre_core_ret:%d>")
    TRC_MSG(TRC_MMI_AM_DYN_MEM_POOL, "[MRE][AM] mmi_am_start_int <dyn_mem_pool:%d>")
    TRC_MSG(TRC_MMI_AM_ALLOCATE_MEM_FAIL, "[MRE][AM] mmi_am_start_int <allocate memory fail>")    
    TRC_MSG(TRC_MMI_AM_START_INT_E, "[MRE][AM] mmi_am_start_int <End>")    
    TRC_MSG(TRC_MMI_AM_PRE_START_CHECK_S, "[MRE][AM] mmi_am_pre_start_check <Begin>")
    TRC_MSG(TRC_MMI_AM_PRE_START_CHECK_E1, "[MRE][AM] mmi_am_pre_start_check <End1> <too many files>")
    TRC_MSG(TRC_MMI_AM_PRE_START_CHECK_E2, "[MRE][AM] mmi_am_pre_start_check <End2> <mass storage mode>")
    TRC_MSG(TRC_MMI_AM_PRE_START_CHECK_E3, "[MRE][AM] mmi_am_pre_start_check <End3>")
    TRC_MSG(TRC_MMI_AM_MRE_CB_S, "[MRE][AM] mmi_am_mre_cb <Begin><evt:%d, dyn_mem_pool:%d>")
    TRC_MSG(TRC_MMI_AM_MRE_CB_E, "[MRE][AM] mmi_am_mre_cb <End>")    
    TRC_MSG(TRC_MMI_AM_ALLOC_MEM_CB_S, "[MRE][AM] mmi_am_alloc_mem_cb <Begin><dyn_mem_pool:%d>")
    TRC_MSG(TRC_MMI_AM_ALLOC_MEM_CB_E, "[MRE][AM] mmi_am_alloc_mem_cb <End><dyn_mem_pool:%d>")    
    TRC_MSG(TRC_MMI_AM_GROUP_PROC_EVT_S, "[MRE][AM] mmi_am_grp_proc <Begin><evt_id:%d>")
    TRC_MSG(TRC_MMI_AM_GROUP_PROC_EVT_E, "[MRE][AM] mmi_am_grp_proc <End>")
    TRC_MSG(TRC_MMI_AM_ASM_STOP_CB_S, "[MRE][AM] mmi_am_asm_stop_cb <Begin>")
    TRC_MSG(TRC_MMI_AM_ASM_STOP_CB_E, "[MRE][AM] mmi_am_asm_stop_cb <End>")    
    TRC_MSG(TRC_MMI_AM_APP_INIT_S, "[MRE][AM] mmi_am_app_init <Begin><dyn_mem_pool:%d>")
    TRC_MSG(TRC_MMI_AM_APP_INIT_E, "[MRE][AM] mmi_am_app_init <End> <adm_pool_id:%d, shortcut_app_num:%d, rom_app_num:%d, has_small_font:%d>")    
    TRC_MSG(TRC_MMI_AM_SEARCH_S, "[MRE][AM] mmi_am_search <Begin>")
    TRC_MSG(TRC_MMI_AM_SEARCH_E, "[MRE][AM] mmi_am_search <End>")
    TRC_MSG(TRC_MMI_AM_DEINIT_S, "[MRE][AM] mmi_am_grp_deinit <Begin><search_hdl:%d, card_mre_folder_hdl:%d, phone_mre_folder_hdl:%d, adm_pool_id:%d, dyn_mem_pool:%d>")
    TRC_MSG(TRC_MMI_AM_DEINIT_E, "[MRE][AM] mmi_am_grp_deinit <End><search_hdl:%d, card_mre_folder_hdl:%d, phone_mre_folder_hdl:%d, adm_pool_id:%d, dyn_mem_pool:%d>")    
    TRC_MSG(TRC_MMI_AM_ENTRY_LOADING_SCRN_S, "[MRE][AM] mmi_am_entry_loading_scrn <Begin><adm_pool_id:%d, is_card_plug_in:%d, is_card_plug_out:%d, is_launch_vas:%d>")    
    TRC_MSG(TRC_MMI_AM_ENTRY_LOADING_SCRN_E, "[MRE][AM] mmi_am_entry_loading_scrn <End>")  
    TRC_MSG(TRC_MMI_AM_SEARCH_VXP_FILES_S, "[MRE][AM] mmi_am_search_vxp_files <Begin><is_card_plug_in:%d, is_card_plug_out:%d>")         
    TRC_MSG(TRC_MMI_AM_SEARCH_VXP_FILES_DONE, "[MRE][AM] mmi_am_search_vxp_files <Search done>")   
    TRC_MSG(TRC_MMI_AM_SEARCH_VXP_FILES_E, "[MRE][AM] mmi_am_search_vxp_files <End><search_state:%d>")      
    TRC_MSG(TRC_MMI_AM_SEARCH_VXP_CB_S, "[MRE][AM] mmi_am_search_vxp_cb <Begin><is_card_plug_in:%d, is_card_plug_out:%d, search_hdl:%d, search_state:%d, cur_driver:%d>")         
    TRC_MSG(TRC_MMI_AM_SEARCH_VXP_CB_FINDNEXT, "[MRE][AM] mmi_am_search_vxp_cb <FS_FindNext::cur_driver:%d>")   
    TRC_MSG(TRC_MMI_AM_SEARCH_VXP_CB_FINDFIRST_IN_PHONE, "[MRE][AM] mmi_am_search_vxp_cb <FS_FindFirst in phone::cur_driver:%d>")   
    TRC_MSG(TRC_MMI_AM_SEARCH_VXP_CB_DONE_IN_PHONE, "[MRE][AM] mmi_am_search_vxp_cb <no vxp file in phone>")   
    TRC_MSG(TRC_MMI_AM_SEARCH_VXP_CB_FINDFIRST_PLUG_IN_CARD, "[MRE][AM] mmi_am_search_vxp_cb <FS_FindFirst in phone::cur_driver:%d>")   
    TRC_MSG(TRC_MMI_AM_SEARCH_VXP_CB_DONE_PLUG_IN_CARD, "[MRE][AM] mmi_am_search_vxp_cb <no vxp file in memory card>")   
    TRC_MSG(TRC_MMI_AM_SEARCH_VXP_CB_DONE, "[MRE][AM] mmi_am_search_vxp_cb <Search done>")      
    TRC_MSG(TRC_MMI_AM_SEARCH_VXP_CB_CONTINUE, "[MRE][AM] mmi_am_search_vxp_cb <Start a timer continue to search>")      
    TRC_MSG(TRC_MMI_AM_SEARCH_VXP_CB_E, "[MRE][AM] mmi_am_search_vxp_cb <End>")              
    TRC_MSG(TRC_MMI_AM_PLUG_IN_S, "[MRE][AM] mmi_am_card_plug_in_hdlr <Begin><adm_pool_id:%d, is_card_plug_out:%d, search_state:%d>")
    TRC_MSG(TRC_MMI_AM_PLUG_IN_SCRN_ID, "[MRE][AM] mmi_am_card_plug_in_hdlr <scrn_id:%d>")
    TRC_MSG(TRC_MMI_AM_PLUG_IN_E, "[MRE][AM] mmi_am_card_plug_in_hdlr <End>")    
    TRC_MSG(TRC_MMI_AM_PLUG_OUT_S, "[MRE][AM] mmi_am_card_plug_out_hdlr <Begin><adm_pool_id:%d, is_card_plug_in:%d, hl_idx:%d, is_app_in_card:%d>")
    TRC_MSG(TRC_MMI_AM_PLUG_OUT_PATH, "[MRE][AM] mmi_am_card_plug_out_hdlr <path diver:%d>")
    TRC_MSG(TRC_MMI_AM_PLUG_OUT_IN_MEMORY_CARD, "[MRE][AM] mmi_am_card_plug_out_hdlr <in memory card>")
    TRC_MSG(TRC_MMI_AM_PLUG_OUT_E, "[MRE][AM] mmi_am_card_plug_out_hdlr <End><hl_idx:%d, is_app_in_card:%d>")
    TRC_MSG(TRC_MMI_AM_RELEASE_APPSTORE, "[MRE][AM] mmi_am_release_shortcut_list_nodes_in_memory_card <release appstore>")
    TRC_MSG(TRC_MMI_AM_RELEASE_SHORTCUT_PATH, "[MRE][AM] mmi_am_release_shortcut_list_nodes_in_memory_card <i:%d, driver:%d>")
    TRC_MSG(TRC_MMI_AM_RELEASE_SHORTCUT, "[MRE][AM] mmi_am_release_shortcut_list_nodes_in_memory_card <release shortcut i:%d>")
    TRC_MSG(TRC_MMI_AM_RELEASE_VXP_NODE, "[MRE][AM] mmi_am_release_vxp_list_nodes_in_memory_card <release vxp list node>")
    TRC_MSG(TRC_MMI_AM_RELEASE_APP_LIST_NODE, "[MRE][AM] mmi_am_ms_release_app_list_nodes_in_memory_card <release app list node hl_idx:%d>")
    TRC_MSG(TRC_MMI_AM_ENTER_USB_MODE_S, "[MRE][AM] mmi_am_enter_usb_mode <Begin><adm_pool_id:%d>")
    TRC_MSG(TRC_MMI_AM_ENTER_USB_MODE_CLOSE_AM, "[MRE][AM] mmi_am_enter_usb_mode <close AM>")
    TRC_MSG(TRC_MMI_AM_ENTER_USB_MODE_E, "[MRE][AM] mmi_am_enter_usb_mode <End>")
    TRC_MSG(TRC_MMI_AM_CHECK_FILE_NUMBER, "[MRE][AM] mmi_am_is_too_many_files_in_mre_folder <vxp_num:%d>")
    TRC_MSG(TRC_MMI_AM_ENTRY_MAIN_SCRN_S, "[MRE][AM] mmi_am_entry_main_scrn <Begin>")
    TRC_MSG(TRC_MMI_AM_MS_ENTRY_SCREEN, "[MRE][AM] mmi_am_entry_main_scrn <num_of_items:%d>")
    TRC_MSG(TRC_MMI_AM_MS_ENTRY_SCREEN_CDR, "[MRE][AM] mmi_am_entry_main_scrn <is_prompt_update_cdr:%d>")
    TRC_MSG(TRC_MMI_AM_ENTRY_MAIN_SCRN_E, "[MRE][AM] mmi_am_entry_main_scrn <End>")
    TRC_MSG(TRC_MMI_AM_MS_LEAVE_SCREEN, "[MRE][AM] mmi_am_leave_main_scrn <evt_id:%d>")    
    TRC_MSG(TRC_MMI_AM_MS_DRAW_CB_S, "[MRE][AM] mmi_am_ms_draw_cb <Begin>")
    TRC_MSG(TRC_MMI_AM_MS_DRAW_CB, "[MRE][AM] mmi_am_ms_draw_cb <idx:%d, page_start_idx:%d, page_end_idx:%d, is_hilighted:%d>")
    TRC_MSG(TRC_MMI_AM_MS_DRAW_CB_POS, "[MRE][AM] mmi_am_ms_draw_cb <x1:%d, y1:%d, x2:%d, y2:%d>")
    TRC_MSG(TRC_MMI_AM_MS_DRAW_CB_APP_NUM, "[MRE][AM] mmi_am_ms_draw_cb <sc_app_num:%d, rom_app_num:%d>")
    TRC_MSG(TRC_MMI_AM_MS_DRAW_CB_E, "[MRE][AM] mmi_am_ms_draw_cb <End>")
    //TRC_MSG(TRC_MMI_AM_MS_UPDATE_APP_LIST_S, "[MRE][AM] mmi_am_ms_update_app_list <Begin>")
    //TRC_MSG(TRC_MMI_AM_MS_UPDATE_APP_LIST_1, "[MRE][AM] mmi_am_ms_update_app_list <first_idx:%d, is_first_idx_exist:%d>")
    //TRC_MSG(TRC_MMI_AM_MS_UPDATE_APP_LIST_2, "[MRE][AM] mmi_am_ms_update_app_list <remove from applist[1]--p->idx:%d>")
    //TRC_MSG(TRC_MMI_AM_MS_UPDATE_APP_LIST_3, "[MRE][AM] mmi_am_ms_update_app_list <remove a node from applist[2] -- no:%d>")
    //TRC_MSG(TRC_MMI_AM_MS_UPDATE_APP_LIST_4, "[MRE][AM] mmi_am_ms_update_app_list <get a node from vxplist[1] -- i:%d, no:%d>")
    //TRC_MSG(TRC_MMI_AM_MS_UPDATE_APP_LIST_5, "[MRE][AM] mmi_am_ms_update_app_list <get a node from vxplist[1] -- i:%d, no:%d>")
    //TRC_MSG(TRC_MMI_AM_MS_UPDATE_APP_LIST_6, "[MRE][AM] mmi_am_ms_update_app_list <remove from applist[3]--p->idx:%d>")
    //TRC_MSG(TRC_MMI_AM_MS_UPDATE_APP_LIST_7, "[MRE][AM] mmi_am_ms_update_app_list <remove from applist[4] -- p->idx:%d, no:%d>")
    //TRC_MSG(TRC_MMI_AM_MS_UPDATE_APP_LIST_8, "[MRE][AM] mmi_am_ms_update_app_list <remove from applist[1]--p->idx:%d>")
    //TRC_MSG(TRC_MMI_AM_MS_UPDATE_APP_LIST_E1, "[MRE][AM] mmi_am_ms_update_app_list <End1>")
    //TRC_MSG(TRC_MMI_AM_MS_UPDATE_APP_LIST_E2, "[MRE][AM] mmi_am_ms_update_app_list <End2>")
    //TRC_MSG(TRC_MMI_AM_MS_UPDATE_APP_LIST_E3, "[MRE][AM] mmi_am_ms_update_app_list <End3>")
    TRC_MSG(TRC_MMI_AM_SCREENS_SET_SHORTCUT, "[MRE][AM] mmi_am_os_create_hs_shortcut <ret:%d>")  
    TRC_MSG(TRC_MMI_AM_DETAILS_SCRN_ENTRY_S, "[MRE][AM] mmi_am_entry_details_scrn <Begin><g_ds_str_buf:%d>")
    TRC_MSG(TRC_MMI_AM_DETAILS_SCRN_ENTRY_E, "[MRE][AM] mmi_am_entry_details_scrn <End>")
    TRC_MSG(TRC_MMI_AM_DETAILS_SCRN_DESTROY_S, "[MRE][AM] mmi_am_destroy_details_scrn <Begin>")
    TRC_MSG(TRC_MMI_AM_DETAILS_SCRN_DESTROY_E, "[MRE][AM] mmi_am_destroy_details_scrn <End>")
    TRC_MSG(TRC_MMI_AM_UPDATE_CDR_STATE, "[MRE][AM] mmi_am_ms_update_cdr <state:%d>")
    TRC_MSG(TRC_MMI_AM_UPDATE_CDR_BALANCE, "[MRE][AM] mmi_am_ms_update_cdr <balance:%d>")
    TRC_MSG(TRC_MMI_AM_UPDATE_CDR_CB, "[MRE][AM] mmi_am_cdr_update_cb <nResult:%d>")
    TRC_MSG(TRC_MMI_AM_HOLD_MRE_FOLDER_S, "[MRE][AM] mmi_am_hold_mre_folder <Begin><card_mre_folder_hdl:%d, phone_mre_folder_hdl:%d>")
    TRC_MSG(TRC_MMI_AM_HOLD_MRE_FOLDER_E, "[MRE][AM] mmi_am_hold_mre_folder <End><card_mre_folder_hdl:%d, phone_mre_folder_hdl:%d>")
    TRC_MSG(TRC_MMI_AM_SEARCH_SHORTCUT_APPS_S, "[MRE][AM] mmi_am_search_shortcut_apps <Begin>")
    TRC_MSG(TRC_MMI_AM_SEARCH_SHORTCUT_APPS_E, "[MRE][AM] mmi_am_search_shortcut_apps <End>")
    TRC_MSG(TRC_MMI_AM_SEARCH_APPSTORE_S, "[MRE][AM] mmi_am_search_appstore <Begin>")
    TRC_MSG(TRC_MMI_AM_SEARCH_APPSTORE_E1, "[MRE][AM] mmi_am_search_appstore <End1> <appstore in memory card>")
    TRC_MSG(TRC_MMI_AM_SEARCH_APPSTORE_E2, "[MRE][AM] mmi_am_search_appstore <End2> <appstore in phone>")
    TRC_MSG(TRC_MMI_AM_SEARCH_APPSTORE_E3, "[MRE][AM] mmi_am_search_appstore <End1> <appstore is not in memory card and phone>")
    TRC_MSG(TRC_MMI_AM_SEARCH_APPSTORE_IN_ROM, "[MRE][AM] mmi_am_search_appstore_in_rom <appstore in rom>")
    TRC_MSG(TRC_MMI_AM_SEARCH_ROM_APPS_S, "[MRE][AM] mmi_am_search_rom_apps <Begin>")
    TRC_MSG(TRC_MMI_AM_SEARCH_ROM_APPS_E, "[MRE][AM] mmi_am_search_rom_apps <End>")
    TRC_MSG(TRC_MMI_AM_ADD_VXP_FILE_LIST_POSTION, "[MRE][AM] mmi_am_add_vxp_file_list <position:%d>")
    TRC_MSG(TRC_MMI_AM_CHECK_DL_BY_AS_S, "[MRE][AM] mmi_am_check_downloaded_app_by_as <Begin><is_card_plug_in:%d>")
    TRC_MSG(TRC_MMI_AM_CHECK_DL_BY_AS_PLUG_IN_1, "[MRE][AM] mmi_am_check_downloaded_app_by_as <list does not in memory card>")
    TRC_MSG(TRC_MMI_AM_CHECK_DL_BY_AS_PLUG_IN_2, "[MRE][AM] mmi_am_check_downloaded_app_by_as <list does not in phone>")
    TRC_MSG(TRC_MMI_AM_CHECK_DL_BY_AS_LIST_NUM, "[MRE][AM] mmi_am_check_downloaded_app_by_as <num_of_list:%d>")
    TRC_MSG(TRC_MMI_AM_CHECK_DL_BY_AS_E1, "[MRE][AM] mmi_am_check_downloaded_app_by_as <End1>")
    TRC_MSG(TRC_MMI_AM_CHECK_DL_BY_AS_E2, "[MRE][AM] mmi_am_check_downloaded_app_by_as <End2>")
    TRC_MSG(TRC_MMI_AM_IS_USING_MEDIA_MEMORY, "[MRE][AM] mmi_am_is_using_media_memory <%d>")
    TRC_MSG(TRC_MMI_AM_APP_LAUNCH_RESULT, "[MRE][AM] mmi_am_la_app_launch <result:%d>")
    TRC_MSG(TRC_MMI_AM_LA_LEAVE_SCREEN, "[MRE][AM] mmi_am_la_leave_loading_scrn <evt_id:%d>")
    /* Group 1 process mgr trace - MMI_MRE_TRC_G1_AM */
    TRC_MSG(TRC_MMI_AM_DLA_S, "[DLA] [%d] S")
    TRC_MSG(TRC_MMI_AM_DLA_E, "[DLA] [%d] E")
    TRC_MSG(TRC_MMI_AM_DLA_E1, "[DLA] [%d] E1")
    TRC_MSG(TRC_MMI_AM_DLA_E2, "[DLA] [%d] E2")
    TRC_MSG(TRC_MMI_AM_DLA_E3, "[DLA] [%d] E3")
    TRC_MSG(TRC_MMI_AM_DLA_E4, "[DLA] [%d] E4")
    TRC_MSG(TRC_MMI_AM_DLA_FAILURE, "[DLA] [%d] failure")
    TRC_MSG(TRC_MMI_AM_DLA_LOG, "[DLA] [%d] LOG [%d, %d, %d, %d, %d, %d]")

    
    /* Group 1 download trace - MMI_MRE_TRC_G1_AM */
    TRC_MSG(TRC_MMI_AM_PM_S, "[PSMGR] [%d] S")
    TRC_MSG(TRC_MMI_AM_PM_E, "[PSMGR] [%d] E")
    TRC_MSG(TRC_MMI_AM_PM_E1, "[PSMGR] [%d] E1")
    TRC_MSG(TRC_MMI_AM_PM_E2, "[PSMGR] [%d] E2")
    TRC_MSG(TRC_MMI_AM_PM_E3, "[PSMGR] [%d] E3")
    TRC_MSG(TRC_MMI_AM_PM_FAILURE, "[PSMGR] [%d] failure")
    TRC_MSG(TRC_MMI_AM_PM_LOG, "[PSMGR] [%d] LOG [%d, %d]")
    TRC_MSG(TRC_MMI_AM_PM_LOG_STR, "[PSMGR] [%d] LOG_STR [%s]")
    /*****************************************************************************************************************
     * MRE Service trace
     *****************************************************************************************************************/
    /* Group 2 trace - MMI_MRE_TRC_G2_SERVICE */
    TRC_MSG(TRC_MRE_SERVICE_TEST, "[MRE][Service] mmi_am_set_as_shortcut()")
    //TRC_MSG(TRC_MRE_LOAD_CORE_FAIL, "[MRE][Service] srv_mre_load_core() <load_ret:%d>")
    TRC_MSG(TRC_MRE_LAUNCH_APP_CALLBACK_RESULT, "[launch]srv_mre_launch_app_cb,evt:%d")
    //TRC_MSG(TRC_MRE_LAUNCH_APP_IS_BG_RUNNING, "[MRE][Service] srv_mre_launch_app() <App is bg running>")
    TRC_MSG(TRC_MRE_LAUNCH_APP_RESULT_2, "[launch]srv_mre_launch_app()check cert<result:%d>")
    //TRC_MSG(TRC_MRE_LAUNCH_APP_SET_FG_RUN_RESULT, "[MRE][Service] srv_mre_launch_app() <set_fg start_ret:%d>")
    TRC_MSG(TRC_MRE_LAUNCH_APP_RESULT, "[MRE][Service] srv_mre_launch_app() <vm_execute ret:%d>")
    TRC_MSG(TRC_MRE_SERVICE_IS_APP_BG_RUNNING, "[launch]srv_mre_is_app_bg_running,ret:%d")

    TRC_MSG(TRC_MRE_SERVICE_DL_INIT,        "[MRE][Service][DL] srv_mre_dl_init() srv_mre_dl_contex=[0x%x]")
    TRC_MSG(TRC_MRE_SERVICE_DL_DEINIT,      "[MRE][Service][DL] srv_mre_dl_deinit() srv_mre_dl_contex=[0x%x]")	
    TRC_MSG(TRC_MRE_SERVICE_DL_START,       "[MRE][Service][DL] srv_mre_dl_start() appid=[%d] file_path=[%d] download_app_cb=[%d] srv_mre_dl_contex=[%d]")	
    TRC_MSG(TRC_MRE_SERVICE_DL_STOP,        "[MRE][Service][DL] srv_mre_dl_stop() handle=[%d] srv_mre_dl_contex=[%d]")	
    TRC_MSG(TRC_MRE_SERVICE_DL_CANCEL,      "[MRE][Service][DL] srv_mre_dl_cancel() handle=[%d] srv_mre_dl_contex=[%d]")	
    TRC_MSG(TRC_MRE_SERVICE_DL_CALLBACK,    "[MRE][Service][DL] srv_mre_dl_app_callback() uid=[%d] mpi=[%d] vip_response_type=[%d] vip_response=[0X%x] response_size=[%d] srv_mre_dl_contex=[%d]")	
    
    TRC_MSG(TRC_MRE_SERVICE_DL_TRACELINE,   "[MRE][Service][DL] Traceline Line=[%d]")    

	

    /*****************************************************************************************************************
     * MRE AppMgr Service trace
     *****************************************************************************************************************/
    /* Download service Function Entry trace */
    TRC_MSG(TRC_MRE_DLTM_INIT,          "[DLTM] mre_dltm_init() mre_dltm_contex=[0x%x]")    
    TRC_MSG(TRC_MRE_DLTM_FORCE_DEINIT,  "[DLTM] mre_dltm_force_deinit() mre_dltm_contex=[0x%x]")    
    TRC_MSG(TRC_MRE_DLTM_AUTO_DEINIT,   "[DLTM] mre_dltm_auto_deinit() mre_dltm_contex=[0x%x]")    
    TRC_MSG(TRC_MRE_DLTM_DEINIT,        "[DLTM] mre_dltm_deinit() mre_dltm_contex=[0x%x]")    
    TRC_MSG(TRC_MRE_DLTM_ADD,           "[DLTM] mre_dltm_add(app_id=[%d], path=[0x%x]) mre_dltm_contex=[0x%x]")    
    TRC_MSG(TRC_MRE_DLTM_START,         "[DLTM] mre_dltm_start(handle_id=[%d]) mre_dltm_contex=[0x%x]")
    TRC_MSG(TRC_MRE_DLTM_PAUSE,         "[DLTM] mre_dltm_pause(handle_id=[%d]) mre_dltm_contex=[0x%x]")
    TRC_MSG(TRC_MRE_DLTM_REMOVE,        "[DLTM] mre_dltm_remove(handle_id=[%d]) mre_dltm_contex=[0x%x]")    
    TRC_MSG(TRC_MRE_DLTM_QUEUE,         "[DLTM] mre_dltm_queue(handle_id=[%d]) mre_dltm_contex=[0x%x]")    
    TRC_MSG(TRC_MRE_DLTM_START_NEXT,    "[DLTM] mre_dltm_start_next() mre_dltm_contex=[0x%x]")    
    TRC_MSG(TRC_MRE_DLTM_CALLBACK,      "[DLTM] mre_dltm_download_app_cb(nResult=[%d], pDownload=[%d]) mre_dltm_contex=[0x%x]")    
    TRC_MSG(TRC_MRE_DLTM_NODE_CHANGE_NOTIFY,    "[DLTM] EVT_ID_MRE_DLTM_LIST_CHANGE sent , index=[%d] result=[%d]")    
    TRC_MSG(TRC_MRE_DLTM_LIST_TO_BUF,   "[DLTM] mre_dltm_task_list_to_buf(head_node=[%d], buf=[%d])")    
    TRC_MSG(TRC_MRE_DLTM_BUF_TO_LIST,   "[DLTM] mre_dltm_buf_to_task_list(buf=[%d], buf_size=[%d], contex=[%d])")    
    TRC_MSG(TRC_MRE_DLTM_SAVE,          "[DLTM] mre_dltm_save_task_list() mre_dltm_contex=[0x%x]")    
    TRC_MSG(TRC_MRE_DLTM_LOAD,          "[DLTM] mre_dltm_load_task_list() mre_dltm_contex=[0x%x]")    
    TRC_MSG(TRC_MRE_DLTM_GET_NEXT,      "[DLTM] mre_dltm_get_next() mre_dltm_contex=[0x%x]")    
    TRC_MSG(TRC_MRE_DLTM_SHOW_NODE,     "[DLTM] Show node: id=[%d] handle=[%d] state=[%d] err_code=[%d] size=[%d] total=[%d]")


    TRC_MSG(TRC_MRE_DLTM_MOVE_TO_LAST,  "[DLTM] mre_dltm_move_node_to_last(handle_id=[%d]) mre_dltm_contex=[0x%x]")    

    TRC_MSG(TRC_MRE_DLTM_TRACELINE,     "[DLTM] Traceline Line=[%d]")      



    /* Group 2 trace - MMI_MRE_TRC_G2_APPMGR_SRV */
    TRC_MSG(TRC_MRE_SRV_LAUNCH_CHECK, "[MRE][Service] srv_mre_launch_app_check_cert <ce_check_result:%d;ret:%d>")
    //TRC_MSG(TRC_MRE_SRV_LAUNCH_APP_NAME, "[MRE][Service] srv_mre_launch_app <app_path:%s>")
    TRC_MSG(TRC_MRE_SRV_LAUNCH_APP_IS_VALID, "[MRE][Service] srv_mre_is_app_valid <rescode:%d>")
    TRC_MSG(TRC_MRE_APPMGR_INIT, "[MRE][AppMgr SRV] srv_mre_appmgr_init() <ret:%d>")
    TRC_MSG(TRC_MRE_APPMGR_DL_START_CB, "[MRE][AppMgr SRV] srv_mre_appmgr_da_download_start_cb() <nResult:%d, nAppid%d, nPercent%d, nFilesize%d, eState%d>")
    TRC_MSG(TRC_MRE_APPMGR_DL_START_CB_INSTALL, "[MRE][AppMgr SRV] After download, install result <install_ret:%d>")
    TRC_MSG(TRC_MRE_APPMGR_DL_START, "[MRE][AppMgr SRV] srv_mre_appmgr_da_download_start() <ret:%d>")
    TRC_MSG(TRC_MRE_APPMGR_DL_STOP, "[MRE][AppMgr SRV] srv_mre_appmgr_da_download_stop() <ret:%d>")
    TRC_MSG(TRC_MRE_APPMGR_DL_CANCEL, "[MRE][AppMgr SRV] srv_mre_appmgr_da_download_stop() <ret:%d>")
    TRC_MSG(MMI_MRE_TRC_G2_APPMGR_INSTALL_S, "[MRE][install]<Begin><path:0x%08x,type:%d,flag:%d>")
    TRC_MSG(MMI_MRE_TRC_G2_APPMGR_INSTALL_APP_NUM, "[MRE][get num]<flag:%d,num:%d>")
    TRC_MSG(MMI_MRE_TRC_G2_APPMGR_INSTALL_E1, "[MRE][install]<End1><alloc memory fail>")
    TRC_MSG(MMI_MRE_TRC_G2_APPMGR_INSTALL_E2, "[MRE][AppMgr SRV] srv_mre_appmgr_install_app() <End2><App is not valid.>")
    TRC_MSG(MMI_MRE_TRC_G2_APPMGR_INSTALL_APP_ID, "[MRE][install]<app_id:%d,shortcut flag:%d>")
    TRC_MSG(MMI_MRE_TRC_G2_APPMGR_INSTALL_E3, "[MRE][install]<End3><Gen identification failed.>")
    TRC_MSG(MMI_MRE_TRC_G2_APPMGR_GEN_IDENTIFICATION,"[MRE][gen identification]<get name fail>")
    TRC_MSG(MMI_MRE_TRC_G2_APPMGR_INSTALL_APP_GET_IMAGE,"[MRE][install]<get_img_ret:%d,get_name_ret:%d>")
    TRC_MSG(MMI_MRE_TRC_G2_APPMGR_INSTALL_E4, "[MRE][AppMgr SRV] srv_mre_appmgr_install_app() <End4><App is already installed.>")
    TRC_MSG(MMI_MRE_TRC_G2_APPMGR_INSTALL_GET_RET, "[MRE][AppMgr SRV] srv_mre_appmgr_install_app() <get_img_ret:%d, get_name_ret:%d>")
    TRC_MSG(MMI_MRE_TRC_G2_APPMGR_INSTALL_SAVE_IMG_FAIL, "[MRE][AppMgr SRV] srv_mre_appmgr_install_app() <Failed to save image>")
    TRC_MSG(MMI_MRE_TRC_G2_APPMGR_INSTALL_SAVE_INFO_FAIL, "[MRE][AppMgr SRV] srv_mre_appmgr_install_app() <Failed to save info>")
    TRC_MSG(MMI_MRE_TRC_G2_APPMGR_INSTALL_SC_APP_SAVE_INFO_FAIL, "[MRE][AppMgr SRV] srv_mre_appmgr_install_shortcut_app() <Failed to save shortcut app info>")
    TRC_MSG(MMI_MRE_TRC_G2_APPMGR_INSTALL_SUC, "[MRE][AppMgr SRV] srv_mre_appmgr_install_app() <Install successfully.>")
    TRC_MSG(MMI_MRE_TRC_G2_APPMGR_INSTALL_E5, "[MRE][AppMgr SRV] srv_mre_appmgr_install_app() <End5><ret:%d>")
    TRC_MSG(MMI_MRE_TRC_G2_APPMGR_GET_APP_LIST_S, "[MRE][AppMgr SRV] srv_mre_appmgr_get_app_list() <Begin><flag:0x%08x, num:%d, installed_num:%d>")
    TRC_MSG(MMI_MRE_TRC_G2_APPMGR_GET_APP_LIST_E, "[MRE][AppMgr SRV] srv_mre_appmgr_get_app_list() <End><ret:%d>")
    TRC_MSG(TRC_MRE_APPMGR_CHECK_UPDATE_CB, "[MRE][AppMgr SRV] srv_mre_appmgr_check_update_cb() <appid:%d, nResult:%d, app_version:%d, app_filesize:%d>")
    TRC_MSG(TRC_MRE_APPMGR_CHECK_UPDATE, "[MRE][AppMgr SRV] srv_mre_appmgr_check_update() <appid:%d, check_cb:0x%08x>")
    TRC_MSG(TRC_MRE_APPMGR_CHECK_UPDATE_CANCEL, "[MRE][AppMgr SRV] srv_mre_appmgr_cancel_check_update()")
    TRC_MSG(TRC_MRE_APPMGR_UPDATE, "[MRE][AppMgr SRV] srv_mre_appmgr_app_update() <appid:%d, *filesize:%d, update_cb:0x%08x>")
    TRC_MSG(TRC_MRE_APPMGR_DL_GET_APP_INFO_CB, "[MRE][AppMgr SRV] srv_mre_appmgr_da_download_get_app_info_cb() <appid:%d, nResult:%d, app_version:%d, app_filesize:%d>")
    TRC_MSG(TRC_MRE_APPMGR_DL_GET_APP_INFO, "[MRE][AppMgr SRV] srv_mre_appmgr_da_download_get_app_info() <appid:%d, getinfo_cb:0x%08x>")
    TRC_MSG(TRC_MRE_APPMGR_DL_GET_APP_INFO_CANCEL, "[MRE][AppMgr SRV] srv_mre_appmgr_da_download_cancel_get_app_info()")
    TRC_MSG(MMI_MRE_APPMGR_IS_BG_DOWNLOADING, "[MRE][AppMgr SRV] srv_mre_appmgr_is_bg_downloading() <appid:%d, status:%d>")
    TRC_MSG(MMI_MRE_APPMGR_IS_BG_DOWNLOADING_BY_PATH, "[MRE][AppMgr SRV] srv_mre_appmgr_is_bg_downloading_by_path() <appid:%d, status:%d>")
    
    TRC_MSG(MMI_MRE_TRC_G2_APPMGR_INSTALL_GET_IMG_INFO, "[MRE][AppMgr SRV] srv_mre_appmgr_get_app_image() <get img, icon_t:%d, img_t:%d>")
    TRC_MSG(MMI_MRE_TRC_G2_APPMGR_INSTALL_SAVE_IMG_INFO, "[MRE][AppMgr SRV] srv_mre_appmgr_install_app() <save img, tag:%d, type:%d>")
    TRC_MSG(MMI_MRE_TRC_G2_APPMGR_INSTALL_SAVE_APP_ICON_SUCC, "[MRE][AppMgr SRV] srv_mre_appmgr_install_app() <save icon succ, i_type:%d>")
    TRC_MSG(MMI_MRE_TRC_G2_APPMGR_INSTALL_SAVE_APP_ICON_FAIL, "[MRE][AppMgr SRV] srv_mre_appmgr_install_app() <save icon fail>")
    TRC_MSG(MMI_MRE_TRC_G2_APPMGR_UPDATE_SAVE_IMG_INFO, "[MRE][AppMgr SRV] srv_mre_appmgr_update_install() <save img, tag:%d, type:%d>")
    TRC_MSG(MMI_MRE_TRC_G2_APPMGR_UPDATE_SAVE_APP_ICON_SUCC, "[MRE][AppMgr SRV] srv_mre_appmgr_update_install() <save icon succ, i_type:%d>")
    TRC_MSG(MMI_MRE_TRC_G2_APPMGR_UPDATE_SAVE_APP_ICON_FAIL, "[MRE][AppMgr SRV] srv_mre_appmgr_update_install() <save icon fail>")
    TRC_MSG(MMI_MRE_TRC_G2_APPMGR_SAVE_APP_ICON_FOR_PLUTO, "[MRE][AppMgr SRV] srv_mre_appmgr_save_app_icon() <pluto, save as img>")
    TRC_MSG(MMI_MRE_TRC_G2_APPMGR_SAVE_APP_ICON_IMG_RESIZE_INFO, "[MRE][AppMgr SRV] srv_mre_appmgr_save_app_icon() <resize, w:%d, h:%d, rw:%d, rh:%d>")
    TRC_MSG(MMI_MRE_TRC_G2_APPMGR_SAI_ALLOC_RESIZED_IMG_MEM_FROM_ASM_FAIL, "[MRE][AppMgr SRV] appmgr_save_app_icon() <get resized mem from asm fail, size:%d>")
    TRC_MSG(MMI_MRE_TRC_G2_APPMGR_SAI_ALLOC_RESIZED_MEM_FROM_CORE_FAIL, "[MRE][AppMgr SRV] appmgr_save_app_icon() <get resized mem from core fail, size:%d>")
    TRC_MSG(MMI_MRE_TRC_G2_APPMGR_SAI_ALLOC_IMG_MEM_FROM_CORE_FAIL, "[MRE][AppMgr SRV] appmgr_save_app_icon() <get img mem from core fail, size:%d>")
    TRC_MSG(MMI_MRE_TRC_G2_APPMGR_SAI_ALLOC_IMG_MEM_FROM_ASM_FAIL, "[MRE][AppMgr SRV] appmgr_save_app_icon() <get img mem from asm fail, size:%d>")
    TRC_MSG(MMI_MRE_TRC_G2_APPMGR_SAI_SAVE_IMG, "[MRE][AppMgr SRV] appmgr_save_app_icon() <fail, so save img>")
    TRC_MSG(MMI_MRE_TRC_G2_APPMGR_SAITPE_CREATE_IMG_LAYER_FAIL, "[MRE][AppMgr SRV] save_app_icon_to_pbm_file() <create img layer fail, ret:%d>")
    TRC_MSG(MMI_MRE_TRC_G2_APPMGR_SAITPF_INFO, "[MRE][AppMgr SRV] save_app_icon_to_pbm_file() <t:%d,c=%d,w=%d,h=%d,f=%d>")
    TRC_MSG(MMI_MRE_TRC_G2_APPMGR_SAITPF_DRAW_IMG_FAIL, "[MRE][AppMgr SRV] save_icon_to_pbm_file() <draw img fail, ret:%d>")
    TRC_MSG(MMI_MRE_TRC_G2_APPMGR_SAITPF_BMP_ENCODE_FAIL, "[MRE][AppMgr SRV] save_icon_to_pbm_file() <bmp encode fail, ret:%d>")
    TRC_MSG(MMI_MRE_TRC_G2_APPMGR_SAITPFBR_INFO, "[MRE][AppMgr SRV] save_icon_by_resizer() <t:%d,c=%d,w=%d,h=%d,rw=%d,rh=%d>")
    TRC_MSG(MMI_MRE_TRC_G2_APPMGR_SAITPEBR_CREATE_IMG_LAYER_FAIL, "[MRE][AppMgr SRV] save_icon_by_resizer() <create img layer fail, ret:%d>")
    TRC_MSG(MMI_MRE_TRC_G2_APPMGR_SAITPFBR_DRAW_IMG_FAIL, "[MRE][AppMgr SRV] save_icon_by_resizer() <draw img fail, ret:%d>")
    TRC_MSG(MMI_MRE_TRC_G2_APPMGR_SAITPFBR_BMP_ENCODE_FAIL, "[MRE][AppMgr SRV] save_icon_by_resizer() <bmp encode fail, ret:%d>")
    TRC_MSG(MMI_MRE_TRC_G2_APPMGR_SAITPEBR_CREATE_RESIZED_IMG_LAYER_FAIL, "[MRE][AppMgr SRV] save_icon_by_resizer() <create resized layer fail, ret:%d>")
    TRC_MSG(MMI_MRE_TRC_G2_APPMGR_SAITPEBR_BITBLT_RESIZER_FAIL, "[MRE][AppMgr SRV] save_icon_by_resizer() <bitblt resizer fail, ret:%d>")
    TRC_MSG(MMI_MRE_TRC_G2_APPMGR_INSTALL_FREE_IMG_FAIL, "[MRE][AppMgr SRV] install app, srv_mre_free_app_image_ex() <fail>")
    TRC_MSG(MMI_MRE_TRC_G2_APPMGR_UPDATE_FREE_IMG_FAIL, "[MRE][AppMgr SRV] update install app, srv_mre_free_app_image_ex() <fail>")
    

    TRC_MSG(MMI_MRE_TRC_G2_APPMGR_PREINSTALL_APP_SHORTCUT,"[MRE][preinstall]<shortcut app num:%d>")
    TRC_MSG(MMI_MRE_TRC_G2_APPMGR_PREINSTALL_APP_MAX_SHORTCUT,"[MRE][preinstall]<shortcut more than the max mre app num:%d>")
    //TRC_MSG(MMI_MRE_TRC_G2_APPMGR_INSTALL_SHORTCUT_NUM, "[MRE][install]<shortcut num:%d>")
    //TRC_MSG(MMI_MRE_TRC_G2_APPMGR_INSTALL_VPP_NUM, "[MRE][install]<vpp num:%d>")
    TRC_MSG(MMI_MRE_TRC_G2_APPMGR_INSTALL_MAX_NUM, "[MRE][install]<reach max able to install number:%d>")
    /*****************************************************************************************************************
     * MRE Charset trace
     *****************************************************************************************************************/
	/* Group 2 trace - MMI_MRE_TRC_G2_CHSET */
    TRC_MSG(TRC_MRE_CHSET_CONVERT_S, "[MRE][Chset] vm_chset_convert() <Begin><src_type:%d, dest_type:%d, src:0x%08x, dest:0x%08x, dest_size:%d>")
    /*****************************************************************************************************************
     * MRE IME trace
     *****************************************************************************************************************/
	/* Group 2 trace - MMI_MRE_TRC_G2_IME */
    TRC_MSG(TRC_MRE_IME_INPUT, "[MRE][IME] vm_input_text() <Begin><function:0x%08x>")
    TRC_MSG(TRC_MRE_IME_INPUT2, "[MRE][IME] vm_input_text2() <Begin><default_string:0x%08x, default_input_method:%d, function:0x%08x>")
    TRC_MSG(TRC_MRE_IME_INPUT3, "[MRE][IME] vm_input_text3() <Begin><default_string:0x%08x, input_max_size:%d, default_input_method:%d, function:0x%08x>")
    TRC_MSG(TRC_MRE_IME_SHOW_SCREEN_S, "[MRE][IME] vm_show_ime_screen() <Begin><vm_input_mode:%d>")
    TRC_MSG(TRC_MRE_IME_SHOW_SCREEN_CATEGORY, "[MRE][IME] vm_show_ime_screen() <file_path:0x%08x, title:0x%08x>")
    TRC_MSG(TRC_MRE_IME_ERROR_NOT_IN_FG, "[MRE][IME] entry_input_screen() <is not in foreground status>")
    TRC_MSG(TRC_MRE_IME_ERROR_SAVE_FAILED, "[MRE][IME] entry_input_screen() <is not allow entry ime screen>")
    TRC_MSG(TRC_MRE_IME_SELECT_OK_S, "[MRE][IME] do_input_ok() <Begin>")
    TRC_MSG(TRC_MRE_IME_SELECT_CANCEL_S, "[MRE][IME] do_input_cancel() <Begin>")
    TRC_MSG(TRC_MRE_IME_SWITCH_POWER_SAVE_MODE, "[MRE][IME] vm_switch_power_saving_mode() <Begin><mode:%d>")

    /*query service:GROUP6*/
    /*gs core
    TRC_MSG(TRC_MMI_GETSRV_ENTRY, "[GS] srv_create_service,clsid =%d,iid=%d")
    TRC_MSG(TRC_MMI_GETSRV_POINTER_NULL, "[GS]srv_create_service:pptr == NULL")
    TRC_MSG(TRC_MMI_GETSRV_NOT_FIND_SRV, "[GS]srv_create_service:i >= SERVICE_REG_ARRAY_SIZE")
    TRC_MSG(TRC_MMI_GETSRV_GET_SRV_POINTER, "[GS]srv pointer = %x")
    TRC_MSG(TRC_MMI_GETSRV_GET_INTERFACE_POINTER, "[GS]interface result = %d")
    TRC_MSG(TRC_MMI_GETSRV_ALLOC_MEM, "[GS]alloc,ptr=%x handle=%d")
    TRC_MSG(TRC_MMI_GETSRV_FREE_MEM, "[GS]free, ptr=%x handle=%d index=%d")
    TRC_MSG(TRC_MMI_GETSRV_FREE_PROXY_MEM, "[GS]free proxy, ptr=%x handle=%d index=%d")
    TRC_MSG(TRC_MMI_GETSRV_CBASE_RELEASE, "[GS]GS_CBase::release")*/
    /*test code
    TRC_MSG(TRC_MMI_GETSRV_TEST_NEW_SERVICE, "[GS]CreateEbookService")
    TRC_MSG(TRC_MMI_GETSRV_TEST_FUNC1, "[GS]CALLCC f1")
    TRC_MSG(TRC_MMI_GETSRV_TEST_FUNC2, "[GS]CALLCC f2")
    TRC_MSG(TRC_MMI_GETSRV_TEST_QUERTY, "[GS]EbookService::queryInterface")
    TRC_MSG(TRC_MMI_GETSRV_TEST_QUERTY_FUNC1, "[GS]EbookService::iid == IID_IA")
    TRC_MSG(TRC_MMI_GETSRV_TEST_QUERTY_FUNC2, "[GS]EbookService::iid == IID_IB") */
	TRC_MSG(TRC_MRE_RES_MAN_PRINT_RES_TABLE, "[MRE] vm_print_res_table : restype=%d, phandle=%d, resid=%d, mtkresid=%d")
	TRC_MSG(TRC_MRE_RES_MAN_SAVE_DATA_PHANDLE_STATE_UNLOAD, "[MRE] vm_res_save_data : now phandle[%d]'s state is unload, get type[%d] resource failed")
	TRC_MSG(TRC_MRE_RES_MAN_HAVE_NOTIFY_ALL_MODULE, "[MRE] vm_res_notify_data_by_process, end. Have notify all module")
	TRC_MSG(TRC_MRE_CAMERA_FAIL_TO_REGISTER_MODULE, "[MRE] Failed to regisiter camera module. Error Code : %d")		
	TRC_MSG(TRC_MRE_CAMERA_NOT_SUPPORT_PREVIEW_IN_MULTI_LAYER, "[MRE] System don't support to preview in mulit GDI layer")
	TRC_MSG(TRC_MRE_CAMERA_CREATE_PREVIEW_RES_FAIL, "[MRE] Failed to create preview resource.")
	TRC_MSG(TRC_MRE_CAMERA_START_PREVIEW_FAIL, "[MRE] Failed to start to preview.")
	TRC_MSG(TRC_MRE_GPS_FAIL_TO_REGISTER_MODULE, "[MRE] Failed to regisiter GPS moudal. Error Code : %d")
	TRC_MSG(TRC_MRE_GPS_RECV_UNKNOWN_EVT, "[MRE] Receive unkown[%d] event.")
	TRC_MSG(TRC_MRE_GPS_NOTIFY_PROCESS_HANDLER, "[MRE] vm_gps_notify_process_handler process_handle=%d,sys_state=%d")
	TRC_MSG(TRC_MRE_GPS_OPEN, "[MRE] vm_gps_open")
	TRC_MSG(TRC_MRE_GPS_OPEN_S_PORT, "[MRE] vm_gps_open s_vm_gps_port = %d")
	TRC_MSG(TRC_MRE_GPS_OPEN_CUR_PROCESS_ID, "[MRE] vm_gps_open cur_process_id = %d")
	TRC_MSG(TRC_MRE_GPS_OPEN_S_HANDLE, "[MRE] vm_gps_open s_vm_gps_handle = %d")
	TRC_MSG(TRC_MRE_GPS_OPEN_SUCCESS, "[MRE] vm_gps_open open success!")
	TRC_MSG(TRC_MRE_GPS_ALREADY_OPEN, "[MRE] vm_gps_open already open!")
	TRC_MSG(TRC_MRE_GPS_SAL_UART_OPEN, "[MRE] vm_sal_gps_uart_open:start")
	TRC_MSG(TRC_MRE_GPS_SAL_UART_OPEN_MALLOC_FAIL, "[MRE] vm_sal_gps_uart_open:malloc faild")
	TRC_MSG(TRC_MRE_GPS_SAL_UART_OPEN_UART_HANDLE, "[MRE] vm_sal_gps_uart_open:uart_handle = %d")
	TRC_MSG(TRC_MRE_GPS_SAL_UART_OPEN_SUCCESS, "[MRE] vm_sal_gps_uart_open:gps open success")
	TRC_MSG(TRC_MRE_GPS_SAL_UART_OPEN_WRONG_HANDLE, "[MRE] vm_sal_gps_uart_open:open faild(uart handle wrong)")
	TRC_MSG(TRC_MRE_GPS_SAL_UART_OPEN_GPS_NOT_VALID, "[MRE] vm_sal_gps_uart_open:GPS is not valid")
	TRC_MSG(TRC_MRE_GPS_SAL_UART_CLOSE_START, "[MRE] vm_sal_gps_uart_close:start")
	TRC_MSG(TRC_MRE_GPS_SAL_UART_CLOSE_END, "[MRE] vm_sal_gps_uart_close:end")
	TRC_MSG(TRC_MRE_SENSOR_SAL_REG_FAIL, "[MRE] vm_reg_all_ext_sensors:Failed to reg \"%s\" sensor.")
	TRC_MSG(TRC_MRE_SENSOR_STOP_FAIL, "[MRE] sensor_mod_evt_proc:Failed \"%s\" stop. ErrorCode = %d")
	TRC_MSG(TRC_MRE_SENSOR_RECV_UNKNOWN_EVT, "[MRE] sensor_mod_evt_proc:Receive unkown [%d] event.")
	TRC_MSG(TRC_MRE_SENSOR_REG_FAIL, "[MRE] Failed to regisiter sensor module. Error Code : %d")
	TRC_MSG(TRC_MRE_SENSOR_SET_NUMERIC_OPTION_FAIL, "[MRE] vm_set_sensor_numeric_option:Failed \"%s\" sensor set numeric option. Error Code = %d.")
	TRC_MSG(TRC_MRE_SENSOR_SET_STRING_OPTION_FAIL, "[MRE] vm_set_sensor_string_option:Failed to set set string option \"%s\" sensor. Error Code = %d.")
	TRC_MSG(TRC_MRE_SENSOR_START_SENSOR_FAIL, "[MRE] vm_start_sensor:Failed to start \"%s\" sensor. Error Code = %d")
	TRC_MSG(TRC_MRE_SENSOR_STOP_SENSOR_FAIL, "[MRE] vm_stop_sensor:Failed to stop \"%s\" sensor. Error Code = %d")
	TRC_MSG(TRC_MRE_VIDEO_REG_FAIL, "[MRE] _vm_reg_video_modual:Failed to regisiter video moudle. Error Code : %d")
	TRC_MSG(TRC_MRE_VIDEO_RECV_UNKNOWN_EVT, "[MRE] vm_video_mod_evt_proc:Receive [%d] event.")
	TRC_MSG(TRC_MRE_VIDEO_FINALIZE_PREPROCESS_RESUME_BG_PLAY, "[MRE] vm_video_finalize_preprocess.......mdi_audio_resume_background_play...")
	TRC_MSG(TRC_MRE_VIDEO_INTERFACE_PREPROCESS_INFO, "[MRE] vm_video_interface_preprocess:vm_pmng_get_current_handle:%d,s_video_struct->processid:%d vm_pmng_is_fg(phandle):%d")
	TRC_MSG(TRC_MRE_VIDEO_HANDLE_ALREADY_USED, "[MRE] vm_video_res_preprocess:VM_RES_TYPE_VIDEO_BIT_HANDLE/VM_RES_TYPE_AUDIO_BIT_HANDLE/VM_RES_TYPE_VIDEO_HANDLE is USED..")
	TRC_MSG(TRC_MRE_VIDEO_PLAY_STREAM_LINK, "[MRE] vm_video_play_stream_from_rtsp_link:url = %s")
	TRC_MSG(TRC_MRE_VIDEO_PLAY_SDP_FILE_NAME, "[MRE] vm_video_play_stream_from_sdp_file:filename = %s")
	TRC_MSG(TRC_MRE_AUDIO_NOTIFY_CALLBACK_PROCESS_INFO, "[MRE] entry vm_audio_notify_callback, process_handle = %d, sys_state = %d")
	TRC_MSG(TRC_MRE_MIDI_NOTIFY_CALLBACK_PROCESS_INFO, "[MRE] entry vm_midi_notify_callback, process_handle = %d, sys_state = %d")
	TRC_MSG(TRC_MRE_RECORD_NOTIFY_CALLBACK_PROCESS_INFO, "[MRE] entry vm_record_notify_callback, process_handle = %d, sys_state = %d")
	TRC_MSG(TRC_MRE_AUDIO_INIT_MODULE, "[MRE] entry vm_init_audio_module")
	TRC_MSG(TRC_MRE_AUDIO_FINAILIZE_MODULE, "[MRE] entry vm_finialize_audio_module")
	TRC_MSG(TRC_MRE_AUDIO_MODULE_PROC_EVT_VALUE, "[MRE] entry vm_audio_mod_evt_proc, and event = %d")
	TRC_MSG(TRC_MRE_AUDIO_REG_FAIL, "[MRE] _vm_reg_audio_module : Failed to regisiter audio module. Error Code : %d")
	TRC_MSG(TRC_MRE_AUDIO_PLAY_FILE_START, "[MRE] entry vm_audio_play_file, and callback addr = %d")
	TRC_MSG(TRC_MRE_AUDIO_PLAY_FILE, "[MRE] entry vm_audio_play_file, filename = %d, f = %d")
	TRC_MSG(TRC_MRE_AUDIO_PLAY_FILE_RET, "[MRE] vm_audio_play_file, return value = %d")
	TRC_MSG(TRC_MRE_RECORD_PAUSE_SUCCESS, "[MRE] vm_record_pause : record pause success")
	TRC_MSG(TRC_MRE_AUDIO_PLAY_FILE_EX_START, "[MRE] entry vm_audio_play_file_ex, start_time = %d, and callback addr = %d")
	TRC_MSG(TRC_MRE_AUDIO_PLAY_FILE_EX_RES_HANDLE, "[MRE] entry vm_audio_play_file_ex, and audio_res_handle = %d")
	TRC_MSG(TRC_MRE_AUDIO_SAL_PLAY_FILE_EX_FAIL, "[MRE] vm_sal_audio_play_file_ex, play failed.")
	TRC_MSG(TRC_MRE_AUDIO_PLAY_FILE_EX_RET, "[MRE] vm_audio_play_file_ex, return value = %d")
	TRC_MSG(TRC_MRE_AUDIO_PLAY_BYTES_FORMAT_NOT_SUPPORT, "[MRE] vm_audio_play_bytes, format not VM_FORMAT_MP3 or VM_FORMAT_AAC")
	TRC_MSG(TRC_MRE_AUDIO_PLAY_BYTES_START_TIME_AND_DURATION, "[MRE] vm_audio_play_bytes, start_time = %d, duration = %d")
	TRC_MSG(TRC_MRE_AUDIO_PLAY_BYTES_PREPROCESS_FAIL, "[MRE] vm_audio_play_bytes, preprocess failed.")
	TRC_MSG(TRC_MRE_AUDIO_PLAY_BYTES_RET, "[MRE] vm_audio_play_bytes, return value = %d")
	TRC_MSG(TRC_MRE_AUDIO_PAUSE, "[MRE] entry vm_audio_pause")
	TRC_MSG(TRC_MRE_AUDIO_RESUME, "[MRE] entry vm_audio_resume")
	TRC_MSG(TRC_MRE_AUDIO_STOP, "[MRE] entry vm_audio_stop")
	TRC_MSG(TRC_MRE_AUDIO_STOP_AUDIO_COUNT_NOT_ENOUGH, "[MRE] vm_audio_stop,audio_count<=0")
	TRC_MSG(TRC_MRE_AUDIO_STOP_SUCCESS, "[MRE] vm_audio_stop success,will vm_res_release_data = %d")
	TRC_MSG(TRC_MRE_AUDIO_STOP_RET, "[MRE] vm_audio_stop return")
	TRC_MSG(TRC_MRE_AUDIO_CALLBACK_INFO, "[MRE] vm_audio_callback  : result=%d,audio_callback=%d")
	TRC_MSG(TRC_MRE_AUDIO_CALLBACK_HANDLE_COUNT, "[MRE] vm_audio_callback :audio handle count = %d")
	TRC_MSG(TRC_MRE_RELEASE_MIDI_RESOURCE, "[MRE] entry vm_release_midi_resource, *res_handle = %d")
	TRC_MSG(TRC_MRE_MIDI_PLAY_BY_BYTES_INFO, "[MRE] entry vm_midi_play_by_bytes, and midibuf = %d, len = %d, repeat = %d, f = %d")
	TRC_MSG(TRC_MRE_MIDI_PLAY_BY_BYTES_RET, "[MRE] exit vm_midi_play_by_bytes, and result = %d")
	TRC_MSG(TRC_MRE_MIDI_PLAY_BY_BYTES_EX_INFO, "[MRE] entry vm_midi_play_by_bytes, and midibuf = %d, len = %d, start_timer = %d, repeat = %d, f = %d")
	TRC_MSG(TRC_MRE_MIDI_PAUSE, "[MRE] entry vm_midi_pause, and handle = %d")
	TRC_MSG(TRC_MRE_MIDI_RESUME, "[MRE] entry vm_midi_resume, and handle = %d")
	TRC_MSG(TRC_MRE_MIDI_STOP, "[MRE] entry vm_midi_stop, and handle = %d")
	TRC_MSG(TRC_MRE_MIDI_GET_TIME, "[MRE] entry vm_midi_get_time, and handle = %d")
	TRC_MSG(TRC_MRE_MIDI_STOP_RET, "[MRE] exit vm_midi_stop")
	TRC_MSG(TRC_MRE_MIDI_STOP_ALL, "[MRE] entry vm_midi_stop_all")
	TRC_MSG(TRC_MRE_MIDI_CALLBACK_INFO, "[MRE] entry vm_midi_callback, handle = %d, result = %d")
	TRC_MSG(TRC_MRE_MIDI_CALLBACK_FUNC_ADDR, "[MRE] midi_callback = %d")
	TRC_MSG(TRC_MRE_MIDI_CALLBACK_RET, "[MRE] midi_callback return")
	TRC_MSG(TRC_MRE_RECORD_EVENT_RESP_RESULT, "[MRE] entry vm_record_event_response :  result=%d")
	TRC_MSG(TRC_MRE_RECORD_EVENT_RESP_CALLBACK_ADDR, "[MRE] In vm_record_event_response :  vm_record_cb=%d")
	TRC_MSG(TRC_MRE_RECORD_START_MALLOC_TEMP_FN_FAIL, "[MRE] vm_record_start_remap , malloc temp_fn no space")
	TRC_MSG(TRC_MRE_RECORD_START_MALLOC_WPATH_FAIL, "[MRE] vm_record_start_remap , malloc app_wpath no space")
	TRC_MSG(TRC_MRE_RECORD_START_EXEC_FILE_FAIL, "[MRE] vm_record_start_remap , vm_get_exec_filename return 0")
	TRC_MSG(TRC_MRE_RECORD_START_FULL_FILE_NAME, "[MRE] vm_record_start_remap record file : %s")
	TRC_MSG(TRC_MRE_RECORD_PAUSE, "[MRE] entry vm_record_pause.")
	TRC_MSG(TRC_MRE_RECORD_PAUSE_STATUS_VALUE, "[MRE] vm_record_pause, and status = %d")
	TRC_MSG(TRC_MRE_RECORD_SAL_PAUSE_SUCCESS, "[MRE] vm_record_pause success")
	TRC_MSG(TRC_MRE_RECORD_SAL_PAUSE_FAIL, "[MRE] vm_record_pause fail")
	TRC_MSG(TRC_MRE_RECORD_RESUME, "[MRE] entry vm_record_resume.")
	TRC_MSG(TRC_MRE_RECORD_SAL_RESUME_SUCCESS, "[MRE] vm_record_resume : record resume success")
	TRC_MSG(TRC_MRE_RECORD_SAL_RESUME_FAIL, "[MRE] vm_record_resume : record resume fail")
	TRC_MSG(TRC_MRE_RECORD_RESUME_RET, "[MRE] exit vm_record_resume, and returnval = %d")
	TRC_MSG(TRC_MRE_RECORD_STOP, "[MRE] entry vm_record_stop.")
	TRC_MSG(TRC_MRE_RECORD_SAL_STOP_SUCCESS, "[MRE] vm_record_stop : record stop success")
	TRC_MSG(TRC_MRE_RECORD_SAL_STOP_FAIL, "[MRE] vm_record_stop : record stop fail")
	TRC_MSG(TRC_MRE_RECORD_STOP_RET, "[MRE] exit vm_record_stop, and returnval = %d")
	TRC_MSG(TRC_MRE_AUDIO_PREPRO_PLAY_AUD_TYPE, "[MRE] entry vm_audio_preprocess_play, and audio_type = %d")
	TRC_MSG(TRC_MRE_AUDIO_CUR_BG_USE_FG, "[MRE] current_handle is BG, use_audio_handle is FG.")
	TRC_MSG(TRC_MRE_AUDIO_PREPRO_PLAY_RET, "[MRE] exit vm_audio_preprocess_play, and result = %d")
	TRC_MSG(TRC_MRE_MIDI_PREPRO_PLAY_AUD_TYPE, "[MRE] entry vm_midi_preprocess_play, and audio_type = %d")
	TRC_MSG(TRC_MRE_MIDI_PREPRO_PLAY_CUR_PRO_BG, "[MRE] vm_midi_preprocess_play,current process is BG.")
	TRC_MSG(TRC_MRE_MIDI_PREPRO_PLAY_USE_PRO_BG, "[MRE] vm_midi_preprocess_play,use audio process is BG.")
	TRC_MSG(TRC_MRE_MIDI_PREPRO_PLAY_OPEN_COUNT, "[MRE] vm_midi_preprocess_play,midi_count = %d")
	TRC_MSG(TRC_MRE_MIDI_PREPRO_PLAY_RET, "[MRE] exit vm_midi_preprocess_play, and result = %d")
	TRC_MSG(TRC_MRE_RECORD_CUR_PRO_BG, "[MRE] vm_record_preprocess, current process is BG")
	TRC_MSG(TRC_MRE_RECORD_RESOURCE_NOT_ENOUGH, "[MRE] vm_record_preprocess, resource not enough")
	TRC_MSG(TRC_MRE_BIT_AUDIO_SAL_CALLBACK_INFO, "[MRE] entry vm_sal_bitstream_audio_callback, and handle = %d, result = %d")
	TRC_MSG(TRC_MRE_BIT_AUDIO_SAL_OPEN_INFO, "[MRE] sal_bitstream_cb = %d")
	TRC_MSG(TRC_MRE_AUDIO_SAL_PLAY_FILE, "[MRE] entry vm_sal_audio_play_file,filename pointer is %d")
	TRC_MSG(TRC_MRE_AUDIO_SAL_PLAY_FILE_LENGTH_ERR, "[MRE] vm_sal_audio_play_file : the length of filename is error")
	TRC_MSG(TRC_MRE_AUDIO_SAL_PLAY_FILE_MALLOC_FAIL, "[MRE] vm_sal_audio_play_file : malloc the remap_file_name fail")
	TRC_MSG(TRC_MRE_AUDIO_SAL_PLAY_FILE_REMAP_USR_DISK_ERR, "[MRE] vm_sal_audio_play_file : _vm_remap_usr_disk error")
	TRC_MSG(TRC_MRE_AUDIO_SAL_PLAY_FILE_MDI_RET, "[MRE] vm_sal_audio_play_file : mdi_audio_play_file_portion_with_vol_path return %d")
	TRC_MSG(TRC_MRE_AUDIO_SAL_PLAY_FILE_EX, "[MRE] entry vm_sal_audio_play_file_ex,filename pointer is %d")
	TRC_MSG(TRC_MRE_AUDIO_SAL_PLAY_FILE_EX_LENGTH_ERR, "[MRE] vm_sal_audio_play_file_ex : the length of filename is error")
	TRC_MSG(TRC_MRE_AUDIO_SAL_PLAY_FILE_EX_MALLOC_FAIL, "[MRE] vm_sal_audio_play_file : malloc the remap_file_name fail")
	TRC_MSG(TRC_MRE_AUDIO_SAL_PLAY_FILE_EX_REMAP_USR_DISK_ERR, "[MRE] vm_sal_audio_play_file : _vm_remap_usr_disk error")
	TRC_MSG(TRC_MRE_AUDIO_SAL_PLAY_FILE_EX_MDI_RET, "[MRE] vm_sal_audio_play_file : mdi_audio_play_file_portion_with_vol_path return %d")
	TRC_MSG(TRC_MRE_AUDIO_SAL_PLAY_BYTES, "[MRE] entry vm_sal_audio_play_bytes.")
	TRC_MSG(TRC_MRE_AUDIO_SAL_PLAY_BYTES_MDI_RET, "[MRE] vm_sal_audio_play_bytes : mdi_audio_play_string_portion_with_vol_path return %d")
	TRC_MSG(TRC_MRE_AUDIO_SAL_PAUSE, "[MRE] entry vm_sal_audio_pause.")
	TRC_MSG(TRC_MRE_AUDIO_SAL_PAUSE_MDI_RET, "[MRE] vm_sal_audio_pause : mdi_audio_pause return %d")
	TRC_MSG(TRC_MRE_AUDIO_SAL_RESUME, "[MRE] entry vm_sal_audio_resume.")
	TRC_MSG(TRC_MRE_AUDIO_SAL_RESUME_MDI_RET, "[MRE] vm_sal_audio_resume : mdi_audio_resume return %d")
	TRC_MSG(TRC_MRE_AUDIO_SAL_STOP, "[MRE] entry vm_sal_audio_stop, vm_audio_type = %d")
	TRC_MSG(TRC_MRE_AUDIO_SAL_STOP_MDI_RET, "[MRE] entry vm_sal_audio_stop, mdi_stop_XX return = %d")
	TRC_MSG(TRC_MRE_AUDIO_SAL_DURATION, "[MRE] entry vm_sal_audio_duration,filename pointer is %d")
	TRC_MSG(TRC_MRE_AUDIO_SAL_DURATION_LENGTH_ERR, "[MRE] vm_sal_audio_duration : the length of filename is error")
	TRC_MSG(TRC_MRE_AUDIO_SAL_DURATION_MALLOC_FAIL, "[MRE] vm_sal_audio_duration : malloc the remap_file_name fail")
	TRC_MSG(TRC_MRE_AUDIO_SAL_DURATION_REMAP_USR_DISK_ERR, "[MRE] vm_sal_audio_duration : _vm_remap_usr_disk error")
	TRC_MSG(TRC_MRE_AUDIO_SAL_DURATION_MDI_INFO, "[MRE] vm_sal_audio_duration : mdi_audio_get_duration return %d, duration = %d")
	TRC_MSG(TRC_MRE_AUDIO_SAL_INTERRUPT_CALLBACK, "[MRE] entry vm_sal_audio_interrupt_callback, and result = %d")
	TRC_MSG(TRC_MRE_AUDIO_SAL_CALLBACK_INFO, "[MRE] entry vm_sal_audio_callback, result = %d, audio_callback = %d")
	TRC_MSG(TRC_MRE_MIDI_SAL_PLAY_GET_RES_ERROR, "[MRE] vm_sal_midi_play : vm_sal_midi_get_resource rawdata is NULL")
	TRC_MSG(TRC_MRE_MIDI_SAL_PLAY_GET_RES_ERROR_1, "[MRE] vm_midi_play : user_get_resource_fp rawdata is NULL")
	TRC_MSG(TRC_MRE_MIDI_SAL_PLAY_GET_RES_ERROR_2, "[MRE] vm_midi_play : user_get_resource_fp no define.")
	TRC_MSG(TRC_MRE_MIDI_SAL_PLAY_MDI_RET, "[MRE] vm_sal_midi_play :  mdi_audio_mma_play return %d")
	TRC_MSG(TRC_MRE_MIDI_SAL_PLAY_GET_RES_ERROR_3, "[MRE] vm_sal_midi_play error : mdi_audio_mma_open_string return %d")
	TRC_MSG(TRC_MRE_MIDI_SAL_PLAY_EX_GET_RES_ERROR, "[MRE] vm_sal_midi_play_ex : vm_sal_midi_get_resource rawdata is NULL")
	TRC_MSG(TRC_MRE_MIDI_SAL_PLAY_EX_GET_RES_ERROR_1, "[MRE] vm_sal_midi_play_ex : user_get_resource_fp rawdata is NULL")
	TRC_MSG(TRC_MRE_MIDI_SAL_PLAY_EX_GET_RES_ERROR_2, "[MRE] vm_sal_midi_play_ex : user_get_resource_fp no define.")
	TRC_MSG(TRC_MRE_MIDI_SAL_PLAY_EX_MDI_RET, "[MRE] vm_sal_midi_play_ex :  mdi_audio_mma_play return %d")
	TRC_MSG(TRC_MRE_MIDI_SAL_PLAY_EX_GET_RES_ERROR_3, "[MRE] vm_sal_midi_play_ex error : mdi_audio_mma_open_string return %d")
	TRC_MSG(TRC_MRE_MIDI_SAL_PLAY_BYTES_MDI_RET, "[MRE] vm_sal_midi_play_by_bytes :mdi_audio_mma_play return %d")
	TRC_MSG(TRC_MRE_MIDI_SAL_PLAY_BYTES_GET_RES_ERROR_3, "[MRE] vm_midi_play_by_bytes error : mdi_audio_mma_open_string return %d")
	TRC_MSG(TRC_MRE_MIDI_SAL_PLAY_BYTES_EX_MDI_RET, "[MRE] vm_sal_midi_play_by_bytes_ex :mdi_audio_mma_play return %d")
	TRC_MSG(TRC_MRE_MIDI_SAL_PLAY_BYTES_EX_GET_RES_ERROR_3, "[MRE] vm_sal_midi_play_by_bytes_ex error : mdi_audio_mma_open_string return %d")
	TRC_MSG(TRC_MRE_MIDI_SAL_STOP, "[MRE] vm_sal_midi_stop will stop midi play, handle=%d")
	TRC_MSG(TRC_MRE_MIDI_SAL_STOP_MDI_RET_0, "[MRE] vm_sal_midi_stop : mdi_audio_mma_stop ret=%d")
	TRC_MSG(TRC_MRE_MIDI_SAL_STOP_MDI_RET_1, "[MRE] vm_sal_midi_stop : mdi_audio_mma_close ret=%d")
	TRC_MSG(TRC_MRE_MIDI_SAL_CALLBACK_INFO, "[MRE] vm_sal_midi_callback : handle=%d, result=%d, sal_midi_callback = %d")
	TRC_MSG(TRC_MRE_MIDI_SAL_CALLBACK_MDI_RET, "[MRE] vm_sal_midi_callback : mdi_audio_mma_close ret = %d")
	TRC_MSG(TRC_MRE_MIDI_SAL_CALLBACK_RET, "[MRE] vm_sal_midi_callback return")
	TRC_MSG(TRC_MRE_MIDI_SAL_INTERRUPT_CALLBACK, "[MRE] entry vm_sal_midi_interrupt_callback, and result = %d")
	TRC_MSG(TRC_MRE_SAL_SET_VOL, "[MRE] vm_sal_set_volume: current_volume = %d, volume = %d")
	TRC_MSG(TRC_MRE_AUDIO_SAL_SUSPEND_BG_PLAY, "[MRE] entry vm_sal_audio_suspend_background_play")
	TRC_MSG(TRC_MRE_AUDIO_SAL_SUSPEND_BG_PLAY_MDI_RET, "[MRE] vm_sal_audio_suspend_background_play : mdi_audio_is_background_play_suspended return FALSE")
	TRC_MSG(TRC_MRE_AUDIO_SAL_SUSPEND_BG_PLAY_HAS_REG, "[MRE] vm_sal_audio_suspend_background_play : midi_interrupt_register = %d")
	TRC_MSG(TRC_MRE_AUDIO_SAL_RESUME_BG_PLAY_MDI_RET, "[MRE] vm_sal_audio_resume_background_play : mdi_audio_is_background_play_suspended return TRUE")
	TRC_MSG(TRC_MRE_AUDIO_SAL_RESUME_BG_PLAY_HAS_REG, "[MRE] vm_sal_audio_resume_background_play : midi_interrupt_register = %d")
	TRC_MSG(TRC_MRE_SAL_SET_KEY_TONE_STATE, "[MRE] vm_sal_set_key_tone_state key_tone_state= %d")
	TRC_MSG(TRC_MRE_RECORD_SAL_CALLBACK_INFO, "[MRE] entry vm_sal_record_callback, and result = %d")
	TRC_MSG(TRC_MRE_RECORD_SAL_START, "[MRE] file_format = %d")
	TRC_MSG(TRC_MRE_BITSTREAM_RELEASE_AUDIO_RES, "[MRE] vm_release_bitstream_audio_resource : bitstream_handle = %d, bitstream_start = %d")
	TRC_MSG(TRC_MRE_BITSTREAM_RELEASE_AUDIO_RES_RET_0, "[MRE] vm_release_bitstream_audio_resource : vm_sal_bitstream_audio_stop return %d")
	TRC_MSG(TRC_MRE_BITSTREAM_RELEASE_AUDIO_RES_RET_1, "[MRE] vm_release_bitstream_audio_resource : vm_bitstream_audio_close return %d")
	TRC_MSG(TRC_MRE_BITSTREAM_AUDIO_NOTIFY_CB_INFO, "[MRE] entry vm_bitstream_audio_notify_callback : sys_state = %d, process_handle = %d")
	TRC_MSG(TRC_MRE_BITSTREAM_AUDIO_MOD_PROC_INFO, "[MRE] entry vm_bitstream_audio_mod_evt_proc, and event = %d")
	TRC_MSG(TRC_MRE_BITSTREAM_AUDIO_REG_FAIL, "[MRE] _vm_reg_bitsteam_audio_module : Failed to regisiter bitstream audio module. Error Code : %d")
	TRC_MSG(TRC_MRE_BITSTREAM_AUDIO_PREPRO_PLAY, "[MRE] entry vm_bitstream_audio_preprocess_play, and audio_type = %d.")
	TRC_MSG(TRC_MRE_BITSTREAM_AUDIO_PREPRO_PLAY_RET, "[MRE] exit vm_bitstream_audio_preprocess_play, and result = %d")
	TRC_MSG(TRC_MRE_BITSTREAM_AUDIO_CB_INFO, "[MRE] entry vm_bitstream_audio_callback, and handle = %d, result = %d, cb = %d")
	TRC_MSG(TRC_MRE_BITSTREAM_AUDIO_OPEN, "[MRE] entry vm_bitstream_audio_open")
	TRC_MSG(TRC_MRE_BITSTREAM_AUDIO_OPEN_RET, "[MRE] exit vm_bitstream_audio_open and result = %d")
	TRC_MSG(TRC_MRE_BITSTREAM_AUDIO_CLOSE, "[MRE] entry vm_bitstream_audio_close")
	TRC_MSG(TRC_MRE_BITSTREAM_AUDIO_CLOSE_RET, "[MRE] exit vm_bitstream_audio_close and result = %d")
	TRC_MSG(TRC_MRE_BITSTREAM_AUDIO_GET_BUF_STATUS, "[MRE] entry vm_sal_bitstream_audio_get_buffer_status")
	TRC_MSG(TRC_MRE_BITSTREAM_AUDIO_GET_BUF_STATUS_RET, "[MRE] vm_sal_bitstream_audio_get_buffer_status return %d")
	TRC_MSG(TRC_MRE_BITSTREAM_AUDIO_PUT_DATA, "[MRE] vm_bitstream_audio_put_data : handle = %d, buffer= %d, buffer_size = %d, written = %d")
	TRC_MSG(TRC_MRE_BITSTREAM_AUDIO_PUT_FRAME, "[MRE] vm_bitstream_audio_put_frame : handle = %d, buffer= %d, buffer_size = %d, timestamp = %d")
	TRC_MSG(TRC_MRE_BITSTREAM_AUDIO_START, "[MRE] vm_bitstream_audio_start : handle = %d, para = %d, bitstream_start = %d")
	TRC_MSG(TRC_MRE_BITSTREAM_AUDIO_START_NOT_FG, "[MRE] vm_bitstream_audio_start : current process not FG")
	TRC_MSG(TRC_MRE_BITSTREAM_AUDIO_START_RET, "[MRE] exit vm_bitstream_audio_start and result = %d.")
	TRC_MSG(TRC_MRE_BITSTREAM_AUDIO_STOP, "[MRE] vm_bitstream_audio_stop : handle = %d, bitstream_start= %d.")
	TRC_MSG(TRC_MRE_BITSTREAM_AUDIO_STOP_RET, "[MRE] vm_bitstream_audio_stop return %d")
	TRC_MSG(TRC_MRE_BITSTREAM_VIDEO_REG_FAIL, "[MRE] Failed to regisiter bitstream video moudle. Error Code : %d")
	TRC_MSG(TRC_MRE_BITSTREAM_VIDEO_MOD_PROC, "[MRE] bitstream video module recv event = %d")
	TRC_MSG(TRC_MRE_BITSTREAM_VIDEO_RELEASE_CB_INFO, "[MRE] vm_bitstream_video_release_callback: process_handle = %d ,processid = %d,sys_state = %d")
	TRC_MSG(TRC_MRE_BITSTREAM_VIDEO_FINIALIZE, "[MRE] entry vm_bitstream_video_finalize")
	/*****************************************************************************************************************
     * MRE LAUNCH APP trace for MRE monitor begin trace group 10
  *****************************************************************************************************************/
  TRC_MSG(TRC_MRE_LAUNCH_AUTO_1, "[launch]Now checking t card, %c:\\autostart.txt file")
  TRC_MSG(TRC_MRE_LAUNCH_AUTO_2, "[launch]Now checking phone card, %c:\\autostart.txt file")
  TRC_MSG(TRC_MRE_LAUNCH_AUTO_3, "[launch]open fail,maybe file not exist")
  TRC_MSG(TRC_MRE_LAUNCH_AUTO_4, "[launch]alloc %d size memory fail 1,auto start return")
  TRC_MSG(TRC_MRE_LAUNCH_AUTO_5, "[launch]fs_open error,error code is %d,auto start return")
  TRC_MSG(TRC_MRE_LAUNCH_AUTO_6, "[launch]alloc %d size memory fail 2,auto start return")
  TRC_MSG(TRC_MRE_LAUNCH_AUTO_7, "[launch]Now launch this file,%s")
  TRC_MSG(TRC_MRE_LAUNCH_AUTO_8, "[launch]launch file path is NULL,launch fail")
  TRC_MSG(TRC_MRE_LAUNCH_AUTO_9, "[launch]srv_mre_load_core result:%d")
  TRC_MSG(TRC_MRE_LAUNCH_AUTO_10, "[launch]mre_running flag:%d,mre memory config is %d")
  TRC_MSG(TRC_MRE_LAUNCH_AUTO_11, "[launch]mre_running flag:%d,start mre enviroment success")
  TRC_MSG(TRC_MRE_LAUNCH_AUTO_12, "[launch]fail to launch1.")
  TRC_MSG(TRC_MRE_LAUNCH_AUTO_13, "[launch]app is background running now.")
  TRC_MSG(TRC_MRE_LAUNCH_AUTO_14, "[launch]bring app from bg to foreground error:%d.")
  TRC_MSG(TRC_MRE_LAUNCH_AUTO_15, "[launch]vm_pmng_set_fg,return 1,file path is null")
  TRC_MSG(TRC_MRE_LAUNCH_AUTO_16, "[launch]vm_pmng_set_fg,return 2,pcb not find")
  TRC_MSG(TRC_MRE_LAUNCH_AUTO_17, "[launch]bring app from bg to fg result:%d")
  TRC_MSG(TRC_MRE_LAUNCH_AUTO_18, "[launch]vm_execute's result:%d")
  TRC_MSG(TRC_MRE_LAUNCH_AUTO_19, "[launch]update has checked new launch file")
  TRC_MSG(TRC_MRE_LAUNCH_AUTO_20, "[launch]vm_execute_int error1")
  TRC_MSG(TRC_MRE_LAUNCH_AUTO_21, "[launch]vm_execute_int app's engine version:%d,not match any mre engine version")
  TRC_MSG(TRC_MRE_LAUNCH_AUTO_22, "[launch]vm_start_mre_app:alloc kernel memory fail")
  TRC_MSG(TRC_MRE_LAUNCH_AUTO_23, "[launch]vm_start_mre_app:read preload info fail")
  TRC_MSG(TRC_MRE_LAUNCH_AUTO_24, "[launch]check preload info:fullFileName error")
  TRC_MSG(TRC_MRE_LAUNCH_AUTO_25, "[launch]check preload info:app's resolution:%d * %d,target:%d * %d,not match")
  TRC_MSG(TRC_MRE_LAUNCH_AUTO_26, "[launch]check preload info:app need venus engine,but target not define")
  TRC_MSG(TRC_MRE_LAUNCH_AUTO_27, "[launch]vm_start_app_check check fail 1")
  TRC_MSG(TRC_MRE_LAUNCH_AUTO_28, "[launch]app require memory:%d,others used memory:%d,mre config memroy:%d")
  TRC_MSG(TRC_MRE_LAUNCH_AUTO_29, "[launch]reach max app run at the same time:%d")
  TRC_MSG(TRC_MRE_LAUNCH_AUTO_30, "[launch]alloc kernel memory to store app name fail")
  TRC_MSG(TRC_MRE_LAUNCH_AUTO_31, "[launch]get name info error,name size:%d")
  TRC_MSG(TRC_MRE_LAUNCH_AUTO_32, "[launch]alloc kernel memory fail to store name list fail1")
  TRC_MSG(TRC_MRE_LAUNCH_AUTO_33, "[launch]alloc kernel memory fail to store name list fail2")
  TRC_MSG(TRC_MRE_LAUNCH_AUTO_34, "[launch]alloc app memory from asm fail,wait for ASM to release memory")
  TRC_MSG(TRC_MRE_LAUNCH_AUTO_35, "[launch]wait for ASM to release memory success,launch app again")
  TRC_MSG(TRC_MRE_LAUNCH_AUTO_36, "[launch]vm_preload_app error,error code:%d")
  //TRC_MSG(TRC_MRE_LAUNCH_AUTO_37, "[launch]vm_start_mre_preload_app,alloc kernel memory fail")
  //TRC_MSG(TRC_MRE_LAUNCH_AUTO_38, "[launch]vm_start_app_check check fail 2")
  TRC_MSG(TRC_MRE_LAUNCH_AUTO_39, "[launch]vm_pmng_create_process_from_preload_info,error 1")
  TRC_MSG(TRC_MRE_LAUNCH_AUTO_40, "[launch]vm_pmng_create_process_from_preload_info,app loaded from Tcard")
  TRC_MSG(TRC_MRE_LAUNCH_AUTO_41, "[launch]vm_alloc_pcb,app's handle is %d,app loaded from Tcard:%d,app support bg:%d")
  TRC_MSG(TRC_MRE_LAUNCH_AUTO_42, "[launch]vm_alloc_pcb,alloc pcb memory from kernel fail")
  TRC_MSG(TRC_MRE_LAUNCH_AUTO_43, "[launch]vm_pmng_create_process_from_preload_info,alloc pcb fail")
  TRC_MSG(TRC_MRE_LAUNCH_AUTO_44, "[launch]vm_load_preload_app fail,ret:%d")
  TRC_MSG(TRC_MRE_LAUNCH_AUTO_45, "[launch]vm_pmng_create_process,open file fail ret:%d")
  TRC_MSG(TRC_MRE_LAUNCH_AUTO_46, "[launch]vm_pmng_create_process,create adm fail")
  TRC_MSG(TRC_MRE_LAUNCH_AUTO_47, "[launch]vm_exec_process fail,ret:%d")
  TRC_MSG(TRC_MRE_LAUNCH_AUTO_48, "[launch]vm_exec_process,pcb is NULL")
  TRC_MSG(TRC_MRE_LAUNCH_AUTO_49, "[launch]send_sysevt_msg1,app's handle is %d,msg is %d,param is %d")
  TRC_MSG(TRC_MRE_LAUNCH_AUTO_50, "[launch]send_sysevt_msg2,app's handle is %d,msg is %d,param is %d")
  TRC_MSG(TRC_MRE_LAUNCH_AUTO_51, "[launch]vm_exec_process 1,executing PID[%d] exit in loading")
  TRC_MSG(TRC_MRE_LAUNCH_AUTO_52, "[launch]vm_exec_process 2,executing PID[%d] exit in loading")
  TRC_MSG(TRC_MRE_LAUNCH_AUTO_53, "[launch]vm_exec_process 3,executing PID[%d] exit in loading")
  TRC_MSG(TRC_MRE_LAUNCH_AUTO_54, "[launch]vm_start_mre_preload_app,get kernel memory fail")
  TRC_MSG(TRC_MRE_LAUNCH_AUTO_55, "[launch]vm_start_mre_preload_app,check app fail:%d")
  TRC_MSG(TRC_MRE_LAUNCH_AUTO_56, "[launch]vm_start_mre_preload_app,reach max app run at the same time:%d")
  TRC_MSG(TRC_MRE_LAUNCH_AUTO_57, "[launch]vm_start_mre_preload_app,create process ret:%d")
  TRC_MSG(TRC_MRE_LAUNCH_AUTO_58, "[launch]vm_start_mre_app ret:%d")
  TRC_MSG(TRC_MRE_LAUNCH_AUTO_59, "[launch]vm_execute_int ret:%d")
  TRC_MSG(TRC_MRE_LAUNCH_AUTO_60, "[launch]vm_pmng_create_process,error 1")
  TRC_MSG(TRC_MRE_LAUNCH_AUTO_61, "[launch]vm_pmng_create_process,app format error: %d")
  TRC_MSG(TRC_MRE_LAUNCH_AUTO_62, "[launch]vm_pmng_create_process,get asm index error: %d")
  TRC_MSG(TRC_MRE_LAUNCH_AUTO_63, "[launch]vm_pmng_create_process,app loaded from Tcard")
  TRC_MSG(TRC_MRE_LAUNCH_AUTO_64, "[launch]vm_pmng_create_process,alloc pcb fail")
  TRC_MSG(TRC_MRE_LAUNCH_AUTO_65, "[launch]vm_pmng_create_process,get app id fail")
  TRC_MSG(TRC_MRE_LAUNCH_AUTO_66, "[launch]vm_pmng_create_process,mre fun list is NULL")
  TRC_MSG(TRC_MRE_LAUNCH_AUTO_67, "[launch]vm_pmng_create_process,load error,ret:%d")
  TRC_MSG(TRC_MRE_LAUNCH_AUTO_68, "[launch]vm_pmng_create_process,open fail ret1:%d")
  TRC_MSG(TRC_MRE_LAUNCH_AUTO_69, "[launch]vm_pmng_create_process,create adm fail1")
  TRC_MSG(TRC_MRE_LAUNCH_AUTO_70, "[launch]vm_pmng_create_process(vm_exec_process),ret:%d")
  TRC_MSG(TRC_MRE_LAUNCH_AUTO_71, "[launch]vm_start_mre_envirment_ex,mre_running:%d")
  TRC_MSG(TRC_MRE_LAUNCH_AUTO_72, "[launch]vm_start_mre_envirment_ex,resource init fail")
  TRC_MSG(TRC_MRE_LAUNCH_AUTO_73, "[launch]vm_start_mre_envirment_ex,notify module fail")
  TRC_MSG(TRC_MRE_LAUNCH_AUTO_74, "[launch]vm_start_mre_envirment_ex,mre version is %s")
  TRC_MSG(TRC_MRE_LAUNCH_AUTO_75, "[launch]vm_start_mre_envirment_ex end,mre_running is %d")
  TRC_MSG(TRC_MRE_LAUNCH_AUTO_76, "[launch]vm_stop_mre_envirment_ex,mre_running is %d")
  TRC_MSG(TRC_MRE_LAUNCH_AUTO_77, "[launch]vm_stop_mre_envirment_ex end,mre_running is %d")
  TRC_MSG(TRC_MRE_LAUNCH_AUTO_78, "[launch]srv_mre_appmgr_bootup_iot_autostart_hdlr in save mode")
  /*****************************************************************************************************************
     * MRE LAUNCH APP trace for MRE monitor end
  *****************************************************************************************************************/
  /*****************************************************************************************************************
     * MRE SYSTEM trace
     *****************************************************************************************************************/
	/* Group 2 trace - MMI_MRE_TRC_G2_SYS */
    //TRC_MSG(TRC_MRE_SYS_START_ENV, "[MRE]vm_start_mre_envirment ------- [start] vam_cb=[0x%x], state=[%d], mre_running=[%d]")
    TRC_MSG(TRC_MRE_SYS_START_ENV_ERR, "[MRE]vm_start_mre_envirment Error line=[%d] error=[%d]")
    //TRC_MSG(TRC_MRE_SYS_START_ENV_ADM_ID, "[MRE]vm_start_mre_envirment MRE CORE ADM ID = [%d]")
    //TRC_MSG(TRC_MRE_SYS_START_ENV_VER, "[MRE]vm_start_mre_envirment version = [%d]")
    //TRC_MSG(TRC_MRE_SYS_START_ENV_VAM_CB, "[MRE]vm_start_mre_envirment vam_callback = [0x%x]")
    //TRC_MSG(TRC_MRE_SYS_START_ENV_END, "[MRE]vm_start_mre_envirment ------- [end]")


    //TRC_MSG(TRC_MRE_SYS_STOP_ENV, "[MRE]vm_stop_mre_envirment ------- [start] mre_running=[%d]")
    //TRC_MSG(TRC_MRE_SYS_STOP_ENV_END, "[MRE]vm_stop_mre_envirment ------- [end]")
    
    TRC_MSG(TRC_MRE_SYS_DEL_CB, "[MRE]vm_mre_screen_delete_callback_wrap ------- [start], param=[0x%x]")
    TRC_MSG(TRC_MRE_SYS_DEL_CB_END, "[MRE]vm_mre_screen_delete_callback_wrap ------- [end]")
    TRC_MSG(TRC_MRE_SYS_BACK_HISTORY, "[MRE]vm_go_back_host_platform_history ------- [start]")
    TRC_MSG(TRC_MRE_SYS_BACK_HISTORY_GO, "[MRE]vm_go_back_host_platform_history ----will gobackhistory")
    TRC_MSG(TRC_MRE_SYS_BACK_HISTORY_END, "[MRE]vm_go_back_host_platform_history ------- [end]")

    //TRC_MSG(TRC_MRE_SYS_START_APP, "[MRE]vm_start_mre_app fileName=[0x%x] vam_cb=[0x%x]")
    //TRC_MSG(TRC_MRE_SYS_START_APP_END, "[MRE]vm_start_mre_app line=[%d] Error=[%d]")


    TRC_MSG(TRC_MRE_SYS_ERR_NO_MEM, "[MRE]Not enough memory. line=[%d] size=[%d]")   


    TRC_MSG(TRC_MRE_PMNG_INIT, "[MRE]vm_pmng_init. current r9 = [%d]")   
    TRC_MSG(TRC_MRE_PMNG_CREATE_PROCESS, "[MRE] vm_pmng_create_process: lerr=%d, info=%d, ret=%d")
    //TRC_MSG(TRC_MRE_PMNG_CREATE_OPEN,    "[MRE] vm_pmng_create_process: Can't open executable file")
    
    TRC_MSG(TRC_MSG_LDR_UNZIP,        "[MRE] vm_pmng_unzip: source=%d -> target=%d, uncompress=%d, ret=%d")
    TRC_MSG(TRC_MRE_LDR_LOAD_INFO1,   "[MRE] vm_load_normal[IN]: suffix=%d, zip=%d, type=%d, preload=%d")
    TRC_MSG(TRC_MRE_LDR_LOAD_INFO2,   "[MRE] vm_load_normal[IN]: load_buffer=0x%x, load_size=%d")
    TRC_MSG(TRC_MRE_LDR_LOAD_INFO3,   "[MRE] vm_load_normal: calling function %d")
    TRC_MSG(TRC_MRE_LDR_LOAD_INFO4,   "[MRE] vm_load_normal[OUT]: ret=%d, codeBase=0x%x, codeSize=%d, dataBase=0x%x, dataSize=%d, roSize=%d, rwSize=%d, ziSize=%d, entry=0x%x")
    TRC_MSG(TRC_MRE_LDR_LOAD_INFO5,   "[MRE] vm_load_normal[OUT]: sysv, base=0x%x, length=%d, virt=0x%x, init_array=0x%x, init_count=%d, symtab=0x%x, symtab_count=%d, dynstr=0x%x, dynstr_count=%d")
    
    TRC_MSG(TRC_MRE_LDR_ROM_Z_ADS,   "[MRE] load_rom_zipped_ads: lerr=%d, info=%d, ret=%d")
    TRC_MSG(TRC_MRE_LDR_ROM_N_ADS,   "[MRE] load_rom_normal_ads: lerr=%d, info=%d, ret=%d")
    TRC_MSG(TRC_MRE_LDR_FILE_Z_ADS,  "[MRE] load_file_zipped_ads: lerr=%d, info=%d, ret=%d")
    TRC_MSG(TRC_MRE_LDR_FILE_N_ADS,  "[MRE] load_file_normal_ads: lerr=%d, info=%d, ret=%d")
    TRC_MSG(TRC_MRE_LDR_ROM_Z_SYSV,  "[MRE] load_rom_zipped_sysv: lerr=%d, info=%d, ret=%d")
    TRC_MSG(TRC_MRE_LDR_ROM_N_SYSV,  "[MRE] load_rom_normal_sysv: lerr=%d, info=%d, ret=%d")
    TRC_MSG(TRC_MRE_LDR_FILE_Z_SYSV, "[MRE] load_file_zipped_sysv: lerr=%d, info=%d, ret=%d")
    TRC_MSG(TRC_MRE_LDR_FILE_N_SYSV, "[MRE] load_file_normal_sysv: lerr=%d, info=%d, ret=%d")
    TRC_MSG(TRC_MRE_LDR_ROM_SYSV_FIX,"[MRE] do_rom_sysv_loadfix: lerr=%d, info=%d, ret=%d")
    TRC_MSG(TRC_MRE_LDR_FILE_SYSV_FIX,  "[MRE] do_file_sysv_loadfix: lerr=%d, info=%d, ret=%d")
    TRC_MSG(TRC_MRE_LDR_SYSV_FIX,    "[MRE] do_sysv_loadfix: lerr=%d, info=%d, ret=%d")
    TRC_MSG(TRC_MRE_LDR_RORW_OVERLAPPED, "[MRE] do_sysv_loadfix: ro/rw overlapped lowest_rw=0x%x, highest_ro=0x%x")
    
    TRC_MSG(TRC_MRE_PRELDR_READ,    "[MRE] vm_read_preload_app_info: lerr=%d, info=%d, ret=%d")
    TRC_MSG(TRC_MRE_PRELDR_PRELOAD, "[MRE] vm_preload_app: lerr=%d, info=%d, ret=%d")
    TRC_MSG(TRC_MRE_PRELDR_PRELOAD_RORW, "[MRE] vm_preload_app_rorw_tag: lerr=%d, info=%d, ret=%d")
    TRC_MSG(TRC_MRE_PRELDR_LOAD,    "[MRE] load_preload: lerr=%d, info=%d, ret=%d")
    
    TRC_MSG(TRC_MRE_ELFLDR_RELOC1, "[MRE] vm_parse_sysv_reloc: unknown relocation type %d")
    TRC_MSG(TRC_MRE_ELFLDR_RELOC2, "[MRE] vm_parse_sysv_reloc: unsupported relocation type %d")
    TRC_MSG(TRC_MRE_ELFLDR_RELOC3, "[MRE] vm_parse_sysv_reloc: unresolved symbol %d, ret=%d")
    
    TRC_MSG(TRC_MRE_ELFLDR_RESOLVE1, "[MRE] vm_resolve_symbol_sysv: can't resolve symbol index STN_UNDEF(0)")
    TRC_MSG(TRC_MRE_ELFLDR_RESOLVE2, "[MRE] vm_resolve_symbol_sysv: symbol index %d >= symbol table size %d")
    TRC_MSG(TRC_MRE_ELFLDR_RESOLVE3, "[MRE] vm_resolve_symbol_sysv: bind value 0 to weak symbol")
    TRC_MSG(TRC_MRE_ELFLDR_RESOLVE4, "[MRE] vm_resolve_symbol_sysv: unresolve symbol %d")

    TRC_MSG(TRC_MRE_TS_LOAD_ENTER, "[MRE][TS] vm_ts_driver_load enter")
    TRC_MSG(TRC_MRE_TS_LOAD_EXIT, "[MRE][TS] vm_ts_driver_load exit result = %d")
    TRC_MSG(TRC_MRE_TS_FREE, "[MRE][TS] vm_ts_driver_free enter")
    TRC_MSG(TRC_MRE_TS_GET_MEMORY, "[MRE][TS] vm_ts_driver_get_mem enter")  
    TRC_MSG(TRC_MRE_TS_ST_TS, "[MRE][TS] vm_ts_switch_to_tiny_mode enter")
    TRC_MSG(TRC_MRE_TS_ST_AP, "[MRE][TS] vm_ts_switch_to_ap_mode enter")
    TRC_MSG(TRC_MRE_TS_T_NOT, "[MRE][TS] not find in T card")
    TRC_MSG(TRC_MRE_TS_P_NOT, "[MRE][TS] not find in phone")
    TRC_MSG(TRC_MRE_TS_F_NOT, "[MRE][TS] not find in full path")
    TRC_MSG(TRC_MRE_TS_READ_E, "[MRE][TS] vm_ts_read_preload_app_info para error")
    TRC_MSG(TRC_MRE_TS_READ_P, "[MRE][TS] vm_ts_read_preload_app_info %d, %d")
    TRC_MSG(TRC_MRE_TS_DO_LOADFIX_RO, "[MRE][TS] vm_ts_do_sysv_loadfix ro error")
    TRC_MSG(TRC_MRE_TS_DO_LOADFIX_RW, "[MRE][TS] vm_ts_do_sysv_loadfix rw error")
    TRC_MSG(TRC_MRE_TS_DO_LOADFIX_INFO, "[MRE][TS] vm_ts_do_sysv_loadfix %d, %d, %d, %d")
    TRC_MSG(TRC_MRE_TS_DO_FILE_LOADFIX_INFO, "[MRE][TS] vm_ts_do_file_sysv_loadfix ret = %d")
    TRC_MSG(TRC_MRE_TS_LOAD_NORMAL, "[MRE][TS] vm_ts_load_normal %d, %d, %d")
    TRC_MSG(TRC_MRE_TS_LDR_ROM_N_SYSV, "[MRE][TS] load_rom_normal_sysv: lerr=%d, info=%d, ret=%d")
    TRC_MSG(TRC_MRE_TS_LDR_ROM_SYSV_FIX, "[MRE][TS] do_rom_sysv_loadfix: lerr=%d, info=%d, ret=%d")
	

    TRC_MSG(TRC_MRE_WDT_MAX_SIZE, "[MRE][WDT] vm_wdt_start max size")
    TRC_MSG(TRC_MRE_WDT_FEED_ERROR, "[MRE][WDT] vm_wdt_feed para error")
    TRC_MSG(TRC_MRE_WDT_STOP_ERROR, "[MRE][WDT] vm_wdt_stop para error")
    TRC_MSG(TRC_MRE_WDT_TIME_OUT, "[MRE][WDT] vm_wdt_timerproc timer out")
	TRC_MSG(TRC_MRE_WDT_ASSERT_FAILED, "[MRE][WDT] MRE ASSERT Failed file %s, line = %d")

    TRC_MSG(TRC_MRE_VMIO_STARTUP_EMAIL1, "[VMIO] vm_startup_email S.")
    TRC_MSG(TRC_MRE_VMIO_STARTUP_EMAIL2, "[VMIO] vm_startup_email [%d][%d].")
    
    TRC_MSG(TRC_MRE_VMIO_FILE_COPY_S, "[FS COPY] [%d][%d] S")
    TRC_MSG(TRC_MRE_VMIO_FILE_COPY_E, "[FS COPY] [%d][%d] E")
    TRC_MSG(TRC_MRE_VMIO_FILE_COPY_E1, "[FS COPY] [%d][%d] E1")
    TRC_MSG(TRC_MRE_VMIO_FILE_COPY_E2, "[FS COPY] [%d][%d] E2")
    TRC_MSG(TRC_MRE_VMIO_FILE_COPY_LOG, "[FS COPY] LOG[%d][%d][%d][%d][%d][%d] [%d][%d]")
    
    TRC_MSG(TRC_MRE_VMIO_MTOUCH_S, "[MTOUCH] [%d][%d] S")
    TRC_MSG(TRC_MRE_VMIO_MTOUCH_E, "[MTOUCH] [%d][%d] E")
    TRC_MSG(TRC_MRE_VMIO_MTOUCH_E1, "[MTOUCH] [%d][%d] E1")
    TRC_MSG(TRC_MRE_VMIO_MTOUCH_E2, "[MTOUCH] [%d][%d] E2")
    TRC_MSG(TRC_MRE_VMIO_MTOUCH_E3, "[MTOUCH] [%d][%d] E3")
    TRC_MSG(TRC_MRE_VMIO_MTOUCH_LOG, "[MTOUCH] LOG[%d][%d][%d][%d][%d][%d] [%d][%d]")
    
    TRC_MSG(TRC_MRE_VMIO_FS_AVAIL_LOG, "[FS_AVAIL] fs avail num[%d][%d][%d][%d][%d] @[%d][%d] vm_res_init_data_type")

    TRC_MSG(TRC_MRE_VMIO_KEYCODE_S, "[KEYCODE] [%d][%d] @[%d][%d] S")
    TRC_MSG(TRC_MRE_VMIO_KEYCODE_E, "[KEYCODE] [%d][%d] @[%d][%d] E")
    TRC_MSG(TRC_MRE_VMIO_KEYCODE_E1, "[KEYCODE] [%d][%d] @[%d][%d] E1")

    /*****************************************************************************************************************
     * MRE Socket trace
     *****************************************************************************************************************/
	/* Group 4 trace - MMI_MRE_TRC_G4_SOC */
    TRC_MSG(TRC_MRE_SOC_CONNECT, "[MRE][SOC]vm_tcp_connect() <Start -- host=[0x%8x],port=[%d],apn=[%d],callback=[0x%8x] Line=[%d]>")
    TRC_MSG(TRC_MRE_SOC_CONNECT_WIFI_ACNT_ID, "[MRE][SOC]vm_tcp_connect() <Wifi accountID =[%d]>")
    TRC_MSG(TRC_MRE_SOC_CONNECT_APP_ID, "[MRE][SOC]vm_tcp_connect() <APP ID =[%d]>")  
    TRC_MSG(TRC_MRE_SOC_CONNECT_DTCNT_ID, "[MRE][SOC]vm_tcp_connect() <data account i = [%d], id = [%d]>")
    TRC_MSG(TRC_MRE_SOC_CONNECT_CREATED_SOC, "[MRE][SOC]vm_tcp_connect() <Socket[%d] is created by Data accound[%d].>")
    TRC_MSG(TRC_MRE_SOC_CONNECT_GET_HOST, "[MRE][SOC]vm_tcp_connect() <Socket[%d] is in get hostbyname state>")
    TRC_MSG(TRC_MRE_SOC_CONNECT_IP_HOST, "[MRE][SOC]vm_tcp_connect() <Socket[%d] host is ip address.>")
    TRC_MSG(TRC_MRE_SOC_CONNECT_WAIT, "[MRE][SOC]vm_tcp_connect() <Socket[%d] is waited to connect.>")

    TRC_MSG(TRC_MRE_SOC_CONNECT_ERR_01, "[MRE][SOC]vm_tcp_connect() <ERROR:Phone is in flight mode. ret=[%d] line=[%d]>")
    TRC_MSG(TRC_MRE_SOC_CONNECT_ERR_02, "[MRE][SOC]vm_tcp_connect() <ERROR:Failed to check params. ret=[%d] line=[%d]>")
    TRC_MSG(TRC_MRE_SOC_CONNECT_ERR_03, "[MRE][SOC]vm_tcp_connect() <ERROR:Error apn with WIFI. apn=[%d] ret=[%d] line=[%d]>")
    TRC_MSG(TRC_MRE_SOC_CONNECT_ERR_04, "[MRE][SOC]vm_tcp_connect() <ERROR:Error apn. apn=[%d] ret=[%d] line=[%d]>")
    TRC_MSG(TRC_MRE_SOC_CONNECT_ERR_05, "[MRE][SOC]vm_tcp_connect() <ERROR:Failed to alloc socket context. ret=[%d] line=[%d]>")    
    TRC_MSG(TRC_MRE_SOC_CONNECT_ERR_06, "[MRE][SOC]vm_tcp_connect() <ERROR:Failed to set Wi-Fi bearer. ret=[%d] line=[%d]>")    
    TRC_MSG(TRC_MRE_SOC_CONNECT_ERR_07, "[MRE][SOC]vm_tcp_connect() <ERROR:Failed to set socket option(non block). ret=[%d] line=[%d]>")    
    TRC_MSG(TRC_MRE_SOC_CONNECT_ERR_08, "[MRE][SOC]vm_tcp_connect() <ERROR:Failed to set socket option(read/write/close/connect). ret=[%d] line=[%d]>")    
    TRC_MSG(TRC_MRE_SOC_CONNECT_ERR_09, "[MRE][SOC]vm_tcp_connect() <ERROR:Failed to get host by name. ret=[%d] line=[%d]>")    
    TRC_MSG(TRC_MRE_SOC_CONNECT_ERR_10, "[MRE][SOC]vm_tcp_connect() <ERROR:Failed to create socket. ret=[%d] line=[%d]>")    
    TRC_MSG(TRC_MRE_SOC_CONNECT_ERR_11, "[MRE][SOC]vm_tcp_connect() <ERROR:Failed to find data account. ret=[%d] line=[%d]>")    

    TRC_MSG(TRC_MRE_SOC_CLOSE, "[MRE][SOC]vm_tcp_close() <Start -- handle=[%d]>")    
    TRC_MSG(TRC_MRE_SOC_CLOSE_ABORT, "[MRE][SOC]vm_tcp_close() <Abort socket[%d] dns query operation.>")    
    TRC_MSG(TRC_MRE_SOC_CLOSE_END, "[MRE][SOC]vm_tcp_close() <socket[%d] closed>")    

    TRC_MSG(TRC_MRE_SOC_HOST_S, "[MRE][SOC HOST] [%d][%d] S")
    TRC_MSG(TRC_MRE_SOC_HOST_E, "[MRE][SOC HOST] [%d][%d] E")
    TRC_MSG(TRC_MRE_SOC_HOST_E1, "[MRE][SOC HOST] [%d][%d] E1")
    TRC_MSG(TRC_MRE_SOC_HOST_E2, "[MRE][SOC HOST] [%d][%d] E2")
    TRC_MSG(TRC_MRE_SOC_HOST_E3, "[MRE][SOC HOST] [%d][%d] E3")
    TRC_MSG(TRC_MRE_SOC_HOST_E4, "[MRE][SOC HOST] [%d][%d] E4")
    TRC_MSG(TRC_MRE_SOC_HOST_FAILURE, "[MRE][SOC HOST] [%d][%d] failure [%d]")
    TRC_MSG(TRC_MRE_SOC_HOST_LOG, "[MRE][SOC HOST] [%d][%d] LOG [%d, %d, %d, %d, %d, %d]")
    TRC_MSG(TRC_MRE_VMHTTP_512, "Failed to regisiter HTTP module. Error Code : %d .")
    TRC_MSG(TRC_MRE_VMHTTP_554, "{HTTP MODULE} enter vm_cancel_all_http_sessions - p_handle:%d, current_handle%d .")
    TRC_MSG(TRC_MRE_VMHTTP_561, "{HTTP MODULE} vm_cancel_all_http_sessions - before vm_http_free_handle -res_handle:%d .")
    TRC_MSG(TRC_MRE_VMHTTP_563, "{HTTP MODULE} vm_cancel_all_http_sessions - after vm_http_free_handle -res_handle:%d .")
    TRC_MSG(TRC_MRE_VMHTTP_572, "{HTTP MODULE} vm_cancel_all_http_sessions - vm_res_release_data - failed - handle:%d, current_handle%d .")
    TRC_MSG(TRC_MRE_VMHTTP_578, "{HTTP MODULE} leave vm_cancel_all_http_sessions - p_handle:%d, current_handle%d .")
    TRC_MSG(TRC_MRE_VMHTTP_670, "{HTTP MODULE} enter vm_get_item_info_by_soc_id - sock_handle:%d, current_handle:%d .")
    TRC_MSG(TRC_MRE_VMHTTP_683, "{HTTP MODULE} vm_get_item_info_by_soc_id - VM_RES_NOT_FIND == vm_res_findfirst - handle:%d, current_handle:%d, p_handle:%d .")
    TRC_MSG(TRC_MRE_VMHTTP_688, "vm_get_item_info_by_soc_id - in do{...} - head res_handle:%d, p_handle:%d .")
    TRC_MSG(TRC_MRE_VMHTTP_692, "{HTTP MODULE} vm_get_item_info_by_soc_id - vm_res_get_data - failed,  handle:%d, res_handle:%d .")
    TRC_MSG(TRC_MRE_VMHTTP_699, "{HTTP MODULE} vm_get_item_info_by_soc_id - session_item_info obtained, socket_handle:%d, res_handle:%d, p_handle:%d .")
    TRC_MSG(TRC_MRE_VMHTTP_704, "vm_get_item_info_by_soc_id - in do{...} - end res_handle:%d, p_handle:%d .")
    TRC_MSG(TRC_MRE_VMHTTP_711, "{HTTP MODULE} leave vm_get_item_info_by_soc_id - handle:%d, current_handle:%d .")
    TRC_MSG(TRC_MRE_VMHTTP_869, "{HTTP MODULE} enter vm_http_write_data - current_handle:%d .")
    TRC_MSG(TRC_MRE_VMHTTP_901, "{HTTP MODULE} http[%d] wait data to sent.")
    TRC_MSG(TRC_MRE_VMHTTP_905, "{HTTP MODULE} vm_http_write_data - reqbuf sent. nreqbuf:%d, sent:%d .")
    TRC_MSG(TRC_MRE_VMHTTP_910, "{HTTP MODULE} vm_http_write_data - sending req_body - %d .")
    TRC_MSG(TRC_MRE_VMHTTP_926, "{HTTP MODULE} vm_http_write_data - sending req_body - after vm_tcp_write - ret:%d, sent:%d .")
    TRC_MSG(TRC_MRE_VMHTTP_943, "{HTTP MODULE}http[%d] - req_body wait data to sent.")
    TRC_MSG(TRC_MRE_VMHTTP_952, "{HTTP MODULE} vm_http_send_data - sender - to send chunk_buffer_ptr .chunk_buffer_sent%d, chunk_buffer_length:%d .")
    TRC_MSG(TRC_MRE_VMHTTP_970, "{HTTP MODULE}http[%d] chunk_buffer_ptr - sender wait data to sent.")
    TRC_MSG(TRC_MRE_VMHTTP_975, "{HTTP MODULE}http[%d] chunk_buffer_ptr - sender error.")
    TRC_MSG(TRC_MRE_VMHTTP_1020, "{HTTP MODULE} http[%d] - sending CRLF of chunk block.")
    TRC_MSG(TRC_MRE_VMHTTP_1025, "{HTTP MODULE} http[%d] - sending CRLF of chunk error.")
    TRC_MSG(TRC_MRE_VMHTTP_1030, "{HTTP MODULE} vm_http_send_data, CRLF in chunk_buffer sent, chunk_buffer_sent:%d, chunk_buffer_length:%d .")
    TRC_MSG(TRC_MRE_VMHTTP_1039, "{HTTP MODULE} sender - after chunk_buffer_ptr vm_free .")
    TRC_MSG(TRC_MRE_VMHTTP_1042, "{HTTP MODULE} http[%d] - sender complete.")
    TRC_MSG(TRC_MRE_VMHTTP_1047, "{HTTP MODULE} http[%d] - sender wait data to send.")
    TRC_MSG(TRC_MRE_VMHTTP_1052, "{HTTP MODULE} http[%d] - sender error. ret:%d .")
    TRC_MSG(TRC_MRE_VMHTTP_1163, "{HTTP MODULE} _vm_move_buffer_data - to:%p, from:%p, len:%d")
    TRC_MSG(TRC_MRE_VMHTTP_1174, "{HTTP MODULE} _vm_move_buffer_data - p_to:%p, p_from:%p, ret:%d")
    TRC_MSG(TRC_MRE_VMHTTP_1186, "{HTTP MODULE} _vm_move_buffer_data - p_to:%p, p_from:%p, ret:%d")
    TRC_MSG(TRC_MRE_VMHTTP_1188, "{HTTP MODULE} _vm_move_buffer_data - to:%p, from:%p, len:%d")
    TRC_MSG(TRC_MRE_VMHTTP_1218, "{HTTP MODULE} _vm_call_receiver - http[%d]  - receiver complete.")
    TRC_MSG(TRC_MRE_VMHTTP_1223, "{HTTP MODULE} _vm_call_receiver - http[%d] - receiver wait data to receive.")
    TRC_MSG(TRC_MRE_VMHTTP_1228, "{HTTP MODULE} _vm_call_receiver - http[%d] - receiver error.")
    TRC_MSG(TRC_MRE_VMHTTP_1270, "{HTTP MODULE} enter - vm_http_read_data - buffer[%p ~ %p], receive_type:%d.")
    TRC_MSG(TRC_MRE_VMHTTP_1294, "{HTTP MODULE} vm_http_read_data - RECEIVE_STATE_LINE, buffer:")
    TRC_MSG(TRC_MRE_VMHTTP_1322, "{HTTP MODULE} vm_http_read_data - RECEIVE_STATE_LINE - after vm_calloc- res_ptr:%p .")
    TRC_MSG(TRC_MRE_VMHTTP_1325, "[TEST] res_ptr[%p ~ %p] after vm_calloc")
    TRC_MSG(TRC_MRE_VMHTTP_1330, "[TEST] res_ptr[%p ~ %p] after memcpy")
    TRC_MSG(TRC_MRE_VMHTTP_1334, "{HTTP MODULE} res code: %d .")
    TRC_MSG(TRC_MRE_VMHTTP_1375, "{HTTP MODULE} vm_http_read_data - RECEIVE_HEAD, reading heads: receive_num:%d, line_size:%d, nresbuf:%d .")
    TRC_MSG(TRC_MRE_VMHTTP_1389, "{HTTP MODULE} vm_http_read_data - RECEIVE_HEAD, resbuf[%d, %p ~ %p:%p]:")
    TRC_MSG(TRC_MRE_VMHTTP_1403, "[TEST] head_value[%p ~ %p]")
    TRC_MSG(TRC_MRE_VMHTTP_1405, "{HTTP MODULE} vm_http_read_data - RECEIVE_HEAD, body starts: receive_num:%d, line_size:%d, nresbuf:%d .")
    TRC_MSG(TRC_MRE_VMHTTP_1425, "{HTTP MODULE} vm_http_read_data - to receive (Content-Length) by receiver. receive_type:%d .")
    TRC_MSG(TRC_MRE_VMHTTP_1435, "{HTTP MODULE} http[%d] (Content-Length) - receiver complete.")
    TRC_MSG(TRC_MRE_VMHTTP_1441, "{HTTP MODULE} http[%d] (Content-Length) - receiver wait data to receive.")
    TRC_MSG(TRC_MRE_VMHTTP_1447, "{HTTP MODULE} http[%d] (Content-Length) - receiver error.")
    TRC_MSG(TRC_MRE_VMHTTP_1457, "{HTTP MODULE} vm_http_read_data - RECEIVE_HEAD - after vm_malloc - resbody[%p ~ %p]:%p, nresbody:%d.")
    TRC_MSG(TRC_MRE_VMHTTP_1476, "{HTTP MODULE}Chunked started to receive body.")
    TRC_MSG(TRC_MRE_VMHTTP_1482, "{HTTP MODULE} vm_http_read_data - to receive (chunked) by receiver .receive_type:%d .")
    TRC_MSG(TRC_MRE_VMHTTP_1492, "{HTTP MODULE}http[%d] (chunked) - receiver complete.")
    TRC_MSG(TRC_MRE_VMHTTP_1498, "{HTTP MODULE}http[%d] (chunked) - receiver wait data to receive.")
    TRC_MSG(TRC_MRE_VMHTTP_1504, "{HTTP MODULE}http[%d] (chunked) - receiver error.")
    TRC_MSG(TRC_MRE_VMHTTP_1515, "{HTTP MODULE} close means read end flag.")
    TRC_MSG(TRC_MRE_VMHTTP_1530, "{HTTP MODULE} vm_http_read_data - RECEIVE_HEAD, buffer:")
    TRC_MSG(TRC_MRE_VMHTTP_1549, "{HTTP MODULE} vm_http_write_data - to receive (Content-Length) by receiver.receive_type:%d .")
    TRC_MSG(TRC_MRE_VMHTTP_1559, "{HTTP MODULE} http[%d] (Content-Length) - receiver complete.")
    TRC_MSG(TRC_MRE_VMHTTP_1565, "{HTTP MODULE} http[%d] (Content-Length) - receiver wait data to receive.")
    TRC_MSG(TRC_MRE_VMHTTP_1571, "{HTTP MODULE} http[%d] (Content-Length) - receiver error.")
    TRC_MSG(TRC_MRE_VMHTTP_1582, "{HTTP MODULE} vm_http_read_data - FIX_BODY - to save data from buffer to resbody - receive_num:%d, nresbody:%d, read:%d .")
    TRC_MSG(TRC_MRE_VMHTTP_1592, "{HTTP MODULE} vm_http_read_data - FIX_BODY - save data from buffer to resbody - nresbody:%d, receive_num:%d .")
    TRC_MSG(TRC_MRE_VMHTTP_1609, "{HTTP MODULE} vm_http_read_data - FIX_BODY, save data from buffer to resbody - finished - nresbody:%d, receive_num:%d .")
    TRC_MSG(TRC_MRE_VMHTTP_1649, "{HTTP MODULE} vm_http_read_data - FIX_BODY, save data from TCP to resbody - nresbody:%d, read:%d .")
    TRC_MSG(TRC_MRE_VMHTTP_1674, "{HTTP MODULE} vm_http_write_data - to receive (Content-Length) by receiver.receive_type:%d .")
    TRC_MSG(TRC_MRE_VMHTTP_1684, "{HTTP MODULE} http[%d] (Content-Length) - receiver complete.")
    TRC_MSG(TRC_MRE_VMHTTP_1690, "{HTTP MODULE} http[%d] (Content-Length) - receiver wait data to receive.")
    TRC_MSG(TRC_MRE_VMHTTP_1696, "{HTTP MODULE} http[%d] (Content-Length) - receiver error.")
    TRC_MSG(TRC_MRE_VMHTTP_1731, "{HTTP MODULE}Failed to malloc memory to http body.")
    TRC_MSG(TRC_MRE_VMHTTP_1734, "{HTTP MODULE} vm_http_read_data - READ_EOF - after vm_malloc - resbody:%p .")
    TRC_MSG(TRC_MRE_VMHTTP_1749, "{HTTP MODULE}Failed to realloc memory to http body.")
    TRC_MSG(TRC_MRE_VMHTTP_1771, "{HTTP MODULE} vm_http_write_data - to receive (chunked) by receiver .receive_type:%d .")
    TRC_MSG(TRC_MRE_VMHTTP_1779, "{HTTP MODULE}http[%d] (chunked) - receiver complete.")
    TRC_MSG(TRC_MRE_VMHTTP_1784, "{HTTP MODULE}http[%d] (chunked) - receiver wait data to receive.")
    TRC_MSG(TRC_MRE_VMHTTP_1789, "{HTTP MODULE}http[%d] (chunked) - receiver error.")
    TRC_MSG(TRC_MRE_VMHTTP_1808, "{HTTP MODULE}The chunk data size is larger than limited size.")
    TRC_MSG(TRC_MRE_VMHTTP_1818, "{HTTP MODULE}Failed to chunked data size to oct number.hex string is [0x%x]")
    TRC_MSG(TRC_MRE_VMHTTP_1863, "{HTTP MODULE}Failed to realloc chunk data size. size is %d .")
    TRC_MSG(TRC_MRE_VMHTTP_1876, "{HTTP MODULE}Failed to malloc chunk data size. size is %d .")
    TRC_MSG(TRC_MRE_VMHTTP_1884, "{HTTP MODULE}Failed to malloc chunk data size. size is %d .")
    TRC_MSG(TRC_MRE_VMHTTP_1888, "{HTTP MODULE} vm_http_read_data - after vm_malloc - resbody:%p .")
    TRC_MSG(TRC_MRE_VMHTTP_1908, "{HTTP MODULE}http chunk decoding in error state.")
    TRC_MSG(TRC_MRE_VMHTTP_1934, "{HTTP MODULE}chunk-extension data is too large.")
    TRC_MSG(TRC_MRE_VMHTTP_1995, "{HTTP MODULE} vm_http_read_data - to receive (chunked) by receiver .receive_type:%d .")
    TRC_MSG(TRC_MRE_VMHTTP_2005, "{HTTP MODULE}http[%d] (chunked) - receiver complete.")
    TRC_MSG(TRC_MRE_VMHTTP_2011, "{HTTP MODULE}http[%d] (chunked) - receiver wait data to receive.")
    TRC_MSG(TRC_MRE_VMHTTP_2017, "{HTTP MODULE}http[%d] (chunked) - receiver error.")
    TRC_MSG(TRC_MRE_VMHTTP_2028, "{HTTP MODULE} vm_http_read_data - enter CHUNK_DATA - to receive chunk data - chunk_size:%d .")
    TRC_MSG(TRC_MRE_VMHTTP_2042, "{HTTP MODULE} vm_http_read_data - CHUNK_DATA - read data from TCP to buffer - ret:%d,  receive_num:%d .")
    TRC_MSG(TRC_MRE_VMHTTP_2071, "{HTTP MODULE} vm_http_read_data - CHUNK_DATA - save data from buffer to resbody - cpyLen:%d, read:%d, chunk_size:%d  .")
    TRC_MSG(TRC_MRE_VMHTTP_2085, "{HTTP MODULE}Failed to decoding chunk encoding.")
    TRC_MSG(TRC_MRE_VMHTTP_2113, "{HTTP MODULE} vm_http_read_data - CHUNK_DATA - remove CRLF from buffer - move_size:%d, receive_num:%d .")
    TRC_MSG(TRC_MRE_VMHTTP_2120, "{HTTP MODULE}Chunk encoding format error.")
    TRC_MSG(TRC_MRE_VMHTTP_2128, "{HTTP MODULE}Chunk encoding format error.")
    TRC_MSG(TRC_MRE_VMHTTP_2139, "{HTTP MODULE} vm_http_read_data - CHUNK_DATA - data in buffer too short - ret:%d, receive_num:%d .")
    TRC_MSG(TRC_MRE_VMHTTP_2197, "Session resbuf doesn't have enough space to save entity head.")
    TRC_MSG(TRC_MRE_VMHTTP_2250, "{HTTP MODULE} Failed  to read current HTTP response type.")
    TRC_MSG(TRC_MRE_VMHTTP_2293, "{HTTP MODULE} enter vm_tcp_module_hook - handle:%d, event:%d, current_handle:%d .")
    TRC_MSG(TRC_MRE_VMHTTP_2299, "{HTTP MODULE} Don't find http session in session pool.socket handle is:%d .")
    TRC_MSG(TRC_MRE_VMHTTP_2308, "{HTTP MODULE} http comm pipe[%d] connected.")
    TRC_MSG(TRC_MRE_VMHTTP_2322, "{HTTP MODULE} http comm pipe[%d] can write.")
    TRC_MSG(TRC_MRE_VMHTTP_2352, "{HTTP MODULE} http comm pipe[%d] can read.")
    TRC_MSG(TRC_MRE_VMHTTP_2361, "read %d bytes in %d ms")
    TRC_MSG(TRC_MRE_VMHTTP_2392, "{HTTP MODULE} http comm pipe[%d] broken.")
    TRC_MSG(TRC_MRE_VMHTTP_2408, "{HTTP MODULE} http comm pipe[%d] get host by name error.")
    TRC_MSG(TRC_MRE_VMHTTP_2424, "{HTTP MODULE} http comm pipe[%d] closed.")
    TRC_MSG(TRC_MRE_VMHTTP_2440, "{HTTP MODULE} http comm pipe[%d] receive unkown event, event id is: %d .")
    TRC_MSG(TRC_MRE_VMHTTP_2442, "{HTTP MODULE} leave vm_tcp_module_hook - current_handle:%d .")
    TRC_MSG(TRC_MRE_VMHTTP_2467, "{HTTP MODULE} enter vm_http_notify_process_status - process_handle:%d, sys_state:%d, current_handle:%d .")
    TRC_MSG(TRC_MRE_VMHTTP_2471, "[HTTP MODULE] PCB[%d] is in UNLOAD status.")
    TRC_MSG(TRC_MRE_VMHTTP_2477, "[HTTP MODULE] PCB[%d] is in UNLOAD status. - res_handle:%d .")
    TRC_MSG(TRC_MRE_VMHTTP_2485, "{HTTP MODULE} vm_cancel_all_http_sessions - vm_res_release_data - failed - handle:%d, current_handle%d .")
    TRC_MSG(TRC_MRE_VMHTTP_2491, "[HTTP MODULE] PCB[%d] - vm_http_notify_process_status - all session canceled .")
    TRC_MSG(TRC_MRE_VMHTTP_2495, "{HTTP MODULE} leave vm_http_notify_process_status - process_handle:%d, sys_state:%d, current_handle:%d .")
    TRC_MSG(TRC_MRE_VMHTTP_2519, "__FILE__:[0x%x], __LINE__:%d \n")
    TRC_MSG(TRC_MRE_VMHTTP_2520, "{HTTP MODULE} enter vm_initialize_http_module - current_handle:%d .")
    TRC_MSG(TRC_MRE_VMHTTP_2531, "{HTTP MODULE} leave vm_initialize_http_module - current_handle:%d .")
    TRC_MSG(TRC_MRE_VMHTTP_2557, "{HTTP MODULE} enter vm_finialize_http_module - current_handle:%d .")
    TRC_MSG(TRC_MRE_VMHTTP_2563, "{HTTP MODULE} leave vm_finialize_http_module - current_handle:%d .")
    TRC_MSG(TRC_MRE_VMHTTP_2612, "{HTTP MODULE} enter vm_allot_ssesion_item - current_handle:%d .")
    TRC_MSG(TRC_MRE_VMHTTP_2621, "{HTTP MODULE} vm_allot_ssesion_item, from vm_http_fetch_handle, current_handle:%d .")
    TRC_MSG(TRC_MRE_VMHTTP_2626, "{HTTP MODULE} vm_allot_ssesion_item - current_handle not match p_handle .current_handle:%d, p_handle:%d .")
    TRC_MSG(TRC_MRE_VMHTTP_2633, "{HTTP MODULE} vm_allot_ssesion_item - vm_res_get_data failed, current_handle:%d .")
    TRC_MSG(TRC_MRE_VMHTTP_2651, "{HTTP MODULE} vm_allot_ssesion_item - vm_res_type_avaliable_handle <= 0 .p_handle:%d, current_handle:%d. res_count:%d .")
    TRC_MSG(TRC_MRE_VMHTTP_2656, "{HTTP MODULE} vm_allot_ssesion_item, to vm_malloc for session_item_info, current_handle:%d .")
    TRC_MSG(TRC_MRE_VMHTTP_2662, "{HTTP MODULE} vm_allot_ssesion_item - vm_malloc for session_item_info - failed .")
    TRC_MSG(TRC_MRE_VMHTTP_2665, "{HTTP MODULE} vm_allot_ssesion_item - after vm_malloc - sii[%p ~ %p]:%p .")
    TRC_MSG(TRC_MRE_VMHTTP_2695, "{HTTP MODULE} vm_allot_ssesion_item - vm_malloc for http_response_buffer_t[%d] - failed .")
    TRC_MSG(TRC_MRE_VMHTTP_2700, "{HTTP MODULE} vm_allot_ssesion_item - after vm_malloc - sii->buffer[%p ~ %p]:%p .")
    TRC_MSG(TRC_MRE_VMHTTP_2710, "{HTTP MODULE} vm_allot_ssesion_item - vm_malloc for http_session_ptr[%d] - failed .")
    TRC_MSG(TRC_MRE_VMHTTP_2717, "{HTTP MODULE} vm_allot_ssesion_item - after vm_malloc - sii->http_session_ptr[%p ~ %p]:%p .")
    TRC_MSG(TRC_MRE_VMHTTP_2725, "{HTTP MODULE} vm_allot_ssesion_item - get http_session_ptr from app.")
    TRC_MSG(TRC_MRE_VMHTTP_2743, "{HTTP MODULE} vm_allot_ssesion_item - vm_res_save_data - failed .res_handle:%d .")
    TRC_MSG(TRC_MRE_VMHTTP_2751, "{HTTP MODULE} vm_allot_ssesion_item - vm_res_save_data - ok res_handle:%d, current_handle:%d .")
    TRC_MSG(TRC_MRE_VMHTTP_2756, "{HTTP MODULE} vm_allot_ssesion_item - failed . current_handle:%d .")
    TRC_MSG(TRC_MRE_VMHTTP_2790, "{HTTP MODULE} enter vm_ret_session_item - current_handle:%d .")
    TRC_MSG(TRC_MRE_VMHTTP_2795, "PROCESS_IN_UNLOAD_STATUS")
    TRC_MSG(TRC_MRE_VMHTTP_2806, "{HTTP MODULE} vm_ret_session_item - vm_res_release_data - failed .")
    TRC_MSG(TRC_MRE_VMHTTP_2808, "{HTTP MODULE} vm_ret_session_item - after vm_res_release_data - session_item_ptr->http_handle:%d, current_handle:%d .")
    TRC_MSG(TRC_MRE_VMHTTP_2816, "{HTTP MODULE} vm_ret_session_item - to free resbody - nresbody:%d, resbody:%p, http_handle:%d, current_handle:%d .")
    TRC_MSG(TRC_MRE_VMHTTP_2826, "{HTTP MODULE} vm_ret_session_item - to free http_session_ptr - http_session_ptr:%p, http_handle:%d, current_handle:%d .")
    TRC_MSG(TRC_MRE_VMHTTP_2833, "{HTTP MODULE} vm_ret_session_item - to free buffer - buffer:%p, http_handle:%d, current_handle:%d .")
    TRC_MSG(TRC_MRE_VMHTTP_2842, "{HTTP MODULE} vm_ret_session_item - before vm_free - ")
    TRC_MSG(TRC_MRE_VMHTTP_2871, "{HTTP MODULE} vm_ret_session_item -  to free chunk_buffer_ptr - chunk_buffer_ptr:%p, http_handle:%d, current_handle:%d .")
    TRC_MSG(TRC_MRE_VMHTTP_2881, "{HTTP MODULE} vm_ret_session_item - to free session_item_ptr - session_item_ptr:%p, http_handle:%d, current_handle:%d .")
    TRC_MSG(TRC_MRE_VMHTTP_2887, "{HTTP MODULE} vm_ret_session_item - session_item_ptr = NULL .")
    TRC_MSG(TRC_MRE_VMHTTP_2893, "{HTTP MODULE} leave vm_ret_session_item - current_handle:%d .")
    TRC_MSG(TRC_MRE_VMHTTP_2923, "{HTTP MODULE} enter vm_reg_http_notification - current_handle:%d .")
    TRC_MSG(TRC_MRE_VMHTTP_2941, "{HTTP MODULE} vm_reg_http_notification - current_handle:%d .")
    TRC_MSG(TRC_MRE_VMHTTP_2946, "{HTTP MODULE} leave vm_reg_http_notification - current_handle:%d .")
    TRC_MSG(TRC_MRE_VMHTTP_2975, "{HTTP MODULE} enter vm_enable_proxy - current_handle:%d .")
    TRC_MSG(TRC_MRE_VMHTTP_2993, "{HTTP MODULE} vm_enable_proxy - current_handle:%d .")
    TRC_MSG(TRC_MRE_VMHTTP_2998, "{HTTP MODULE} leave vm_enable_proxy - current_handle:%d .")
    TRC_MSG(TRC_MRE_VMHTTP_3022, "{HTTP MODULE} enter vm_add_default_headers - item_info:%p .")
    TRC_MSG(TRC_MRE_VMHTTP_3033, "{HTTP MODULE} vm_add_default_headers - after adding  headers - item_info:%p .")
    TRC_MSG(TRC_MRE_VMHTTP_3041, "item_info->range_size:%d")
    TRC_MSG(TRC_MRE_VMHTTP_3054, "{HTTP MODULE} vm_http_fetch_handle - Failed to add http request head. head name: [0x%x]")
    TRC_MSG(TRC_MRE_VMHTTP_3058, "{HTTP MODULE} leave vm_add_default_headers - item_info:%p .")
    TRC_MSG(TRC_MRE_VMHTTP_3141, "{HTTP MODULE} enter vm_http_request_sent - current_handle:%d .")
    TRC_MSG(TRC_MRE_VMHTTP_3145, "{HTTP MODULE} Don't has enough http session item space.")
    TRC_MSG(TRC_MRE_VMHTTP_3149, "{HTTP MODULE} vm_http_request_sent (item_info[%p ~ %p]) - vm_allot_ssesion_item - ok current_handle:%d .")
    TRC_MSG(TRC_MRE_VMHTTP_3162, "{HTTP MODULE}cmwap apn: %d, cmnet apn: %d.proxy value = %d .")
    TRC_MSG(TRC_MRE_VMHTTP_3167, "{HTTP MODULE} to unpack req_url .")
    TRC_MSG(TRC_MRE_VMHTTP_3173, "{HTTP MODULE} Failed to unpack url - item_info->req_url.")
    TRC_MSG(TRC_MRE_VMHTTP_3180, "{HTTP MODULE} to unpack url in requst .")
    TRC_MSG(TRC_MRE_VMHTTP_3186, "{HTTP MODULE} Failed to unpack url - asyn_request->http_request->url.")
    TRC_MSG(TRC_MRE_VMHTTP_3192, "{HTTP MODULE} vm_http_request_sent - after unpack_url, scheme:[0x%x], host:[0x%x], port:%d, res:%p, param:[0x%x]")
    TRC_MSG(TRC_MRE_VMHTTP_3232, "{HTTP MODULE} Meet unkown http request method[%d]")
    TRC_MSG(TRC_MRE_VMHTTP_3255, "{HTTP MODULE} vm_http_request_sent - reqbuf had data, nreqbuf:%d .")
    TRC_MSG(TRC_MRE_VMHTTP_3260, "{HTTP MODULE} Failed to set URL, it's too long. head name: %d .")
    TRC_MSG(TRC_MRE_VMHTTP_3275, "{HTTP MODULE} vm_http_request_sent - reqbuf had no data, nreqbuf:%d .")
    TRC_MSG(TRC_MRE_VMHTTP_3298, "item_info->range_size:%d")
    TRC_MSG(TRC_MRE_VMHTTP_3311, "{HTTP MODULE} Failed to add http request head. head name: [0x%x]")
    TRC_MSG(TRC_MRE_VMHTTP_3319, "{HTTP MODULE} vm_http_request_sent - reqbuf finished Request-Line & Headers, nreqbuf:%d .")
    TRC_MSG(TRC_MRE_VMHTTP_3325, "{HTTP MODULE} vm_http_request_sent - to send req_body, req_body_length:%d .")
    TRC_MSG(TRC_MRE_VMHTTP_3334, "{HTTP MODULE} Failed to add Content-Length . nreqbuf:%d, req_body_length:%d .")
    TRC_MSG(TRC_MRE_VMHTTP_3348, "{HTTP MODULE} Failed to add CRLF . nreqbuf:%d, req_body_length:%d .")
    TRC_MSG(TRC_MRE_VMHTTP_3356, "{HTTP MODULE} vm_http_request_sent - to call sender in chunk encoding, req_body_length:%d .")
    TRC_MSG(TRC_MRE_VMHTTP_3361, "{HTTP MODULE} Failed to add Content-Encoding . nreqbuf:%d, req_body_length:%d .")
    TRC_MSG(TRC_MRE_VMHTTP_3375, "{HTTP MODULE} Failed to add CRLF . nreqbuf:%d, req_body_length:%d .")
    TRC_MSG(TRC_MRE_VMHTTP_3383, "{HTTP MODULE}  Failed to vm_malloc for chunk_buffer_ptr .")
    TRC_MSG(TRC_MRE_VMHTTP_3393, "{HTTP MODULE} vm_http_request_sent - no req_body, no req_body_length, no sender.")
    TRC_MSG(TRC_MRE_VMHTTP_3401, "{HTTP MODULE} Failed to add http request body to http session.")
    TRC_MSG(TRC_MRE_VMHTTP_3418, "{HTTP MODULE} Failed to add \r\n http session, because http request body is NULL.")
    TRC_MSG(TRC_MRE_VMHTTP_3425, "{HTTP MODULE} vm_http_request_sent - reqbuf finished body & Headers, nreqbuf:%d .")
    TRC_MSG(TRC_MRE_VMHTTP_3436, "{HTTP MODULE} vm_get_apn_info use_proxy[[0x%x]:%d]")
    TRC_MSG(TRC_MRE_VMHTTP_3438, "{HTTP MODULE} vm_get_apn_info not_proxy[[0x%x]:%d]")
    TRC_MSG(TRC_MRE_VMHTTP_3447, "{HTTP MODULE} Failed to connect tcp. socket_handle:%d .")
    TRC_MSG(TRC_MRE_VMHTTP_3455, "{HTTP MODULE} vm_http_request_sent - after vm_tcp_connect, socket_handle:%d, current_handle:%d .")
    TRC_MSG(TRC_MRE_VMHTTP_3468, "{HTTP MODULE} leave vm_http_request_sent - current_handle:%d .")
    TRC_MSG(TRC_MRE_VMHTTP_3544, "{HTTP MODULE} enter vm_asyn_http_req - current_handle:%d .")
    TRC_MSG(TRC_MRE_VMHTTP_3596, "{HTTP MODULE} enter vm_get_asyn_http_req_handle - handle:%d, p_handle:%d, current_handle:%d .")
    TRC_MSG(TRC_MRE_VMHTTP_3606, "{HTTP MODULE} vm_get_asyn_http_req_handle - VM_RES_NOT_FIND == vm_res_findfirst - handle:%d, current_handle:%d, p_handle:%d .")
    TRC_MSG(TRC_MRE_VMHTTP_3611, "{HTTP MODULE} vm_get_asyn_http_req_handle - in do{...} - head res_handle:%d, p_handle:%d .")
    TRC_MSG(TRC_MRE_VMHTTP_3616, "{HTTP MODULE} vm_get_asyn_http_req_handle - vm_res_get_data - failed, res_handle:%d .")
    TRC_MSG(TRC_MRE_VMHTTP_3619, "{HTTP MODULE} vm_get_asyn_http_req_handle - vm_res_get_data - ok res_handle:%d, p_handle:%d, sii->http_session_ptr:%p, sii->user_terminate_flag:%d .")
    TRC_MSG(TRC_MRE_VMHTTP_3624, "{HTTP MODULE} vm_get_asyn_http_req_handle - to compare url - sii vs. req, sii: ")
    TRC_MSG(TRC_MRE_VMHTTP_3626, "{HTTP MODULE} vm_get_asyn_http_req_handle - to compare url - sii vs. req, req: ")
    TRC_MSG(TRC_MRE_VMHTTP_3635, "{HTTP MODULE} vm_get_asyn_http_req_handle - to compare heads(%d). ")
    TRC_MSG(TRC_MRE_VMHTTP_3641, "vm_get_asyn_http_req_handle - header [0x%x] ignored")
    TRC_MSG(TRC_MRE_VMHTTP_3646, "request->http_request->heads[i].name. ")
    TRC_MSG(TRC_MRE_VMHTTP_3648, "p_head_name. ")
    TRC_MSG(TRC_MRE_VMHTTP_3659, "{HTTP MODULE} vm_get_asyn_http_req_handle - reqbuf[:] error!!!")
    TRC_MSG(TRC_MRE_VMHTTP_3667, "{HTTP MODULE} vm_get_asyn_http_req_handle - reqbuf[CRLF] error!!!")
    TRC_MSG(TRC_MRE_VMHTTP_3672, "request->http_request->heads[i].value. ")
    TRC_MSG(TRC_MRE_VMHTTP_3674, "p_head_value. ")
    TRC_MSG(TRC_MRE_VMHTTP_3684, "{HTTP MODULE} vm_get_asyn_http_req_handle - all heads(%d) compared. heads_same_flag:%d")
    TRC_MSG(TRC_MRE_VMHTTP_3690, "{HTTP MODULE} vm_get_asyn_http_req_handle - same url - sii vs. req.")
    TRC_MSG(TRC_MRE_VMHTTP_3693, "{HTTP MODULE} vm_get_asyn_http_req_handle - POST, to campare req body - sii vs. req.")
    TRC_MSG(TRC_MRE_VMHTTP_3699, "{HTTP MODULE} vm_get_asyn_http_req_handle - have body - sii vs. req, sii: ")
    TRC_MSG(TRC_MRE_VMHTTP_3702, "{HTTP MODULE} vm_get_asyn_http_req_handle - have body - sii vs. req, req: ")
    TRC_MSG(TRC_MRE_VMHTTP_3712, "{HTTP MODULE} vm_get_asyn_http_req_handle - socket match, same body - sii vs. req , socket_handle:%d, *handle:%d .")
    TRC_MSG(TRC_MRE_VMHTTP_3720, "{HTTP MODULE} vm_get_asyn_http_req_handle - no body - sii vs. req , nreqbuf:%d, nbody:%d .")
    TRC_MSG(TRC_MRE_VMHTTP_3727, "{HTTP MODULE} vm_get_asyn_http_req_handle - socket match, no body - sii vs. req , socket_handle:%d, *handle:%d .")
    TRC_MSG(TRC_MRE_VMHTTP_3733, "{HTTP MODULE} vm_get_asyn_http_req_handle - after compare body - sii vs. req, no match .")
    TRC_MSG(TRC_MRE_VMHTTP_3740, "{HTTP MODULE} vm_get_asyn_http_req_handle - socket match, GET - sii vs. req , socket_handle:%d, *handle:%d .")
    TRC_MSG(TRC_MRE_VMHTTP_3747, "{HTTP MODULE} vm_get_asyn_http_req_handle - in do{...} - end res_handle:%d, p_handle:%d .")
    TRC_MSG(TRC_MRE_VMHTTP_3751, "{HTTP MODULE} vm_get_asyn_http_req_handle - after while(...) res_handle:%d, p_handle:%d .")
    TRC_MSG(TRC_MRE_VMHTTP_3755, "{HTTP MODULE} leave vm_get_asyn_http_req_handle - handle:%d, current_handle:%d, p_handle:%d .")
    TRC_MSG(TRC_MRE_VMHTTP_3799, "{HTTP MODULE} enter vm_cancel_asyn_http_req - handle:%d, p_handle:%d, current_handle:%d .")
    TRC_MSG(TRC_MRE_VMHTTP_3811, "{HTTP MODULE} vm_cancel_asyn_http_req - VM_RES_NOT_FIND == vm_res_findfirst - handle:%d, current_handle:%d, p_handle:%d .")
    TRC_MSG(TRC_MRE_VMHTTP_3816, "vm_cancel_asyn_http_req - in do{...} - head res_handle:%d, p_handle:%d .")
    TRC_MSG(TRC_MRE_VMHTTP_3820, "vm_cancel_asyn_http_req - vm_res_get_data - failed, res_handle:%d .")
    TRC_MSG(TRC_MRE_VMHTTP_3834, "{HTTP MODULE} HTTP[%d](SOCK[%d]) canceled. ")
    TRC_MSG(TRC_MRE_VMHTTP_3842, "{HTTP MODULE} HTTP[%d](SOCK[%d]) user terminate flag setted. ")
    TRC_MSG(TRC_MRE_VMHTTP_3848, "vm_cancel_asyn_http_req - in do{...} - end res_handle:%d, p_handle:%d .")
    TRC_MSG(TRC_MRE_VMHTTP_3855, "{HTTP MODULE} leave vm_cancel_asyn_http_req - handle:%d, current_handle:%d .")
    TRC_MSG(TRC_MRE_VMHTTP_3912, "{HTTP MODULE} enter vm_http_fetch_handle. req : %d .")
    TRC_MSG(TRC_MRE_VMHTTP_3918, "{HTTP MODULE} vm_http_fetch_handle - alloc resource failed. current_handle:%d")
    TRC_MSG(TRC_MRE_VMHTTP_3930, "{HTTP MODULE} unknown error while fetching http handle. %d, %d .")
    TRC_MSG(TRC_MRE_VMHTTP_3937, "{HTTP MODULE} vm_http_fetch_handle by ASYN_HTTP_REQ. req:%d .")
    TRC_MSG(TRC_MRE_VMHTTP_3955, "{HTTP MODULE} vm_http_fetch_handle - vm_malloc for http_request_t[%d] - failed .")
    TRC_MSG(TRC_MRE_VMHTTP_3958, "{HTTP MODULE} vm_http_fetch_handle - vm_malloc for http_request_t - ok .")
    TRC_MSG(TRC_MRE_VMHTTP_3965, "{HTTP MODULE} vm_http_fetch_handle - get http_request_t from asyn_request .")
    TRC_MSG(TRC_MRE_VMHTTP_3972, "{HTTP MODULE} vm_http_fetch_handle by HTTP_REQUEST. req:%d .")
    TRC_MSG(TRC_MRE_VMHTTP_3979, "{HTTP MODULE} not implemented yet [%d] ")
    TRC_MSG(TRC_MRE_VMHTTP_3997, "{HTTP MODULE} Meet unkown http request method[%d]")
    TRC_MSG(TRC_MRE_VMHTTP_4028, "{HTTP MODULE} vm_http_fetch_handle - Failed to add http request head. head name: [0x%x]")
    TRC_MSG(TRC_MRE_VMHTTP_4036, "{HTTP MODULE} vm_http_fetch_handle - reqbuf: ")
    TRC_MSG(TRC_MRE_VMHTTP_4042, "{HTTP MODULE} vm_http_fetch_handle - vm_res_set_data - res_handle: %d .")
    TRC_MSG(TRC_MRE_VMHTTP_4047, "{HTTP MODULE} leave vm_http_fetch_handle, current_handle:%d .")
    TRC_MSG(TRC_MRE_VMHTTP_4072, "{HTTP MODULE} vm_http_get_current_handle - current_handle: %d .")
    TRC_MSG(TRC_MRE_VMHTTP_4099, "{HTTP MODULE} vm_http_set_current_handle - current_handle: %d .")
    TRC_MSG(TRC_MRE_VMHTTP_4139, "{HTTP MODULE} enter vm_http_free_handle - handle: %d .")
    TRC_MSG(TRC_MRE_VMHTTP_4145, "{HTTP MODULE} vm_http_free_handle - vm_res_get_data - failed - ret:%d, handle:%d, current_handle:%d")
    TRC_MSG(TRC_MRE_VMHTTP_4148, "{HTTP MODULE} vm_http_free_handle - vm_res_get_data - ok handle: %d, current_handle:%d .")
    TRC_MSG(TRC_MRE_VMHTTP_4164, "{HTTP MODULE} vm_http_free_handle - vm_res_release_data - failed - handle:%d, current_handle%d .")
    TRC_MSG(TRC_MRE_VMHTTP_4168, "{HTTP MODULE} http handle[%d] set free .")
    TRC_MSG(TRC_MRE_VMHTTP_4179, "{HTTP MODULE} http handle[%d] set terminate .")
    TRC_MSG(TRC_MRE_VMHTTP_4184, "{HTTP MODULE} vm_http_free_handle - current_handle: %d .")
    TRC_MSG(TRC_MRE_VMHTTP_4222, "{HTTP MODULE} enter vm_http_set_url -handle:%d, len:%d ")
    TRC_MSG(TRC_MRE_VMHTTP_4228, "{HTTP MODULE} vm_http_set_url - sii->req_url = url , handle:%d .")
    TRC_MSG(TRC_MRE_VMHTTP_4234, "{HTTP MODULE} vm_http_set_url - after vm_res_set_data, handle:%d ")
    TRC_MSG(TRC_MRE_VMHTTP_4240, "{HTTP MODULE} leave vm_http_set_url -handle:%d, len:%d ")
    TRC_MSG(TRC_MRE_VMHTTP_4287, "{HTTP MODULE} enter vm_http_add_header - handle:%d .")
    TRC_MSG(TRC_MRE_VMHTTP_4293, "{HTTP MODULE} vm_http_add_header - [0x%x], %p ")
    TRC_MSG(TRC_MRE_VMHTTP_4299, "{HTTP MODULE} leave vm_http_add_header - handle:%d .")
    TRC_MSG(TRC_MRE_VMHTTP_4339, "{HTTP MODULE} enter vm_http_set_body -handle:%d, len:%d .")
    TRC_MSG(TRC_MRE_VMHTTP_4346, "{HTTP MODULE} vm_http_set_body -handle:%d, len:%d .")
    TRC_MSG(TRC_MRE_VMHTTP_4352, "{HTTP MODULE} leave vm_http_set_body -handle:%d, len:%d .")
    TRC_MSG(TRC_MRE_VMHTTP_4386, "{HTTP MODULE} enter vm_http_reg_receiver - handle:%d .")
    TRC_MSG(TRC_MRE_VMHTTP_4394, "{HTTP MODULE} leave vm_http_reg_receiver - handle:%d .")
    TRC_MSG(TRC_MRE_VMHTTP_4428, "{HTTP MODULE} enter vm_http_reg_sender - handle:%d .")
    TRC_MSG(TRC_MRE_VMHTTP_4436, "{HTTP MODULE} leave vm_http_reg_sender - handle:%d .")
    TRC_MSG(TRC_MRE_VMHTTP_4508, "{HTTP MODULE} vm_http_send_data - params error, handle:%d, data:%p, len:%d .")
    TRC_MSG(TRC_MRE_VMHTTP_4512, "{HTTP MODULE} enter vm_http_send_data -handle:%d, len:%d .")
    TRC_MSG(TRC_MRE_VMHTTP_4519, "{HTTP MODULE} vm_http_send_data - to send directly by sock[%d] .")
    TRC_MSG(TRC_MRE_VMHTTP_4529, "{HTTP MODULE} vm_http_send_data - sent [%d] bytes by sock[%d] .")
    TRC_MSG(TRC_MRE_VMHTTP_4588, "{HTTP MODULE} vm_http_send_data, to send chunk_buffer - len:%d, chunk_buffer_length:%d .")
    TRC_MSG(TRC_MRE_VMHTTP_4609, "{HTTP MODULE} vm_http_send_data - block while sending chunk buffer - handle:%d, data:%p, len:%d .")
    TRC_MSG(TRC_MRE_VMHTTP_4614, "{HTTP MODULE} vm_http_send_data - error while sending chunk buffer - handle:%d, data:%p, len:%d .")
    TRC_MSG(TRC_MRE_VMHTTP_4619, "{HTTP MODULE} vm_http_send_data, chunk_buffer sent - chunk_buffer_length:%d, chunk_buffer_sent:%d .")
    TRC_MSG(TRC_MRE_VMHTTP_4626, "{HTTP MODULE} leave vm_http_send_data -handle:%d, len:%d .")
    TRC_MSG(TRC_MRE_VMHTTP_4685, "{HTTP MODULE} enter vm_http_recv_data -handle:%d, len:%d .")
    TRC_MSG(TRC_MRE_VMHTTP_4690, "{HTTP MODULE} vm_http_send_data - params error, handle:%d, data:%p, len:%d .")
    TRC_MSG(TRC_MRE_VMHTTP_4713, "{HTTP MODULE} vm_http_recv_data -to read [%d] bytes into buffer.")
    TRC_MSG(TRC_MRE_VMHTTP_4722, "{HTTP MODULE} vm_http_recv_data -read [%d] bytes into buffer.")
    TRC_MSG(TRC_MRE_VMHTTP_4754, "{HTTP MODULE} vm_http_recv_data - sii->buffer:%d ")
    TRC_MSG(TRC_MRE_VMHTTP_4771, "{HTTP MODULE} vm_http_recv_data(fixed_body) - to read [%d] bytes from buffer, sii->read:%d, sii->buffer->receive_num:%d .")
    TRC_MSG(TRC_MRE_VMHTTP_4779, "{HTTP MODULE} vm_http_recv_data(fixed_body) - read [%d] bytes from buffer, sii->read:%d, sii->buffer->receive_num:%d .")
    TRC_MSG(TRC_MRE_VMHTTP_4783, "{HTTP MODULE} vm_http_recv_data(fixed_body) - to read [%d] bytes from sock[%d] .")
    TRC_MSG(TRC_MRE_VMHTTP_4791, "{HTTP MODULE} vm_http_recv_data(fixed_body) - read [%d] bytes from sock[%d] .")
    TRC_MSG(TRC_MRE_VMHTTP_4828, "{HTTP MODULE} vm_http_recv_data (chunked), to parse chunk size in buffer - receive_num:%d, read:%d .")
    TRC_MSG(TRC_MRE_VMHTTP_4842, "{HTTP MODULE}The chunk data size is larger than limited size.")
    TRC_MSG(TRC_MRE_VMHTTP_4853, "{HTTP MODULE}Failed to chunked data size to oct. hex[%s]")
    TRC_MSG(TRC_MRE_VMHTTP_4859, "{HTTP MODULE} vm_http_recv_data(chunked), size_str:[0x%x], chunk_data_size:%d .")
    TRC_MSG(TRC_MRE_VMHTTP_4915, "{HTTP MODULE} vm_http_recv_data - chunk size < 0, size_str:[0x%x] .")
    TRC_MSG(TRC_MRE_VMHTTP_4964, "{HTTP MODULE} vm_http_recv_data (chunked), to save data from buffer to data.ret:%d, chunk_size:%d, receive_num:%d, read:%d .")
    TRC_MSG(TRC_MRE_VMHTTP_4993, "{HTTP MODULE} vm_http_recv_data (chunked), saved data from buffer to data.ret:%d, chunk_size:%d, receive_num:%d, read:%d .")
    TRC_MSG(TRC_MRE_VMHTTP_5008, "{HTTP MODULE} vm_http_recv_data (chunked), read finish a chunk in buffer.chunk_size:%d, receive_num:%d, read:%d .")
    TRC_MSG(TRC_MRE_VMHTTP_5047, "{HTTP MODULE} vm_http_recv_data - Chunk encoding format error.")
    TRC_MSG(TRC_MRE_VMHTTP_5060, "{HTTP MODULE} vm_http_recv_data - Chunk encoding format error.")
    TRC_MSG(TRC_MRE_VMHTTP_5086, "{HTTP MODULE} leave vm_http_recv_data -handle:%d, len:%d .")
    
    TRC_MSG(TRC_MRE_VMCAMERA_001, "[VMCAMERA] preview_layer_buffer MALLOC FAILED")
    TRC_MSG(TRC_MRE_VMCAMERA_002, "[VMCAMERA]frame_buffer MALLOC FAILED")
    TRC_MSG(TRC_MRE_VMCAMERA_003, "[VMCAMERA]osd_layer_buffer_2 MALLOC FAILED")
    TRC_MSG(TRC_MRE_VMCAMERA_004, "[VMCAMERA]create preview layer failed")
    TRC_MSG(TRC_MRE_VMCAMERA_005, "[VMCAMERA]create osd layer failed")
    TRC_MSG(TRC_MRE_VMCAMERA_006, "[VMCAMERA]power on fail")
    TRC_MSG(TRC_MRE_VMCAMERA_007, "[VMCAMERA]preview fail = %d")
    TRC_MSG(TRC_MRE_VMCAMERA_008, "[VMCAMERA]capture to memory = %d")
    TRC_MSG(TRC_MRE_VMCAMERA_009, "[VMCAMERA]save image = %d")
    TRC_MSG(TRC_MRE_VMCAMERA_010, "[VMCAMERA]create instance camera id = %d")
    TRC_MSG(TRC_MRE_VMCAMERA_011, "[VMCAMERA]create instance kernal malloc error")
    TRC_MSG(TRC_MRE_VMCAMERA_012, "[VMCAMERA]create timer error")
    TRC_MSG(TRC_MRE_VMCAMERA_013, "[VMCAMERA]UNSUPPORT CAMERA FEATURE")
    TRC_MSG(TRC_MRE_VMCAMERA_014, "[VMCAMERA]preview width = %d, height = %d")
    TRC_MSG(TRC_MRE_VMCAMERA_015, "[VMCAMERA]preview start error 1")
    TRC_MSG(TRC_MRE_VMCAMERA_016, "[VMCAMERA]preview start error 2")
    TRC_MSG(TRC_MRE_VMCAMERA_017, "[VMCAMERA]preview stop error 1")
    TRC_MSG(TRC_MRE_VMCAMERA_018, "[VMCAMERA]get frame error 1")
    TRC_MSG(TRC_MRE_VMCAMERA_019, "[VMCAMERA]get raw frame error 1")
    TRC_MSG(TRC_MRE_VMCAMERA_020, "[VMCAMERA]capture size width = %d, height = %d")
    TRC_MSG(TRC_MRE_VMCAMERA_021, "[VMCAMERA]capture status error 1")
    TRC_MSG(TRC_MRE_VMCAMERA_022, "[VMCAMERA]capture status error 2")
    TRC_MSG(TRC_MRE_VMCAMERA_023, "[VMCAMERA]capture status error 3")
    TRC_MSG(TRC_MRE_VMCAMERA_024, "[VMCAMERA]capture status error 4")
    
    TRC_MSG(TRC_MRE_VMCHSET_223, "vm_ucs2_to_gb2312 : the size is out of range")
    TRC_MSG(TRC_MRE_VMCHSET_230, "vm_ucs2_to_gb2312 : the ptr of src or dst is NULL")
    TRC_MSG(TRC_MRE_VMCHSET_256, "vm_ucs2_to_gb2312 : mmi_chset_convert return error")
    TRC_MSG(TRC_MRE_VMCHSET_291, "vm_gb2312_to_ucs2 : the size is error")
    TRC_MSG(TRC_MRE_VMCHSET_298, "vm_gb2312_to_ucs2 : the ptr of src or dst is NULL")
    TRC_MSG(TRC_MRE_VMCHSET_317, "vm_gb2312_to_ucs2 : [0x%x] , result=%d")
    TRC_MSG(TRC_MRE_VMCHSET_325, "vm_gb2312_to_ucs2 : mmi_chset_convert return error")
    TRC_MSG(TRC_MRE_VMCHSET_359, "vm_ucs2_to_gb2312 : the size is out of range")
    TRC_MSG(TRC_MRE_VMCHSET_366, "vm_ucs2_to_gb2312 : the ptr of src or dst is NULL")
    TRC_MSG(TRC_MRE_VMCHSET_378, "vm_ucs2_to_gb2312 : mmi_chset_convert return error")
    TRC_MSG(TRC_MRE_VMCHSET_413, "vm_gb2312_to_ucs2 : the size is error")
    TRC_MSG(TRC_MRE_VMCHSET_420, "vm_gb2312_to_ucs2 : the ptr of src or dst is NULL")
    TRC_MSG(TRC_MRE_VMCHSET_425, "vm_gb2312_to_ucs2 : [0x%x] , result=%d")
    TRC_MSG(TRC_MRE_VMCHSET_433, "vm_gb2312_to_ucs2 : mmi_chset_convert return error")
    TRC_MSG(TRC_MRE_VMCHSET_499, "static memory optimize: vm_chset_memory_init")
    TRC_MSG(TRC_MRE_VMCHSET_503, "vm_chset_memory_init vm_malloc ucs2_string fail.")
    TRC_MSG(TRC_MRE_VMCHSET_510, "vm_chset_memory_init vm_malloc ucs2_string_ascii fail.")
    TRC_MSG(TRC_MRE_VMCHSET_517, "vm_chset_memory_init vm_malloc gb2312_string fail.")
    TRC_MSG(TRC_MRE_VMCHSET_542, "static memory optimize: vm_chset_memory_deinit")
    TRC_MSG(TRC_MRE_VMCHSET_757, "[CHSET MODULE] Src enconding unsupport")
    TRC_MSG(TRC_MRE_VMCHSET_763, "[CHSET MODULE] dest enconding unsupport")
    TRC_MSG(TRC_MRE_VMCHSET_823, "countrycode : [0x%x]")
    TRC_MSG(TRC_MRE_VMIME_494, "[IME MODULE]Failed to regisiter ime module. Error Code : %d")
    TRC_MSG(TRC_MRE_VMIME_765, "static memory optimize: vm_input_text - input_buffer")
    TRC_MSG(TRC_MRE_VMIME_769, "vm_input_text vm_calloc fail")
    TRC_MSG(TRC_MRE_VMIME_823, "static memory optimize: vm_input_text2 - input_buffer")
    TRC_MSG(TRC_MRE_VMIME_827, "vm_input_text2 vm_calloc fail")
    TRC_MSG(TRC_MRE_VMIME_899, "static memory optimize: vm_input_text3 - input_buffer")
    TRC_MSG(TRC_MRE_VMIME_946, "[IME MOUDLE]IME resource is error.")
    TRC_MSG(TRC_MRE_VMIME_1011, "[IME MOUDLE]IME resource is error.")
    TRC_MSG(TRC_MRE_VMMACROSTUB_587,   "Setup ringtone: [0x%x].")
    TRC_MSG(TRC_MRE_VMMACROSTUB_591,   "Setup ringtone success, and position = %d.")
    TRC_MSG(TRC_MRE_VMMACROSTUB_596,   "Setup ringtone failed.")
    TRC_MSG(TRC_MRE_VMMACROSTUB_600, "This version can't suppurt this API.")
    TRC_MSG(TRC_MRE_VMMACROSTUB_875, "vm_sal_mms_create_req:end!")
    TRC_MSG(TRC_MRE_VMMACROSTUB_879, "vm_sal_mms_create_req:mms is not valid")
    TRC_MSG(TRC_MRE_VMMACROSTUB_891, "vm_sal_mms_process_create_res:start!")
    TRC_MSG(TRC_MRE_VMMACROSTUB_892, "vm_sal_mms_process_create_res:result = %d")
    TRC_MSG(TRC_MRE_VMMACROSTUB_905, "vm_sal_mms_process_create_res: res->app_id=%d, res->msg_id=%d")
    TRC_MSG(TRC_MRE_VMMACROSTUB_913, "vm_sal_mms_process_create_res:cancel msg fail !")
    TRC_MSG(TRC_MRE_VMMACROSTUB_923, "vm_sal_mms_process_create_res:cancel msg fail !")
    TRC_MSG(TRC_MRE_VMMACROSTUB_947, "vm_sal_mms_process_create_res:end!")
    TRC_MSG(TRC_MRE_VMMACROSTUB_956, "vm_sal_mms_send_req:start!")
    TRC_MSG(TRC_MRE_VMMACROSTUB_963, "vm_sal_mms_send_req:end!")
    TRC_MSG(TRC_MRE_VMMACROSTUB_983, "vm_sal_mms_process_send_res:start!")
    TRC_MSG(TRC_MRE_VMMACROSTUB_984, "vm_sal_mms_process_send_res:start result=%d")
    TRC_MSG(TRC_MRE_VMMACROSTUB_1008, "vm_sal_mms_process_send_res: msg_id=%d")
    TRC_MSG(TRC_MRE_VMMACROSTUB_1012, "vm_sal_mms_process_send_res:vm_sal_delete_mms_req fail !")
    TRC_MSG(TRC_MRE_VMMACROSTUB_1023, "vm_sal_mms_process_send_res:end!")
    TRC_MSG(TRC_MRE_VMMACROSTUB_1029, "vm_sal_delete_mms_req:start!")
    TRC_MSG(TRC_MRE_VMMACROSTUB_1032, "vm_sal_delete_mms_req:end! result = %d")
    TRC_MSG(TRC_MRE_VMMACROSTUB_1045, "vm_sal_stub_mms_cancel_send_mms:start!")
    TRC_MSG(TRC_MRE_VMMACROSTUB_1051, "vm_sal_stub_mms_cancel_send_mms:send cancel msg end!")
    TRC_MSG(TRC_MRE_VMMACROSTUB_1127, "vm_sal_cell_reg_rsp")
    TRC_MSG(TRC_MRE_VMMACROSTUB_1151, "vm_sal_cell_reg_rsp s_vm_sal_cell_nbr_num = %d")
    TRC_MSG(TRC_MRE_VMMACROSTUB_1174, "stub_audio_suspend_background_play....")
    TRC_MSG(TRC_MRE_VMMACROSTUB_1177, "mdi_audio_suspend_background_play....")
    TRC_MSG(TRC_MRE_VMMACROSTUB_1185, "stub_audio_resume_background_play...")
    TRC_MSG(TRC_MRE_VMMACROSTUB_1188, "resume background play.")
    TRC_MSG(TRC_MRE_VMMACROSTUB_1776, "vm_phb_build_contact_ptr:contact == NULL || contact_ptr == NULL")
    TRC_MSG(TRC_MRE_VMMACROSTUB_1790, "vm_phb_build_contact_ptr:contact->office_number=[0x%x]")
    TRC_MSG(TRC_MRE_VMMACROSTUB_1791, "vm_phb_build_contact_ptr:contact->fax_number=[0x%x]")
    TRC_MSG(TRC_MRE_VMMACROSTUB_1804, "vm_phb_build_contact_ptr:contact->birth_day=%d, contact->birth_mon=%d, contact->birth_year=%d")
    TRC_MSG(TRC_MRE_VMMACROSTUB_1823, "vm_phb_build_contact_ptr:user_phb_contact->pos.index =%d")
    TRC_MSG(TRC_MRE_VMMACROSTUB_1824, "vm_phb_build_contact_ptr:user_phb_contact->pos.storage=%d")
    TRC_MSG(TRC_MRE_VMMACROSTUB_1825, "vm_phb_build_contact_ptr:user_phb_contact->name=[0x%x]")
    TRC_MSG(TRC_MRE_VMMACROSTUB_1826, "vm_phb_build_contact_ptr:user_phb_contact->num=[0x%x]")
    TRC_MSG(TRC_MRE_VMMACROSTUB_1834, "vm_phb_build_contact:contact == NULL || contact_ptr == NULL")
    TRC_MSG(TRC_MRE_VMMACROSTUB_1844, "vm_phb_build_contact:contact->office_number=[0x%x]")
    TRC_MSG(TRC_MRE_VMMACROSTUB_1845, "vm_phb_build_contact:contact->fax_number=[0x%x]")
    TRC_MSG(TRC_MRE_VMMACROSTUB_1858, "vm_phb_build_contact:contact->birth_day=%d, contact->birth_mon=%d, contact->birth_year=%d")
    TRC_MSG(TRC_MRE_VMMACROSTUB_1875, "vm_phb_build_contact:contact->name=[0x%x]")
    TRC_MSG(TRC_MRE_VMMACROSTUB_1876, "vm_phb_build_contact:contact->number=[0x%x]")
    TRC_MSG(TRC_MRE_VMMACROSTUB_2080, "[BACK KEY]sys_keycode[%d]")
    TRC_MSG(TRC_MRE_VMMACROSTUB_2085, "[BACK KEY]currSB[0x%x]")
    TRC_MSG(TRC_MRE_VMMACROSTUB_2090, "[BACK KEY]pcb->version[%d] 1")
    TRC_MSG(TRC_MRE_VMMACROSTUB_2093, "[BACK KEY]pcb->version[%d] 2")
    TRC_MSG(TRC_MRE_VMMACROSTUB_2182, "qwerty key test: sys_keycode=%d,sys_keytype=%d")
    TRC_MSG(TRC_MRE_VMMACROSTUB_2183, "qwerty key test: keycode=%d,keyevent=%d")
    TRC_MSG(TRC_MRE_VMMACROSTUB_2264, "[IME MODULE]The ptr of url's string is NULL.")
    TRC_MSG(TRC_MRE_VMMACROSTUB_2270, "[IME MODULE]Phone is in flight mode.")
    TRC_MSG(TRC_MRE_VMMACROSTUB_2276, "[IME MODULE]open the browser is fail.")
    TRC_MSG(TRC_MRE_VMMACROSTUB_2284, "[IME MODULE] Current process is not allow to open wap browser.")
    TRC_MSG(TRC_MRE_VMMACROSTUB_2289, "[IME MODULE] Current process is not allow to open wap browser.")
    TRC_MSG(TRC_MRE_VMSALSENSOR_49, "Failed to reg \"[0x%x]\" sensor.")
    TRC_MSG(TRC_MRE_VMSIM_410, "vm_sim_card_count: flight mode")
    TRC_MSG(TRC_MRE_ELFLDR_193,  "vm_get_symbol_name enter")
    TRC_MSG(TRC_MRE_ELFLDR_206,  "vm_get_symbol_name name = [0x%x]")
    TRC_MSG(TRC_MRE_ELFLDR_211,  "vm_get_symbol_name read sym error")
    TRC_MSG(TRC_MRE_ELFLDR_280,  "vm_parse_dynrel name = [0x%x], r_offset = %x, address = %x")
    TRC_MSG(TRC_MRE_ELFLDR_292,  "vm_parse_dynrel modify address success")
    TRC_MSG(TRC_MRE_ELFLDR_365, "Open ELF file error.")
    TRC_MSG(TRC_MRE_ELFLDR_372, "Read ELF head error.(handle=%d, head_size=%d, nread=%d")
    TRC_MSG(TRC_MRE_ELFLDR_383, "ELF tag not found!")
    TRC_MSG(TRC_MRE_ELFLDR_643, "vm_get_file_type type = %d")
    TRC_MSG(TRC_MRE_ELFLDR_648, "vm_get_file_type type = %d")
    TRC_MSG(TRC_MRE_ELFLDR_793, "vm_get_file_type type = %d")
    TRC_MSG(TRC_MRE_HTTPUTIL_170, "Failed to regisiter http module. Error Code : %d")
    TRC_MSG(TRC_MRE_HTTPUTIL_215, "enqueue() session->hook: 0x%x.")
    TRC_MSG(TRC_MRE_VMBITSTREAM_40, "bitstream_handle = %d, bitstream_start = %d")
    TRC_MSG(TRC_MRE_VMBITSTREAM_46, "vm_sal_bitstream_audio_stop = %d")
    TRC_MSG(TRC_MRE_VMBITSTREAM_51, "vm_sal_bitstream_audio_close = %d")
    TRC_MSG(TRC_MRE_VMBITSTREAM_62,   "entry vm_bitstream_audio_notify_callback,  sys_state = %d")
    TRC_MSG(TRC_MRE_VMBITSTREAM_66,   "vm_bitstream_audio_notify_callback,  sys_state = VM_PMNG_FOREGROUND, process_handle = %d")
    TRC_MSG(TRC_MRE_VMBITSTREAM_71,   "vm_bitstream_audio_notify_callback,  sys_state = VM_PMNG_BACKGROUND / VM_PMNG_UNLOAD, process_handle = %d")
    TRC_MSG(TRC_MRE_VMBITSTREAM_81,   "entry vm_bitstream_audio_mod_evt_proc, and event = %d")
    TRC_MSG(TRC_MRE_VMBITSTREAM_99,   "{BITSTREAM AUDIO MODULE}Receive unkown [%d] event.")
    TRC_MSG(TRC_MRE_VMBITSTREAM_115,   "_vm_reg_bitsteam_audio_module : Failed to regisiter bitstream audio module. Error Code : %d")
    TRC_MSG(TRC_MRE_VMBITSTREAM_131,  "entry vm_bitstream_audio_preprocess_play, and audio_type = %d.")
    TRC_MSG(TRC_MRE_VMBITSTREAM_173,  "exit vm_bitstream_audio_preprocess_play, and result = %d")
    TRC_MSG(TRC_MRE_VMBITSTREAM_187, "entry vm_bitstream_audio_callback, and handle = %d, result = %d, cb = %d")
    TRC_MSG(TRC_MRE_VMBITSTREAM_193, "bitstream callback = %d")
    TRC_MSG(TRC_MRE_VMBITSTREAM_209, "entry vm_bitstream_audio_open.")
    TRC_MSG(TRC_MRE_VMBITSTREAM_216,  "vm_res_save_data success, res_handle = %d, audio_type->vm_codec_type = %d")
    TRC_MSG(TRC_MRE_VMBITSTREAM_218,  "vm_bitstream_audio_open = %d")
    TRC_MSG(TRC_MRE_VMBITSTREAM_222,  "*handle = %d, result = %d, (void*)callback = %d")
    TRC_MSG(TRC_MRE_VMBITSTREAM_232, "exit vm_bitstream_audio_open and result = %d.")
    TRC_MSG(TRC_MRE_VMBITSTREAM_241, "entry vm_bitstream_audio_close.")
    TRC_MSG(TRC_MRE_VMBITSTREAM_261, "exit vm_bitstream_audio_close and result = %d.")
    TRC_MSG(TRC_MRE_VMBITSTREAM_275, "vm_sal_bitstream_audio_get_buffer_status = %d")
    TRC_MSG(TRC_MRE_VMBITSTREAM_289, "vm_bitstream_audio_put_data, buffer = %d")
    TRC_MSG(TRC_MRE_VMBITSTREAM_319, "entry vm_bitstream_audio_start.")
    TRC_MSG(TRC_MRE_VMBITSTREAM_323,   "Current  process isn't FG.")
    TRC_MSG(TRC_MRE_VMBITSTREAM_335, "exit vm_bitstream_audio_start and result = %d.")
    TRC_MSG(TRC_MRE_VMBITSTREAM_344, "entry vm_bitstream_audio_stop.")
    TRC_MSG(TRC_MRE_VMBITSTREAM_355, "exit vm_bitstream_audio_stop and result = %d.")
    TRC_MSG(TRC_MRE_VMBITSTREAM_400, "vm_bitstream_video_release_callback: process_handle:%d ,processid:%d,sys_state:%d")
    TRC_MSG(TRC_MRE_VMCELL_142, "Failed to regisiter cell moudal. Error Code : %d")
    TRC_MSG(TRC_MRE_VMCELL_177, "{CELL MODUAL}Receive unkown[%d] event.")
   
    TRC_MSG(TRC_MRE_VMCERMNG_01,  "[VMCERMNG]verify app cert = %d, appid = %d")
    TRC_MSG(TRC_MRE_VMCERMNG_02,  "[VMCERMNG]verify failed = %d")
    TRC_MSG(TRC_MRE_VMCERMNG_03,  "[VMCERMNG]verify appid failed = %d")
    TRC_MSG(TRC_MRE_VMCERMNG_04,  "[VMCERMNG]verify resolution failed = %d")
    TRC_MSG(TRC_MRE_VMCERMNG_05,  "[VMCERMNG]verify memory failed = %d")
    TRC_MSG(TRC_MRE_VMCERMNG_06,  "[VMCERMNG]vm_ce_init error = %d")
    TRC_MSG(TRC_MRE_VMCERMNG_07,  "[VMCERMNG]vm_ce_get_app_digest error = %d")
    TRC_MSG(TRC_MRE_VMCERVAR_01,  "[VMCERMNG]var in use")
    TRC_MSG(TRC_MRE_VMCERVAR_02,  "[VMCERMNG]kernel memroy not enough")
    TRC_MSG(TRC_MRE_VMCERVAR_03,  "[VMCERMNG]get pkey list error")
    TRC_MSG(TRC_MRE_VMCERVAR_04,  "[VMCERMNG]adjust pkey list error")    
    
    TRC_MSG(TRC_MRE_VMGETTAG_01, "[VMTAG]vm get tag tag = %d,ret = %d")
    TRC_MSG(TRC_MRE_VMGETTAG_02, "[VMTAG]vm get multi tags ret = %d")
    TRC_MSG(TRC_MRE_VMGETTAG_03, "[VMTAG]curr app cert id = %d")    
    
    TRC_MSG(TRC_MRE_VMGFXOLD_267, "vm_initialize_screen_buffer")
    TRC_MSG(TRC_MRE_VMGFXOLD_270, "vm_initialize_screen_buffer2")
    TRC_MSG(TRC_MRE_VMGFXOLD_275, "vm_initialize_screen_buffer -create_layer ")
    TRC_MSG(TRC_MRE_VMGFXOLD_307, "vm_finalize_screen_buffer")
    TRC_MSG(TRC_MRE_VMGFXOLD_310, "vm_finalize_screen_buffer--delete layer")
    TRC_MSG(TRC_MRE_VMGFXOLD_407, "draw gif image. resid = %d, size = %d, ptr = %x, x = %d, y = %d")
    TRC_MSG(TRC_MRE_VMMMS_172, "Failed to regisiter mms modual. Error Code : %d")
    TRC_MSG(TRC_MRE_VMMMS_192, "{MMS MODUAL}Receive unkown [%d] event.")
    TRC_MSG(TRC_MRE_VMMMS_239, "vm_mms_send_mms: req_ptr is null")
    TRC_MSG(TRC_MRE_VMMMS_246, "vm_mms_send_mms:file = %d")
    TRC_MSG(TRC_MRE_VMMMS_253, "vm_mms_send_mms:sim_card_result = %d")
    TRC_MSG(TRC_MRE_VMMMS_256, "vm_mms_send_mms:vm_mms_sim_is_not_valid")
    TRC_MSG(TRC_MRE_VMMMS_262, "vm_mms_send_mms:req_ptr->sim_id = %d")
    TRC_MSG(TRC_MRE_VMMMS_268, "vm_mms_send_mms:req_ptr->mms_type = %d")
    TRC_MSG(TRC_MRE_VMMMS_275, "vm_mms_send_mms:filepath calloc failed")
    TRC_MSG(TRC_MRE_VMMMS_284, "vm_mms_send_mms:xml is not valid")
    TRC_MSG(TRC_MRE_VMMMS_290, "vm_mms_send_mms:res_avaliable <= 0")
    TRC_MSG(TRC_MRE_VMMMS_297, "vm_mms_send_mms : calloc mem failed")
    TRC_MSG(TRC_MRE_VMMMS_302, "vm_mms_send_mms:mms_send_ptr->sim_id = %d")
    TRC_MSG(TRC_MRE_VMMMS_309, "vm_mms_send_mms:create  timer fail!")
    TRC_MSG(TRC_MRE_VMMMS_315, "vm_mms_send_mms: vm_res_save_data fail!")
    TRC_MSG(TRC_MRE_VMMMS_319, "vm_mms_send_mms:count = %d")
    TRC_MSG(TRC_MRE_VMMMS_331, "vm_mms_queue_manager: tid=%d")
    TRC_MSG(TRC_MRE_VMMMS_337, "vm_mms_queue_manager:vm_delete_timer fail!")
    TRC_MSG(TRC_MRE_VMMMS_344, "vm_mms_queue_manager:s_vm_mms_is_busy == TRUE")
    TRC_MSG(TRC_MRE_VMMMS_349, "vm_mms_queue_manager:res = %d")
    TRC_MSG(TRC_MRE_VMMMS_352, "vm_mms_queue_manager:vm_res_get_data fail!")
    TRC_MSG(TRC_MRE_VMMMS_359, "vm_mms_queue_manager:vm_sal_mms_send_mms")
    TRC_MSG(TRC_MRE_VMMMS_363, "vm_mms_queue_manager:sal_send_result = %d")
    TRC_MSG(TRC_MRE_VMMMS_380, "vm_mms_send_mms_callback:res=%d count = %d")
    TRC_MSG(TRC_MRE_VMMMS_384, "vm_mms_send_mms_callback:get data list fail!")
    TRC_MSG(TRC_MRE_VMMMS_389, "vm_mms_send_mms_callback:data_handle = %d")
    TRC_MSG(TRC_MRE_VMMMS_392, "vm_mms_send_mms_callback:res_node.phandle=%d")
    TRC_MSG(TRC_MRE_VMMMS_399, "vm_mms_send_mms_callback:run user_callback result= %d")
    TRC_MSG(TRC_MRE_VMMMS_406, "vm_mms_send_mms_callback:free mem!")
    TRC_MSG(TRC_MRE_VMMMS_410, "vm_mms_send_mms_callback:res_node->res_id=%d")
    TRC_MSG(TRC_MRE_VMMMS_415, "vm_mms_send_mms_callback:vm_res_release_data fail!")
    TRC_MSG(TRC_MRE_VMMMS_418, "vm_mms_send_mms_callback:release_data res_handle=%d")
    TRC_MSG(TRC_MRE_VMMMS_425, "vm_mms_send_mms_callback:vm_create_timer fail!")
    TRC_MSG(TRC_MRE_VMMMS_458, "vm_mms_xml_is_valid:s_vm_mms_xml_name calloc failed")
    TRC_MSG(TRC_MRE_VMMMS_466, "vm_mms_xml_is_valid:s_vm_mms_xml_filepath calloc failed")
    TRC_MSG(TRC_MRE_VMMMS_477, "vm_mms_xml_is_valid:xml_result = %d")
    TRC_MSG(TRC_MRE_VMMMS_482, "vm_mms_xml_is_valid:s_vm_mms_xml_is_valid = %d")
    TRC_MSG(TRC_MRE_VMMMS_487, "vm_mms_xml_is_valid:s_vm_mms_xml_slidecount = %d,s_vm_mms_xml_slidenum = %d")
    TRC_MSG(TRC_MRE_VMMMS_492, "vm_mms_xml_is_valid:s_vm_mms_xml_objcount = %d,s_vm_mms_xml_objnum = %d")
    TRC_MSG(TRC_MRE_VMMMS_499, "vm_mms_xml_is_valid:s_vm_mms_xml_parser_is_busy=%d")
    TRC_MSG(TRC_MRE_VMMMS_515, "vm_mms_xml_parser:(new parser fail)ret = [0x%x]")
    TRC_MSG(TRC_MRE_VMMMS_529, "vm_mms_xml_parser:(parser)ret = [0x%x]")
    TRC_MSG(TRC_MRE_VMMMS_540, "vm_mms_xml_elem_start_callback:el=[0x%x], error=%d,error_string=[0x%x]")
    TRC_MSG(TRC_MRE_VMMMS_557, "vm_mms_xml_elem_start_callback:type=[0x%x]")
    TRC_MSG(TRC_MRE_VMMMS_568, "vm_mms_xml_elem_start_callback:(to cc bcc from)no such attribute:[0x%x]")
    TRC_MSG(TRC_MRE_VMMMS_582, "vm_mms_xml_elem_start_callback:(meta)name=[0x%x]")
    TRC_MSG(TRC_MRE_VMMMS_586, "vm_mms_xml_elem_start_callback:(meta)content=[0x%x]")
    TRC_MSG(TRC_MRE_VMMMS_591, "vm_mms_xml_elem_start_callback:(meta)no such attribute:[0x%x]")
    TRC_MSG(TRC_MRE_VMMMS_606, "vm_mms_xml_elem_start_callback:(layout)width error:[0x%x]")
    TRC_MSG(TRC_MRE_VMMMS_615, "vm_mms_xml_elem_start_callback:(layout)height error:[0x%x]")
    TRC_MSG(TRC_MRE_VMMMS_622, "vm_mms_xml_elem_start_callback:(layout)no such attribute:[0x%x]")
    TRC_MSG(TRC_MRE_VMMMS_634, "vm_mms_xml_elem_start_callback:(region)id=[0x%x]")
    TRC_MSG(TRC_MRE_VMMMS_641, "vm_mms_xml_elem_start_callback:(region)top error:[0x%x]")
    TRC_MSG(TRC_MRE_VMMMS_650, "vm_mms_xml_elem_start_callback:(region)left error:[0x%x]")
    TRC_MSG(TRC_MRE_VMMMS_659, "vm_mms_xml_elem_start_callback:(region)height error:[0x%x]")
    TRC_MSG(TRC_MRE_VMMMS_668, "vm_mms_xml_elem_start_callback:(region)width error:[0x%x]")
    TRC_MSG(TRC_MRE_VMMMS_683, "vm_mms_xml_elem_start_callback:(region)fit error:[0x%x]")
    TRC_MSG(TRC_MRE_VMMMS_690, "vm_mms_xml_elem_start_callback:(region)no such attribute:[0x%x]")
    TRC_MSG(TRC_MRE_VMMMS_704, "vm_mms_xml_elem_start_callback:(body)bgColor = [0x%x]")
    TRC_MSG(TRC_MRE_VMMMS_713, "vm_mms_xml_elem_start_callback:(body)fgColor = [0x%x]")
    TRC_MSG(TRC_MRE_VMMMS_723, "vm_mms_xml_elem_start_callback:(body)slideNum = [0x%x]")
    TRC_MSG(TRC_MRE_VMMMS_732, "vm_mms_xml_elem_start_callback:(body)slideNum = [0x%x]")
    TRC_MSG(TRC_MRE_VMMMS_742, "vm_mms_xml_elem_start_callback:(body)objNum = [0x%x]")
    TRC_MSG(TRC_MRE_VMMMS_760, "vm_mms_xml_elem_start_callback:(body)layout = [0x%x]")
    TRC_MSG(TRC_MRE_VMMMS_775, "vm_mms_xml_elem_start_callback:(body)imgFit = [0x%x]")
    TRC_MSG(TRC_MRE_VMMMS_790, "vm_mms_xml_elem_start_callback:(body)txtFit = [0x%x]")
    TRC_MSG(TRC_MRE_VMMMS_796, "vm_mms_xml_elem_start_callback:(body)no such attribute:[0x%x]")
    TRC_MSG(TRC_MRE_VMMMS_813, "vm_mms_xml_elem_start_callback:(slide)index = [0x%x]")
    TRC_MSG(TRC_MRE_VMMMS_822, "vm_mms_xml_elem_start_callback:(slide)index = [0x%x]")
    TRC_MSG(TRC_MRE_VMMMS_832, "vm_mms_xml_elem_start_callback:(slide)dur = [0x%x]")
    TRC_MSG(TRC_MRE_VMMMS_841, "vm_mms_xml_elem_start_callback:(slide)dur = [0x%x]")
    TRC_MSG(TRC_MRE_VMMMS_848, "vm_mms_xml_elem_start_callback:(slide)no such attribute:[0x%x]")
    TRC_MSG(TRC_MRE_VMMMS_865, "vm_mms_xml_elem_start_callback:(obj)id = [0x%x]")
    TRC_MSG(TRC_MRE_VMMMS_874, "vm_mms_xml_elem_start_callback:(obj)id = [0x%x]")
    TRC_MSG(TRC_MRE_VMMMS_884, "vm_mms_xml_elem_start_callback:(obj)attach = [0x%x]")
    TRC_MSG(TRC_MRE_VMMMS_893, "vm_mms_xml_elem_start_callback:(obj)vf = [0x%x]")
    TRC_MSG(TRC_MRE_VMMMS_908, "vm_mms_xml_elem_start_callback:(obj)drm = [0x%x]")
    TRC_MSG(TRC_MRE_VMMMS_917, "vm_mms_xml_elem_start_callback:(obj)size = [0x%x]")
    TRC_MSG(TRC_MRE_VMMMS_926, "vm_mms_xml_elem_start_callback:(obj)size = [0x%x]")
    TRC_MSG(TRC_MRE_VMMMS_936, "vm_mms_xml_elem_start_callback:(obj)offset = [0x%x]")
    TRC_MSG(TRC_MRE_VMMMS_945, "vm_mms_xml_elem_start_callback:(obj)offset = [0x%x]")
    TRC_MSG(TRC_MRE_VMMMS_965, "vm_mms_xml_elem_start_callback:(obj)encoding = [0x%x]")
    TRC_MSG(TRC_MRE_VMMMS_971, "vm_mms_xml_elem_start_callback:(obj)no such attribute:[0x%x]")
    TRC_MSG(TRC_MRE_VMMMS_987, "vm_mms_xml_elem_start_callback:(text)id = [0x%x]")
    TRC_MSG(TRC_MRE_VMMMS_996, "vm_mms_xml_elem_start_callback:(text)id = [0x%x]")
    TRC_MSG(TRC_MRE_VMMMS_1005, "vm_mms_xml_elem_start_callback:(text)bgColor = [0x%x]")
    TRC_MSG(TRC_MRE_VMMMS_1014, "vm_mms_xml_elem_start_callback:(text)fgColor = [0x%x]")
    TRC_MSG(TRC_MRE_VMMMS_1024, "vm_mms_xml_elem_start_callback:(text)txtStyle = [0x%x]")
    TRC_MSG(TRC_MRE_VMMMS_1036, "vm_mms_xml_elem_start_callback:(text)txtSize = [0x%x]")
    TRC_MSG(TRC_MRE_VMMMS_1045, "vm_mms_xml_elem_start_callback:(text)begin = [0x%x]")
    TRC_MSG(TRC_MRE_VMMMS_1054, "vm_mms_xml_elem_start_callback:(text)begin = [0x%x]")
    TRC_MSG(TRC_MRE_VMMMS_1064, "vm_mms_xml_elem_start_callback:(text)end = [0x%x]")
    TRC_MSG(TRC_MRE_VMMMS_1073, "vm_mms_xml_elem_start_callback:(text)end = [0x%x]")
    TRC_MSG(TRC_MRE_VMMMS_1080, "vm_mms_xml_elem_start_callback:(text)alt=[0x%x]")
    TRC_MSG(TRC_MRE_VMMMS_1084, "vm_mms_xml_elem_start_callback:(text)region=[0x%x]")
    TRC_MSG(TRC_MRE_VMMMS_1088, "vm_mms_xml_elem_start_callback:(text)no such attribute:[0x%x]")
    TRC_MSG(TRC_MRE_VMMMS_1104, "vm_mms_xml_elem_start_callback:(img)id = [0x%x]")
    TRC_MSG(TRC_MRE_VMMMS_1113, "vm_mms_xml_elem_start_callback:(img)id = [0x%x]")
    TRC_MSG(TRC_MRE_VMMMS_1123, "vm_mms_xml_elem_start_callback:(img)begin = [0x%x]")
    TRC_MSG(TRC_MRE_VMMMS_1132, "vm_mms_xml_elem_start_callback:(img)begin = [0x%x]")
    TRC_MSG(TRC_MRE_VMMMS_1142, "vm_mms_xml_elem_start_callback:(img)end = [0x%x]")
    TRC_MSG(TRC_MRE_VMMMS_1151, "vm_mms_xml_elem_start_callback:(img)end = [0x%x]")
    TRC_MSG(TRC_MRE_VMMMS_1158, "vm_mms_xml_elem_start_callback:(img)alt=[0x%x]")
    TRC_MSG(TRC_MRE_VMMMS_1162, "vm_mms_xml_elem_start_callback:(img)region=[0x%x]")
    TRC_MSG(TRC_MRE_VMMMS_1166, "vm_mms_xml_elem_start_callback:(text)no such attribute:[0x%x]")
    TRC_MSG(TRC_MRE_VMMMS_1182, "vm_mms_xml_elem_start_callback:(audio)id = [0x%x]")
    TRC_MSG(TRC_MRE_VMMMS_1191, "vm_mms_xml_elem_start_callback:(audio)id = [0x%x]")
    TRC_MSG(TRC_MRE_VMMMS_1201, "vm_mms_xml_elem_start_callback:(audio)begin = [0x%x]")
    TRC_MSG(TRC_MRE_VMMMS_1210, "vm_mms_xml_elem_start_callback:(audio)begin = [0x%x]")
    TRC_MSG(TRC_MRE_VMMMS_1220, "vm_mms_xml_elem_start_callback:(audio)end = [0x%x]")
    TRC_MSG(TRC_MRE_VMMMS_1229, "vm_mms_xml_elem_start_callback:(audio)end = [0x%x]")
    TRC_MSG(TRC_MRE_VMMMS_1236, "vm_mms_xml_elem_start_callback:(audio)alt=[0x%x]")
    TRC_MSG(TRC_MRE_VMMMS_1240, "vm_mms_xml_elem_start_callback:(audio)no such attribute:[0x%x]")
    TRC_MSG(TRC_MRE_VMMMS_1256, "vm_mms_xml_elem_start_callback:(video)id = [0x%x]")
    TRC_MSG(TRC_MRE_VMMMS_1265, "vm_mms_xml_elem_start_callback:(video)id = [0x%x]")
    TRC_MSG(TRC_MRE_VMMMS_1275, "vm_mms_xml_elem_start_callback:(video)begin = [0x%x]")
    TRC_MSG(TRC_MRE_VMMMS_1284, "vm_mms_xml_elem_start_callback:(video)begin = [0x%x]")
    TRC_MSG(TRC_MRE_VMMMS_1294, "vm_mms_xml_elem_start_callback:(video)end = [0x%x]")
    TRC_MSG(TRC_MRE_VMMMS_1303, "vm_mms_xml_elem_start_callback:(video)end = [0x%x]")
    TRC_MSG(TRC_MRE_VMMMS_1310, "vm_mms_xml_elem_start_callback:(video)alt=[0x%x]")
    TRC_MSG(TRC_MRE_VMMMS_1314, "vm_mms_xml_elem_start_callback:(video)region=[0x%x]")
    TRC_MSG(TRC_MRE_VMMMS_1318, "vm_mms_xml_elem_start_callback:(video)no such attribute:[0x%x]")
    TRC_MSG(TRC_MRE_VMMMS_1334, "vm_mms_xml_elem_start_callback:(ref)id = [0x%x]")
    TRC_MSG(TRC_MRE_VMMMS_1343, "vm_mms_xml_elem_start_callback:(ref)id = [0x%x]")
    TRC_MSG(TRC_MRE_VMMMS_1353, "vm_mms_xml_elem_start_callback:(ref)begin = [0x%x]")
    TRC_MSG(TRC_MRE_VMMMS_1362, "vm_mms_xml_elem_start_callback:(ref)begin = [0x%x]")
    TRC_MSG(TRC_MRE_VMMMS_1372, "vm_mms_xml_elem_start_callback:(ref)end = [0x%x]")
    TRC_MSG(TRC_MRE_VMMMS_1381, "vm_mms_xml_elem_start_callback:(ref)end = [0x%x]")
    TRC_MSG(TRC_MRE_VMMMS_1388, "vm_mms_xml_elem_start_callback:(ref)alt=[0x%x]")
    TRC_MSG(TRC_MRE_VMMMS_1392, "vm_mms_xml_elem_start_callback:(ref)region=[0x%x]")
    TRC_MSG(TRC_MRE_VMMMS_1396, "vm_mms_xml_elem_start_callback:(ref)no such attribute:[0x%x]")
    TRC_MSG(TRC_MRE_VMMMS_1408, "vm_mms_xml_elem_start_callback:s_vm_mms_xml_name is null ")
    TRC_MSG(TRC_MRE_VMMMS_1422, "vm_mms_xml_elem_start_callback:s_vm_mms_xml_filepath is null")
    TRC_MSG(TRC_MRE_VMMMS_1438, "vm_mms_xml_elem_end_callback:el=[0x%x], error=%d,error_string=[0x%x]")
    TRC_MSG(TRC_MRE_VMMMS_1446, "vm_mms_xml_elem_end_callback:s_vm_mms_xml_name = [0x%x]")
    TRC_MSG(TRC_MRE_VMMMS_1450, "vm_mms_xml_elem_end_callback:name is null")
    TRC_MSG(TRC_MRE_VMMMS_1456, "vm_mms_xml_elem_end_callback:s_vm_mms_xml_name=NULL")
    TRC_MSG(TRC_MRE_VMMMS_1465, "vm_mms_xml_elem_end_callback:s_vm_mms_xml_filepath = [0x%x]")
    TRC_MSG(TRC_MRE_VMMMS_1469, "vm_mms_xml_elem_end_callback:filepath is null")
    TRC_MSG(TRC_MRE_VMMMS_1475, "vm_mms_xml_elem_end_callback:s_vm_mms_xml_filepath=NULL")
    TRC_MSG(TRC_MRE_VMMMS_1487, "vm_mms_xml_data_callback:el=[0x%x], error=%d,error_string=[0x%x]")
    TRC_MSG(TRC_MRE_VMMMS_1499, "vm_mms_xml_data_callback:(to cc bcc from)no such value:[0x%x]")
    TRC_MSG(TRC_MRE_VMMMS_1508, "vm_mms_xml_data_callback:(subject)data:[0x%x]")
    TRC_MSG(TRC_MRE_VMMMS_1516, "vm_mms_xml_data_callback:rr = [0x%x]")
    TRC_MSG(TRC_MRE_VMMMS_1525, "vm_mms_xml_data_callback:dr = [0x%x]")
    TRC_MSG(TRC_MRE_VMMMS_1537, "vm_mms_xml_data_callback:prio = [0x%x]")
    TRC_MSG(TRC_MRE_VMMMS_1551, "vm_mms_xml_data_callback:expiry = [0x%x]")
    TRC_MSG(TRC_MRE_VMMMS_1563, "vm_mms_xml_data_callback:delivery = [0x%x]")
    TRC_MSG(TRC_MRE_VMMMS_1572, "vm_mms_xml_data_callback:visible = [0x%x]")
    TRC_MSG(TRC_MRE_VMMMS_1581, "vm_mms_xml_data_callback:version = [0x%x]")
    TRC_MSG(TRC_MRE_VMMMS_1591, "vm_mms_xml_elem_start_callback:date = [0x%x]")
    TRC_MSG(TRC_MRE_VMMMS_1599, "vm_mms_xml_data_callback:class = [0x%x]")
    TRC_MSG(TRC_MRE_VMMMS_1615, "vm_mms_xml_data_callback:status = [0x%x]")
    TRC_MSG(TRC_MRE_VMMMS_1625, "vm_mms_xml_data_callback:dl_size = [0x%x]")
    TRC_MSG(TRC_MRE_VMMMS_1631, "vm_mms_xml_data_callback:dl_url=[0x%x]")
    TRC_MSG(TRC_MRE_VMMMS_1638, "vm_mms_xml_data_callback:reported_msg = [0x%x]")
    TRC_MSG(TRC_MRE_VMMMS_1644, "vm_mms_xml_data_callback:reported_msg_sub=[0x%x]")
    TRC_MSG(TRC_MRE_VMMMS_1656, "vm_mms_xml_data_callback:xml get name error")
    TRC_MSG(TRC_MRE_VMMMS_1669, "vm_mms_xml_data_callback:xml get filepath error")
    TRC_MSG(TRC_MRE_VMMOD_98, "[[0x%x]] module will be notified [%d] event.")
    TRC_MSG(TRC_MRE_VMMOD_103, "[0x%x] module is failed to process %d event.")
    TRC_MSG(TRC_MRE_VMMOD_123, "[[0x%x]] module will be notified [%d] event.")
    TRC_MSG(TRC_MRE_VMMOD_135, "[[0x%x]] module will be notified [%d] event.")
    TRC_MSG(TRC_MRE_VMMOD_145, "{MODULE MANAGER}Unkown module lifecircle event[%d]")
    TRC_MSG(TRC_MRE_VMPERMNG_01,  "[VMPERMNG]per init error")
    TRC_MSG(TRC_MRE_VMPERMNG_02,  "[VMPERMNG]app list kernal malloc error")
    TRC_MSG(TRC_MRE_VMPERMNG_03,  "[VMPERMNG]catch fun list error")    
    
    TRC_MSG(TRC_MRE_VMPROMNG_557, "vm_get_sym_entry([0x%x]) : get pcb error. R9[%d]")
    TRC_MSG(TRC_MRE_VMPROMNG_562, "vm_get_sym_entry : will get symbol=[0x%x]")
    TRC_MSG(TRC_MRE_VMPROMNG_564, "vm_get_sym_entry : got symbol=[0x%x], returnval=%d")
    TRC_MSG(TRC_MRE_VMPROMNG_627, "[0x%x] is not authorized!, return value is %x")
    TRC_MSG(TRC_MRE_VMPROMNG_741, "Alloc PCB[%d], is from card == %d, is support bg = %d")
    TRC_MSG(TRC_MRE_VMPROMNG_768, "Free PCB[%d]")
    TRC_MSG(TRC_MRE_VMPROMNG_1008, "[SM] enter _vm_pmng_send_sysevt_msg(%p, %d, %d)")
    TRC_MSG(TRC_MRE_VMPROMNG_1012, "pcb->bg_by_user:%d")
    TRC_MSG(TRC_MRE_VMPROMNG_1018, "[SM] _vm_pmng_send_sysevt_msg(%p, %d, %d) - 1")
    TRC_MSG(TRC_MRE_VMPROMNG_1028, "[SM] _vm_pmng_send_sysevt_msg(%p, %d, %d) - 2, sm_ptr:%p")
    TRC_MSG(TRC_MRE_VMPROMNG_1036, "[SM] SYS event[%d] filtered by SM[%d]")
    TRC_MSG(TRC_MRE_VMPROMNG_1042, "[SM] _vm_pmng_send_sysevt_msg(%p, %d, %d) - 3, sm_ptr:%p")
    TRC_MSG(TRC_MRE_VMPROMNG_1109, "Not support file type, type = %d")
    TRC_MSG(TRC_MRE_VMPROMNG_1129, "Executing PID[%d] exit in loading[UL].")
    TRC_MSG(TRC_MRE_VMPROMNG_1154, "Executing PID[%d] exit in loading[BG].")
    TRC_MSG(TRC_MRE_VMPROMNG_1165, "Executing PID[%d] exit in loading[FG].")
    TRC_MSG(TRC_MRE_VMPROMNG_1203, "Not support file type, type = %d")
    TRC_MSG(TRC_MRE_VMPROMNG_1224, "Executing PID[%d] exit in loading[UL].")
    TRC_MSG(TRC_MRE_VMPROMNG_1242, "Executing PID[%d] exit in loading[BG].")
    TRC_MSG(TRC_MRE_VMPROMNG_1254, "Executing PID[%d] exit in loading[FG].")
    TRC_MSG(TRC_MRE_VMPROMNG_1263, "[MOD_MRE]Executing PID[] exit Because tmppcb==NULL.")
    TRC_MSG(TRC_MRE_VMPROMNG_1315, "entry=0x%x, phnum=%d, shnum=%d")
    TRC_MSG(TRC_MRE_VMPROMNG_1318, "ph.filesz=%d, ph.memsz=%d")
    TRC_MSG(TRC_MRE_VMPROMNG_1339, "Loading ER_RO.Offset is %x, Size is %d.")
    TRC_MSG(TRC_MRE_VMPROMNG_1360, "Init params: SB=0x%x, SYM_ENTRY=0x%x, HEAP_BASE=0x%x, HEAP_LIMIT=0x%x, ENTRY=0x%x.")
    TRC_MSG(TRC_MRE_VMPROMNG_1411, "Open executable file successfully. entry=0x%x, phnum=0x%x, shnum=0x%x.")
    TRC_MSG(TRC_MRE_VMPROMNG_1415, "ph.p_filesz=0x%x, ph.p_memsz=0x%x.")
    TRC_MSG(TRC_MRE_VMPROMNG_1426, "ER_RW.size=0x%x.")
    TRC_MSG(TRC_MRE_VMPROMNG_1433, "ER_RO.size=0x%x.")
    TRC_MSG(TRC_MRE_VMPROMNG_1458, "Init params: SB=0x%x, SYM_ENTRY=0x%x, HEAP_BASE=0x%x, HEAP_LIMIT=0x%x, ENTRY=0x%x.")
    TRC_MSG(TRC_MRE_VMPROMNG_1464, "Read ER_RW error.")
    TRC_MSG(TRC_MRE_VMPROMNG_1470, "Read ER_RO error.")
    TRC_MSG(TRC_MRE_VMPROMNG_1476, "Read ER_RO section head error.")
    TRC_MSG(TRC_MRE_VMPROMNG_1483, "Requirement of memory error.")
    TRC_MSG(TRC_MRE_VMPROMNG_1489, "Read ER_RW section head error.")
    TRC_MSG(TRC_MRE_VMPROMNG_1496, "Read String section error.")
    TRC_MSG(TRC_MRE_VMPROMNG_1502, "Allocate String table memory error.")
    TRC_MSG(TRC_MRE_VMPROMNG_1508, "Read String section head error.")
    TRC_MSG(TRC_MRE_VMPROMNG_1514, "Read program head error.")
    TRC_MSG(TRC_MRE_VMPROMNG_1522, "Open executable file error.")
    TRC_MSG(TRC_MRE_VMPROMNG_1540, "Open executable file successfully. entry=0x%x, phnum=0x%x, shnum=0x%x.")
    TRC_MSG(TRC_MRE_VMPROMNG_1545, "ph.p_filesz=0x%x, ph.p_memsz=0x%x.")
    TRC_MSG(TRC_MRE_VMPROMNG_1601, "Init params: SB=0x%x, SYM_ENTRY=0x%x, HEAP_BASE=0x%x, HEAP_LIMIT=0x%x, ENTRY=0x%x.")
    TRC_MSG(TRC_MRE_VMPROMNG_1611, "relstr s tab = [0x%x].")
    TRC_MSG(TRC_MRE_VMPROMNG_1615, "relstr error = [0x%x].")
    TRC_MSG(TRC_MRE_VMPROMNG_1622, "dynsym error")
    TRC_MSG(TRC_MRE_VMPROMNG_1675, "Open executable file error.")
    TRC_MSG(TRC_MRE_VMPROMNG_1680, "Not support file type, type = %d")
    TRC_MSG(TRC_MRE_VMPROMNG_1814, "current r9 = %d")
    TRC_MSG(TRC_MRE_VMPROMNG_1858, "PMNG Notify Module(vm_pmng_finialize):UNLOAD!!")
    TRC_MSG(TRC_MRE_VMPROMNG_1892, "PCB[%d] register system event handler.")
    TRC_MSG(TRC_MRE_VMPROMNG_1897, "Dismatch pcb by r9 value=%d.")
    TRC_MSG(TRC_MRE_VMPROMNG_1926, "PCB[%d] register user message proc.")
    TRC_MSG(TRC_MRE_VMPROMNG_1931, "Dismatch pcb by r9 value=%d.")
    TRC_MSG(TRC_MRE_VMPROMNG_2038, "vm_pmng_create_process : certres=%d")
    TRC_MSG(TRC_MRE_VMPROMNG_2071, "Failed to alloc kernel memory to assgin pcb.")
    TRC_MSG(TRC_MRE_VMPROMNG_2090, "Failed to load function list.")
    TRC_MSG(TRC_MRE_VMPROMNG_2102, "Failed Get app id from file.")
    TRC_MSG(TRC_MRE_VMPROMNG_2204, "result of uncompress:  %d  ")
    TRC_MSG(TRC_MRE_VMPROMNG_2205, "dest size of RO is %d : ")
    TRC_MSG(TRC_MRE_VMPROMNG_2216, "result of uncompress:  %d  ")
    TRC_MSG(TRC_MRE_VMPROMNG_2217, "dest size of RW is %d : ")
    TRC_MSG(TRC_MRE_VMPROMNG_2255, "Failed load process image from flash.")
    TRC_MSG(TRC_MRE_VMPROMNG_2270, "Failed set process heap attribute segment.")
    TRC_MSG(TRC_MRE_VMPROMNG_2279, "MRE APP %d ADM ID = %d")
    TRC_MSG(TRC_MRE_VMPROMNG_2285, "Failed to execute application because app exit.")
    TRC_MSG(TRC_MRE_VMPROMNG_2326, "vm_pmng_create_process : certres=%d")
    TRC_MSG(TRC_MRE_VMPROMNG_2378, "Failed to alloc kernel memory to assgin pcb.")
    TRC_MSG(TRC_MRE_VMPROMNG_2394, "Failed to load function list.")
    TRC_MSG(TRC_MRE_VMPROMNG_2406, "Failed Get app id from file.")
    TRC_MSG(TRC_MRE_VMPROMNG_2451, "ro rw is compressed!")
    TRC_MSG(TRC_MRE_VMPROMNG_2456, "ro offset: %d, ro size: %d, original ro size: %d, rw offset: %d, rw size: %d, original rw size: %d, zi size: %d")
    TRC_MSG(TRC_MRE_VMPROMNG_2627, "open vxp file for uncompressing failed")
    TRC_MSG(TRC_MRE_VMPROMNG_2659, "read vxp file for uncompressing failed")
    TRC_MSG(TRC_MRE_VMPROMNG_2702, "result of uncompress:  %d  ")
    TRC_MSG(TRC_MRE_VMPROMNG_2703, "dest size of RO is %d : ")
    TRC_MSG(TRC_MRE_VMPROMNG_2719, "result of uncompress:  %d  ")
    TRC_MSG(TRC_MRE_VMPROMNG_2720, "dest size of RW is %d : ")
    TRC_MSG(TRC_MRE_VMPROMNG_2871, "open vxp file for uncompressing failed")
    TRC_MSG(TRC_MRE_VMPROMNG_2906, "read vxp file for uncompressing failed")
    TRC_MSG(TRC_MRE_VMPROMNG_2948, "result of uncompress:  %d  ")
    TRC_MSG(TRC_MRE_VMPROMNG_2949, "dest size of RO is %d : ")
    TRC_MSG(TRC_MRE_VMPROMNG_3048, "dynsym error")
    TRC_MSG(TRC_MRE_VMPROMNG_3088, "ro rw is uncompressed!")
    TRC_MSG(TRC_MRE_VMPROMNG_3092, "Failed load process image from file.")
    TRC_MSG(TRC_MRE_VMPROMNG_3113, "Failed to protect to running application.")
    TRC_MSG(TRC_MRE_VMPROMNG_3121, "succeed to load image!")
    TRC_MSG(TRC_MRE_VMPROMNG_3131, "Failed set process heap attribute segment.")
    TRC_MSG(TRC_MRE_VMPROMNG_3140, "MRE APP %d ADM ID = %d")
    TRC_MSG(TRC_MRE_VMPROMNG_3146, "Failed to execute application because app exit.")
    TRC_MSG(TRC_MRE_VMPROMNG_3183, "The file is unkown format.")
    TRC_MSG(TRC_MRE_VMPROMNG_3279, "[PROCESS MANAGER]AM failed to update application.")
    TRC_MSG(TRC_MRE_VMPROMNG_3550, "[SM] vm_pmng_state(%d) - SM[%d] copy found by R9[%d]")
    TRC_MSG(TRC_MRE_VMPROMNG_3554, "[SM] vm_pmng_state(%d) - PCB[] status[%d] got by SM copy's pcb[%p]")
    TRC_MSG(TRC_MRE_VMPROMNG_3574, "[SM] vm_pmng_state(%d) - SM[%d] copy found by handle")
    TRC_MSG(TRC_MRE_VMPROMNG_3578, "[SM] vm_pmng_state(%d) - PCB[] status[%d] got by SM copy's pcb[%p]")
    TRC_MSG(TRC_MRE_VMPROMNG_3732, "[SM] stack.num[%d]->[%d], push r9:[%d]->[%d]")
    TRC_MSG(TRC_MRE_VMPROMNG_3764, "[SM] stack.num[%d]->[%d], pop r9:[%d] -> [%d]")
    TRC_MSG(TRC_MRE_VMPROMNG_3766, "_vm_sb_stack_pop g_vm_stub_sb = [%d]")
    TRC_MSG(TRC_MRE_VMPROMNG_4388, "[SM] vm_pmng_send_app_sys_event - to send [%d] msg to PCB[%d] in SM[%d]")
    TRC_MSG(TRC_MRE_VMPROMNG_4398, "[SM] vm_pmng_send_app_sys_event - to send [%d] msg to APP[%d] in SM[%d]")
    TRC_MSG(TRC_MRE_VMPROMNG_4403, "[SM] vm_pmng_send_app_sys_event - flag:%d")
    TRC_MSG(TRC_MRE_VMPROMNG_4486, "PCB[%d] set venus app flag.")
    TRC_MSG(TRC_MRE_VMPROMNG_4501, "PCB[%d] set venus app flag.")
    TRC_MSG(TRC_MRE_VMPROMNG_4534, "PCB[%d] registier keyborad handler.")
    TRC_MSG(TRC_MRE_VMPROMNG_4566, "PCB[%d] registier pen handler.")
    TRC_MSG(TRC_MRE_VMPROMNG_4611, "[SM] Key event[] filtered by SM[%d]")
    TRC_MSG(TRC_MRE_VMPROMNG_4692, "[SM] Pen event[] filtered by SM[%d]")
    TRC_MSG(TRC_MRE_VMPROMNG_5034, "[SM] vm_pmng_state(%d) - SM[%d] copy found by R9[%d]")
    TRC_MSG(TRC_MRE_VMPROMNG_5038, "[SM] vm_pmng_state(%d) - PCB[] status[%d] got by SM copy's pcb[%p]")
    TRC_MSG(TRC_MRE_VMPROMNG_5217, "[SM] Send HIDE to PCB[%d] in BG status for the 2nd time")
    TRC_MSG(TRC_MRE_VMPROMNG_5249, "[Process Module]process = %d in %d status.")
    TRC_MSG(TRC_MRE_VMPROMNG_5346, "vm_pmng_set_inactive")
    TRC_MSG(TRC_MRE_VMPROMNG_5366, "[Process Module]process = %d in %d status.")
    TRC_MSG(TRC_MRE_VMPROMNG_5416, "PMNG Notify Module(vm_pmng_delete_process_int):UNLOAD!!")
    
    
    TRC_MSG(TRC_MRE_VMRES_01, "[VMRES]load res = %s offset error")
    TRC_MSG(TRC_MRE_VMRES_02, "[VMRES]get res = %s offset error")
    TRC_MSG(TRC_MRE_VMRES_03, "[VMRES]vm_res_init app init more")
    TRC_MSG(TRC_MRE_VMRES_04, "[VMRES]vm_res_init app error")
    TRC_MSG(TRC_MRE_VMRES_05, "[VMRES]vm_res_init app vsm more")
    TRC_MSG(TRC_MRE_VMRES_06, "[VMRES]vm_res_init vsm error")
    TRC_MSG(TRC_MRE_VMRES_07, "[VMRES]get image = %d")
    TRC_MSG(TRC_MRE_VMRES_08, "[VMRES]not support type = %d")   
    
    TRC_MSG(TRC_MRE_VMRESMNG_65, "vm_print_res_table : restype=%d, phandle=%d, resid=%d, mtkresid=%d")
    TRC_MSG(TRC_MRE_VMRESMNG_106, "data_type=%d, data_handle=%d")
    TRC_MSG(TRC_MRE_VMRESMNG_110, "vm_scan_res_table : res_type_ptr=%d")
    TRC_MSG(TRC_MRE_VMRESMNG_113, "vm_scan_res_table : will scan res_type_ptr=%d")
    TRC_MSG(TRC_MRE_VMRESMNG_117, "vm_scan_res_table : will scan res_ptr=%d")
    TRC_MSG(TRC_MRE_VMRESMNG_120, "vm_scan_res_table : find res_node")
    TRC_MSG(TRC_MRE_VMRESMNG_154, "vm_res_init : start ")
    TRC_MSG(TRC_MRE_VMRESMNG_160, "vm_res_init : will init")
    TRC_MSG(TRC_MRE_VMRESMNG_163, "vm_res_init : init type=%d")
    TRC_MSG(TRC_MRE_VMRESMNG_222, "vm_res_finialize will delete type=%d")
    TRC_MSG(TRC_MRE_VMRESMNG_233, "vm_res_finialize deleting type=%d")
    TRC_MSG(TRC_MRE_VMRESMNG_258, "vm_res_save_data : now phandle[%d]'s state is unload, get type[%d] resource failed")
    TRC_MSG(TRC_MRE_VMRESMNG_262, "vm_res_save_data : start")
    TRC_MSG(TRC_MRE_VMRESMNG_265, "vm_res_save_data : have avaliable handle")
    TRC_MSG(TRC_MRE_VMRESMNG_271, "vm_res_save_data : have malloced for res_node")
    TRC_MSG(TRC_MRE_VMRESMNG_287, "vm_res_save_data : have assigned for res_node type=%d, res_id=%d")
    TRC_MSG(TRC_MRE_VMRESMNG_324, "vm_res_save_data : have inserted into queue")
    TRC_MSG(TRC_MRE_VMRESMNG_340, "vm_res_save_data : end, result=%d")
    TRC_MSG(TRC_MRE_VMRESMNG_351, "vm_res_release_data : start, data_type=%d, data_handle=%d")
    TRC_MSG(TRC_MRE_VMRESMNG_361, "vm_res_release_data : release first res node")
    TRC_MSG(TRC_MRE_VMRESMNG_379, "vm_res_release_data : release res node")
    TRC_MSG(TRC_MRE_VMRESMNG_415, "vm_res_release_data : end, result=%d")
    TRC_MSG(TRC_MRE_VMRESMNG_505, "vm_res_set_mtk_reshandle : have success to set mtkresid = %d, type=%d, handle=%d ")
    TRC_MSG(TRC_MRE_VMRESMNG_510, "vm_res_set_mtk_reshandle : fail to find res_node, type=%d, handle=%d, mtk_res_handle=%d ")
    TRC_MSG(TRC_MRE_VMRESMNG_695, "vm_res_type_avaliable_handle : end, result=%d")
    TRC_MSG(TRC_MRE_VMRESMNG_751, "vm_res_get_data_list_count_by_proecss : start,p_handle=%d, data_type=%d")
    TRC_MSG(TRC_MRE_VMRESMNG_775, "vm_res_get_data_list_count_by_proecss : end, rescount=%d")
    TRC_MSG(TRC_MRE_VMRESMNG_788, "vm_res_get_data_list_by_proecss : start,p_handle=%d, data_type=%d")
    TRC_MSG(TRC_MRE_VMRESMNG_823, "vm_res_get_data_list_by_proecss : end, rescount=%d")
    TRC_MSG(TRC_MRE_VMRESMNG_832, "vm_res_get_data_list_by_proecss : end, rescount=%d")
    TRC_MSG(TRC_MRE_VMRESMNG_843, "vm_res_get_data_list_count_by_type : start, data_type=%d")
    TRC_MSG(TRC_MRE_VMRESMNG_866, "vm_res_get_data_list_count_by_type : end, rescount=%d")
    TRC_MSG(TRC_MRE_VMRESMNG_879, "vm_res_get_data_list_by_type : start, data_type=%d")
    TRC_MSG(TRC_MRE_VMRESMNG_913, "vm_res_get_data_list_by_type : end, rescount=%d")
    TRC_MSG(TRC_MRE_VMRESMNG_923, "vm_res_get_data_list_by_type : end, rescount=%d")
    TRC_MSG(TRC_MRE_VMRESMNG_945, "vm_res_notify_data_by_process, end. Have notify all module")
    TRC_MSG(TRC_MRE_VMRESMNG_967, "vm_res_get_stacktop : res_type_p->find_stack[%d]=%d")
    TRC_MSG(TRC_MRE_VMRESMNG_991, "vm_res_modi_stacktop i=%d, stacktop=%d")
    TRC_MSG(TRC_MRE_VMRESMNG_996, "vm_res_modi_stacktop : end datatype=%d, res_id=%d, stack[%d]=%d")
    TRC_MSG(TRC_MRE_VMRESMNG_1039, "vm_res_push : res_type_p->find_stack[%d]=%d")
    TRC_MSG(TRC_MRE_VMRESMNG_1077, "vm_res_findfirst : have scan res_id=%d")
    TRC_MSG(TRC_MRE_VMRESMNG_1082, "vm_res_findfirst : have scan res_id=%d")
    TRC_MSG(TRC_MRE_VMRESMNG_1110, "vm_res_findnext : start p=%d, type=%d")
    TRC_MSG(TRC_MRE_VMRESMNG_1115, "vm_res_findnext : vm_res_get_stacktop resid=%d")
    TRC_MSG(TRC_MRE_VMRESMNG_1129, "vm_res_findnext : loop get resid=%d")
    TRC_MSG(TRC_MRE_VMRESMNG_1144, "vm_res_findnext :will scan res_id=%d, p=%d")
    TRC_MSG(TRC_MRE_VMRESMNG_1157, "vm_res_findnext :scan res_id=%d")
    TRC_MSG(TRC_MRE_VMRESMNG_1193, "vm_res_findclose")
    TRC_MSG(TRC_MRE_VMSENSOR_126, "Failed \"[0x%x]\" stop. ErrorCode = %d")
    TRC_MSG(TRC_MRE_VMSENSOR_144, "{SENSOR MODULE}Receive unkown [%d] event.")
    TRC_MSG(TRC_MRE_VMSENSOR_159, "Failed to regisiter sensor module. Error Code : %d")
    TRC_MSG(TRC_MRE_VMSENSOR_502, "Failed \"[0x%x]\" sensor set numeric option. Error Code = %d.")
    TRC_MSG(TRC_MRE_VMSENSOR_540, "Failed to set set string option \"[0x%x]\" sensor. Error Code = %d.")
    TRC_MSG(TRC_MRE_VMSENSOR_645, "Failed to start \"[0x%x]\" sensor. Error Code = %d")
    TRC_MSG(TRC_MRE_VMSENSOR_714, "Failed to stop \"[0x%x]\" sensor. Error Code = %d")
    TRC_MSG(TRC_MRE_VMSHORTCUT_95,  "size = %d, rom=%x")
    
    
    TRC_MSG(TRC_MRE_VMSM_01, "[VMSM]_vm_sm_create: lerr=%d, info=%d, ret=%d")
    TRC_MSG(TRC_MRE_VMSM_02, "[VMSM]not find in T card")
    TRC_MSG(TRC_MRE_VMSM_03, "[VMSM]not find in system driver")
    TRC_MSG(TRC_MRE_VMSM_04, "[VMSM]not find in ROM")
    TRC_MSG(TRC_MRE_VMSM_05, "[VMSM]sm load name = %s ret = %d")
    TRC_MSG(TRC_MRE_VMSM_06, "[VMSM]sm get func id = %d, ret = %d")
    TRC_MSG(TRC_MRE_VMSM_07, "[VMSM]sm unload = %d")
    TRC_MSG(TRC_MRE_VMSM_08, "[VMSM]reg msg no match vsm file")   
    
    TRC_MSG(TRC_MRE_VMSO_01, "[VMSO] vm_so_read_file: lerr=%d, info=%d, ret=%d")
    TRC_MSG(TRC_MRE_VMSO_02, "[VMSO]load file kernel error")
    TRC_MSG(TRC_MRE_VMSO_03, "[VMSO]not file in T card")
    TRC_MSG(TRC_MRE_VMSO_04, "[VMSO]not file in system driver")
    TRC_MSG(TRC_MRE_VMSO_05, "[VMSO]not file in ROM")
    TRC_MSG(TRC_MRE_VMSO_06, "[VMSO]cert kernel memory error")
    TRC_MSG(TRC_MRE_VMSO_07, "[VMSO]cert error = %d")
    TRC_MSG(TRC_MRE_VMSO_08, "[VMSO]so read file = %d")
    TRC_MSG(TRC_MRE_VMSO_09, "[VMSO]not support type")
    TRC_MSG(TRC_MRE_VMSO_10, "[VMSO]load library = %s, ret = %d")
    TRC_MSG(TRC_MRE_VMSO_11, "[VMSO]get symbol name = %s")
       
    TRC_MSG(TRC_MRE_VMVIDEO_01, "Failed to regisiter video moudle. Error Code : %d")
    
    TRC_MSG(TRC_MRE_VMVIP_282, "Failed to regisiter vip module. Error Code : %d")
    TRC_MSG(TRC_MRE_VMVIP_368, "Failed to get http session in vip.")
    TRC_MSG(TRC_MRE_VMVIP_381, "Failed to send http request in vip.")
    TRC_MSG(TRC_MRE_VMVIP_1524, "shell_config url = [0x%x]")
    TRC_MSG(TRC_MRE_VMVIP_1672, "{VIP MOUDLE}Received unkonw[%d] event.")
    TRC_MSG(TRC_MRE_VMVIP_1735, "{HTTP MODULE}Failed to read user_id.")
    TRC_MSG(TRC_MRE_VMVIP_1744, "{BILLING MODULE}Failed to create to store user_id file.")
    TRC_MSG(TRC_MRE_VMVIP_2452, "[VIP] plus_connect_cmd")
    TRC_MSG(TRC_MRE_VMVIP_2555, "[VIP] vm_get_sys_property user_agent = [0x%x]")
    TRC_MSG(TRC_MRE_VMVIP_2594, "[VIP] vm_get_sys_property user_agent = [0x%x]")
    TRC_MSG(TRC_MRE_VMVIP_2622, "[VIP] get_sys_property mre_version = [0x%x]")
    TRC_MSG(TRC_MRE_VMVIP_2646, "[VIP] get_sys_property host_version = [0x%x]")
    TRC_MSG(TRC_MRE_VMVIP_2678, "[VIP] mem val = %d")
    TRC_MSG(TRC_MRE_VMVIP_2694, "Failed to get host platform memory size. error size is: %d")
    TRC_MSG(TRC_MRE_VMVIP_2698, "[VIP] get_sys_property mem_val = %d")
    TRC_MSG(TRC_MRE_VMVIP_2714, "Failed to get host platform memory size. error size is: %d")
    TRC_MSG(TRC_MRE_VMVIP_2821, "[VIP] sim_index = %d, VM_SMS_SIM_1 = %d")
    TRC_MSG(TRC_MRE_VMVIP_2827, "[VIP] get sc address nRet = %d")
    TRC_MSG(TRC_MRE_VMVIP_2832, "[VIP] read sc address done.")
    TRC_MSG(TRC_MRE_VMVIP_2841, "[VIP] sc_address = [0x%x]")
    TRC_MSG(TRC_MRE_VMVIP_2860, "[VIP] operator_code = [0x%x]")
    TRC_MSG(TRC_MRE_VMVIP_2893, "[VIP] imsi = [0x%x]")
    TRC_MSG(TRC_MRE_VMVIP_3021, "[TEST] vip_http_state_hook_shell. pContext->progress_hook:%p")
    TRC_MSG(TRC_MRE_VMVIP_3168, "[TEST] enter vip_do_res_shell. pContext:%p, pContext->callback:%p")
    TRC_MSG(TRC_MRE_VMVIP_3186, "[VIP] leak of data.")
    TRC_MSG(TRC_MRE_VMVIP_3201, "[VIP] leak of data. 1")
    TRC_MSG(TRC_MRE_VMVIP_3215, "[VIP] leak of data.2")
    TRC_MSG(TRC_MRE_VMVIP_3235, "[VIP] test_size = %d")
    TRC_MSG(TRC_MRE_VMVIP_3237, "[VIP] size = %d, ")
    TRC_MSG(TRC_MRE_VMVIP_3242, "[VIP] RES_RESCONTENT_CMD.")
    TRC_MSG(TRC_MRE_VMVIP_3246, "[VIP] RES_RESCONTENT_CMD end.")
    TRC_MSG(TRC_MRE_VMVIP_3253, "[VIP] callback.")
    TRC_MSG(TRC_MRE_VMVIP_3265, "[VIP] RES_ERROR_CMD.")
    TRC_MSG(TRC_MRE_VMVIP_3274, "[VIP] error_size = %d")
    TRC_MSG(TRC_MRE_VMVIP_3276, "[VIP] error.code = %d, len = %d")
    TRC_MSG(TRC_MRE_VMVIP_3282, "[VIP] RES_ERROR_CMD. error code = %d")
    TRC_MSG(TRC_MRE_VMVIP_3460, "vip_http_hook_ext vm_delete_timer_ex")
    TRC_MSG(TRC_MRE_VMVIP_3505, "vip_http_hook_shell. result = %d")
    TRC_MSG(TRC_MRE_VMVIP_3509, "Received correct http response, response body size = %d")
    TRC_MSG(TRC_MRE_VMVIP_3520, "Repeat send vip request")
    TRC_MSG(TRC_MRE_VMVIP_3572, "[TEST] vip_http_hook_shell - enter NORMAL_VIP_DEALT. ")
    TRC_MSG(TRC_MRE_VMVIP_3598, "[VIP] unknow error. 1")
    TRC_MSG(TRC_MRE_VMVIP_3617, "Failed to decrypt.")
    TRC_MSG(TRC_MRE_VMVIP_3625, "[VIP] unknow error. 2")
    TRC_MSG(TRC_MRE_VMVIP_3639, "Not enough data in vip response.")
    TRC_MSG(TRC_MRE_VMVIP_3649, "[VIP] unknow error. 3")
    TRC_MSG(TRC_MRE_VMVIP_3671, "Failed to Descrypt vip response.")
    TRC_MSG(TRC_MRE_VMVIP_3681, "[VIP] unknow error. 4")
    TRC_MSG(TRC_MRE_VMVIP_3694, "[VIP] do_res 1")
    TRC_MSG(TRC_MRE_VMVIP_3703, "[VIP] do_res 2")
    TRC_MSG(TRC_MRE_VMVIP_3708, "[TEST] vip_http_hook_shell - leave NORMAL_VIP_DEALT. ")
    TRC_MSG(TRC_MRE_VMVIP_3720, "Failed to receive http response, response body size = %d, status = %d")
    TRC_MSG(TRC_MRE_VMVIP_3741, "[VIP] net error. ")
    TRC_MSG(TRC_MRE_VMVIP_3775, "vm_vip_app_handle_proc g_app_handle_timer = %d")
    TRC_MSG(TRC_MRE_VMVIP_3783, "vip_context_ext[0]->repeat_content = %p")
    TRC_MSG(TRC_MRE_VMVIP_3801, "[VIP] vm_vip_app_handle_proc connect time out.")
    TRC_MSG(TRC_MRE_VMVIP_3836, "vm_vip_other_handle_proc g_other_handle_timer = %d")
    TRC_MSG(TRC_MRE_VMVIP_3860, "[VIP] vm_vip_other_handle_proc connect time out.")
    TRC_MSG(TRC_MRE_VMVIP_3903, "[AM] vip_http_hook vm_delete_timer_ex")
    TRC_MSG(TRC_MRE_VMVIP_3913, "Received correct http response, response body size = %d")
    TRC_MSG(TRC_MRE_VMVIP_3924, "Repeat send vip request")
    TRC_MSG(TRC_MRE_VMVIP_4015, "Failed to decrypt.")
    TRC_MSG(TRC_MRE_VMVIP_4034, "Not enough data in vip response.")
    TRC_MSG(TRC_MRE_VMVIP_4063, "Failed to Descrypt vip response.")
    TRC_MSG(TRC_MRE_VMVIP_4101, "Failed to receive http response, response body size = %d, status = %d")
    TRC_MSG(TRC_MRE_VMVIP_4222, "shell_config httpReq.url = [0x%x]")
    TRC_MSG(TRC_MRE_VMVIP_4330, "shell_config httpReq.url = [0x%x]")
    TRC_MSG(TRC_MRE_VMVIP_4408, "[VIP] vip_init_ext")
    TRC_MSG(TRC_MRE_VMVIP_4492, "[VIP] vip_init_ext end")
    TRC_MSG(TRC_MRE_VMVIP_4526, "[VIP] vip_init")
    TRC_MSG(TRC_MRE_VMVIP_4531, "[VIP] vip_context->used = %d")
    TRC_MSG(TRC_MRE_VMVIP_4546, "[VIP] vip_context = %p")
    TRC_MSG(TRC_MRE_VMVIP_4561, "[VIP] vip_context_ext[i]->used = %d")
    TRC_MSG(TRC_MRE_VMVIP_4576, "vip_context_ext[i] = %p")
    TRC_MSG(TRC_MRE_VMVIP_4769, "Range: [0x%x], %d-%d")
    TRC_MSG(TRC_MRE_VMVIP_4799, "[VIP] vm_vip_check_account_timer_proc.")
    TRC_MSG(TRC_MRE_VMVIP_4811, "[VIP] start vm_vip_send_request.")
    TRC_MSG(TRC_MRE_VMVIP_4815, "[VIP] nHttpRet = %d")
    TRC_MSG(TRC_MRE_VMVIP_4820, "[VIP] vm_vip_send_request error. nHttpRet = %d")
    TRC_MSG(TRC_MRE_VMVIP_4844, "[VIP] data account not ready, try count = %d")
    TRC_MSG(TRC_MRE_VMVIP_4895, "[VIP] vm_vip_send_request.")
    TRC_MSG(TRC_MRE_VMVIP_4898, "[VIP] asyn_data url = [0x%x]")
    TRC_MSG(TRC_MRE_VMVIP_4904, "[VIP] vm_get_asyn_http_req_handle")
    TRC_MSG(TRC_MRE_VMVIP_4909, "[VIP] vm_get_asyn_http_req_handle end")
    TRC_MSG(TRC_MRE_VMVIP_4914, "[VIP] pContext->repeat_content malloc")
    TRC_MSG(TRC_MRE_VMVIP_4924, "[VIP] pContext->repeat_content malloc = %p")
    TRC_MSG(TRC_MRE_VMVIP_4932, "[VIP] free body end.")
    TRC_MSG(TRC_MRE_VMVIP_4941, "Failed to send vip request, http error code: %d")
    TRC_MSG(TRC_MRE_VMVIP_4951, "[AM] g_app_handle_timer = %d")
    TRC_MSG(TRC_MRE_VMVIP_4958, "[AM] g_other_handle_timer = %d")
    TRC_MSG(TRC_MRE_VMVIP_4994, "[VIP] vip_read_resource_shell")
    TRC_MSG(TRC_MRE_VMVIP_5019, "[VIP] need encrypt")
    TRC_MSG(TRC_MRE_VMVIP_5077, "[VIP] http_req.use_proxy = %d")
    TRC_MSG(TRC_MRE_VMVIP_5082, "[VIP] vip_read_resource start get url.")
    TRC_MSG(TRC_MRE_VMVIP_5089, "[VIP] start get url from shell config.")
    TRC_MSG(TRC_MRE_VMVIP_5103, "[VIP] shell_config internal_http_req.url = [0x%x]")
    TRC_MSG(TRC_MRE_VMVIP_5120, "[VIP] start encrypt.")
    TRC_MSG(TRC_MRE_VMVIP_5143, "[VIP] plus_connect_cmd error.")
    TRC_MSG(TRC_MRE_VMVIP_5155, "[VIP] vm_ce_init vm_rsa_sign_by_id")
    TRC_MSG(TRC_MRE_VMVIP_5177, "[VIP] vm_ce_init vm_rsa_sign_by_id error -3")
    TRC_MSG(TRC_MRE_VMVIP_5189, "[VIP] vm_ce_init vm_rsa_sign_by_id erro -4")
    TRC_MSG(TRC_MRE_VMVIP_5192, "Failed to encrypt vip command using RSA.")
    TRC_MSG(TRC_MRE_VMVIP_5292, "[VIP] md5 finish.")
    TRC_MSG(TRC_MRE_VMVIP_5297, "[VIP] vm_des_set_key error. - 5")
    TRC_MSG(TRC_MRE_VMVIP_5300, "Failed to set des key.")
    TRC_MSG(TRC_MRE_VMVIP_5304, "[VIP] vm_des_encrypt")
    TRC_MSG(TRC_MRE_VMVIP_5313, "[VIP] vm_des_encrypt error. - 6")
    TRC_MSG(TRC_MRE_VMVIP_5316, "Failed to encrypt vip command using DES.")
    TRC_MSG(TRC_MRE_VMVIP_5326, "[VIP] encrypt end")
    TRC_MSG(TRC_MRE_VMVIP_5332, "[VIP] don't need encrypt ")
    TRC_MSG(TRC_MRE_VMVIP_5346, "[VIP] plus_connect_cmd error")
    TRC_MSG(TRC_MRE_VMVIP_5358, "[VIP] don't need encrypt end")
    TRC_MSG(TRC_MRE_VMVIP_5365, "[VIP] not the first session.")
    TRC_MSG(TRC_MRE_VMVIP_5403, "[VIP] vm_ce_init error.-3")
    TRC_MSG(TRC_MRE_VMVIP_5415, "[VIP] vm_ce_init error.-4")
    TRC_MSG(TRC_MRE_VMVIP_5418, "Failed to encrypt vip command using RSA.")
    TRC_MSG(TRC_MRE_VMVIP_5523, "[VIP] vm_des_set_key error.-3")
    TRC_MSG(TRC_MRE_VMVIP_5526, "Failed to set des key.")
    TRC_MSG(TRC_MRE_VMVIP_5530, "[VIP] vm_des_encrypt")
    TRC_MSG(TRC_MRE_VMVIP_5539, "[VIP] vm_des_encrypt error -6")
    TRC_MSG(TRC_MRE_VMVIP_5542, "Failed to encrypt vip command using DES.")
    TRC_MSG(TRC_MRE_VMVIP_5552, "[VIP] vm_des_encrypt end")
    TRC_MSG(TRC_MRE_VMVIP_5558, "[VIP] don't need encrypt")
    TRC_MSG(TRC_MRE_VMVIP_5560, "vip_read_resource 4")
    TRC_MSG(TRC_MRE_VMVIP_5567, "[VIP] malloc error. -1")
    TRC_MSG(TRC_MRE_VMVIP_5569, "Failed to allot %d memory to vip read resource")
    TRC_MSG(TRC_MRE_VMVIP_5599, "shell_config value : [0x%x]")
    TRC_MSG(TRC_MRE_VMVIP_5618, "[VIP] vm_asyn_http_req")
    TRC_MSG(TRC_MRE_VMVIP_5626, "[VIP]  url = [0x%x]")
    TRC_MSG(TRC_MRE_VMVIP_5639, "[VIP] head[0].name = [0x%x]")
    TRC_MSG(TRC_MRE_VMVIP_5646, "[VIP] asyn data head[0].name = [0x%x]")
    TRC_MSG(TRC_MRE_VMVIP_5657, "[VIP] asyn_data url = [0x%x]")
    TRC_MSG(TRC_MRE_VMVIP_5662, "[VIP] dataaccount is ready.")
    TRC_MSG(TRC_MRE_VMVIP_5669, "[VIP] check data account.")
    TRC_MSG(TRC_MRE_VMVIP_5687, "[VIP] vm_get_asyn_http_req_handle")
    TRC_MSG(TRC_MRE_VMVIP_5692, "[VIP] vm_get_asyn_http_req_handle end")
    TRC_MSG(TRC_MRE_VMVIP_5697, "[VIP] pContext->repeat_content malloc")
    TRC_MSG(TRC_MRE_VMVIP_5704, "[VIP] pContext->repeat_content malloc = %p")
    TRC_MSG(TRC_MRE_VMVIP_5711, "[VIP] free body end.")
    TRC_MSG(TRC_MRE_VMVIP_5719, "Failed to send vip request, http error code: %d")
    TRC_MSG(TRC_MRE_VMVIP_5729, "[AM] g_app_handle_timer = %d")
    TRC_MSG(TRC_MRE_VMVIP_5736, "[AM] g_other_handle_timer = %d")
    TRC_MSG(TRC_MRE_VMVIP_5831, "[VIP] vip_read_resource. respath = [0x%x]")
    TRC_MSG(TRC_MRE_VMVIP_5841, "[VIP] download app.")
    TRC_MSG(TRC_MRE_VMVIP_5850, "[VIP] download other. callback = %p")
    TRC_MSG(TRC_MRE_VMVIP_5855, "vip_read_resource respath = [0x%x]")
    TRC_MSG(TRC_MRE_VMVIP_5913, "vip_read_resource start get url.")
    TRC_MSG(TRC_MRE_VMVIP_5920, "start get url from shell config.")
    TRC_MSG(TRC_MRE_VMVIP_5934, "shell_config internal_http_req.url = [0x%x]")
    TRC_MSG(TRC_MRE_VMVIP_6008, "Failed to encrypt vip command using RSA.")
    TRC_MSG(TRC_MRE_VMVIP_6028, "Failed to set des key.")
    TRC_MSG(TRC_MRE_VMVIP_6039, "Failed to encrypt vip command using DES.")
    TRC_MSG(TRC_MRE_VMVIP_6120, "Failed to encrypt vip command using RSA.")
    TRC_MSG(TRC_MRE_VMVIP_6140, "Failed to set des key.")
    TRC_MSG(TRC_MRE_VMVIP_6151, "Failed to encrypt vip command using DES.")
    TRC_MSG(TRC_MRE_VMVIP_6163, "vip_read_resource 4")
    TRC_MSG(TRC_MRE_VMVIP_6169, "Failed to allot %d memory to vip read resource")
    TRC_MSG(TRC_MRE_VMVIP_6199, "shell_config value : [0x%x]")
    TRC_MSG(TRC_MRE_VMVIP_6217, "start vm_asyn_http_req")
    TRC_MSG(TRC_MRE_VMVIP_6239, "Failed to send vip request, http error code: %d")
    TRC_MSG(TRC_MRE_VMVIP_6373, "[VIP] vm_free vip_context->repeat_content = %p")
    TRC_MSG(TRC_MRE_VMVIP_6407, "[VIP] vm_free vip_context_ext[i] = %p")
    TRC_MSG(TRC_MRE_VMVIP_6420, "[AM] vip_finalize vm_delete_timer_ex")
    TRC_MSG(TRC_MRE_VMVIP_6474, "vip_cancel_request_handle vm_delete_timer_ex")
    TRC_MSG(TRC_MRE_VMVIP_6499, "vip_cancel_request_handle vm_delete_timer_ex")
    TRC_MSG(TRC_MRE_VMVIP_6647, "vip_init_ext")
    TRC_MSG(TRC_MRE_VMVIP_6686, "vip_init_ext")
    TRC_MSG(TRC_MRE_VMVIP_6726, "vip_init_ext")
    TRC_MSG(TRC_MRE_VMVIP_6764, "vip_init_ext")
    TRC_MSG(TRC_MRE_VMVIP_6822, "[TEST] enter vm_initialize_vip_module")
    TRC_MSG(TRC_MRE_VMVIP_6846, "[TEST] enter vm_finialize_vip_module")
    TRC_MSG(TRC_MRE_VMVIP_6885, "{VIP MOUDLE}Received unkonw[%d] event.")
    TRC_MSG(TRC_MRE_VMVIP_6915, "Failed to regisiter vip module. Error Code : %d")
    TRC_MSG(TRC_MRE_VMVIP_7021, "vip_get_shell_config_value key_value = [0x%x]")
    TRC_MSG(TRC_MRE_VMVIP_7106, "get shell value end.")
    TRC_MSG(TRC_MRE_VMBTCM_106, "[BTCM] vm_btcm_notify_process_status S")
    TRC_MSG(TRC_MRE_VMBTCM_117, "[BTCM] vm_btcm_notify_process_status")
    TRC_MSG(TRC_MRE_VMBTCM_121, "[BTCM] Failed to get wps id form resource manager.")
    TRC_MSG(TRC_MRE_VMBTCM_128, "[BTCM] vm_btcm_notify_process_status E")
    TRC_MSG(TRC_MRE_VMBTCM_134, "[BTCM] vm_btcm_initialize_resource S")
    TRC_MSG(TRC_MRE_VMBTCM_142, "[BTCM] vm_btcm_initialize_resource E")
    TRC_MSG(TRC_MRE_VMBTCM_153, "[BTCM] vm_btcm_finialize_resource S")
    TRC_MSG(TRC_MRE_VMBTCM_162, "[BTCM] vm_btcm_finialize_resource")
    TRC_MSG(TRC_MRE_VMBTCM_166, "[BTCM] Failed to get wps id form resource manager.")
    TRC_MSG(TRC_MRE_VMBTCM_174, "[BTCM] vm_btcm_finialize_resource E")
    TRC_MSG(TRC_MRE_VMBTCM_196, "[BTCM] Receive unkown[%d] event.")
    TRC_MSG(TRC_MRE_VMBTCM_207, "[BTCM] _vm_reg_btcm_module S")
    TRC_MSG(TRC_MRE_VMBTCM_210, "[BTCM] Failed to regisiter wps module. Error Code : %d")
    TRC_MSG(TRC_MRE_VMBTCM_213, "[BTCM] _vm_reg_btcm_module E")
    TRC_MSG(TRC_MRE_VMBTCM_295, "[BTCM] vm_btcm_notifier_cb srv_hd[%d] u_dt[0x%x]")
    TRC_MSG(TRC_MRE_VMBTCM_300, "[BTCM] vm_btcm_notifier_cb ctx_p NULL maybe(NOT CURR srv_hd)")
    TRC_MSG(TRC_MRE_VMBTCM_309, "[BTCM] vm_btcm_notifier_cb p_handle < 0")
    TRC_MSG(TRC_MRE_VMBTCM_314, "[BTCM] vm_btcm_notifier_cb phd[%d] evt[%d] pa[0x%x] ud[0x%x]")
    TRC_MSG(TRC_MRE_VMBTCM_347, "[BTCM] vm_btcm_notifier_cb default evt[%d]")
    TRC_MSG(TRC_MRE_VMBTCM_360, "[BTCM] vm_btcm_init S")
    TRC_MSG(TRC_MRE_VMBTCM_364, "[BTCM] vm_btcm_init VM_BTCM_ERR_BAD_PARAM E1")
    TRC_MSG(TRC_MRE_VMBTCM_371, "[BTCM] vm_btcm_init VM_BTCM_ERR_NO_RESOURCE E2")
    TRC_MSG(TRC_MRE_VMBTCM_378, "[BTCM] vm_btcm_init srv_bt_cm_set_notify srv_hd[%d] E2")
    TRC_MSG(TRC_MRE_VMBTCM_384, "[BTCM] vm_btcm_init E")
    TRC_MSG(TRC_MRE_VMBTCM_394, "[BTCM] vm_btcm_exit S")
    TRC_MSG(TRC_MRE_VMBTCM_400, "[BTCM] vm_btcm_exit E0")
    TRC_MSG(TRC_MRE_VMBTCM_406, "[BTCM] vm_btcm_exit E1")
    TRC_MSG(TRC_MRE_VMBTCM_416, "[BTCM] vm_btcm_exit E")
    TRC_MSG(TRC_MRE_VMBTCM_424, "[BTCM]vm_btcm_get_power_status S")
    TRC_MSG(TRC_MRE_VMBTCM_428, "[BTCM]vm_btcm_get_power_status E")
    TRC_MSG(TRC_MRE_VMBTCM_433, "[BTCM]vm_btcm_switch_on S")
    TRC_MSG(TRC_MRE_VMBTCM_437, "[BTCM]vm_btcm_switch_on E")
    TRC_MSG(TRC_MRE_VMBTCM_442, "[BTCM]vm_btcm_switch_off S")
    TRC_MSG(TRC_MRE_VMBTCM_447, "[BTCM]vm_btcm_switch_off E")
    TRC_MSG(TRC_MRE_VMBTCM_452, "[BTCM]vm_btcm_srv_set_visibility S")
    TRC_MSG(TRC_MRE_VMBTCM_456, "[BTCM]vm_btcm_srv_set_visibility E")
    TRC_MSG(TRC_MRE_VMBTCM_461, "[BTCM]vm_btcm_srv_get_visibility S")
    TRC_MSG(TRC_MRE_VMBTCM_465, "[BTCM]vm_btcm_srv_get_visibility E")
    TRC_MSG(TRC_MRE_VMBTCM_470, "[BTCM] vm_btspp_search S")
    TRC_MSG(TRC_MRE_VMBTCM_477, "[BTCM] vm_btspp_search NS E1")
    TRC_MSG(TRC_MRE_VMBTCM_484, "[BTCM] vm_btspp_search E")
    TRC_MSG(TRC_MRE_VMBTCM_489, "[BTCM]vm_btcm_search_abort S")
    TRC_MSG(TRC_MRE_VMBTCM_493, "[BTCM]vm_btcm_search_abort E")
    TRC_MSG(TRC_MRE_VMBTCM_498, "[BTCM]vm_btcm_set_host_name S")
    TRC_MSG(TRC_MRE_VMBTCM_501, "[BTCM]vm_btcm_set_host_name name NULL E1")
    TRC_MSG(TRC_MRE_VMBTCM_507, "[BTCM]vm_btcm_set_host_name E")
    TRC_MSG(TRC_MRE_VMBTCM_513, "[BTCM]vm_btcm_get_host_dev_info S")
    TRC_MSG(TRC_MRE_VMBTCM_517, "[BTCM]vm_btcm_get_host_dev_info VM_BT_CM_ERR_BAD_PARAM E1")
    TRC_MSG(TRC_MRE_VMBTCM_524, "[BTCM]vm_btcm_get_host_dev_info VM_BT_CM_ERR_LOGICAL E2")
    TRC_MSG(TRC_MRE_VMBTCM_530, "[BTCM]vm_btcm_get_host_dev_info E")
    TRC_MSG(TRC_MRE_VMBTCM_537, "[BTCM]vm_btcm_get_dev_num S")
    TRC_MSG(TRC_MRE_VMBTCM_539, "[BTCM]vm_btcm_get_dev_num E")
    TRC_MSG(TRC_MRE_VMBTCM_546, "[BTCM]vm_btspp_get_dev_info_by_index S")
    TRC_MSG(TRC_MRE_VMBTCM_549, "[BTCM]vm_btspp_get_dev_info_by_index VM_BT_CM_ERR_BAD_PARAM")
    TRC_MSG(TRC_MRE_VMBTCM_556, "[BTCM]vm_btspp_get_dev_info_by_index VM_BT_CM_ERR_LOGICAL")
    TRC_MSG(TRC_MRE_VMBTCM_569, "[BTCM]vm_btspp_get_dev_info_by_index E")
    TRC_MSG(TRC_MRE_VMBTCM_579, "[BTSPP] vm_btcm_init !__MRE_SAL_BTCM__")
    TRC_MSG(TRC_MRE_VMBTCM_BT_ON_SUCCESS, "[Security check][BTCM]BT power on begain")
    TRC_MSG(TRC_MRE_VMBTCM_BT_ON_FAIL, "[Security check][BTCM]Fail to power on BT.")
    TRC_MSG(TRC_MRE_VMBTCM_CALL_OUT_SUCCESS, "[Security check][BTCM]call out begain")
    TRC_MSG(TRC_MRE_VMBTCM_CALL_OUT_FAIL, "[Security check][BTCM]Fail to call out.")
    TRC_MSG(TRC_MRE_VMBTSPP_121, "[BTSPP] vm_btspp_notify_process_status S")
    TRC_MSG(TRC_MRE_VMBTSPP_132, "[BTSPP] vm_btspp_notify_process_status")
    TRC_MSG(TRC_MRE_VMBTSPP_136, "[BTSPP] Failed to get wps id form resource manager.")
    TRC_MSG(TRC_MRE_VMBTSPP_143, "[BTSPP] vm_btspp_notify_process_status E")
    TRC_MSG(TRC_MRE_VMBTSPP_149, "[BTSPP] vm_btspp_initialize_resource S")
    TRC_MSG(TRC_MRE_VMBTSPP_157, "[BTSPP] vm_btspp_initialize_resource E")
    TRC_MSG(TRC_MRE_VMBTSPP_168, "[BTSPP] vm_btspp_finialize_resource S")
    TRC_MSG(TRC_MRE_VMBTSPP_177, "[BTSPP] vm_btspp_finialize_resource")
    TRC_MSG(TRC_MRE_VMBTSPP_181, "[BTSPP] Failed to get wps id form resource manager.")
    TRC_MSG(TRC_MRE_VMBTSPP_188, "[BTSPP] vm_btspp_finialize_resource E")
    TRC_MSG(TRC_MRE_VMBTSPP_210, "[BTSPP] Receive unkown[%d] event.")
    TRC_MSG(TRC_MRE_VMBTSPP_221, "[BTSPP] _vm_reg_btspp_module S")
    TRC_MSG(TRC_MRE_VMBTSPP_224, "[BTSPP] Failed to regisiter wps module. Error Code : %d")
    TRC_MSG(TRC_MRE_VMBTSPP_227, "[BTSPP] _vm_reg_btspp_module E")
    TRC_MSG(TRC_MRE_VMBTSPP_339, "[BTSPP] vm_btspp_notifier_cb evt[%d] S")
    TRC_MSG(TRC_MRE_VMBTSPP_343, "[BTSPP] vm_btspp_notifier_cb protocol_data NULL")
    TRC_MSG(TRC_MRE_VMBTSPP_351, "[BTSPP] vm_btspp_notifier_cb srv_hd[%d]")
    TRC_MSG(TRC_MRE_VMBTSPP_356, "[BTSPP] vm_btspp_notifier_cb ctx_p NULL maybe(NOT CURR srv_hd)")
    TRC_MSG(TRC_MRE_VMBTSPP_363, "[BTSPP] vm_btspp_notifier_cb p_handle < 0")
    TRC_MSG(TRC_MRE_VMBTSPP_369, "[BTSPP] VM_SRV_SPP_EVENT_CONNECT")
    TRC_MSG(TRC_MRE_VMBTSPP_375, "[BTSPP] VM_SRV_SPP_EVENT_DISCONNECT")
    TRC_MSG(TRC_MRE_VMBTSPP_385, "[BTSPP] [%d]srv_hd[%d], user_data[0x%x], ret[%d], conn_id[%d]")
    TRC_MSG(TRC_MRE_VMBTSPP_390, "[BTSPP] vm_btspp_notifier_cb E")
    TRC_MSG(TRC_MRE_VMBTSPP_403, "[BTSPP] vm_btspp_open S")
    TRC_MSG(TRC_MRE_VMBTSPP_407, "[BTSPP] vm_btspp_open E0")
    TRC_MSG(TRC_MRE_VMBTSPP_415, "[BTSPP] vm_btspp_open E1")
    TRC_MSG(TRC_MRE_VMBTSPP_425, "[BTSPP] vm_btspp_open E2")
    TRC_MSG(TRC_MRE_VMBTSPP_434, "[BTSPP] vm_btspp_open E")
    TRC_MSG(TRC_MRE_VMBTSPP_446, "[BTSPP] vm_btspp_close S")
    TRC_MSG(TRC_MRE_VMBTSPP_451, "[BTSPP] vm_res_get_data E0")
    TRC_MSG(TRC_MRE_VMBTSPP_457, "[BTSPP] vm_btspp_close DO disconnect")
    TRC_MSG(TRC_MRE_VMBTSPP_467, "[BTSPP] vm_btspp_close E")
    TRC_MSG(TRC_MRE_VMBTSPP_475, "[BTSPP] vm_btspp_disconnect S")
    TRC_MSG(TRC_MRE_VMBTSPP_480, "[BTSPP] vm_btspp_get_ctx_by_cid VM_BT_SPP_ERR_BAD_PARAM E1")
    TRC_MSG(TRC_MRE_VMBTSPP_486, "[BTSPP] vm_btspp_disconnect E")
    TRC_MSG(TRC_MRE_VMBTSPP_495, "[BTSPP] vm_btspp_write S")
    TRC_MSG(TRC_MRE_VMBTSPP_499, "[BTSPP] vm_btspp_write VM_BT_SPP_ERR_BAD_PARAM E0")
    TRC_MSG(TRC_MRE_VMBTSPP_506, "[BTSPP] vm_btspp_get_ctx_by_cid VM_BT_SPP_ERR_BAD_PARAM E1")
    TRC_MSG(TRC_MRE_VMBTSPP_512, "[BTSPP] vm_btspp_write E")
    TRC_MSG(TRC_MRE_VMBTSPP_520, "[BTSPP] vm_btspp_read S")
    TRC_MSG(TRC_MRE_VMBTSPP_524, "[BTSPP] NULL == buf || 0 == size VM_BT_SPP_ERR_BAD_PARAM E0")
    TRC_MSG(TRC_MRE_VMBTSPP_531, "[BTSPP] vm_btspp_get_ctx_by_cid VM_BT_SPP_ERR_BAD_PARAM E1")
    TRC_MSG(TRC_MRE_VMBTSPP_537, "[BTSPP] vm_btspp_read E")
    TRC_MSG(TRC_MRE_VMBTSPP_544, "[BTSPP] vm_btspp_get_dev_addr S")
    TRC_MSG(TRC_MRE_VMBTSPP_548, "[BTSPP] NULL == bt_addr VM_BT_SPP_ERR_BAD_PARAM E0")
    TRC_MSG(TRC_MRE_VMBTSPP_555, "[BTSPP] vm_btspp_get_ctx_by_cid VM_BT_SPP_ERR_BAD_PARAM E1")
    TRC_MSG(TRC_MRE_VMBTSPP_561, "[BTSPP] vm_btspp_get_dev_addr E")
    TRC_MSG(TRC_MRE_VMBTSPP_571, "[BTSPP] vm_btspp_set_security_level S")
    TRC_MSG(TRC_MRE_VMBTSPP_577, "[BTSPP] level VM_BT_SPP_ERR_BAD_PARAM E0")
    TRC_MSG(TRC_MRE_VMBTSPP_584, "[BTSPP] vm_btspp_set_security_level vm_res_get_data E1")
    TRC_MSG(TRC_MRE_VMBTSPP_590, "[BTSPP] vm_btspp_set_security_level E")
    TRC_MSG(TRC_MRE_VMBTSPP_600, "[BTSPP] vm_btspp_set_server_name S")
    TRC_MSG(TRC_MRE_VMBTSPP_604, "[BTSPP] name VM_BT_SPP_ERR_BAD_PARAM E0")
    TRC_MSG(TRC_MRE_VMBTSPP_611, "[BTSPP] vm_btspp_set_server_name E0")
    TRC_MSG(TRC_MRE_VMBTSPP_617, "[BTSPP] vm_btspp_set_server_name E")
    TRC_MSG(TRC_MRE_VMBTSPP_628, "[BTSPP] vm_btspp_bind S")
    TRC_MSG(TRC_MRE_VMBTSPP_634, "[BTSPP] uuid VM_BT_SPP_ERR_BAD_PARAM E0")
    TRC_MSG(TRC_MRE_VMBTSPP_642, "[BTSPP] vm_res_get_data E0")
    TRC_MSG(TRC_MRE_VMBTSPP_648, "[BTSPP] vm_btspp_bind E")
    TRC_MSG(TRC_MRE_VMBTSPP_661, "[BTSPP] vm_btspp_accept S")
    TRC_MSG(TRC_MRE_VMBTSPP_665, "[BTSPP] NULL == buf || 0 == tx_size || 0 == rx_size VM_BT_SPP_ERR_BAD_PARAM E0")
    TRC_MSG(TRC_MRE_VMBTSPP_672, "[BTSPP] vm_btspp_get_ctx_by_cid VM_BT_SPP_ERR_BAD_PARAM E1")
    TRC_MSG(TRC_MRE_VMBTSPP_678, "[BTSPP] vm_btspp_accept E")
    TRC_MSG(TRC_MRE_VMBTSPP_687, "[BTSPP] vm_btspp_reject S")
    TRC_MSG(TRC_MRE_VMBTSPP_692, "[BTSPP] vm_btspp_get_ctx_by_cid VM_BT_SPP_ERR_BAD_PARAM E1")
    TRC_MSG(TRC_MRE_VMBTSPP_698, "[BTSPP] vm_btspp_reject E")
    TRC_MSG(TRC_MRE_VMBTSPP_716, "[BTSPP] vm_btspp_connect S")
    TRC_MSG(TRC_MRE_VMBTSPP_723, "[BTSPP] vm_btspp_connect vm_res_get_data E0")
    TRC_MSG(TRC_MRE_VMBTSPP_730, "[BTSPP] vm_btspp_connect vm_res_get_data E1")
    TRC_MSG(TRC_MRE_VMBTSPP_738, "[BTSPP] vm_btspp_connect E")
    TRC_MSG(TRC_MRE_VMBTSPP_753, "[BTSPP] vm_btspp_connect_ex S")
    TRC_MSG(TRC_MRE_VMBTSPP_760, "[BTSPP] vm_btspp_connect_ex vm_res_get_data E0")
    TRC_MSG(TRC_MRE_VMBTSPP_767, "[BTSPP] vm_btspp_connect_ex vm_res_get_data E1")
    TRC_MSG(TRC_MRE_VMBTSPP_773, "[BTSPP] vm_btspp_connect_ex E")
    TRC_MSG(TRC_MRE_VMBTSPP_783, "[BTSPP] vm_btspp_open !__MRE_SAL_BTSPP__")
    TRC_MSG(TRC_MRE_VMBTSPP_S, "[BTSPP] S [%d],[%d] @[%d][%d]")
    TRC_MSG(TRC_MRE_VMBTSPP_E, "[BTSPP] E [%d],[%d] @[%d][%d]")
    TRC_MSG(TRC_MRE_VMBTSPP_E1, "[BTSPP] E1 [%d],[%d] @[%d][%d]")
    TRC_MSG(TRC_MRE_VMBTSPP_E2, "[BTSPP] E2 [%d],[%d] @[%d][%d]")
    TRC_MSG(TRC_MRE_VMBTSPP_LOG, "[BTSPP] LOG [%d],[%d] @[%d][%d]")
    TRC_MSG(TRC_MRE_VMCONTACT_213, "{PHB MODULE}Receive unkown [%d] event.")
    TRC_MSG(TRC_MRE_VMCONTACT_227, "Failed to regisiter phb module. Error Code : %d")
    TRC_MSG(TRC_MRE_VMCONTACT_262, "vm_phb_process_status_callback:start")
    TRC_MSG(TRC_MRE_VMCONTACT_276, "vm_phb_process_status_callback:VM_PHB_ADD")
    TRC_MSG(TRC_MRE_VMCONTACT_283, "vm_phb_process_status_callback:VM_PHB_DELETE")
    TRC_MSG(TRC_MRE_VMCONTACT_290, "vm_phb_process_status_callback:VM_PHB_UPDATE")
    TRC_MSG(TRC_MRE_VMCONTACT_297, "vm_phb_process_status_callback:VM_PHB_SEARCH")
    TRC_MSG(TRC_MRE_VMCONTACT_304, "vm_phb_process_status_callback:VM_PHB_GET_CONTACT")
    TRC_MSG(TRC_MRE_VMCONTACT_308, "vm_phb_process_status_callback:type=%d error")
    TRC_MSG(TRC_MRE_VMCONTACT_314, "vm_phb_process_status_callback : data handle=%d")
    TRC_MSG(TRC_MRE_VMCONTACT_330, "vm_phb_process_status_callback timer fail")
    TRC_MSG(TRC_MRE_VMCONTACT_337, "vm_phb_process_status_callback:end")
    TRC_MSG(TRC_MRE_VMCONTACT_366, "vm_phb_queue_manager  delete time=%d")
    TRC_MSG(TRC_MRE_VMCONTACT_370, "vm_phb_queue_manager:vm_delete_timer fail")
    TRC_MSG(TRC_MRE_VMCONTACT_375, "vm_phb_queue_manager:vm_delete_timer success")
    TRC_MSG(TRC_MRE_VMCONTACT_380, "vm_phb_queue_manager:sms_busy_flag=1")
    TRC_MSG(TRC_MRE_VMCONTACT_387, "vm_phb_queue_manager:vm_res_get_data fail")
    TRC_MSG(TRC_MRE_VMCONTACT_390, "vm_phb_queue_manager:res=%d")
    TRC_MSG(TRC_MRE_VMCONTACT_396, "vm_phb_queue_manager:type=%d")
    TRC_MSG(TRC_MRE_VMCONTACT_403, "phb_add->req_info->contact_ptr->name=[0x%x]")
    TRC_MSG(TRC_MRE_VMCONTACT_404, "phb_add->req_info->contact_ptr->number=[0x%x]")
    TRC_MSG(TRC_MRE_VMCONTACT_409, "vm_phb_queue_manager:VM_PHB_ADD res=%d")
    TRC_MSG(TRC_MRE_VMCONTACT_411, "vm_phb_queue_manager:VM_PHB_ADD")
    TRC_MSG(TRC_MRE_VMCONTACT_420, "vm_phb_queue_manager:VM_PHB_DELETE res=%d")
    TRC_MSG(TRC_MRE_VMCONTACT_422, "vm_phb_queue_manager:VM_PHB_DELETE")
    TRC_MSG(TRC_MRE_VMCONTACT_431, "vm_phb_queue_manager:VM_PHB_UPDATE res=%d")
    TRC_MSG(TRC_MRE_VMCONTACT_433, "vm_phb_queue_manager:VM_PHB_UPDATE")
    TRC_MSG(TRC_MRE_VMCONTACT_442, "vm_phb_queue_manager:VM_PHB_SEARCH res=%d")
    TRC_MSG(TRC_MRE_VMCONTACT_444, "vm_phb_queue_manager:VM_PHB_SEARCH")
    TRC_MSG(TRC_MRE_VMCONTACT_453, "vm_phb_queue_manager:VM_PHB_GET_CONTACT res=%d")
    TRC_MSG(TRC_MRE_VMCONTACT_455, "vm_phb_queue_manager:VM_PHB_GET_CONTACT")
    TRC_MSG(TRC_MRE_VMCONTACT_460, "vm_phb_queue_manager:type=%d error")
    TRC_MSG(TRC_MRE_VMCONTACT_464, "vm_phb_queue_manager:end")
    TRC_MSG(TRC_MRE_VMCONTACT_490, "vm_phb_callback_manager:reault =%d")
    TRC_MSG(TRC_MRE_VMCONTACT_558, "vm_phb_callback_manager:res=%d count = %d")
    TRC_MSG(TRC_MRE_VMCONTACT_562, "vm_phb_callback_manager:res <= 0")
    TRC_MSG(TRC_MRE_VMCONTACT_571, "vm_phb_callback_manager:phandle=%d, result=%d")
    TRC_MSG(TRC_MRE_VMCONTACT_577, "vm_phb_callback_manager:type=%d")
    TRC_MSG(TRC_MRE_VMCONTACT_587, "vm_phb_callback_manager:VM_PHB_ADD")
    TRC_MSG(TRC_MRE_VMCONTACT_595, "vm_phb_callback_manager:VM_PHB_DELETE")
    TRC_MSG(TRC_MRE_VMCONTACT_605, "vm_phb_callback_manager:VM_PHB_UPDATE")
    TRC_MSG(TRC_MRE_VMCONTACT_614, "vm_phb_callback_manager:VM_PHB_SEARCH")
    TRC_MSG(TRC_MRE_VMCONTACT_623, "vm_phb_callback_manager:VM_PHB_GET_CONTACT")
    TRC_MSG(TRC_MRE_VMCONTACT_628, "vm_phb_callback_manager:type=%d error")
    TRC_MSG(TRC_MRE_VMCONTACT_636, "vm_phb_callback_manager: vm_free(&res_node.data_content)")
    TRC_MSG(TRC_MRE_VMCONTACT_641, "vm_phb_callback_manager:vm_res_release_data fail")
    TRC_MSG(TRC_MRE_VMCONTACT_644, "vm_phb_callback_manager:release_data i=%d")
    TRC_MSG(TRC_MRE_VMCONTACT_653, "vm_phb_callback_manager:count=%d")
    TRC_MSG(TRC_MRE_VMCONTACT_662, "vm_phb_callback_manager timer fail")
    TRC_MSG(TRC_MRE_VMCONTACT_671, "vm_phb_callback_manager:vm_phb_callback_manager end")
    TRC_MSG(TRC_MRE_VMCONTACT_688, "vm_phb_add_contact:req_info == NULL")
    TRC_MSG(TRC_MRE_VMCONTACT_694, "vm_phb_add_contact:VM_PHB_STORAGE_LOC_BOTH")
    TRC_MSG(TRC_MRE_VMCONTACT_700, "vm_phb_add_contact:vm_phb_storage_is_not_valid")
    TRC_MSG(TRC_MRE_VMCONTACT_706, "vm_phb_add_contact:name or number is NULL")
    TRC_MSG(TRC_MRE_VMCONTACT_717, "vm_phb_add_contact : avaliable <= 0")
    TRC_MSG(TRC_MRE_VMCONTACT_724, "vm_phb_add_contact:req_info_ptr == NULL")
    TRC_MSG(TRC_MRE_VMCONTACT_731, "vm_phb_add_contact:phb_add == NULL")
    TRC_MSG(TRC_MRE_VMCONTACT_745, "vm_phb_add_contact timer fail")
    TRC_MSG(TRC_MRE_VMCONTACT_753, "vm_phb_add_contact data_handle < 0")
    TRC_MSG(TRC_MRE_VMCONTACT_758, "vm_phb_add_contact count = %d")
    TRC_MSG(TRC_MRE_VMCONTACT_776, "vm_phb_delete_contact:req_info == NULL")
    TRC_MSG(TRC_MRE_VMCONTACT_782, "vm_phb_delete_contact:VM_PHB_STORAGE_LOC_BOTH")
    TRC_MSG(TRC_MRE_VMCONTACT_788, "vm_phb_delete_contact:vm_phb_storage_is_not_valid")
    TRC_MSG(TRC_MRE_VMCONTACT_799, "vm_phb_delete_contact : avaliable <= 0")
    TRC_MSG(TRC_MRE_VMCONTACT_806, "vm_phb_delete_contact:req_info_ptr == NULL")
    TRC_MSG(TRC_MRE_VMCONTACT_813, "vm_phb_delete_contact:phb_delete == NULL")
    TRC_MSG(TRC_MRE_VMCONTACT_827, "vm_phb_delete_contact timer fail")
    TRC_MSG(TRC_MRE_VMCONTACT_836, "vm_phb_delete_contact data_handle < 0")
    TRC_MSG(TRC_MRE_VMCONTACT_841, "vm_phb_delete_contact count = %d")
    TRC_MSG(TRC_MRE_VMCONTACT_858, "vm_phb_update_contact :req_info == NULL,req_info->contact_ptr == NULL")
    TRC_MSG(TRC_MRE_VMCONTACT_865, "vm_phb_update_contact:VM_PHB_STORAGE_LOC_BOTH")
    TRC_MSG(TRC_MRE_VMCONTACT_871, "vm_phb_update_contact:vm_phb_storage_is_not_valid")
    TRC_MSG(TRC_MRE_VMCONTACT_877, "vm_phb_update_contact:name or number is NULL")
    TRC_MSG(TRC_MRE_VMCONTACT_888, "vm_phb_update_contact : avaliable <= 0")
    TRC_MSG(TRC_MRE_VMCONTACT_896, "vm_phb_update_contact:req_info_ptr == NULL")
    TRC_MSG(TRC_MRE_VMCONTACT_903, "vm_phb_update_contact:phb_update == NULL")
    TRC_MSG(TRC_MRE_VMCONTACT_918, "vm_phb_update_contact timer fail")
    TRC_MSG(TRC_MRE_VMCONTACT_926, "vm_phb_update_contact data_handle < 0")
    TRC_MSG(TRC_MRE_VMCONTACT_931, "vm_phb_update_contact count = %d")
    TRC_MSG(TRC_MRE_VMCONTACT_949, "vm_phb_search_contact:req_info == NULL")
    TRC_MSG(TRC_MRE_VMCONTACT_960, "vm_phb_search_contact : avaliable <= 0")
    TRC_MSG(TRC_MRE_VMCONTACT_967, "vm_phb_search_contact:req_info_ptr == NULL")
    TRC_MSG(TRC_MRE_VMCONTACT_974, "vm_phb_search_contact:phb_search == NULL")
    TRC_MSG(TRC_MRE_VMCONTACT_990, "vm_phb_search_contact timer fail")
    TRC_MSG(TRC_MRE_VMCONTACT_998, "vm_phb_search_contact data_handle < 0")
    TRC_MSG(TRC_MRE_VMCONTACT_1003, "vm_phb_search_contact count = %d")
    TRC_MSG(TRC_MRE_VMCONTACT_1019, "vm_phb_get_contact:req_info == NULL")
    TRC_MSG(TRC_MRE_VMCONTACT_1025, "vm_phb_get_contact:VM_PHB_STORAGE_LOC_BOTH")
    TRC_MSG(TRC_MRE_VMCONTACT_1031, "vm_phb_get_contact:vm_phb_storage_is_not_valid")
    TRC_MSG(TRC_MRE_VMCONTACT_1042, "vm_phb_get_contact : avaliable <= 0")
    TRC_MSG(TRC_MRE_VMCONTACT_1049, "vm_phb_get_contact:req_info_ptr == NULL")
    TRC_MSG(TRC_MRE_VMCONTACT_1056, "vm_phb_get_contact:phb_get_contact == NULL")
    TRC_MSG(TRC_MRE_VMCONTACT_1071, "vm_phb_get_contact timer fail")
    TRC_MSG(TRC_MRE_VMCONTACT_1079, "vm_phb_get_contact data_handle < 0")
    TRC_MSG(TRC_MRE_VMCONTACT_1084, "vm_phb_get_contact count = %d")
    TRC_MSG(TRC_MRE_VMCONTACT_1097, "vm_phb_search_contact_syn:req_info == NULL")
    TRC_MSG(TRC_MRE_VMCONTACT_1103, "vm_phb_search_contact_syn:end")
    TRC_MSG(TRC_MRE_VMCONTACT_1116, "vm_phb_get_contact_syn:req_info == NULL")
    TRC_MSG(TRC_MRE_VMCONTACT_1122, "vm_phb_get_contact_syn:VM_PHB_STORAGE_LOC_BOTH")
    TRC_MSG(TRC_MRE_VMCONTACT_1128, "vm_phb_get_contact_syn:vm_phb_storage_is_not_valid")
    TRC_MSG(TRC_MRE_VMCONTACT_1134, "vm_phb_get_contact_syn:end")
    TRC_MSG(TRC_MRE_VMCONTACT_1148, "vm_phb_get_total_contacts:vm_phb_storage_is_not_valid")
    TRC_MSG(TRC_MRE_VMCONTACT_1154, "vm_phb_get_total_contacts:res=%d")
    TRC_MSG(TRC_MRE_VMCONTACT_1167, "vm_phb_get_used_contacts_count:vm_phb_storage_is_not_valid")
    TRC_MSG(TRC_MRE_VMCONTACT_1171, "vm_phb_get_used_contacts_count:res = %d")
    TRC_MSG(TRC_MRE_VMCONTACT_1185, "vm_phb_get_used_contacts:vm_phb_storage_is_not_valid")
    TRC_MSG(TRC_MRE_VMCONTACT_1191, "vm_phb_get_used_contacts:res = %d")
    TRC_MSG(TRC_MRE_VMCONTACT_1205, "vm_phb_search_contact_list:req_info == NULL")
    TRC_MSG(TRC_MRE_VMCONTACT_1209, "req_info->search_type=%d")
    TRC_MSG(TRC_MRE_VMCONTACT_1212, "vm_phb_search_contact_list:search_num= %d")
    TRC_MSG(TRC_MRE_VMCONTACT_1226, "vm_phb_get_group_list_count:group_count = %d")
    TRC_MSG(TRC_MRE_VMCONTACT_1240, "vm_phb_get_group_list:len = %d")
    TRC_MSG(TRC_MRE_VMCONTACT_1255, "vm_phb_get_group_name_by_id:group_name==NULL || len <= 0")
    TRC_MSG(TRC_MRE_VMCONTACT_1261, "vm_phb_get_group_name_by_id:res= %d")
    TRC_MSG(TRC_MRE_VMCONTACT_1275, "vm_phb_storage_is_valid:storage is not valid")
    TRC_MSG(TRC_MRE_VMDES_152, " temp_input is  NULL")
    TRC_MSG(TRC_MRE_VMDES_183, " output is  NULL")
    TRC_MSG(TRC_MRE_VMDES_198, "( !memcmp( output+input_len-(VMINT)padch, pad, (VMINT)padch ) )")
    TRC_MSG(TRC_MRE_VMDES_204, "Delete padding WRONG.................")
    TRC_MSG(TRC_MRE_VMENV_245, "vm_pmng_create_process ret = %d")
    TRC_MSG(TRC_MRE_VMENV_300, "vm_pmng_create_process ret = %d")
    TRC_MSG(TRC_MRE_VMENV_515, "ASM callback to AM callback.")
    TRC_MSG(TRC_MRE_VMENV_592, "Failed create process, ret = %d")
    TRC_MSG(TRC_MRE_VMENV_1724, "vm_vam_release_task_list ..")
    TRC_MSG(TRC_MRE_VMENV_1741, "release History List. g_VamTask.pHistoryList = %p")
    TRC_MSG(TRC_MRE_VMENV_1750, "vm_vam_release_task_list end.")
    TRC_MSG(TRC_MRE_VMENV_1786, "[AM] vm_vam_parse_task_list")
    TRC_MSG(TRC_MRE_VMENV_1795, "[AM] nCount = %d")
    TRC_MSG(TRC_MRE_VMENV_1805, "[AM] pTask = %p")
    TRC_MSG(TRC_MRE_VMENV_1881, "[AM] parse end.")
    TRC_MSG(TRC_MRE_VMENV_1901, "[AM] vm_vam_check_task_file")
    TRC_MSG(TRC_MRE_VMENV_1934, "[AM]  nFileSize = %d")
    TRC_MSG(TRC_MRE_VMENV_1939, "[AM] delete tmp file.")
    TRC_MSG(TRC_MRE_VMENV_2018, "[AM] vm_vam_read_task_list")
    TRC_MSG(TRC_MRE_VMENV_2024, "vm_vam_check_task_file error.")
    TRC_MSG(TRC_MRE_VMENV_2100, "[AM] nTaskLen = %d")
    TRC_MSG(TRC_MRE_VMENV_2164, "[VAM] vam_malloc g_VamTask.pHistoryList = %p")
    TRC_MSG(TRC_MRE_VMENV_2264, "{ASL MODULE}Application version=%x")
    TRC_MSG(TRC_MRE_VMENV_2319, "vm_get_buildin_app_array game size = %d")
    TRC_MSG(TRC_MRE_VMENV_2420, "g_mre_default_game_size = %d")
    TRC_MSG(TRC_MRE_VMFRM_194, "[MRE]vm_frm_entry_app_screen get group id fail!")
    TRC_MSG(TRC_MRE_VMGPS_88, "Failed to regisiter GPS moudal. Error Code : %d")
    TRC_MSG(TRC_MRE_VMGPS_105, "{GPS MODUAL}Receive unkown[%d] event.")
    TRC_MSG(TRC_MRE_VMGPS_115, "vm_gps_notify_process_handler process_handle=%d,sys_state=%d")
    TRC_MSG(TRC_MRE_VMGPS_149, "vm_gps_open")
    TRC_MSG(TRC_MRE_VMGPS_152, "vm_gps_open s_vm_gps_port = %d")
    TRC_MSG(TRC_MRE_VMGPS_157, "vm_gps_open cur_process_id = %d")
    TRC_MSG(TRC_MRE_VMGPS_162, "vm_gps_open s_vm_gps_handle = %d")
    TRC_MSG(TRC_MRE_VMGPS_185, "vm_gps_open already open!")

TRC_MSG(TRC_MRE_VMDDRAW_BLT_CREATE_SRC_LAYER_FAIL, "[graphic] - _vm_graphic_blt: create src layer fail")
TRC_MSG(TRC_MRE_VMDDRAW_BLT_CREATE_DST_LAYER_FAIL, "[graphic] - _vm_graphic_blt: create dst layer fail")
TRC_MSG(TRC_MRE_VMDDRAW_BLT_FIND_DST_LAYER_FAIL, "[graphic] - _vm_graphic_blt: find dst layer fail")
TRC_MSG(TRC_MRE_VMDDRAW_BLT_FLATTEN_LAYER_FAIL, "[graphic] - _vm_graphic_blt: flatten layer fail")    
TRC_MSG(TRC_MRE_VMDDRAW_ROTATE_CREATE_SRC_LAYER_FAIL, "[graphic] - vm_graphic_rotate: create src layer fail")
TRC_MSG(TRC_MRE_VMDDRAW_ROTATE_CREATE_DST_LAYER_FAIL, "[graphic] - vm_graphic_rotate: create dst layer fail")
TRC_MSG(TRC_MRE_VMDDRAW_ROTATE_FIND_DST_LAYER_FAIL, "[graphic] - vm_graphic_rotate: find dst layer fail")
TRC_MSG(TRC_MRE_VMDDRAW_ROTATE_FLATTEN_LAYER_FAIL, "[graphic] - vm_graphic_rotate: flatten layer fail")    
TRC_MSG(TRC_MRE_VMDDRAW_339, "[graphic] - _vm_graphic_blt: get layer porp from buf fail")
TRC_MSG(TRC_MRE_VMDDRAW_436, "vm_graphic_create_canvas-->malloc failed! at size = %d")
TRC_MSG(TRC_MRE_VMDDRAW_461, "[graphic] - vm_graphic_create_canvas : create addr = %x")
TRC_MSG(TRC_MRE_VMDDRAW_498, "[graphic] - create_canvas_cf: malloc failed, size = %d")
TRC_MSG(TRC_MRE_VMDDRAW_524, "[graphic] - create_canvas_cf : create addr = 0x%08X")
TRC_MSG(TRC_MRE_VMDDRAW_552, "[graphic] - release_canvas: invalid canvas")
TRC_MSG(TRC_MRE_VMDDRAW_557, "[graphic] - release_canvas: free addr = %x")
TRC_MSG(TRC_MRE_VMDDRAW_1038, "vm_graphic_set_pixel: wrong param 1")
TRC_MSG(TRC_MRE_VMDDRAW_1047, "vm_graphic_set_pixel: wrong param 2")
TRC_MSG(TRC_MRE_VMDDRAW_1104, "vm_graphic_get_handle_from_buf: create layer failed")
TRC_MSG(TRC_MRE_VMDDRAW_1123, "vm_graphic_get_handle_from_buf: find layer failed")
TRC_MSG(TRC_MRE_VMDDRAW_1134, "vm_graphic_get_handle_from_buf:gdi_handle = %u,iscanvas = %d,x = %d,y = %d,width = %d,height = %d")
TRC_MSG(TRC_MRE_VMDDRAW_1168, "x0=%d,y0=%d,x1=%d,y1=%d")
TRC_MSG(TRC_MRE_VMDDRAW_1176, "vm_graphic_line: wrong param 1")
TRC_MSG(TRC_MRE_VMDDRAW_1186, "vm_graphic_line: wrong param 2")
TRC_MSG(TRC_MRE_VMDDRAW_1234, "ENTER vm_graphic_rect")
TRC_MSG(TRC_MRE_VMDDRAW_1236, "x=%d,y=%d,width=%d,height=%d,color=%d")
TRC_MSG(TRC_MRE_VMDDRAW_1244, "vm_graphic_rect: wrong param 1")
TRC_MSG(TRC_MRE_VMDDRAW_1253, "vm_graphic_rect: wrong param 2")
TRC_MSG(TRC_MRE_VMDDRAW_1305, "x=%d,y=%d,width=%d,height=%d,line=%d,back=%d")
TRC_MSG(TRC_MRE_VMDDRAW_1313, "vm_graphic_fill_rect: wrong param 1")
TRC_MSG(TRC_MRE_VMDDRAW_1322, "vm_graphic_fill_rect: wrong param 2")
TRC_MSG(TRC_MRE_VMDDRAW_1369, "_vm_graphic_get_pixel, x=%d,y=%d")
TRC_MSG(TRC_MRE_VMDDRAW_1373, "_vm_graphic_get_pixel: wrong param 1")
TRC_MSG(TRC_MRE_VMDDRAW_1382, "_vm_graphic_get_pixel: wrong param 2")
TRC_MSG(TRC_MRE_VMDDRAW_1724, "[graphic] - vm_graphic_mirror: src_cf=%d is different with dst_cf=%d")
TRC_MSG(TRC_MRE_VMDDRAW_2611, "[graphic] - vm_graphic_set_clip :%d,%d,%d,%d")
TRC_MSG(TRC_MRE_VMDDRAW_2628, "[graphic] - vm_graphic_set_clip111 :%d,%d,%d,%d")
TRC_MSG(TRC_MRE_VMGRAPH_556, "[graphic] - get_current_cb: No corresponding phandle in gcb_table!")
TRC_MSG(TRC_MRE_VMGRAPH_562, "[graphic] - get_current_cb: Get res gcbhandle fail!")
TRC_MSG(TRC_MRE_VMGRAPH_740, "[graphic] - enlarge_image :scaleh = %d, scalev = %d!")
TRC_MSG(TRC_MRE_VMGRAPH_976, "[graphic] - convert_to_gdi_rotate_degree: degree=%d not support")
TRC_MSG(TRC_MRE_VMGRAPH_997, "[graphic] - is_color_format_valid: cf=%d not support")
TRC_MSG(TRC_MRE_VMGRAPH_1022, "[graphic] - convert_to_gdi_color_format: cf=%d not support")
TRC_MSG(TRC_MRE_VMGRAPH_1047, "[graphic] - convert_to_mre_color_format: color_format=%d not support")
TRC_MSG(TRC_MRE_VMGRAPH_1076, "[graphic] - convert_to_gdi_color_format: cf=%d not support")
TRC_MSG(TRC_MRE_VMGRAPH_1092, "[graphic] - layer op permission: prohibit for not bg/fg")
TRC_MSG(TRC_MRE_VMGRAPH_1197, "[graphic]-vm_graphic_sal_resize_layer: gdi_handle=%x, width=%d, height=%d")
TRC_MSG(TRC_MRE_VMGRAPH_1223, "get_character_height - set_font:bold=%d,italic=%d,underline=%d,size=%d,color=%d,type=%d")
TRC_MSG(TRC_MRE_VMGRAPH_1225, "vm_graphic_get_character_height height=%d")
TRC_MSG(TRC_MRE_VMGRAPH_1243, "vm_graphic_get_character_width Wrong param")
TRC_MSG(TRC_MRE_VMGRAPH_1248, "get_character_width - set_font:bold=%d,italic=%d,underline=%d,size=%d,color=%d,type=%d")
TRC_MSG(TRC_MRE_VMGRAPH_1251, "vm_graphic_get_character_width c=%d,width = %d,height = %d")
TRC_MSG(TRC_MRE_VMGRAPH_1269, "[graphic]-vm_graphic_measure_character: wrong 1")
TRC_MSG(TRC_MRE_VMGRAPH_1276, "[graphic]-vm_graphic_measure_character: wrong 2")
TRC_MSG(TRC_MRE_VMGRAPH_1280, "measure_character - set_font:bold=%d,italic=%d,underline=%d,size=%d,color=%d,type=%d")
TRC_MSG(TRC_MRE_VMGRAPH_1282, "mmi_fe_get_glyph_metrics:adv_x=%d,ascent=%d,descent=%d")
TRC_MSG(TRC_MRE_VMGRAPH_1293, "vm_graphic_measure_character c=%d,width=%d,height=%d")
TRC_MSG(TRC_MRE_VMGRAPH_1314, "vm_graphic_get_character_info wrong 1")
TRC_MSG(TRC_MRE_VMGRAPH_1325, "vm_graphic_get_character_info wrong 2")
TRC_MSG(TRC_MRE_VMGRAPH_1329, "get_character_info - set_font:bold=%d,italic=%d,underline=%d,size=%d,color=%d,type=%d")
TRC_MSG(TRC_MRE_VMGRAPH_1340, "mmi_fe_get_string_widthheight: c=%d,dwidth=%d,width=%d,height=%d")
TRC_MSG(TRC_MRE_VMGRAPH_1357, "vm_graphic_get_string_width begin")
TRC_MSG(TRC_MRE_VMGRAPH_1364, "get_string_width_height - set_font:bold=%d,italic=%d,underline=%d,size=%d,color=%d,type=%d")
TRC_MSG(TRC_MRE_VMGRAPH_1368, "vm_graphic_get_string_width_height: width=%d, height=%d")
TRC_MSG(TRC_MRE_VMGRAPH_1384, "vm_graphic_get_string_height begin")
TRC_MSG(TRC_MRE_VMGRAPH_1391, "gui_set_font:bold=%d,italic=%d,underline=%d,size=%d,color=%d,type=%d")
TRC_MSG(TRC_MRE_VMGRAPH_1393, "vm_graphic_get_string_height return %d")
TRC_MSG(TRC_MRE_VMGRAPH_1438, "set_font - set_font:bold=%d,italic=%d,underline=%d,size=%d,color=%d,type=%d")
TRC_MSG(TRC_MRE_VMGRAPH_1500, "[graphic]-vm_graphic_active_layer_internal : active_layer=%d")
TRC_MSG(TRC_MRE_VMGRAPH_1514, "[graphic]-vm_graphic_active_layer : handle %d FAILED.")
TRC_MSG(TRC_MRE_VMGRAPH_SSBL_BL_EXISTED, "[graphic] - sal_set_base_layer: base layer existed, bl=%d")
TRC_MSG(TRC_MRE_SSFL_LAYER_LIMIT, "[graphic] - sal_set_fast_layer: exceed to max layer count")
TRC_MSG(TRC_MRE_SSFL_FL_EXISTED, "[graphic] - sal_set_fast_layer: fast layer existed, fl = %d")
TRC_MSG(TRC_MRE_VMGRAPH_SSFL_FAIL, "[graphic] - sal_set_fast_layer: create layer fail, gdi ret = %d")
TRC_MSG(TRC_MRE_VMGRAPH_SRL_BL, "[graphic]- sal_release_layer: release base layer")
TRC_MSG(TRC_MRE_VMGRAPH_SRL_FAIL, "[graphic]- sal_release_layer: release fail, gdi ret = %d")
TRC_MSG(TRC_MRE_VMGRAPH_SRL_GET_BLT_LAYER_FAIL, "[graphic]- sal_release_layer: get blt layer fail, gdi ret = %d")
TRC_MSG(TRC_MRE_VMGRAPH_SRL_SET_BLT_LAYER_FAIL, "[graphic]- sal_release_layer: set blt layer fail, gdi ret = %d")
TRC_MSG(TRC_MRE_VMGRAPH_SLTI_CF_NOT_SUPPORTED, "[graphic] - set_layer_table_internal : color_format = %d unsupported!")
TRC_MSG(TRC_MRE_VMGRAPH_SLT_NO_EMPTY_NODE, "[graphic] - set_layer_table: empty node not found !")
TRC_MSG(TRC_MRE_VMGRAPH_SLT_MHANDLE_FAIL, "[graphic] - set_layer_table: save mibr handle fail, ret=%d")
TRC_MSG(TRC_MRE_VMGRAPH_SLT_INFO_1, "[graphic] - set_layer_table: Current Handle = %d ,Layer Count = %d")
TRC_MSG(TRC_MRE_VMGRAPH_SLT_INFO_2, "[graphic] - set_layer_table: Add MTK layer = %u ,MIBR Handle= %d")
TRC_MSG(TRC_MRE_VMGRAPH_SLTE_INVALID_HANDLE, "[graphic] - set_layer_table_existed : invalid handle = %d")
TRC_MSG(TRC_MRE_VMGRAPH_SLTE_INFO_1, "[graphic] - set_layer_table_existed : Current Handle = %d ,Layer Count = %d")
TRC_MSG(TRC_MRE_VMGRAPH_SLTE_INFO_2, "[graphic] - set_layer_table_existed : Add MTK layer = %u ,MIBR Handle= %d")
TRC_MSG(TRC_MRE_VMGRAPH_CLWF_BUF_NULL, "[graphic]- create_layer_with_buf: buf is NULL")
TRC_MSG(TRC_MRE_VMGRAPH_CLWF_NOT_CANBUF, "[graphic]- create_layer_with_buf: buf is not canvas buffer, buf=%x")
TRC_MSG(TRC_MRE_VMGRAPH_CLWF_LAYER_LIMIT, "[graphic]- create_layer_with_buf: exceed to max layer count")
TRC_MSG(TRC_MRE_VMGRAPH_CLWF_INVALID_HANDLE, "[graphic]- create_layer_with_buf: invalid handle = %d")
TRC_MSG(TRC_MRE_VMGRAPH_CLWF_FAIL_1, "[graphic] - create_layer_with_buf: using_outside_memory create fail, ret=%d")
TRC_MSG(TRC_MRE_VMGRAPH_CLWF_FAIL_2, "[graphic] - create_layer_with_buf: using_outside_memory create fail, hdl=0")
TRC_MSG(TRC_MRE_VMGRAPH_CLWF_SUCCESS, "[graphic] - create_layer_with_buf: MTKhandle = %u, handle = %d")
TRC_MSG(TRC_MRE_VMGRAPH_CCAL_FAIL, "[graphic] - create_canvas_and_layer: create canvas fail, ret=%p")
TRC_MSG(TRC_MRE_VMGRAPH_CL_PARA_INFO, "[graphic] - create_layer: lcount=%d,x=%d,y=%d,w=%d,h=%d,tc=%d")
TRC_MSG(TRC_MRE_VMGRAPH_CL_BG_PROHIBIT, "[graphic] - create_layer: background prohibit")
TRC_MSG(TRC_MRE_VMGRAPH_CL_LAYER_EXISTED, "[graphic] - create_layer: Already 2 Layers, can't create more. bl=%d,fl=%d")
TRC_MSG(TRC_MRE_VMGRAPH_CL_INVALID_PARA, "[graphic] - create_layer: exceed to valid layer region")
TRC_MSG(TRC_MRE_VMGRAPH_CL_BASE_INFO, "[graphic] - create_layer (base_layer): create ret=%d, layer_count=%d!")
TRC_MSG(TRC_MRE_VMGRAPH_CL_FAST_INFO, "[graphic] - create_layer (fast_layer): create ret=%d, layer_count=%d!")
TRC_MSG(TRC_MRE_VMGRAPH_CL_LAYER_LIMIT, "[graphic] - create_layer: exceed to max layer count")
TRC_MSG(TRC_MRE_VMGRAPH_CL_EX_PARA_INFO, "[graphic] - create_layer_ex: lcount=%d,x=%d,y=%d,w=%d,h=%d,tc=%d,m=%d,buf=%x")
TRC_MSG(TRC_MRE_VMGRAPH_CL_EX_BG_PERMIT, "[graphic] - create_layer_ex: background permit")
TRC_MSG(TRC_MRE_VMGRAPH_CL_EX_PROHIBIT, "[graphic] - create_layer_ex: prohibit for not bg/fg")
TRC_MSG(TRC_MRE_VMGRAPH_CL_EX_FG_PERMIT, "[graphic] - create_layer_ex: foreground permit")
TRC_MSG(TRC_MRE_VMGRAPH_CL_EX_BL_NOT_EXISTED, "[graphic] - create_layer_ex: base layer not existed, bl=%d")
TRC_MSG(TRC_MRE_VMGRAPH_CL_EX_NO_HANDLE, "[graphic] - create_layer_ex: no avaliable layer handle")
TRC_MSG(TRC_MRE_VMGRAPH_CL_EX_INVALID_PARA_1, "[graphic] - create_layer_ex: exceed to valid layer region")
TRC_MSG(TRC_MRE_VMGRAPH_CL_EX_INVALID_PARA_2, "[graphic] - create_layer_ex: base/fast layer exceed to valid region")
TRC_MSG(TRC_MRE_VMGRAPH_CL_EX_INFO, "[graphic] - _vm_graphic_create_layer: m=%d, create ret=%d, lcount=%d")
TRC_MSG(TRC_MRE_VMGRAPH_1743, "[graphic] - create_layer_cf: layercount=%d,cf=%d,width=%d,height=%d")
TRC_MSG(TRC_MRE_VMGRAPH_1747, "[graphic] - create_layer_cf: not support for base/fast layer")
TRC_MSG(TRC_MRE_VMGRAPH_1753, "[graphic] - create_layer_cf: no avaliable layer handle")
TRC_MSG(TRC_MRE_VMGRAPH_1759, "[graphic] - create_layer_cf: exceed to max layer count")
TRC_MSG(TRC_MRE_VMGRAPH_1765, "[graphic] - create_layer_cf: exceed to valid layer region")
TRC_MSG(TRC_MRE_VMGRAPH_1783, "[graphic] - create_layer_cf: parameter buf is NULL for VM_BUF mode")
TRC_MSG(TRC_MRE_VMGRAPH_1793, "[graphic] - create_layer_with_buf: this canvas has been binded to a layer")
TRC_MSG(TRC_MRE_VMGRAPH_1804, "[graphic] - create_layer_with_buf: canvas cf, width, height inconsist with input parameter")
TRC_MSG(TRC_MRE_VMGRAPH_CLWF_SIZE_NOT_ENOUGH, "[graphic] - create_layer_with_buf: buf_size not enough, w=%d, h=%d, buf_size=%d")
TRC_MSG(TRC_MRE_VMGRAPH_CLWF_SIZE_INVALID_LHANDLE, "[graphic] - create_layer_with_buf: invalid layer handle")
TRC_MSG(TRC_MRE_VMGRAPH_CLWF_SIZE_INCONSIST_PARAM, "[graphic] - create_layer_with_buf: canvas cf, width, height inconsist with input parameter")
TRC_MSG(TRC_MRE_VMGRAPH_CLWF_SIZE_1_NOT_ENOUGH, "[graphic] - create_layer_with_buf: buf_size_1 not enough, w=%d, h=%d, buf_size_1=%d")
TRC_MSG(TRC_MRE_VMGRAPH_CCAL_CREATE_CANVAS_FAIL, "[graphic] - vm_graphic_create_canvas_and_layer:return canvas addr = %p")
TRC_MSG(TRC_MRE_VMGRAPH_CCAL_CREATE_CANVAS_1_FAIL, "[graphic] - vm_graphic_create_canvas_and_layer:return canvas1 addr = %p")
TRC_MSG(TRC_MRE_VMGRAPH_1822, "[graphic] - create_layer_cf: set_layer_table fail! ret=%d")
TRC_MSG(TRC_MRE_VMGRAPH_1828, "[graphic] - create_layer_cf: create_cf_using_outside_memory fail! ret=%d")
TRC_MSG(TRC_MRE_VMGRAPH_1841, "[graphic] - create_layer_cf: create_cf_using_outside_memory success")
TRC_MSG(TRC_MRE_VMGRAPH_1848, "[graphic] - create_layer_cf: set_layer_table fail! ret=%d")
TRC_MSG(TRC_MRE_VMGRAPH_1854, "[graphic] - create_layer_cf: create_cf_using_outside_memory fail! ret=%d")
TRC_MSG(TRC_MRE_VMGRAPH_1867, "[graphic] - create_layer_cf:return canvas addr = %p")
TRC_MSG(TRC_MRE_VMGRAPH_1878, "[graphic] - create_layer_cf: gdi_layer_create_cf ret GDI_SUCCEED ")
TRC_MSG(TRC_MRE_VMGRAPH_1887, "[graphic] - create_layer_cf: set_layer_table fail! ret=%d")
TRC_MSG(TRC_MRE_VMGRAPH_1893, "[graphic] - create_layer_cf: gdi_layer_create_cf ret = %d")
TRC_MSG(TRC_MRE_VMGRAPH_DLI_NO_CUR_CB, "[graphic] - delete_layer_internal: not find cur cb")
TRC_MSG(TRC_MRE_VMGRAPH_DLI_BEGIN, "[graphic] - delete_layer_internal: delete layer, handle=%d, bl_handle=5d, lcount=%d")
TRC_MSG(TRC_MRE_VMGRAPH_DLI_SEQ_FAIL, "[graphic] - delete_layer_internal: Should Delete Base Layer First!")
TRC_MSG(TRC_MRE_VMGRAPH_DLI_INVALID_HANDLE, "[graphic] - delete_layer_internal: invalid layer handle = %d")
TRC_MSG(TRC_MRE_VMGRAPH_DLI_IS_ACT_LAYER, "[graphic] - delete_layer_internal: is active layer")
TRC_MSG(TRC_MRE_VMGRAPH_DLI_ACTIVE_BL, "[graphic] - delete_layer_internal: active base layer")
TRC_MSG(TRC_MRE_VMGRAPH_DLI_MIBR_RL_FAIL, "[graphic] - delete_layer_internal: mibr release layer fail, ret=%d, mhandle=%d")
TRC_MSG(TRC_MRE_VMGRAPH_DLI_FAIL, "[graphic] - delete_layer_internal: delete fail, ret=%d")
TRC_MSG(TRC_MRE_VMGRAPH_DL_INVALID_HANDLE, "[graphic] - delete_layer: invalid layer handle = %d")
TRC_MSG(TRC_MRE_VMGRAPH_DL_NOT_FOR_CUR_PROCESS, "[graphic] - delete_layer: handle=%d not belong to cur process")
TRC_MSG(TRC_MRE_VMGRAPH_FEN_NO_EMPTY_NODE, "[graphic] - find_empty_node_in_layer_table: empty node is %d")
TRC_MSG(TRC_MRE_VMGRAPH_HBCP_FAIL, "[graphic] - handle_belong_to_cur_process: FAILED, phandle =%d,testhandle =%d")
TRC_MSG(TRC_MRE_VMGRAPH_1912, "[graphic] -vm_graphic_release_canvas_ex wrong 1")
TRC_MSG(TRC_MRE_VMGRAPH_1919, "[graphic] -vm_graphic_release_canvas_ex wrong 2")
TRC_MSG(TRC_MRE_VMGRAPH_1925, "[graphic] -vm_graphic_release_canvas_ex wrong 3")
TRC_MSG(TRC_MRE_VMGRAPH_2036, "[graphic] - vm_graphic_flush_layer:layer_handles=%x,count=%d")
TRC_MSG(TRC_MRE_VMGRAPH_2042, "[graphic] - vm_graphic_flush_layer : background!!")
TRC_MSG(TRC_MRE_VMGRAPH_2052, "[graphic] - vm_graphic_flush_layer : wrong 1")
TRC_MSG(TRC_MRE_VMGRAPH_2058, "[graphic] - vm_graphic_flush_layer : wrong 2")
TRC_MSG(TRC_MRE_VMGRAPH_2074, "[graphic] - vm_graphic_flush_layer : only blt base layer")
TRC_MSG(TRC_MRE_VMGRAPH_2083, "[graphic] - vm_graphic_flush_layer : wrong 3")
TRC_MSG(TRC_MRE_VMGRAPH_2105, "[graphic] - vm_graphic_flush_layer :Blt MTK layer_handles:   %d, %d, %d, %d, %d, %d.")
TRC_MSG(TRC_MRE_VMGRAPH_2110, "vm_graphic_flush_layer blt layer config wrong")
TRC_MSG(TRC_MRE_VMGRAPH_2130, "[graphic] - vm_graphic_flush_layer:layer_handles=%x,count=%d")
TRC_MSG(TRC_MRE_VMGRAPH_2134, "[graphic] - vm_graphic_flush_layer : background!!")
TRC_MSG(TRC_MRE_VMGRAPH_2141, "[graphic] - vm_graphic_flush_layer : wrong 1")
TRC_MSG(TRC_MRE_VMGRAPH_2146, "[graphic] - vm_graphic_flush_layer : wrong 2")
TRC_MSG(TRC_MRE_VMGRAPH_2156, "[graphic] - vm_graphic_flush_layer : only blt base layer")
TRC_MSG(TRC_MRE_VMGRAPH_2162, "[graphic] - vm_graphic_flush_layer : wrong 3")
TRC_MSG(TRC_MRE_VMGRAPH_2183, "[graphic] - vm_graphic_flush_layer :Blt MTK layer_handles:   %d, %d, %d, %d, %d, %d.")
TRC_MSG(TRC_MRE_VMGRAPH_2188, "vm_graphic_flush_layer blt layer config wrong")
TRC_MSG(TRC_MRE_VMGRAPH_2207, "[graphic] - vm_graphic_flush_layer_non_block:layer_handles=%x,count=%d")
TRC_MSG(TRC_MRE_VMGRAPH_2212, "[graphic] - vm_graphic_flush_layer_non_block : background!!")
TRC_MSG(TRC_MRE_VMGRAPH_2221, "[graphic] - vm_graphic_flush_layer_non_block : wrong 1")
TRC_MSG(TRC_MRE_VMGRAPH_2227, "[graphic] - vm_graphic_flush_layer_non_block : wrong 2")
TRC_MSG(TRC_MRE_VMGRAPH_2252, "[graphic] - vm_graphic_flush_layer :Blt MTK layer_handles:   %d, %d, %d, %d")
TRC_MSG(TRC_MRE_VMGRAPH_2256, "vm_graphic_flush_layer blt layer config wrong")
TRC_MSG(TRC_MRE_VMGRAPH_2277, "[graphic] - vm_graphic_flush_layer_non_block:layer_handles=%x,count=%d")
TRC_MSG(TRC_MRE_VMGRAPH_2281, "[graphic] - vm_graphic_flush_layer_non_block : background!!")
TRC_MSG(TRC_MRE_VMGRAPH_2287, "[graphic] - vm_graphic_flush_layer_non_block : wrong 1")
TRC_MSG(TRC_MRE_VMGRAPH_2292, "[graphic] - vm_graphic_flush_layer_non_block : wrong 2")
TRC_MSG(TRC_MRE_VMGRAPH_2312, "[graphic] - vm_graphic_flush_layer :Blt MTK layer_handles:   %d, %d, %d, %d")
TRC_MSG(TRC_MRE_VMGRAPH_2316, "vm_graphic_flush_layer blt layer config wrong")
TRC_MSG(TRC_MRE_VMGRAPH_2333, "[graphic] - get_layer_buffer: handle=%d, buf=0x%x")
TRC_MSG(TRC_MRE_VMGRAPH_2501, "[graphic] - vm_graphic_layer_set_trans_color : handle ERROR")
TRC_MSG(TRC_MRE_VMGRAPH_2511, "[graphic] - vm_graphic_layer_set_trans_color =%d")
TRC_MSG(TRC_MRE_VMGRAPH_2523, "[graphic] - vm_graphic_canvas_set_trans_color : VM_GDI_ERR_WRONG_PARAM")
TRC_MSG(TRC_MRE_VMGRAPH_2536, "[graphic] - vm_graphic_canvas_set_trans_color : BASE_LAYER")
TRC_MSG(TRC_MRE_VMGRAPH_2543, "[graphic] - vm_graphic_canvas_set_trans_color : handle %d ERROR")
TRC_MSG(TRC_MRE_VMGRAPH_2537, "[graphic] - vm_graphic_canvas_set_trans_color_argb : BASE_LAYER")
TRC_MSG(TRC_MRE_VMGRAPH_2544, "[graphic] - vm_graphic_canvas_set_trans_color_argb : handle %d ERROR")
TRC_MSG(TRC_MRE_VMGRAPH_2590, "textout - set_font:bold=%d,italic=%d,underline=%d,size=%d,color=%d,type=%d")
TRC_MSG(TRC_MRE_VMGRAPH_2667, "_vm_layer_textout_internal_ex wrong 1")
TRC_MSG(TRC_MRE_VMGRAPH_2745, "_vm_canvas_textout_internal wrong 1")
TRC_MSG(TRC_MRE_VMGRAPH_2752, "_vm_canvas_textout_internal wrong 2")
TRC_MSG(TRC_MRE_VMGRAPH_2798, "vm_graphic_textout_to_layer:handle =%d,x =%d,y=%d,s=%x,length =%d")
TRC_MSG(TRC_MRE_VMGRAPH_2807, "vm_graphic_textout_to_layer wrong 1")
TRC_MSG(TRC_MRE_VMGRAPH_2827, "vm_graphic_textout_to_layer_by_baseline:handle =%d,x =%d,y=%d,s=%x,length =%d,baseline = %d")
TRC_MSG(TRC_MRE_VMGRAPH_2836, "vm_graphic_textout_to_layer wrong 1")
TRC_MSG(TRC_MRE_VMGRAPH_2955, "vm_graphic_get_img_type unsupported img type")
TRC_MSG(TRC_MRE_VMGRAPH_2968, "vm_graphic_create_decode_canvas_internal-->create_canvas failed!")
TRC_MSG(TRC_MRE_VMGRAPH_2994, "[graphic] - vm_graphic_decode_internal:data =%x,buf_len=%d,img_data = %x,img_len=%d")
TRC_MSG(TRC_MRE_VMGRAPH_2995, "[graphic] - vm_graphic_decode_internal:img_width =%d,img_height=%d,graphic_type = %d,resize=%d")
TRC_MSG(TRC_MRE_VMGRAPH_3000, "[graphic] - vm_graphic_decode_internal : Layer create failed ret = %d")
TRC_MSG(TRC_MRE_VMGRAPH_3006, "[graphic] - vm_graphic_decode_internal : Layer create FAILED!")
TRC_MSG(TRC_MRE_VMGRAPH_3034, "[graphic] - vm_graphic_decode_internal: gdi_image_draw_mem ret=%d,resize=%d")
TRC_MSG(TRC_MRE_VMGRAPH_3066, "[graphic] - vm_graphic_decode_internal : Layer create failed ret = %d")
TRC_MSG(TRC_MRE_VMGRAPH_3073, "[graphic] - vm_graphic_decode_internal : Layer create failed ret = %d")
TRC_MSG(TRC_MRE_VMGRAPH_3079, "[graphic] - vm_graphic_decode_internal : gdi_bitblt_resized failed ret = %d")
TRC_MSG(TRC_MRE_VMGRAPH_3099, "vm_graphic_png_decode-->error img data or len!")
TRC_MSG(TRC_MRE_VMGRAPH_3148, "vm_graphic_gif_get_frames_prop gdi_image_get_frame_count_mem error")
TRC_MSG(TRC_MRE_VMGRAPH_3156, "vm_graphic_gif_get_frames_prop malloc error")
TRC_MSG(TRC_MRE_VMGRAPH_3370, "[graphic] - vm_graphic_gif_decode_frame_internal : layer create failed!")
TRC_MSG(TRC_MRE_VMGRAPH_3375, "[graphic] - vm_graphic_gif_decode_frame_internal : layer create failed!")
TRC_MSG(TRC_MRE_VMGRAPH_3391, "[graphic] - gdi_image_draw_mem_frames ret=%d,resized=%d")
TRC_MSG(TRC_MRE_VMGRAPH_3472, "[graphic] - vm_graphic_gif_decode : B")
TRC_MSG(TRC_MRE_VMGRAPH_3475, "[graphic] - vm_graphic_gif_decode : error gif data or len!")
TRC_MSG(TRC_MRE_VMGRAPH_3482, "[graphic] - vm_graphic_gif_decode : get frames prop failed!")
TRC_MSG(TRC_MRE_VMGRAPH_3497, "vm_graphic_gif_decode malloc_hcanvas fail")
TRC_MSG(TRC_MRE_VMGRAPH_3530, "[graphic] - vm_graphic_gif_decode : end")
TRC_MSG(TRC_MRE_VMGRAPH_3550, "[graphic] - vm_graphic_gif_decode_resized : B")
TRC_MSG(TRC_MRE_VMGRAPH_3553, "[graphic] - vm_graphic_gif_decode_resized : error gif data or len!")
TRC_MSG(TRC_MRE_VMGRAPH_3560, "[graphic] - vm_graphic_gif_decode_resized : get frames prop failed!")
TRC_MSG(TRC_MRE_VMGRAPH_3627, "[graphic] - vm_graphic_gif_decode_resized_by_percent : B")
TRC_MSG(TRC_MRE_VMGRAPH_3631, "[graphic] - vm_graphic_gif_decode_resized_by_percent : error gif data or len!")
TRC_MSG(TRC_MRE_VMGRAPH_3637, "[graphic] - vm_graphic_gif_decode_resized_by_percent : get frames prop failed!")
TRC_MSG(TRC_MRE_VMGRAPH_3649, "vm_graphic_gif_decode_resized_by_percent malloc_hcanvas fail")
TRC_MSG(TRC_MRE_VMGRAPH_3670, "vm_graphic_gif_decode_resized_by_percent malloc_hcanvas fail 2")
TRC_MSG(TRC_MRE_VMGRAPH_3713, "vm_graphic_gif_decode_resized_by_percent end")
TRC_MSG(TRC_MRE_VMGRAPH_3773, "vm_graphic_image_decode-->error img data or len!")
TRC_MSG(TRC_MRE_VMGRAPH_3796, "vm_graphic_image_decode-->gdi_image_get_dimension_mem ret=%d")
TRC_MSG(TRC_MRE_VMGRAPH_3802, "vm_graphic_image_decode-->vm_graphic_create_decode_canvas_internal fail")
TRC_MSG(TRC_MRE_VMGRAPH_3840, "[graphic] - vm_graphic_image_decode_resized :Img data or len ERROR!")
TRC_MSG(TRC_MRE_VMGRAPH_3863, "[graphic] - vm_graphic_image_decode_resized : Get dimension ERROR!")
TRC_MSG(TRC_MRE_VMGRAPH_3873, "[graphic] - vm_graphic_image_decode_resized:vm_graphic_create_decode_canvas_internal less FAIL")
TRC_MSG(TRC_MRE_VMGRAPH_3879, "[graphic] - vm_graphic_image_decode_resized:vm_graphic_decode_internal less FAIL")
TRC_MSG(TRC_MRE_VMGRAPH_3891, "[graphic] - vm_graphic_create_decode_canvas_internal:vm_graphic_decode_internal more FAIL")
TRC_MSG(TRC_MRE_VMGRAPH_3897, "[graphic] - vm_graphic_image_decode_resized:vm_graphic_decode_internal more FAIL")
TRC_MSG(TRC_MRE_VMGRAPH_3928, "[graphic] - vm_graphic_create_decode_canvas_internal:vm_graphic_decode_internal more FAIL")
TRC_MSG(TRC_MRE_VMGRAPH_3934, "[graphic] - vm_graphic_bmp_decode_resized:vm_graphic_decode_internal more FAIL")
TRC_MSG(TRC_MRE_VMGRAPH_3961, "[graphic] : vm_graphic_load_image B1 img_data=%x")
TRC_MSG(TRC_MRE_VMGRAPH_3964, "vm_graphic_load_image-->error img data or len!")
TRC_MSG(TRC_MRE_VMGRAPH_3977, "[graphic]-vm_graphic_load_image:load gif failed")
TRC_MSG(TRC_MRE_VMGRAPH_3987, "[graphic]-vm_graphic_load_image:load bmp failed")
TRC_MSG(TRC_MRE_VMGRAPH_4022, "vm_graphic_load_image-->error img data or len!")
TRC_MSG(TRC_MRE_VMGRAPH_4035, "[graphic]-vm_graphic_load_image_resized:load gif failed")
TRC_MSG(TRC_MRE_VMGRAPH_4045, "[graphic]-vm_graphic_load_image_resized:load bmp failed")
TRC_MSG(TRC_MRE_VMGRAPH_4082, "[graphic]-vm_graphic_load_gif_resized_by_percent:load gif failed")
TRC_MSG(TRC_MRE_VMGRAPH_4125, "[graphic]-vm_graphic_get_img_property_ex:get gif prop failed")
TRC_MSG(TRC_MRE_VMGRAPH_4135, "[graphic]-vm_graphic_get_img_property_ex:get bmp prop failed")
TRC_MSG(TRC_MRE_VMGRAPH_4153, "draw_image_from_memory:layer = %d,x =%d,y=%d,img_data =%x,img_len = %d")
TRC_MSG(TRC_MRE_VMGRAPH_4157, "draw_image_from_memory wrong 1")
TRC_MSG(TRC_MRE_VMGRAPH_4165, "draw_image_from_memory IMG TYPE = %d")
TRC_MSG(TRC_MRE_VMGRAPH_4176, "draw_image_from_memory gdi_image_draw_mem ret= %d")
TRC_MSG(TRC_MRE_VMGRAPH_4192, "vm_graphic_draw_resized_image_from_memory:layer = %d,x =%d,y=%d,img_data =%x,img_len = %d")
TRC_MSG(TRC_MRE_VMGRAPH_4196, "vm_graphic_draw_resized_image_from_memory wrong 1")
TRC_MSG(TRC_MRE_VMGRAPH_4204, "vm_graphic_draw_resized_image_from_memory IMG TYPE = %d")
TRC_MSG(TRC_MRE_VMGRAPH_4213, "vm_graphic_draw_resized_image_from_memory gdi_image_draw_resized_mem ret = %d")
TRC_MSG(TRC_MRE_VMGRAPH_4229, "draw_image_from_file:layer = %d,x =%d,y=%d")
TRC_MSG(TRC_MRE_VMGRAPH_4233, "draw_image_from_file wrong 1")
TRC_MSG(TRC_MRE_VMGRAPH_4239, "draw_image_from_file gdi_image_draw_file ret= %d")
TRC_MSG(TRC_MRE_VMGRAPH_4255, "draw_resized_image_from_file:layer = %d,x =%d,y=%d,resized_width =%d,resized_height = %d")
TRC_MSG(TRC_MRE_VMGRAPH_4259, "vm_graphic_draw_resized_image_from_file wrong 1")
TRC_MSG(TRC_MRE_VMGRAPH_4265, "draw_resized_image_from_file gdi_image_draw_resized_file ret= %d")
TRC_MSG(TRC_MRE_VMGRAPH_4287, "[graphic] -vm_graphic_flatten_layer : flatten_handles=%x,%x,%u,%x")
TRC_MSG(TRC_MRE_VMGRAPH_4329, "[graphic] -vm_graphic_flatten_layer : active layer=%d")
TRC_MSG(TRC_MRE_VMGRAPH_4360, "[graphic] -vm_graphic_flatten_canvas : handles=%d,%d,%d,%d")
TRC_MSG(TRC_MRE_VMGRAPH_4369, "[graphic] -vm_graphic_flatten_canvas : flatten_handles=%u,%u,%u,%u")
TRC_MSG(TRC_MRE_VMGRAPH_4411, "[graphic] -vm_graphic_flatten_canvas : active layer=%d")
TRC_MSG(TRC_MRE_VMGRAPH_4472, "[graphic] - vm_graphic_get_layer_clip : x1=%d,y1=%d,x2=%d,y2=%d")
TRC_MSG(TRC_MRE_VMGRAPH_4502, "[graphic] - vm_graphic_set_layer_clip : x1=%d,y1=%d,x2=%d,y2=%d")
TRC_MSG(TRC_MRE_VMGRAPH_4541, "[graphic] - vm_graphic_set_layer_clip : x1=%d,y1=%d,x2=%d,y2=%d")
TRC_MSG(TRC_MRE_VMGRAPH_5091, "set_font_size - set_font:bold=%d,italic=%d,underline=%d,size=%d,color=%d,type=%d")
TRC_MSG(TRC_MRE_VMGRAPH_5133, "set_font_style - set_font:bold=%d,italic=%d,underline=%d,size=%d,color=%d,type=%d")
TRC_MSG(TRC_MRE_VMGRAPH_5194, "[graphic] - cb_init: get current app handle fail")
TRC_MSG(TRC_MRE_VMGRAPH_5200, "[graphic] - cb_init: malloc for gcb failed")
TRC_MSG(TRC_MRE_VMGRAPH_5239, "[graphic] - cb_init: save gcbhandle res fail")
TRC_MSG(TRC_MRE_VMGRAPH_5253, "[graphic] - cb_init: not empty element in gcb_table to save gcbhandle!")
TRC_MSG(TRC_MRE_VMGRAPH_5260, "[graphic] - cb_init: save gcbhandle, i=%d,phandle=%d,gcbhandle=%d")
TRC_MSG(TRC_MRE_VMGRAPH_5276, "[graphic] - cb_exit: get current app handle fail")
TRC_MSG(TRC_MRE_VMGRAPH_5288, "[graphic] - cb_exit: No corresponding phandle in gcb_table!")
TRC_MSG(TRC_MRE_VMGRAPH_5294, "[graphic] - cb_exit: get gcbhandle res fail")
TRC_MSG(TRC_MRE_VMGRAPH_5300, "[graphic] - cb_exit: release gcbhandle res fail")
TRC_MSG(TRC_MRE_VMGRAPH_5328, "[graphic] - B:mibr_layer_notify_callback : delete layer Done")
TRC_MSG(TRC_MRE_VMGRAPH_5332, "[graphic] - mibr_layer_notify_callback : Not Support BG!! ")
TRC_MSG(TRC_MRE_VMGRAPH_5342, "[graphic] - U:mibr_layer_notify_callback : delete layer Done")
TRC_MSG(TRC_MRE_VMGRAPH_5354, "[graphic] - mibr_gcb_notify_callback: phandle=%d,state=%d")
TRC_MSG(TRC_MRE_VMGRAPH_5416, "_vm_reg_graphic_modual : failed to register graphic module. errorcode=%d")
TRC_MSG(TRC_MRE_VMGRAPH_5420, "_vm_reg_graphic_modual : success to register graphic module")
TRC_MSG(TRC_MRE_VMGRAPH_5436, "vm_graphic_set_alpha_blending_layer,handle = %d,old hand = %d")
TRC_MSG(TRC_MRE_VMGRAPH_5448, "vm_graphic_set_alpha_blending_layer,old = %d")
TRC_MSG(TRC_MRE_VMGRAPH_5495, "vm_graphic_set_blt_layer layer_handles = %x,count = %d")
TRC_MSG(TRC_MRE_VMGRAPH_5499, "vm_graphic_set_blt_layer wrong 1")
TRC_MSG(TRC_MRE_VMGRAPH_5505, "vm_graphic_set_blt_layer wrong 2")
TRC_MSG(TRC_MRE_VMGRAPH_5512, "vm_graphic_set_blt_layer wrong 3")
TRC_MSG(TRC_MRE_VMGRAPH_5541, "vm_graphic_set_blt_layer ret  = %d")
TRC_MSG(TRC_MRE_VMGRAPH_5563, "vm_graphic_get_blt_layer wrong 1")
TRC_MSG(TRC_MRE_VMGRAPH_5569, "vm_graphic_get_blt_layer wrong 2")
TRC_MSG(TRC_MRE_VMGRAPH_5621, "vm_get_string_width_height_ex ret = %d")
TRC_MSG(TRC_MRE_VMGRAPH_5644, "vm_graphic_show_truncated_text wrong param 2")
TRC_MSG(TRC_MRE_VMGRAPH_5656, "show_truncated_text - set_font:bold=%d,italic=%d,underline=%d,size=%d,color=%d,type=%d")
TRC_MSG(TRC_MRE_VMGRAPH_5691, "enter vm_frm_screen_rotate")
TRC_MSG(TRC_MRE_VMGRAPH_5692, "vm_frm_screen_rotate: rotation = %d")
TRC_MSG(TRC_MRE_VMGRAPH_5734, "__MMI_SCREEN_ROTATE__")
TRC_MSG(TRC_MRE_VMGRAPH_5737, "EXIT vm_frm_screen_rotate")
TRC_MSG(TRC_MRE_VMGRAPH_5750, "all_language-set_font:bold=%d,italic=%d,underline=%d,size=%d,color=%d,type=%d")
TRC_MSG(TRC_MRE_VMGRAPH_5752, "AllLang:s=%d,h=%d")
TRC_MSG(TRC_MRE_VMGRAPH_5761, "AllLangWithSize:s=%d,h=%d")
TRC_MSG(TRC_MRE_VMGRAPH_5771, "CharBaselineAllLang:s=%d,h=%d,a=%d,d=%d")

TRC_MSG(TRC_MRE_VMGRAPH_ABLT_ASM_CACHE_FREE_CB_BEGIN, "asm_cache_free_cb:w=%d,p=0x%X,A=0x%X,B=0x%X")
TRC_MSG(TRC_MRE_VMGRAPH_ABLT_ASM_CACHE_FREE_CB_END, "asm_cache_free_cb:w=%d,A=0x%X,B=0x%X")
TRC_MSG(TRC_MRE_VMGRAPH_ABLT_ASM_CACHE_FREE_CB_CREATE_LAYER_FAIL, "asm_cache_free_cb: create layer fail, ret=%d")
TRC_MSG(TRC_MRE_VMGRAPH_ABLT_EXIT, "async_blt_exit:h=%d,w=%d,A=0x%X,B=0x%X")
TRC_MSG(TRC_MRE_VMGRAPH_ABLT_INIT_BEGIN, "async_blt_init begin:h=%d,w=%d,A=0x%X,B=0x%X")
TRC_MSG(TRC_MRE_VMGRAPH_ABLT_INIT_END, "async_blt_init end:h=%d,w=%d,A=0x%X,B=0x%X")
TRC_MSG(TRC_MRE_VMGRAPH_ABLT_INIT_CREATE_DOUBLE_LAYER_FAIL, "async_blt_init: create double layer fail, ret=%d")
TRC_MSG(TRC_MRE_VMGRAPH_ABLT_INIT_CREATE_SINGLE_LAYER_FAIL, "async_blt_init: create single layer fail, ret=%d")
TRC_MSG(TRC_MRE_VMGRAPH_ABLT_INIT_ALLOC_A_BUFFER_FAIL, "async_blt_init: alloc A buffer fail, size=%d")
TRC_MSG(TRC_MRE_VMGRAPH_ABLT_INIT_ALLOC_B_BUFFER_FAIL, "async_blt_init: alloc B buffer fail, size=%d")
TRC_MSG(TRC_MRE_VMGRAPH_ABLT_INIT_CREATE_UI_DOUBLE_LAYER_SUCC, "async_blt_init: create ui double layer, h=%d,w=%d")
TRC_MSG(TRC_MRE_VMGRAPH_ABLT_INIT_CREATE_ASM_SINGLE_LAYER_SUCC, "async_blt_init: create asm single layer, h=%d,w=%d")
TRC_MSG(TRC_MRE_VMGRAPH_ABLT_INIT_CREATE_ASM_DOUBLE_LAYER_SUCC, "async_blt_init: create asm double layer, h=%d,w=%d")
TRC_MSG(TRC_MRE_VMGRAPH_ABLT_MDI_START, "async_blt_mdi_start:h=%d,w=%d,A=0x%X,B=0x%X")
TRC_MSG(TRC_MRE_VMGRAPH_ABLT_MDI_END, "async_blt_mdi_end")
TRC_MSG(TRC_MRE_VMGRAPH_ABLT_FLUSH, "async_blt, flush:h=%d,w=%d,A=0x%X,B=0x%X")
TRC_MSG(TRC_MRE_VMGRAPH_ABLT_FLUSH_FLATTEN_FAIL, "async_blt, flush: flatten fail, ret=%d")
TRC_MSG(TRC_MRE_VMGRAPH_ABLT_MDI_START_BLT_LAYER, "async_blt_mdi_start: %d,%d,%d,%d")
TRC_MSG(TRC_MRE_VMGRAPH_ABLT_MDI_START_SET_BLT_LAYER_FAIL, "async_blt_mdi_start, set_blt_layer fail, ret=%d")

    TRC_MSG(TRC_MRE_VMIO_246, "vm_file_open  start : mode=%d, phandle=%d, filename=[0x%x]")
    TRC_MSG(TRC_MRE_VMIO_272, "vm_file_open : set mtk_file_id error,  mtk_file_id = %d")
    TRC_MSG(TRC_MRE_VMIO_280, "vm_file_open : get mtk_file_id error = %d, <0")
    TRC_MSG(TRC_MRE_VMIO_287, "vm_file_open : register res error handle=%d")
    TRC_MSG(TRC_MRE_VMIO_291, "vm_file_open:  end mode=%d, phandle=%d, handle=%d")
    TRC_MSG(TRC_MRE_VMIO_335, "vm_file_close : start handle=%d")
    TRC_MSG(TRC_MRE_VMIO_339, "vm_file_close : handle=%d, mtk_file_id=%d")
    TRC_MSG(TRC_MRE_VMIO_344, "vm_file_close : end handle=%d")
    TRC_MSG(TRC_MRE_VMIO_418, "vm_file_is_eof : pos=%d")
    TRC_MSG(TRC_MRE_VMIO_420, "vm_file_is_eof : filesize=%d")
    TRC_MSG(TRC_MRE_VMIO_518, "vm_file_delete : the ptr of filename is NULL")
    TRC_MSG(TRC_MRE_VMIO_523, "vm_file_delete : the length of filename is error")
    TRC_MSG(TRC_MRE_VMIO_533, "vm_file_delete : FS_Delete return error code=%d")
    TRC_MSG(TRC_MRE_VMIO_543, "vm_file_rename : the ptr of filename is NULL")
    TRC_MSG(TRC_MRE_VMIO_552, "vm_file_rename : the length of filename is error")
    TRC_MSG(TRC_MRE_VMIO_559, "vm_file_rename : FS_Rename return error code=%d")
    TRC_MSG(TRC_MRE_VMIO_571, "vm_file_mkdir : the ptr of dirname is NULL")
    TRC_MSG(TRC_MRE_VMIO_576, "vm_file_mkdir : the length of dirname is error")
    TRC_MSG(TRC_MRE_VMIO_582, "vm_file_mkdir : [0x%x]")
    TRC_MSG(TRC_MRE_VMIO_587, "vm_file_mkdir : FS_CreateDir return error code=%d")
    TRC_MSG(TRC_MRE_VMIO_597, "vm_file_rmdir : the ptr of dirname is NULL")
    TRC_MSG(TRC_MRE_VMIO_602, "vm_file_rmdir : the length of dirname is error")
    TRC_MSG(TRC_MRE_VMIO_615, "vm_file_rmdir : FS_RemoveDir return error code=%d")
    TRC_MSG(TRC_MRE_VMIO_655, "vm_find_first")
    TRC_MSG(TRC_MRE_VMIO_659, "vm_find_first_ext : the ptr of pathname or info is NULL")
    TRC_MSG(TRC_MRE_VMIO_664, "vm_find_first_ext : the length of pathname is error")
    TRC_MSG(TRC_MRE_VMIO_680, "vm_find_first_ext : FS_FindFirst return success handle=%d, filename=[0x%x] ")
    TRC_MSG(TRC_MRE_VMIO_719, "vm_find_first_ext : FS_FindFirst return handle=%d is error")
    TRC_MSG(TRC_MRE_VMIO_733, "vm_find_next_ext: the ptr of info&direntry is NULL")
    TRC_MSG(TRC_MRE_VMIO_743, "vm_find_next_ext : FS_FindNext return sccuess, handle=%d, filename=[0x%x] ")
    TRC_MSG(TRC_MRE_VMIO_771, "vm_find_next_ext : FS_FindNext return error code =%d, handle=%d")
    TRC_MSG(TRC_MRE_VMIO_793, "vm_find_first")
    TRC_MSG(TRC_MRE_VMIO_796, "vm_find_first : the ptr of pathname or info is NULL")
    TRC_MSG(TRC_MRE_VMIO_801, "vm_find_first : the length of pathname is error")
    TRC_MSG(TRC_MRE_VMIO_814, "vm_find_first : FS_FindFirst return success handle=%d ")
    TRC_MSG(TRC_MRE_VMIO_833, "vm_find_first : FS_FindFirst return handle=%d is error")
    TRC_MSG(TRC_MRE_VMIO_844, "vm_find_next")
    TRC_MSG(TRC_MRE_VMIO_853, "vm_find_next : FS_FindNext return error code =%d")
    TRC_MSG(TRC_MRE_VMIO_876, "vm_find_close : FS_FindClose return error code =%d")
    TRC_MSG(TRC_MRE_VMIO_931, "To open [0x%x].")
    TRC_MSG(TRC_MRE_VMIO_932, "Remap to [0x%x].")
    TRC_MSG(TRC_MRE_VMIO_951, "vm_get_disk_free_space : the ptr of drv_name is NULL")
    TRC_MSG(TRC_MRE_VMIO_957, "vm_get_disk_free_space : the length of drv_name is not 1")
    TRC_MSG(TRC_MRE_VMIO_964, "vm_get_disk_free_space : drv=[0x%x]")
    TRC_MSG(TRC_MRE_VMIO_968, "vm_get_disk_free_space : drv=[0x%x]")
    TRC_MSG(TRC_MRE_VMIO_976, "disk_info : Clusters=%d, SectorsPerCluster=%d, BytesPerSector=%d")
    TRC_MSG(TRC_MRE_VMIO_980, "[vmio] 1 temp [0x%x, 0x%x]")
    TRC_MSG(TRC_MRE_VMIO_985, "[vmio] 1 free_space")
    TRC_MSG(TRC_MRE_VMIO_989, "[vmio] 2 free_space")
    TRC_MSG(TRC_MRE_VMIO_993, "vm_get_disk_free_space : FS_GetDiskInfo error")
    TRC_MSG(TRC_MRE_VMIO_998, "vm_get_disk_free_space : the letter of drv_name is error")
    TRC_MSG(TRC_MRE_VMIO_1070, "vm_file_get_modify_time start")
    TRC_MSG(TRC_MRE_VMIO_1073, "vm_file_get_modify_time : the ptr of filename or modify_time is NULL")
    TRC_MSG(TRC_MRE_VMIO_1079, "vm_file_get_modify_time : the length of filename is error")
    TRC_MSG(TRC_MRE_VMIO_1084, "vm_file_open : fn = [0x%x]")
    TRC_MSG(TRC_MRE_VMIO_1090, "vm_file_get_modify_time step 1")
    TRC_MSG(TRC_MRE_VMIO_1095, "vm_file_get_modify_time step 2")
    TRC_MSG(TRC_MRE_VMIO_1104, "vm_file_get_modify_time step 3")
    TRC_MSG(TRC_MRE_VMIO_1109, "vm_file_get_modify_time: FS_GetFileInfo error")
    TRC_MSG(TRC_MRE_VMIO_1116, "vm_file_get_modify_time: FS_Open error")
    TRC_MSG(TRC_MRE_VMIO_1118, "vm_file_get_modify_time end")
    TRC_MSG(TRC_MRE_VMIO_1160, "vm_file_open_remap : malloc remap_filename fail")
    TRC_MSG(TRC_MRE_VMIO_1167, "vm_file_open_remap : _vm_remap_usr_disk fail")
    TRC_MSG(TRC_MRE_VMIO_1208, "vm_file_delete_remap : the ptr of filename is NULL")
    TRC_MSG(TRC_MRE_VMIO_1213, "vm_file_delete_remap : the length of filename is error")
    TRC_MSG(TRC_MRE_VMIO_1221, "vm_file_delete_remap : malloc remap_filename fail")
    TRC_MSG(TRC_MRE_VMIO_1226, "vm_file_delete_remap : _vm_remap_usr_disk fail")
    TRC_MSG(TRC_MRE_VMIO_1238, "vm_file_delete_remap : FS_Delete return error code=%d")
    TRC_MSG(TRC_MRE_VMIO_1253, "vm_file_rename_remap : the ptr of filename is NULL")
    TRC_MSG(TRC_MRE_VMIO_1262, "vm_file_rename_remap : the length of filename is error")
    TRC_MSG(TRC_MRE_VMIO_1269, "vm_file_rename_remap : malloc remap_filename 1 fail")
    TRC_MSG(TRC_MRE_VMIO_1276, "vm_file_rename_remap : malloc remap_filename 2 fail")
    TRC_MSG(TRC_MRE_VMIO_1285, "vm_file_rename_remap : _vm_remap_usr_disk fail")
    TRC_MSG(TRC_MRE_VMIO_1295, "vm_file_rename_remap : FS_Rename return error code=%d")
    TRC_MSG(TRC_MRE_VMIO_1316, "vm_find_first_remap : the ptr of pathname or info is NULL")
    TRC_MSG(TRC_MRE_VMIO_1321, "vm_find_first_remap : the length of pathname is error")
    TRC_MSG(TRC_MRE_VMIO_1328, "vm_find_first_remap : malloc remap_filename fail")
    TRC_MSG(TRC_MRE_VMIO_1334, "vm_find_first_remap : _vm_remap_usr_disk fail")
    TRC_MSG(TRC_MRE_VMIO_1386, "vm_find_first_remap : FS_FindFirst return handle=%d is error")
    TRC_MSG(TRC_MRE_VMIO_1405, "vm_find_first_remap : the ptr of pathname or info is NULL")
    TRC_MSG(TRC_MRE_VMIO_1410, "vm_find_first_remap : the length of pathname is error")
    TRC_MSG(TRC_MRE_VMIO_1415, "vm_find_first_remap : the ptr of info->filename is NULL")
    TRC_MSG(TRC_MRE_VMIO_1420, "vm_find_first_remap : the length of info->filename is error")
    TRC_MSG(TRC_MRE_VMIO_1427, "vm_find_first_remap : malloc remap_filename fail")
    TRC_MSG(TRC_MRE_VMIO_1433, "vm_find_first_remap : _vm_remap_usr_disk fail")
    TRC_MSG(TRC_MRE_VMIO_1465, "vm_find_first_remap : FS_FindFirst return handle=%d is error")
    TRC_MSG(TRC_MRE_VMIO_1479, "vm_file_mkdir_remap : [0x%x]")
    TRC_MSG(TRC_MRE_VMIO_1483, "vm_file_mkdir_remap : the ptr of dirname is NULL")
    TRC_MSG(TRC_MRE_VMIO_1488, "vm_file_mkdir_remap : the length of dirname is error")
    TRC_MSG(TRC_MRE_VMIO_1495, "vm_file_mkdir_remap : malloc remap_dirname fail")
    TRC_MSG(TRC_MRE_VMIO_1501, "vm_find_first_remap : _vm_remap_usr_disk fail")
    TRC_MSG(TRC_MRE_VMIO_1510, "vm_file_mkdir_remap : FS_CreateDir return error code=%d")
    TRC_MSG(TRC_MRE_VMIO_1524, "vm_file_rmdir_remap : the ptr of dirname is NULL")
    TRC_MSG(TRC_MRE_VMIO_1529, "vm_file_rmdir_remap : the length of dirname is error")
    TRC_MSG(TRC_MRE_VMIO_1536, "vm_file_rmdir_remap : malloc remap_dirname fail")
    TRC_MSG(TRC_MRE_VMIO_1542, "vm_find_first_remap : _vm_remap_usr_disk fail")
    TRC_MSG(TRC_MRE_VMIO_1557, "vm_file_mkdir_remap : FS_CreateDir return error code=%d")
    TRC_MSG(TRC_MRE_VMIO_1722, "_vm_remap_usr_disk begin")
    TRC_MSG(TRC_MRE_VMIO_1726, "_vm_remap_usr_disk : the ptr of source_filename or dest_filename is error")
    TRC_MSG(TRC_MRE_VMIO_1732, "_vm_remap_usr_disk : the length of source_filename is error")
    TRC_MSG(TRC_MRE_VMIO_1739, "_vm_remap_usr_disk step 1 : system role, load wstrcpy function")
    TRC_MSG(TRC_MRE_VMIO_1745, "_vm_remap_usr_disk step 2 : usr role")
    TRC_MSG(TRC_MRE_VMIO_1772, "_vm_remap_usr_disk step 3")
    TRC_MSG(TRC_MRE_VMIO_1790, "_vm_remap_usr_disk step 4")
    TRC_MSG(TRC_MRE_VMIO_1823, "_vm_remap_usr_disk remap result : [0x%x]")
    TRC_MSG(TRC_MRE_VMIO_1838, "_vm_remap_usr_disk end")
    TRC_MSG(TRC_MRE_VMIO_1858, "vm_findfirst_process_state_pro : delete findfirst_handle=%d")
    TRC_MSG(TRC_MRE_VMIO_1881, "vm_file_process_state_pro : delete file_handle=%d")
    TRC_MSG(TRC_MRE_VMIO_1907, "vm_io_finialize : delete file_handle=%d")
    TRC_MSG(TRC_MRE_VMIO_1915, "vm_io_finialize : delete findfirst_handle=%d")
    TRC_MSG(TRC_MRE_VMIO_1945, "_vm_reg_io_modual : failed to register io module. errorcode=%d")
    TRC_MSG(TRC_MRE_VMIO_1970, "[STO] vm_storage_open S")
    TRC_MSG(TRC_MRE_VMIO_1972, "[STO] vm_storage_open drv [%d]")
    TRC_MSG(TRC_MRE_VMIO_1985, "[STO] vm_res_save_data < 0")
    TRC_MSG(TRC_MRE_VMIO_1995, "[STO] folder_hdl < 0")
    TRC_MSG(TRC_MRE_VMIO_2002, "[STO] FS_CreateDir < 0")
    TRC_MSG(TRC_MRE_VMIO_2012, "[STO] FS_Open >= 0")
    TRC_MSG(TRC_MRE_VMIO_2025, "file_hdl < 0")
    TRC_MSG(TRC_MRE_VMIO_2034, "[STO] file_hdl < 0")
    TRC_MSG(TRC_MRE_VMIO_2042, "[STO] file_hdl < 0")
    TRC_MSG(TRC_MRE_VMIO_2046, "[STO] vm_storage_open E")
    TRC_MSG(TRC_MRE_VMIO_2081, "[STO] vm_storage_close S")
    TRC_MSG(TRC_MRE_VMIO_2083, "[STO] vm_storage_close E")
    TRC_MSG(TRC_MRE_VMIO_2095, "[STO] vm_storage_read S")
    TRC_MSG(TRC_MRE_VMIO_2096, "[STO] vm_storage_read [%d, %x, %d, %d, %x]")
    TRC_MSG(TRC_MRE_VMIO_2100, "[STO] vm_storage_read ret VM_STORAGE_ERR_PARAM")
    TRC_MSG(TRC_MRE_VMIO_2106, "[STO] vm_storage_read ret VM_STORAGE_ERR_FILE_READ")
    TRC_MSG(TRC_MRE_VMIO_2112, "[STO] vm_file_seek F")
    TRC_MSG(TRC_MRE_VMIO_2118, "[STO] vm_file_read F")
    TRC_MSG(TRC_MRE_VMIO_2122, "[STO] vm_storage_read E")
    TRC_MSG(TRC_MRE_VMIO_2135, "[STO] vm_storage_write S")
    TRC_MSG(TRC_MRE_VMIO_2136, "[STO] vm_storage_write [%d, %x, %d, %d, %x]")
    TRC_MSG(TRC_MRE_VMIO_2140, "[STO] vm_storage_write ret VM_STORAGE_ERR_PARAM")
    TRC_MSG(TRC_MRE_VMIO_2145, "[STO] vm_storage_write ret VM_STORAGE_ERR_FILE_WRITE")
    TRC_MSG(TRC_MRE_VMIO_2151, "[STO] vm_file_seek F")
    TRC_MSG(TRC_MRE_VMIO_2157, "[STO] vm_file_write F")
    TRC_MSG(TRC_MRE_VMIO_2161, "[STO] vm_storage_write E")
    TRC_MSG(TRC_MRE_VMIO_2197, "[SYS FILE] vm_sys_file_open start")
    TRC_MSG(TRC_MRE_VMIO_2204, "[SYS FILE] vm_sys_file_open vm_sys_file_internal_pre_process ok")
    TRC_MSG(TRC_MRE_VMIO_2211, "[SYS FILE] vm_sys_file_open vm_sys_file_internal_get_size ok")
    TRC_MSG(TRC_MRE_VMIO_2230, "[SYS FILE] vm_sys_file_open end")
    TRC_MSG(TRC_MRE_VMIO_2239, "[SYS FILE] vm_sys_file_read start")
    TRC_MSG(TRC_MRE_VMIO_2244, "[SYS FILE] vm_sys_file_read offset[%d], base[%d]")
    TRC_MSG(TRC_MRE_VMIO_2252, "[SYS FILE] vm_sys_file_read end")
    TRC_MSG(TRC_MRE_VMIO_2261, "[SYS FILE] vm_sys_file_read start")
    TRC_MSG(TRC_MRE_VMIO_2273, "[SYS FILE] vm_sys_file_read end")
    TRC_MSG(TRC_MRE_VMIO_2286, "[SYS FILE] vm_sys_file_write start")
    TRC_MSG(TRC_MRE_VMIO_2297, "[SYS FILE] pos[%d], length[%d], curr_size[%d]")
    TRC_MSG(TRC_MRE_VMIO_2312, "[SYS FILE] size1[%d], size2[%d]")
    TRC_MSG(TRC_MRE_VMIO_2315, "size2 [%d]")
    TRC_MSG(TRC_MRE_VMIO_2329, "[SYS FILE] length[%d], size2[%d]")
    TRC_MSG(TRC_MRE_VMIO_2337, "[SYS FILE] vm_sys_file_write end")
    TRC_MSG(TRC_MRE_VMIO_2344, "[SYS FILE] vm_sys_file_close start")
    TRC_MSG(TRC_MRE_VMIO_2346, "[SYS FILE] vm_sys_file_close end")
    TRC_MSG(TRC_MRE_VMIO_2356, "[SYS FILE] vm_sys_file_delete start")
    TRC_MSG(TRC_MRE_VMIO_2363, "[SYS FILE] vm_sys_file_delete vm_sys_file_internal_pre_process ok")
    TRC_MSG(TRC_MRE_VMIO_2373, "[SYS FILE] vm_sys_file_delete size[%d]")
    TRC_MSG(TRC_MRE_VMIO_2389, "[SYS FILE] vm_sys_file_delete end")
    TRC_MSG(TRC_MRE_VMIO_2401, "[SYS FILE] vm_sys_file_get_space start")
    TRC_MSG(TRC_MRE_VMIO_2408, "[SYS FILE] vm_sys_file_get_space vm_sys_file_internal_pre_process ok")
    TRC_MSG(TRC_MRE_VMIO_2415, "[SYS FILE] [F] tag_buf[%d]")
    TRC_MSG(TRC_MRE_VMIO_2420, "[SYS FILE] vm_sys_file_get_space vm_find_first tag_buf[%d], info.size[%d]")
    TRC_MSG(TRC_MRE_VMIO_2443, "[SYS FILE] vm_sys_file_internal_get_curr_file_size start")
    TRC_MSG(TRC_MRE_VMIO_2455, "[SYS FILE] [F] vm_sys_file_internal_get_curr_file_size")
    TRC_MSG(TRC_MRE_VMIO_2462, "[SYS FILE] vm_sys_file_internal_get_curr_file_size end")
    TRC_MSG(TRC_MRE_VMIO_2481, "[SYS FILE] vm_sys_file_internal_set_size start size[%d]")
    TRC_MSG(TRC_MRE_VMIO_2483, "[SYS FILE] vm_sys_file_internal_set_size g_total_sys_file_size [%d]")
    TRC_MSG(TRC_MRE_VMIO_2487, "[SYS FILE] vm_sys_file_internal_set_size start g_total_sys_file_size[%d]")
    TRC_MSG(TRC_MRE_VMIO_2496, "[SYS FILE] [F] tag_size [%d]")
    TRC_MSG(TRC_MRE_VMIO_2501, "[SYS FILE] tag_size [%d] bytes info.size[%d] bytes")
    TRC_MSG(TRC_MRE_VMIO_2508, "[SYS FILE] vm_sys_file_internal_set_size size [%d]")
    TRC_MSG(TRC_MRE_VMIO_2523, "[SYS FILE] vm_sys_file_internal_set_size g_total_sys_file_size [%d]")
    TRC_MSG(TRC_MRE_VMIO_2526, "[SYS FILE] vm_sys_file_internal_set_size end")
    TRC_MSG(TRC_MRE_VMIO_2541, "[SYS FILE] vm_sys_file_internal_pre_process start")
    TRC_MSG(TRC_MRE_VMIO_2552, "[SYS FILE] vm_sys_file_internal_pre_process [[0x%x]]")
    TRC_MSG(TRC_MRE_VMIO_2582, "[SYS FILE] folder_hdl < 0")
    TRC_MSG(TRC_MRE_VMIO_2587, "[SYS FILE] FS_CreateDir < 0")
    TRC_MSG(TRC_MRE_VMIO_2598, "[SYS FILE] FS_Open >= 0")
    TRC_MSG(TRC_MRE_VMIO_2604, "[SYS FILE] g_total_sys_file_size start [%d]")
    TRC_MSG(TRC_MRE_VMIO_2616, "[SYS FILE] g_total_sys_file_size end [%d]")
    TRC_MSG(TRC_MRE_VMIO_2628, "[SYS FILE] vm_sys_file_internal_pre_process end")
    TRC_MSG(TRC_MRE_VMIO_2642, "[SYS FILE] vm_sys_file_internal_get_tag_size start")
    TRC_MSG(TRC_MRE_VMIO_2652, "[SYS FILE] [F] get tag failure..")
    TRC_MSG(TRC_MRE_VMIO_2659, "[SYS FILE] tag_buf[%d], tag_size[%d]")
    TRC_MSG(TRC_MRE_VMIO_2661, "[SYS FILE] vm_sys_file_internal_get_tag_size end")
    TRC_MSG(TRC_MRE_VMIO_2727, "[SELECTOR] vm_selector_run, VM_SELECTOR_ERR_PARAM!")
    TRC_MSG(TRC_MRE_VMIO_2825, "[SELECTOR FILE] vm_selector_run, VM_SELECTOR_ERR_PARAM!")
    TRC_MSG(TRC_MRE_VMIO_2853, "vm_selector_get_context == NULL")
    TRC_MSG(TRC_MRE_VMIO_2874, "[SELECTOR FILE] , ctx_p->m_cb[0x%x], ctx_p->m_phdl[0x%x]")
    TRC_MSG(TRC_MRE_VMIO_2878, "[SELECTOR FILE] vm_pmng_set_ctx m_cb[0x%x], m_phdl[%d]")
    TRC_MSG(TRC_MRE_VMIO_2919, "vm_selector_get_context == NULL")
    TRC_MSG(TRC_MRE_VMIO_2928, "[SELECTOR FILE] EVT_ID_CUI_FILE_SELECTOR_RESULT OK")
    TRC_MSG(TRC_MRE_VMIO_2934, "[SELECTOR FILE] ctx_p->m_path == NULL, _vm_kernel_malloc failure!!!")
    TRC_MSG(TRC_MRE_VMIO_2952, "[SELECTOR FILE] ctx_p->m_cb[0x%x], ctx_p->m_phdl[0x%x]")
    TRC_MSG(TRC_MRE_VMIO_2956, "[SELECTOR FILE] vm_pmng_set_ctx m_cb[0x%x], m_phdl[%d]")
    TRC_MSG(TRC_MRE_VMIO_3034, "[TCP MODULE]Alloc resource[%d] socket context")
    TRC_MSG(TRC_MRE_VMIO_3051, "[TCP MODULE]Free resource[%d] socket context.")
    
    TRC_MSG(TRC_MRE_VMIO_DTCNT_SEL_S, "[DTCNT SEL] @[%d][%d] S")
    TRC_MSG(TRC_MRE_VMIO_DTCNT_SEL_E, "[DTCNT SEL] @[%d][%d] E")
    TRC_MSG(TRC_MRE_VMIO_DTCNT_SEL_E1, "[DTCNT SEL] @[%d][%d] E1")
    TRC_MSG(TRC_MRE_VMIO_DTCNT_SEL_E2, "[DTCNT SEL] @[%d][%d] E2")
    TRC_MSG(TRC_MRE_VMIO_DTCNT_SEL_E3, "[DTCNT SEL] @[%d][%d] E3")
    TRC_MSG(TRC_MRE_VMIO_DTCNT_SEL_LOG, "[DTCNT SEL] LOG[%d][%d][%d][%d][%d][0x%x] @[%d][%d]")
    
    TRC_MSG(TRC_MRE_VMLOG_334, "\n[0x%x]")
    TRC_MSG(TRC_MRE_VMLOG_340, "\nLONG LOG==================================================")
    TRC_MSG(TRC_MRE_VMLOG_344, "\n[0x%x]")
    TRC_MSG(TRC_MRE_VMLOG_347, "\nLONG LOG==================================================")
    TRC_MSG(TRC_MRE_VMLOG_410, "[LOG] unrecognized __FILE__[%p:[0x%x]]")
    TRC_MSG(TRC_MRE_VMLOG_438, "[LOG] do log MODULE[[0x%x]] in __FILE__[%p:[0x%x]]")
    TRC_MSG(TRC_MRE_VMLOG_443, "[LOG] do not log MODULE[[0x%x]] in __FILE__[%p:[0x%x]]")
    TRC_MSG(TRC_MRE_VMMD5_105, "Failed to regisiter md5 moudle. Error Code : %d")
    TRC_MSG(TRC_MRE_VMMD5_122, "{md5 MODULE}Receive [%d] event.")
    TRC_MSG(TRC_MRE_VMMD5_130, "vm_md5_release_callback...process_handle:%d. sys_state:%d")
    TRC_MSG(TRC_MRE_VMMD5_140, "vm_res_findfirst....")
    TRC_MSG(TRC_MRE_VMMD5_147, "vm_res_release_data....")
    TRC_MSG(TRC_MRE_VMMD5_165, " malloc vm_res_node_p failed in vm_md5_mod_init()...")
    TRC_MSG(TRC_MRE_VMMD5_187, "...vm_get_cheinfo_from_processid().....processid:%d.")
    TRC_MSG(TRC_MRE_VMMD5_194, "...vm_get_cheinfo_from_processid()....*res_id:%d.")
    TRC_MSG(TRC_MRE_VMMD5_210, "...md5_init().....")
    TRC_MSG(TRC_MRE_VMMD5_215, "md5_ctx_p is NULL....")
    TRC_MSG(TRC_MRE_VMMD5_218, " malloc md5_ctx_p failed in md5_init()...")
    TRC_MSG(TRC_MRE_VMMD5_222, "before che_init:%d , %p")
    TRC_MSG(TRC_MRE_VMMD5_237, "...md5_append...........")
    TRC_MSG(TRC_MRE_VMMD5_247, " pms / data  is Null or  nbytes<0")
    TRC_MSG(TRC_MRE_VMMD5_250, "md5_ctx_p is NULL ")
    TRC_MSG(TRC_MRE_VMMD5_263, "...md5_finish...........")
    TRC_MSG(TRC_MRE_VMMD5_274, " pms && digest   is Null")
    TRC_MSG(TRC_MRE_VMMD5_282, " md5_ctx_p  is NULL  in md5_finish...")
    TRC_MSG(TRC_MRE_VMMM_123,   "entry vm_audio_notify_callback, process_handle = %d, sys_state = %d")
    TRC_MSG(TRC_MRE_VMMM_148,   "entry vm_midi_notify_callback, process_handle = %d, sys_state = %d")
    TRC_MSG(TRC_MRE_VMMM_166,   "entry vm_record_notify_callback, process_handle = %d, sys_state = %d")
    TRC_MSG(TRC_MRE_VMMM_184,   "entry vm_init_audio_module.")
    TRC_MSG(TRC_MRE_VMMM_200,   "entry vm_finialize_audio_module.")
    TRC_MSG(TRC_MRE_VMMM_215,   "entry vm_audio_mod_evt_proc, and event = %d")
    TRC_MSG(TRC_MRE_VMMM_245,   "_vm_reg_audio_module : Failed to regisiter audio module. Error Code : %d")
    TRC_MSG(TRC_MRE_VMMM_268,  "entry vm_audio_play_file, filename = %d, f = %d")
    TRC_MSG(TRC_MRE_VMMM_288,  "exit vm_audio_play_file, and result = %d")
    TRC_MSG(TRC_MRE_VMMM_298,  "entry vm_audio_play_file_ex, start_time = %d, and f = %d")
    TRC_MSG(TRC_MRE_VMMM_304, "vm_audio_play_file_ex preprocess failed.")
    TRC_MSG(TRC_MRE_VMMM_309, "vm_audio_play_file_ex, and audio_res_handle = %d")
    TRC_MSG(TRC_MRE_VMMM_318, "vm_sal_audio_play_file_ex, play failed.")
    TRC_MSG(TRC_MRE_VMMM_337, "entry vm_audio_play_bytes, but format not VM_FORMAT_MP3 or VM_FORMAT_AAC.")
    TRC_MSG(TRC_MRE_VMMM_343, "start_time = %d, duration = %d")
    TRC_MSG(TRC_MRE_VMMM_348, "vm_audio_play_bytes preprocess failed.")
    TRC_MSG(TRC_MRE_VMMM_364,  "exit vm_audio_play_bytes, and result = %d")
    TRC_MSG(TRC_MRE_VMMM_403,  "entry vm_audio_stop.")
    TRC_MSG(TRC_MRE_VMMM_408,  "vm_res_get_data_list_count_by_type > 0.")
    TRC_MSG(TRC_MRE_VMMM_413,  "vm_audio_stop SUCCEED, will vm_res_release_data = %d")
    TRC_MSG(TRC_MRE_VMMM_424,  "exit vm_audio_stop.")
    TRC_MSG(TRC_MRE_VMMM_445, "audio_data or len = 0.")
    TRC_MSG(TRC_MRE_VMMM_477,   "vm_audio_callback 1 : result=%d")
    TRC_MSG(TRC_MRE_VMMM_499, "audio_callback = %d")
    TRC_MSG(TRC_MRE_VMMM_500,   "vm_audio_callback 2 : result=%d")
    TRC_MSG(TRC_MRE_VMMM_513,  "audio callback = VM_AUDIO_RESULT_END_OF_FILE.")
    TRC_MSG(TRC_MRE_VMMM_517,  "audio callback = VM_AUDIO_RESULT_DEMO_END.")
    TRC_MSG(TRC_MRE_VMMM_521,  "audio callback = VM_AUDIO_RESULT_STOP.")
    TRC_MSG(TRC_MRE_VMMM_525, "audio callback = VM_AUDIO_RESULT_INTERRUPT.")
    TRC_MSG(TRC_MRE_VMMM_533, "audio callback = VM_AUDIO_RESULT_INTERRUPT_RESUME.")
    TRC_MSG(TRC_MRE_VMMM_537,  "audio callback, result = %d")
    TRC_MSG(TRC_MRE_VMMM_554, "entry vm_release_midi_resource, *res_handle = %d")
    TRC_MSG(TRC_MRE_VMMM_617, "entry vm_midi_play_by_bytes, and midibuf = %d, len = %d, repeat = %d, f = %d")
    TRC_MSG(TRC_MRE_VMMM_622, "midibuf == NULL || len < 0 || repeat < 0 || repeat > REPEAT_MAX ||vm_midi_preprocess_play() == FALSE")
    TRC_MSG(TRC_MRE_VMMM_628, "vm_res_save_data success, res_handle = %d")
    TRC_MSG(TRC_MRE_VMMM_638, "res = %d, (void*)f = %d")
    TRC_MSG(TRC_MRE_VMMM_642, "exit vm_midi_play_by_bytes, and result = %d")
    TRC_MSG(TRC_MRE_VMMM_681,   "entry vm_midi_pause, and handle = %d")
    TRC_MSG(TRC_MRE_VMMM_686,   "res_handle = %d, pmng_handle = %d")
    TRC_MSG(TRC_MRE_VMMM_703,   "entry vm_midi_resume, and handle = %d")
    TRC_MSG(TRC_MRE_VMMM_708,   "res_handle = %d, pmng_handle = %d")
    TRC_MSG(TRC_MRE_VMMM_725,   "entry vm_midi_get_time, and handle = %d")
    TRC_MSG(TRC_MRE_VMMM_729,   "res_handle = %d, pmng_handle = %d")
    TRC_MSG(TRC_MRE_VMMM_748,   "entry vm_midi_stop, and handle = %d")
    TRC_MSG(TRC_MRE_VMMM_753,   "res_handle = %d, pmng_handle = %d")
    TRC_MSG(TRC_MRE_VMMM_756,  "entry vm_midi_stop2.")
    TRC_MSG(TRC_MRE_VMMM_759,  "res = %d")
    TRC_MSG(TRC_MRE_VMMM_765,  "exit vm_midi_stop.")
    TRC_MSG(TRC_MRE_VMMM_772, "entry vm_midi_stop_all.")
    TRC_MSG(TRC_MRE_VMMM_780, "stop midi, handle = %d")
    TRC_MSG(TRC_MRE_VMMM_783, "vm_res_release_data(%d) = %d")
    TRC_MSG(TRC_MRE_VMMM_798,  "entry vm_midi_callback, handle = %d, result = %d")
    TRC_MSG(TRC_MRE_VMMM_802, "result = VM_AUDIO_RESULT_INTERRUPT, stop all and exit.")
    TRC_MSG(TRC_MRE_VMMM_815,  "vm_res_get_callback, midi_callback = %d, use_midi_handle = %d")
    TRC_MSG(TRC_MRE_VMMM_818, "vm_res_release_data = %d")
    TRC_MSG(TRC_MRE_VMMM_829,  "vm_res_get_callback, midi_callback = %d, use_midi_handle = %d")
    TRC_MSG(TRC_MRE_VMMM_832, "vm_res_release_data = %d")
    TRC_MSG(TRC_MRE_VMMM_839,  "midi_callback = %d.")
    TRC_MSG(TRC_MRE_VMMM_847,   "vm_midi_callback: handle=%d, result=%d, midi_callback = %d.")
    TRC_MSG(TRC_MRE_VMMM_854, "callback  VM_AUDIO_RESULT_END_OF_FILE to app.")
    TRC_MSG(TRC_MRE_VMMM_866,   "switch over")
    TRC_MSG(TRC_MRE_VMMM_870,   "vm_midi_callback over")
    TRC_MSG(TRC_MRE_VMMM_903, "vm_set_volume = %d")
    TRC_MSG(TRC_MRE_VMMM_976,   "vm_record_start_response :  get event=%d")
    TRC_MSG(TRC_MRE_VMMM_983, "vm_record_cb = %d")
    TRC_MSG(TRC_MRE_VMMM_988, "vm_record_cb = %d, will callback app.")
    TRC_MSG(TRC_MRE_VMMM_1078,   "vm_record_start_remap , malloc temp_fn no space")
    TRC_MSG(TRC_MRE_VMMM_1084,   "vm_record_start_remap , malloc app_wpath no space")
    TRC_MSG(TRC_MRE_VMMM_1089,   "vm_record_start_remap , step 2.1")
    TRC_MSG(TRC_MRE_VMMM_1093,   "vm_record_start_remap , vm_get_exec_filename return 0")
    TRC_MSG(TRC_MRE_VMMM_1162,   "vm_record_start_remap record file : [0x%x]")
    TRC_MSG(TRC_MRE_VMMM_1206,   "entry vm_record_pause.")
    TRC_MSG(TRC_MRE_VMMM_1214, "vm_record_pause, and status = %d")
    TRC_MSG(TRC_MRE_VMMM_1218,   "vm_record_pause : the record state is pause or leisure.")
    TRC_MSG(TRC_MRE_VMMM_1227,   "vm_record_pause : record pause success")
    TRC_MSG(TRC_MRE_VMMM_1233,   "vm_record_pause : record pause fail")
    TRC_MSG(TRC_MRE_VMMM_1245,   "entry vm_record_resume.")
    TRC_MSG(TRC_MRE_VMMM_1254,   "vm_record_resume : the record state is idle or record")
    TRC_MSG(TRC_MRE_VMMM_1262,   "vm_record_resume : record resume success")
    TRC_MSG(TRC_MRE_VMMM_1268,   "vm_record_resume : record resume fail")
    TRC_MSG(TRC_MRE_VMMM_1272,   "exit vm_record_resume, and returnval = %d")
    TRC_MSG(TRC_MRE_VMMM_1282, "entry vm_record_stop.")
    TRC_MSG(TRC_MRE_VMMM_1291,   "vm_record_stop : record stop success")
    TRC_MSG(TRC_MRE_VMMM_1297,   "vm_record_stop : record stop fail")
    TRC_MSG(TRC_MRE_VMMM_1301,   "exit vm_record_stop, and returnval = %d")
    TRC_MSG(TRC_MRE_VMMM_1433,   "entry vm_audio_preprocess_play, and audio_type = %d")
    TRC_MSG(TRC_MRE_VMMM_1453, "current_handle is BG, use_audio_handle is FG.")
    TRC_MSG(TRC_MRE_VMMM_1460, "Can to loot.")
    TRC_MSG(TRC_MRE_VMMM_1482,   "will exit vm_audio_preprocess_play, and result = %d")
    TRC_MSG(TRC_MRE_VMMM_1501,  "entry vm_midi_preprocess_play, and audio type = %d")
    TRC_MSG(TRC_MRE_VMMM_1515, "current process is BG.")
    TRC_MSG(TRC_MRE_VMMM_1522, "current process is FG.")
    TRC_MSG(TRC_MRE_VMMM_1527, "use audio process is BG.")
    TRC_MSG(TRC_MRE_VMMM_1533, "use audio process is FG.")
    TRC_MSG(TRC_MRE_VMMM_1543,  "midi_count = %d")
    TRC_MSG(TRC_MRE_VMMM_1559,  "exit vm_midi_preprocess_play, and result = %d")
    TRC_MSG(TRC_MRE_VMMM_1569,   "Record is used, but  isn't FG.")
    TRC_MSG(TRC_MRE_VMMM_1577,   "Record isn't used,  the record resource is NULL.")
    TRC_MSG(TRC_MRE_VMNVRAM_137, "vm_nvram_get_firstflag : read record error")
    TRC_MSG(TRC_MRE_VMNVRAM_159, "vm_nvram_get_firstflag : write record error")
    TRC_MSG(TRC_MRE_VMNVRAM_173, "vm_nvram_init : start")
    TRC_MSG(TRC_MRE_VMNVRAM_176, "vm_nvram_init : firstflag=0x%x")
    TRC_MSG(TRC_MRE_VMNVRAM_185, "vm_nvram_init : have set firstflag")
    TRC_MSG(TRC_MRE_VMNVRAM_191, "vm_nvram_init : firstflag is false")
    TRC_MSG(TRC_MRE_VMNVRAM_198, "vm_nvram_init finish : result=%d")
    TRC_MSG(TRC_MRE_VMNVRAM_212, "vm_nvram_set_sysconf step1")
    TRC_MSG(TRC_MRE_VMNVRAM_219, "vm_nvram_set_sysconf step2")
    TRC_MSG(TRC_MRE_VMNVRAM_223, "vm_nvram_set_sysconf : sysconfig_ptr is NULL")
    TRC_MSG(TRC_MRE_VMNVRAM_225, "vm_nvram_set_sysconf end")
    TRC_MSG(TRC_MRE_VMNVRAM_246, "vm_nvram_get_sysconf : sysconfig_ptr is NULL")
    TRC_MSG(TRC_MRE_VMNVRAM_301, "vm_nvram_encrypt_get_key : strb=[0x%x]")
    TRC_MSG(TRC_MRE_VMNVRAM_304, "vm_nvram_encrypt_get_key : b=%d")
    TRC_MSG(TRC_MRE_VMNVRAM_325, "vm_nvram_encrypt_get_key : %x,%x,%x,%x,%x,%x,%x,%x")
    TRC_MSG(TRC_MRE_VMNVRAM_340, "vm_nvram_encrypt_data : will vm_des_encrypt")
    TRC_MSG(TRC_MRE_VMNVRAM_342, "vm_nvram_encrypt_data : have vm_des_encrypt, input_len=%d, output_len=%d")
    TRC_MSG(TRC_MRE_VMNVRAM_347, "vm_nvram_encrypt_data : create encrypt handle error")
    TRC_MSG(TRC_MRE_VMNVRAM_369, "vm_nvram_decrypt_data : will vm_des_decrypt")
    TRC_MSG(TRC_MRE_VMNVRAM_372, "vm_nvram_decrypt_data : have vm_des_decrypt, input_len=%d, output_len=%d")
    TRC_MSG(TRC_MRE_VMNVRAM_377, "vm_nvram_encrypt_data : create encrypt handle error")
    TRC_MSG(TRC_MRE_VMNVRAM_413, "vm_nvram_read_record : decrypt data len error")
    TRC_MSG(TRC_MRE_VMNVRAM_418, "vm_nvram_read_record : have free decrypt_ptr")
    TRC_MSG(TRC_MRE_VMNVRAM_422, "vm_nvram_read_record : decrypt data error")
    TRC_MSG(TRC_MRE_VMNVRAM_428, "vm_nvram_read_record : read record ID=%d, index=%d error, error code=%d")
    TRC_MSG(TRC_MRE_VMNVRAM_435, "vm_nvram_read_record : malloc encrypt_ptr error")
    TRC_MSG(TRC_MRE_VMNVRAM_448, "vm_nvram_write_record : rec=%d, index=%d, size=%d")
    TRC_MSG(TRC_MRE_VMNVRAM_466, "vm_nvram_write_record : success, record ID=%d, index=%d ")
    TRC_MSG(TRC_MRE_VMNVRAM_470, "vm_nvram_write_record : write record ID=%d, index=%d error, error code=%d")
    TRC_MSG(TRC_MRE_VMNVRAM_476, "vm_nvram_write_record : encrypt_data error")
    TRC_MSG(TRC_MRE_VMNVRAM_508, "vm_nvram_get_pkey_list : pkey_list is NULL, or list_index is error.")
    TRC_MSG(TRC_MRE_VMNVRAM_518, "vm_nvram_set_pkey_list start")
    TRC_MSG(TRC_MRE_VMNVRAM_539, "vm_nvram_set_pkey_list : pkey_list is NULL, or list_index is error")
    TRC_MSG(TRC_MRE_VMNVRAM_563, "vm_nvram_get_ban_list : ban_list_ptr is NULL")
    TRC_MSG(TRC_MRE_VMNVRAM_584, "vm_nvram_set_ban_list : ban_list_ptr is NULL")
    TRC_MSG(TRC_MRE_VMNVRAM_667, "vm_nvram_set_sym_permission : permission_list_ptr's len is out of array")
    TRC_MSG(TRC_MRE_VMNVRAM_679, "vm_nvram_set_sym_permission : permission_list_ptr is NULL")
    TRC_MSG(TRC_MRE_VMNVRAM_701, "vm_nvram_get_sym_permission : permission_list_ptr is NULL")
    TRC_MSG(TRC_MRE_VMNVRAM_728, "vm_merge_permission 1, get_sym_permission")
    TRC_MSG(TRC_MRE_VMNVRAM_750, "vm_merge_permission 2, ")
    TRC_MSG(TRC_MRE_VMNVRAM_756, "vm_merge_permission 3, *merge_permission_list_len : %d")
    TRC_MSG(TRC_MRE_VMNVRAM_766, "vm_merge_permission 4, ")
    TRC_MSG(TRC_MRE_VMNVRAM_790, "vm_merge_permission 5, merge finish")
    TRC_MSG(TRC_MRE_VMNVRAM_807, "r/w the first pkey list")
    TRC_MSG(TRC_MRE_VMNVRAM_818, "r/w the second pkey list")
    TRC_MSG(TRC_MRE_VMNVRAM_829, "r/w the second pkey list")
    TRC_MSG(TRC_MRE_VMNVRAM_838, "r/w the sysconf list")
    TRC_MSG(TRC_MRE_VMNVRAM_850, "r/w the permission list")
    TRC_MSG(TRC_MRE_VMNVRAM_859, "r/w the ban list")
    TRC_MSG(TRC_MRE_VMOPTIONS_165, "Options Log Level Change:%d")
    TRC_MSG(TRC_MRE_VMOPTIONS_181, "Options Log Out Change:%d")
    TRC_MSG(TRC_MRE_VMOPTIONS_197, "Options Log Mtk Change:%d")
    TRC_MSG(TRC_MRE_VMOPTIONS_212, "Options Dynamic Memory Size Change:%d")
    TRC_MSG(TRC_MRE_VMOPTIONS_261, "MRE Options:logLevel=%d, logOut=%d, logMtk=%d")
    TRC_MSG(TRC_MRE_VMOPTIONS_280, "MRE Options: log_level=%d, dynamic_memory=%d, log_out=%d, log_mtk=%d, findHandle=%d")
    TRC_MSG(TRC_MRE_VMPAYMENT_90, "[PURCHASE] svm_adp_alipay_cb begin")
    TRC_MSG(TRC_MRE_VMPAYMENT_92, "[PURCHASE] vm_pmng_get_app_handle [%d]")
    TRC_MSG(TRC_MRE_VMPAYMENT_95, "[PURCHASE] vm_pmng_set_ctx != VM_PMNG_OP_OK")
    TRC_MSG(TRC_MRE_VMPAYMENT_98, "[PURCHASE] vm_pmng_set_ctx [%d]")
    TRC_MSG(TRC_MRE_VMPAYMENT_100, "[PURCHASE] g_app_cb [0x%x]")
    TRC_MSG(TRC_MRE_VMPAYMENT_102, "[PURCHASE] vm_pmng_reset_ctx")
    TRC_MSG(TRC_MRE_VMPAYMENT_103, "[PURCHASE] svm_adp_alipay_cb end")
    TRC_MSG(TRC_MRE_VMPAYMENT_109, "[PURCHASE] vm_create_buyer begin")
    TRC_MSG(TRC_MRE_VMPAYMENT_117, "[PURCHASE] vm_create_buyer end")
    TRC_MSG(TRC_MRE_VMPAYMENT_137, "[PURCHASE] vm_purchase_item S")
    TRC_MSG(TRC_MRE_VMPAYMENT_140, "[PURCHASE] VM_PURCHASE_RET_ERR_PARAM")
    TRC_MSG(TRC_MRE_VMPAYMENT_152, "[PURCHASE] SRV_DTCNT_SIM_TYPE_NONE")
    TRC_MSG(TRC_MRE_VMPAYMENT_187, "[PURCHASE] __COSMOS_MMI_PACKAGE__ [%d] [%d] [%d]")
    TRC_MSG(TRC_MRE_VMPAYMENT_195, "[PURCHASE] srv_dtcnt_get_sim_info [%d] [%d] [%d]")
    TRC_MSG(TRC_MRE_VMPAYMENT_207, "[PURCHASE] sim_type [%d], account_id [0x%x]")
    TRC_MSG(TRC_MRE_VMPAYMENT_210, "[PURCHASE] g_app_cb[0x%x] cb[0x%x]")
    TRC_MSG(TRC_MRE_VMPAYMENT_214, "[PURCHASE] vm_purchase_item E")
    TRC_MSG(TRC_MRE_VMPAYMENT_222, "[PURCHASE] vm_release_buyer begin")
    TRC_MSG(TRC_MRE_VMPAYMENT_227, "[PURCHASE] vm_release_buyer end")
    TRC_MSG(TRC_MRE_VMPAYMENT_234, "[PURCHASE] svm_get_sim begin")
    TRC_MSG(TRC_MRE_VMPAYMENT_266, "[PURCHASE] svm_get_sim e [%d] ret_e [%d]")
    TRC_MSG(TRC_MRE_VMPAYMENT_268, "[PURCHASE] svm_get_sim end")
    TRC_MSG(TRC_MRE_VMSALBITSTREAM_34, "entry vm_sal_bitstream_audio_callback, and handle = %d, result = %d")
    TRC_MSG(TRC_MRE_VMSALBITSTREAM_51, "sal_bitstream_cb = %d")
    TRC_MSG(TRC_MRE_VMSALCELL_112, "vm_sal_cell_reg_req:start")
    TRC_MSG(TRC_MRE_VMSALCELL_119, "vm_sal_cell_reg_req:malloc cur cell mem faild")
    TRC_MSG(TRC_MRE_VMSALCELL_127, "vm_sal_cell_reg_req:malloc nbr cell mem faild")
    TRC_MSG(TRC_MRE_VMSALCELL_139, "vm_sal_cell_reg_req:cell reg success")
    TRC_MSG(TRC_MRE_VMSALCELL_145, "vm_sal_cell_reg_req:ilm malloc faild")
    TRC_MSG(TRC_MRE_VMSALCELL_151, "vm_sal_cell_reg_req:cell is not valid")
    TRC_MSG(TRC_MRE_VMSALCELL_158, "vm_sal_cell_dereg_req:start")
    TRC_MSG(TRC_MRE_VMSALCELL_164, "vm_sal_cell_dereg_req:end")
    TRC_MSG(TRC_MRE_VMSALCONTACT_115, "vm_sal_phb_add_contact:start")
    TRC_MSG(TRC_MRE_VMSALCONTACT_118, "vm_sal_phb_add_contact:srv_phb_sdk_is_phb_not_ready")
    TRC_MSG(TRC_MRE_VMSALCONTACT_129, "sizeof(srv_phb_sdk_contact_struct)=%d")
    TRC_MSG(TRC_MRE_VMSALCONTACT_144, "vm_sal_phb_delete_contact:srv_phb_sdk_is_phb_not_ready")
    TRC_MSG(TRC_MRE_VMSALCONTACT_147, "vm_sal_phb_delete_contact:delete")
    TRC_MSG(TRC_MRE_VMSALCONTACT_165, "vm_sal_phb_update_contact:srv_phb_sdk_is_phb_not_ready")
    TRC_MSG(TRC_MRE_VMSALCONTACT_191, "vm_sal_phb_search_contact:srv_phb_sdk_is_phb_not_ready")
    TRC_MSG(TRC_MRE_VMSALCONTACT_194, "vm_sal_phb_search_contact: start")
    TRC_MSG(TRC_MRE_VMSALCONTACT_203, "vm_sal_phb_search_contact: req.search_type=%d,req.pattern_ucs2=[0x%x]")
    TRC_MSG(TRC_MRE_VMSALCONTACT_206, "vm_sal_phb_search_contact:srv_phb_sdk_search_contact end")
    TRC_MSG(TRC_MRE_VMSALCONTACT_220, "vm_sal_phb_get_contact:srv_phb_sdk_is_phb_not_ready")
    TRC_MSG(TRC_MRE_VMSALCONTACT_236, "vm_sal_phb_get_contact:srv_phb_sdk_get_contact start")
    TRC_MSG(TRC_MRE_VMSALCONTACT_239, "vm_sal_phb_get_contact:srv_phb_sdk_get_contact end")
    TRC_MSG(TRC_MRE_VMSALCONTACT_254, "vm_sal_phb_search_contact_syn: start")
    TRC_MSG(TRC_MRE_VMSALCONTACT_257, "vm_sal_phb_search_contact_syn:srv_phb_sdk_is_phb_not_ready")
    TRC_MSG(TRC_MRE_VMSALCONTACT_264, "vm_sal_phb_search_contact_syn:contact == NULL")
    TRC_MSG(TRC_MRE_VMSALCONTACT_275, "vm_sal_phb_search_contact_syn: req.search_type=%d,req.pattern_ucs2=[0x%x]")
    TRC_MSG(TRC_MRE_VMSALCONTACT_284, "vm_sal_phb_search_contact_syn:srv_phb_sdk_search_contact end")
    TRC_MSG(TRC_MRE_VMSALCONTACT_299, "vm_sal_phb_get_contact_syn:srv_phb_sdk_is_phb_not_ready")
    TRC_MSG(TRC_MRE_VMSALCONTACT_306, "vm_sal_phb_get_contact_syn:contact == NULL")
    TRC_MSG(TRC_MRE_VMSALCONTACT_328, "vm_sal_phb_get_contact_syn:vm_get_tick_count2()=%d")
    TRC_MSG(TRC_MRE_VMSALCONTACT_330, "vm_sal_phb_get_contact_syn:end")
    TRC_MSG(TRC_MRE_VMSALCONTACT_345, "vm_sal_phb_get_total_contacts:srv_phb_sdk_is_phb_not_ready")
    TRC_MSG(TRC_MRE_VMSALCONTACT_364, "vm_sal_phb_get_used_contacts_count:srv_phb_sdk_is_phb_not_ready")
    TRC_MSG(TRC_MRE_VMSALCONTACT_373, "vm_sal_phb_get_used_contacts_count:used_nums <0")
    TRC_MSG(TRC_MRE_VMSALCONTACT_393, "vm_sal_phb_get_used_contacts:srv_phb_sdk_is_phb_not_ready")
    TRC_MSG(TRC_MRE_VMSALCONTACT_402, "vm_sal_phb_get_used_contacts:used_nums < 0")
    TRC_MSG(TRC_MRE_VMSALCONTACT_408, "vm_sal_phb_get_used_contacts:pos_array == NULL")
    TRC_MSG(TRC_MRE_VMSALCONTACT_418, "vm_sal_phb_get_used_contacts:contact_array == NULL")
    TRC_MSG(TRC_MRE_VMSALCONTACT_451, "vm_sal_phb_search_contact_list:srv_phb_sdk_is_phb_not_ready")
    TRC_MSG(TRC_MRE_VMSALCONTACT_459, "vm_sal_phb_search_contact_list:used_nums < 0")
    TRC_MSG(TRC_MRE_VMSALCONTACT_470, "vm_sal_phb_search_contact_list:contact_array == NULL")
    TRC_MSG(TRC_MRE_VMSALCONTACT_476, "vm_sal_phb_search_contact_list:used_nums=%d")
    TRC_MSG(TRC_MRE_VMSALCONTACT_482, "vm_sal_phb_search_contact_list:contact == NULL")
    TRC_MSG(TRC_MRE_VMSALCONTACT_496, "vm_sal_phb_search_contact_list  contact_array[%d].index=%d")
    TRC_MSG(TRC_MRE_VMSALCONTACT_497, "vm_sal_phb_search_contact_list  contact_array[%d].storage=%d")
    TRC_MSG(TRC_MRE_VMSALCONTACT_503, "vm_sal_phb_search_contact_list:search_req->search_type=%d")
    TRC_MSG(TRC_MRE_VMSALCONTACT_507, "vm_sal_phb_search_contact_list:search_req->pattern_ucs2=[0x%x]")
    TRC_MSG(TRC_MRE_VMSALCONTACT_508, "vm_sal_phb_search_contact_list:contact_ptr->name=[0x%x]")
    TRC_MSG(TRC_MRE_VMSALCONTACT_519, "vm_sal_phb_search_contact_list:search_req->pattern_ucs2=[0x%x]")
    TRC_MSG(TRC_MRE_VMSALCONTACT_520, "vm_sal_phb_search_contact_list:contact_ptr->number=[0x%x]")
    TRC_MSG(TRC_MRE_VMSALCONTACT_530, "vm_sal_phb_search_contact_list: req_info->search_type =%d")
    TRC_MSG(TRC_MRE_VMSALCONTACT_578, "vm_sal_phb_get_group_list: group_count <= 0")
    TRC_MSG(TRC_MRE_VMSALCONTACT_593, "group_array[i].group_id =%d")
    TRC_MSG(TRC_MRE_VMSALCONTACT_594, "group_array[i].group_name=[0x%x]")
    TRC_MSG(TRC_MRE_VMSALCONTACT_621, "vm_sal_phb_get_group_name_by_id: group_count <= 0")
    TRC_MSG(TRC_MRE_VMSALCONTACT_637, "group_name=[0x%x] ,group_id=%d")
    TRC_MSG(TRC_MRE_VMSALGPS_47, "vm_sal_gps_uart_open:start")
    TRC_MSG(TRC_MRE_VMSALGPS_55, "vm_sal_gps_uart_open:malloc faild")
    TRC_MSG(TRC_MRE_VMSALGPS_61, "vm_sal_gps_uart_open:uart_handle = %d")
    TRC_MSG(TRC_MRE_VMSALGPS_64, "vm_sal_gps_uart_open:gps open success")
    TRC_MSG(TRC_MRE_VMSALGPS_70, "vm_sal_gps_uart_open:open faild(uart handle wrong)")
    TRC_MSG(TRC_MRE_VMSALGPS_76, "vm_sal_gps_uart_open:GPS is not valid")
    TRC_MSG(TRC_MRE_VMSALGPS_84, "vm_sal_gps_uart_close:start")
    TRC_MSG(TRC_MRE_VMSALGPS_95, "vm_sal_gps_uart_close:end")
    TRC_MSG(TRC_MRE_VMSALMM_145, "entry vm_sal_audio_play_file,filename pointer is %d")
    TRC_MSG(TRC_MRE_VMSALMM_149, "vm_sal_audio_can_play ret 0")
    TRC_MSG(TRC_MRE_VMSALMM_154, "vm_sal_audio_can_play ret 1")
    TRC_MSG(TRC_MRE_VMSALMM_163, "vm_sal_audio_play_file : the length of filename is error")
    TRC_MSG(TRC_MRE_VMSALMM_170,   "vm_sal_audio_play_file : malloc the remap_file_name fail")
    TRC_MSG(TRC_MRE_VMSALMM_178,   "vm_sal_audio_play_file : _vm_remap_usr_disk error")
    TRC_MSG(TRC_MRE_VMSALMM_190,   "vm_sal_audio_play_file : reture value of mdi_audio_play_file_portion_with_vol_path is %d")
    TRC_MSG(TRC_MRE_VMSALMM_207, "vm_sal_audio_can_play ret 0")
    TRC_MSG(TRC_MRE_VMSALMM_212, "vm_sal_audio_can_play ret 1")
    TRC_MSG(TRC_MRE_VMSALMM_217,   "vm_sal_audio_play_file_ex : the ptr of filename is NULL")
    TRC_MSG(TRC_MRE_VMSALMM_222,   "vm_sal_audio_play_file_ex : the length of filename is error")
    TRC_MSG(TRC_MRE_VMSALMM_229,   "vm_sal_audio_play_file_ex : malloc the remap_file_name fail")
    TRC_MSG(TRC_MRE_VMSALMM_237,   "vm_sal_audio_play_file_ex : _vm_remap_usr_disk error")
    TRC_MSG(TRC_MRE_VMSALMM_258,   "vm_sal_audio_play_file_ex : reture value of mdi_audio_play_file_portion_with_vol_path is %d")
    TRC_MSG(TRC_MRE_VMSALMM_274, "entry vm_sal_audio_play_bytes.")
    TRC_MSG(TRC_MRE_VMSALMM_278, "vm_sal_audio_can_play ret 0")
    TRC_MSG(TRC_MRE_VMSALMM_283, "vm_sal_audio_can_play ret 1")
    TRC_MSG(TRC_MRE_VMSALMM_300,   "vm_sal_audio_play_bytes : reture value of mdi_audio_play_string_portion_with_vol_path is %d")
    TRC_MSG(TRC_MRE_VMSALMM_312,   "entry vm_sal_audio_pause.")
    TRC_MSG(TRC_MRE_VMSALMM_318,   "mdi_audio_pause = %d.")
    TRC_MSG(TRC_MRE_VMSALMM_322,   "vm_sal_audio_pause : mdi_audio_pause error  retcode=%d")
    TRC_MSG(TRC_MRE_VMSALMM_332,   "entry vm_sal_audio_resume.")
    TRC_MSG(TRC_MRE_VMSALMM_336, "vm_sal_audio_can_play ret 0")
    TRC_MSG(TRC_MRE_VMSALMM_341, "vm_sal_audio_can_play ret 1")
    TRC_MSG(TRC_MRE_VMSALMM_347,   "mdi_audio_resume = %d.")
    TRC_MSG(TRC_MRE_VMSALMM_351,   "vm_sal_audio_resume : mdi_audio_resume error retcode=%d")
    TRC_MSG(TRC_MRE_VMSALMM_364, "entry mdi_audio_stop_file")
    TRC_MSG(TRC_MRE_VMSALMM_369, "entry mdi_audio_stop_string")
    TRC_MSG(TRC_MRE_VMSALMM_374, "not stop")
    TRC_MSG(TRC_MRE_VMSALMM_381, "vm_sal_audio_stop = %d")
    TRC_MSG(TRC_MRE_VMSALMM_387, "vm_sal_audio_stop : mdi_audio_stop error retcode: %d")
    TRC_MSG(TRC_MRE_VMSALMM_398,   "entry vm_sal_audio_duration")
    TRC_MSG(TRC_MRE_VMSALMM_403,   "vm_sal_audio_duration : the ptr of filename is NULL")
    TRC_MSG(TRC_MRE_VMSALMM_409,   "vm_sal_audio_duration : the length of filename is error")
    TRC_MSG(TRC_MRE_VMSALMM_416,   "vm_sal_audio_duration : malloc the remap_file_name fail")
    TRC_MSG(TRC_MRE_VMSALMM_425,   "vm_sal_audio_duration : _vm_remap_usr_disk error")
    TRC_MSG(TRC_MRE_VMSALMM_434,   "exit vm_sal_audio_duration, and result = %d, duration = %d")
    TRC_MSG(TRC_MRE_VMSALMM_468, "entry vm_sal_audio_interrupt_callback, and result = %d")
    TRC_MSG(TRC_MRE_VMSALMM_472, "entry vm_sal_audio_interrupt_callback, and callback VM_AUDIO_RESULT_INTERRUPT.")
    TRC_MSG(TRC_MRE_VMSALMM_479, "entry vm_sal_audio_background_callback, and result = %d")
    TRC_MSG(TRC_MRE_VMSALMM_483, "entry vm_sal_audio_background_callback, and callback VM_AUDIO_RESULT_INTERRUPT.")
    TRC_MSG(TRC_MRE_VMSALMM_495, "entry vm_sal_audio_callback.")
    TRC_MSG(TRC_MRE_VMSALMM_502,   "NULL == audio_callback")
    TRC_MSG(TRC_MRE_VMSALMM_506,   "sal audio callback: result=%d")
    TRC_MSG(TRC_MRE_VMSALMM_548, "entry vm_sal_midi_play.")
    TRC_MSG(TRC_MRE_VMSALMM_551, "vm_sal_audio_can_play ret 0")
    TRC_MSG(TRC_MRE_VMSALMM_556, "vm_sal_audio_can_play ret 1")
    TRC_MSG(TRC_MRE_VMSALMM_561,   "vm_sal_midi_play : vm_sal_midi_get_resource rawdata is NULL.")
    TRC_MSG(TRC_MRE_VMSALMM_568,   "vm_midi_play : user_get_resource_fp rawdata is NULL.")
    TRC_MSG(TRC_MRE_VMSALMM_575,   "vm_midi_play : user_get_resource_fp no define.")
    TRC_MSG(TRC_MRE_VMSALMM_595,   "vm_sal_midi_play return handle = %d")
    TRC_MSG(TRC_MRE_VMSALMM_602,   "vm_sal_midi_play error : return value of mdi_audio_mma_open_string is %d")
    TRC_MSG(TRC_MRE_VMSALMM_614, "entry vm_sal_midi_play_ex.")
    TRC_MSG(TRC_MRE_VMSALMM_617, "vm_sal_audio_can_play ret 0")
    TRC_MSG(TRC_MRE_VMSALMM_622, "vm_sal_audio_can_play ret 1")
    TRC_MSG(TRC_MRE_VMSALMM_628,   "vm_midi_play : vm_sal_midi_get_resource rawdata is NULL.")
    TRC_MSG(TRC_MRE_VMSALMM_635,   "vm_midi_play : user_get_resource_fp rawdata is NULL.")
    TRC_MSG(TRC_MRE_VMSALMM_642,   "vm_midi_play : user_get_resource_fp no define.")
    TRC_MSG(TRC_MRE_VMSALMM_655,   "vm_midi_play : return value of mdi_audio_mma_open_string is %d")
    TRC_MSG(TRC_MRE_VMSALMM_664,   "vm_sal_midi_play_ex return handle = %d")
    TRC_MSG(TRC_MRE_VMSALMM_671,   "vm_midi_play error : return value of mdi_audio_mma_open_string is %d")
    TRC_MSG(TRC_MRE_VMSALMM_683, "entry vm_sal_midi_play_by_bytes.")
    TRC_MSG(TRC_MRE_VMSALMM_686, "vm_sal_audio_can_play ret 0")
    TRC_MSG(TRC_MRE_VMSALMM_691, "vm_sal_audio_can_play ret 1")
    TRC_MSG(TRC_MRE_VMSALMM_700,    "vm_sal_midi_play_by_bytes : return value of mdi_audio_mma_open_string is %d")
    TRC_MSG(TRC_MRE_VMSALMM_709,   "vm_sal_midi_play_by_bytes return handle = %d")
    TRC_MSG(TRC_MRE_VMSALMM_716,   "vm_midi_play_by_bytes error: return value of mdi_audio_mma_open_string is %d")
    TRC_MSG(TRC_MRE_VMSALMM_726, "entry vm_sal_midi_play_by_bytes_ex.")
    TRC_MSG(TRC_MRE_VMSALMM_729, "vm_sal_audio_can_play ret 0")
    TRC_MSG(TRC_MRE_VMSALMM_734, "vm_sal_audio_can_play ret 1")
    TRC_MSG(TRC_MRE_VMSALMM_748,   "vm_sal_midi_play_by_bytes_ex : return value of mdi_audio_mma_open_string is %d")
    TRC_MSG(TRC_MRE_VMSALMM_757,   "vm_sal_midi_play_by_bytes_ex return handle = %d")
    TRC_MSG(TRC_MRE_VMSALMM_764,   "vm_sal_midi_play_by_bytes_ex error: return value of mdi_audio_mma_open_string is %d")
    TRC_MSG(TRC_MRE_VMSALMM_777, "entry vm_sal_midi_resume.")
    TRC_MSG(TRC_MRE_VMSALMM_780, "vm_sal_audio_can_play ret 0")
    TRC_MSG(TRC_MRE_VMSALMM_785, "vm_sal_audio_can_play ret 1")
    TRC_MSG(TRC_MRE_VMSALMM_803,   "vm_sal_midi_stop will stop midi play, handle=%d")
    TRC_MSG(TRC_MRE_VMSALMM_807,   "mdi_audio_mma_stop = %d")
    TRC_MSG(TRC_MRE_VMSALMM_810,   "mdi_audio_mma_close = %d")
    TRC_MSG(TRC_MRE_VMSALMM_812,   "vm_sal_midi_stop over, handle=%d")
    TRC_MSG(TRC_MRE_VMSALMM_820,   "vm_sal_midi_callback: handle=%d, result=%d.")
    TRC_MSG(TRC_MRE_VMSALMM_821,   "sal_midi_callback = %d")
    TRC_MSG(TRC_MRE_VMSALMM_844,    "sal_midi_callback over")
    TRC_MSG(TRC_MRE_VMSALMM_850, "entry vm_sal_midi_interrupt_callback, and result = %d")
    TRC_MSG(TRC_MRE_VMSALMM_854, "entry vm_sal_midi_interrupt_callback, and callback VM_AUDIO_RESULT_INTERRUPT.")
    TRC_MSG(TRC_MRE_VMSALMM_861, "current_volume = %d, vm_sal_set_volume = %d")
    TRC_MSG(TRC_MRE_VMSALMM_883, "suspend background play.")
    TRC_MSG(TRC_MRE_VMSALMM_891, "register midi interrupt callback.")
    TRC_MSG(TRC_MRE_VMSALMM_902, "resume background play.")
    TRC_MSG(TRC_MRE_VMSALMM_910, "clear midi interrupt callback.")
    TRC_MSG(TRC_MRE_VMSALMM_981,   "vm_set_key_tone_state : ken_tone_state is error")
    TRC_MSG(TRC_MRE_VMSALMM_1015, "entry vm_sal_record_callback, and result = %d")
    TRC_MSG(TRC_MRE_VMSALMM_1026, "will sal_record_cb(%d)")
    TRC_MSG(TRC_MRE_VMSALMM_1046, "file_format = %d")
    TRC_MSG(TRC_MRE_VMSALMM_1103, "vocal_removal turn_on.")
    TRC_MSG(TRC_MRE_VMSALMM_1106,   "vm_sal_audio_vocal_removal_turn_on, result = %d")
    TRC_MSG(TRC_MRE_VMSALMM_1130,   "vm_sal_audio_vocal_removal_turn_off, result = %d")
    TRC_MSG(TRC_MRE_VMSALMM_1157,   "vm_sal_audio_pitch_shifting_turn_on, result = %d")
    TRC_MSG(TRC_MRE_VMSALMM_1177, "stub_audio_pitch_shifting_set_level = %d")
    TRC_MSG(TRC_MRE_VMSALMM_1182,   "vm_sal_audio_pitch_shifting_turn_off, result = %d")
    TRC_MSG(TRC_MRE_VMSALMM_1213,   "vm_sal_audio_pitch_shifting_set_level, result = %d, level = %d")
    TRC_MSG(TRC_MRE_VMSALMM_1220,   "entry vm_sal_kuro_effect_off, vm_kuro_effect_flag = %d.")
    TRC_MSG(TRC_MRE_VMSALMM_1235,   "exit vm_sal_kuro_effect_off, vm_kuro_effect_flag = %d.")
    TRC_MSG(TRC_MRE_VMSALMM_1240, "entry vm_sal_kuro_effect_resume, and vm_kuro_effect_flag = %d")
    TRC_MSG(TRC_MRE_VMSALMM_1253,   "exit vm_sal_kuro_effect_resume, and vm_kuro_effect_flag = %d")
    TRC_MSG(TRC_MRE_VMSALMM_1274, "reset_default_volume.")
    TRC_MSG(TRC_MRE_VMSALMM_1318, "vm_sal_audio_can_play audio resource occupied")
    TRC_MSG(TRC_MRE_VMSALMMS_135, "vm_sal_mms_send_mms:start!")
    TRC_MSG(TRC_MRE_VMSALMMS_138, "vm_sal_mms_send_mms:valid = %d")
    TRC_MSG(TRC_MRE_VMSALMMS_141, "vm_sal_mms_send_mms:req_ptr == NULL")
    TRC_MSG(TRC_MRE_VMSALMMS_147, "vm_sal_mms_send_mms:mms_state == 1")
    TRC_MSG(TRC_MRE_VMSALMMS_156, "vm_sal_mms_send_mms:create req")
    TRC_MSG(TRC_MRE_VMSALMMS_159, "vm_sal_mms_send_mms:end!")
    TRC_MSG(TRC_MRE_VMSALSMS_127, "static memory optimize: vm_sal_initialize_sms_module")
    TRC_MSG(TRC_MRE_VMSALSMS_131, "vm_sal_initialize_sms_module - vm_malloc fail.")
    TRC_MSG(TRC_MRE_VMSALSMS_137, "vm_sal_initialize_sms_module - vm_malloc fail.")
    TRC_MSG(TRC_MRE_VMSALSMS_163, "vm_cancel_send_sms start")
    TRC_MSG(TRC_MRE_VMSALSMS_177, "vm_send_sms: flight mode")
    TRC_MSG(TRC_MRE_VMSALSMS_181, "vm_send_sms phonenumber : [0x%x]")
    TRC_MSG(TRC_MRE_VMSALSMS_182, "vm_send_sms content : [0x%x]")
    TRC_MSG(TRC_MRE_VMSALSMS_184, "vm_send_sms content : [0x%x]")
    TRC_MSG(TRC_MRE_VMSALSMS_258, "vm_send_sms_request : set sendrequire 1")
    TRC_MSG(TRC_MRE_VMSALSMS_263, "vm_send_sms_request : set sendrequire 2")
    TRC_MSG(TRC_MRE_VMSALSMS_268, "vm_send_sms_request : set sendrequire 1")
    TRC_MSG(TRC_MRE_VMSALSMS_291, "vm_sal_sms_read_msg:start")
    TRC_MSG(TRC_MRE_VMSALSMS_294, "vm_sal_sms_read_msg:msg_data == NULL")
    TRC_MSG(TRC_MRE_VMSALSMS_300, "vm_sal_sms_read_msg:srv_sms_is_sms_ready()==0")
    TRC_MSG(TRC_MRE_VMSALSMS_308, "vm_sal_sms_read_msg: msg is not exist")
    TRC_MSG(TRC_MRE_VMSALSMS_315, "vm_sal_sms_read_msg: data == NULL")
    TRC_MSG(TRC_MRE_VMSALSMS_322, "vm_sms_read_msg: content_buffer == NULL")
    TRC_MSG(TRC_MRE_VMSALSMS_327, "sizeof(vm_read_data)=%d")
    TRC_MSG(TRC_MRE_VMSALSMS_328, "sizeof(content_buffer)=%d")
    TRC_MSG(TRC_MRE_VMSALSMS_370, "vm_sms_read_msg:end")
    TRC_MSG(TRC_MRE_VMSALSMS_380, "vm_sal_sms_read_msg: start")
    TRC_MSG(TRC_MRE_VMSALSMS_383, "vm_sal_sms_read_msg: msg_data == NULL")
    TRC_MSG(TRC_MRE_VMSALSMS_389, "vm_sal_sms_read_msg: srv_sms_is_sms_ready()==0")
    TRC_MSG(TRC_MRE_VMSALSMS_397, "vm_sal_sms_read_msg: msg is not exist")
    TRC_MSG(TRC_MRE_VMSALSMS_402, "static memory optimize: vm_sal_sms_read_msg")
    TRC_MSG(TRC_MRE_VMSALSMS_405, "static memory optimize: error sms_data - %p, sms_content - %p")
    TRC_MSG(TRC_MRE_VMSALSMS_410, "sizeof(sms_content) = %d")
    TRC_MSG(TRC_MRE_VMSALSMS_433, "vm_sms_read_msg: end")
    TRC_MSG(TRC_MRE_VMSALSMS_445, "vm_sal_sms_add_msg:start")
    TRC_MSG(TRC_MRE_VMSALSMS_448, "vm_sal_sms_add_msg:msg_data ==NULL")
    TRC_MSG(TRC_MRE_VMSALSMS_455, "vm_sal_sms_add_msg:srv_sms_is_sms_ready()==0")
    TRC_MSG(TRC_MRE_VMSALSMS_461, "vm_sal_sms_add_msg:handle=%d")
    TRC_MSG(TRC_MRE_VMSALSMS_464, "vm_sal_sms_add_msg:handle < 0")
    TRC_MSG(TRC_MRE_VMSALSMS_469, "vm_sal_sms_add_msg:timestamp")
    TRC_MSG(TRC_MRE_VMSALSMS_477, "vm_sal_sms_add_msg:msg_data->number=[0x%x]")
    TRC_MSG(TRC_MRE_VMSALSMS_480, "vm_sal_sms_add_msg:srv_sms_set_content_dcs")
    TRC_MSG(TRC_MRE_VMSALSMS_483, "vm_sal_sms_add_msg:srv_sms_set_content")
    TRC_MSG(TRC_MRE_VMSALSMS_486, "vm_sal_sms_add_msg:msg_data->status=%x")
    TRC_MSG(TRC_MRE_VMSALSMS_489, "vm_sal_sms_add_msg:msg_data->storage_type=%d")
    TRC_MSG(TRC_MRE_VMSALSMS_492, "vm_sal_sms_add_msg: msg_data->sim_id=%d")
    TRC_MSG(TRC_MRE_VMSALSMS_495, "vm_sal_sms_add_msg: srv_sms_set_save_timestamp")
    TRC_MSG(TRC_MRE_VMSALSMS_498, "vm_sal_sms_add_msg: srv_sms_save_msg")
    TRC_MSG(TRC_MRE_VMSALSMS_501, "vm_sal_sms_add_msg:end")
    TRC_MSG(TRC_MRE_VMSALSMS_510, "vm_sms_delete_msg:start")
    TRC_MSG(TRC_MRE_VMSALSMS_514, "vm_sms_delete_msg:srv_sms_is_sms_ready()==0")
    TRC_MSG(TRC_MRE_VMSALSMS_521, "vm_sms_delete_msg:msg is not exist")
    TRC_MSG(TRC_MRE_VMSALSMS_527, "vm_sms_delete_msg:end")
    TRC_MSG(TRC_MRE_VMSALSMS_534, "vm_sms_delete_msg_list:start")
    TRC_MSG(TRC_MRE_VMSALSMS_538, "vm_sms_delete_msg_list:srv_sms_is_sms_ready()==0")
    TRC_MSG(TRC_MRE_VMSALSMS_544, "vm_sms_delete_msg_list:end")
    TRC_MSG(TRC_MRE_VMSALSMS_554, "vm_sal_sms_get_msg_id_list:start")
    TRC_MSG(TRC_MRE_VMSALSMS_557, "vm_sal_sms_get_msg_id_list:query_data == NULL")
    TRC_MSG(TRC_MRE_VMSALSMS_563, "vm_sal_sms_get_msg_id_list:srv_sms_is_sms_ready()==0")
    TRC_MSG(TRC_MRE_VMSALSMS_570, "vm_sal_sms_get_msg_id_list:sms_query ==NULL")
    TRC_MSG(TRC_MRE_VMSALSMS_584, "vm_sal_sms_get_msg_id_list:end")
    TRC_MSG(TRC_MRE_VMSALSMS_593, "vm_sal_sms_get_msg_id:start")
    TRC_MSG(TRC_MRE_VMSALSMS_597, "vm_sal_sms_get_msg_id:srv_sms_is_sms_ready()==0")
    TRC_MSG(TRC_MRE_VMSALSMS_605, "vm_sal_sms_get_msg_id:end")
    TRC_MSG(TRC_MRE_VMSALSMS_615, "vm_sal_sms_get_box_size:start")
    TRC_MSG(TRC_MRE_VMSALSMS_619, "vm_sal_sms_get_box_size:srv_sms_is_sms_ready()==0")
    TRC_MSG(TRC_MRE_VMSALSMS_624, "vm_sal_sms_get_box_size:end")
    TRC_MSG(TRC_MRE_VMSALSMS_636, "vm_sal_sms_get_sc_address_asyn:start")
    TRC_MSG(TRC_MRE_VMSALSMS_640, "vm_sal_sms_get_sc_address_asyn:srv_sms_is_sms_ready()==0")
    TRC_MSG(TRC_MRE_VMSALSMS_649, "vm_sal_sms_get_sc_address:sc_addr=[0x%x]")
    TRC_MSG(TRC_MRE_VMSALSMS_663, "vm_sms_get_sc_address:strlen(sc_addr_cb.sc_addr) =%d")
    TRC_MSG(TRC_MRE_VMSALSMS_667, "vm_sal_sms_get_sc_address_asyn:end")
    TRC_MSG(TRC_MRE_VMSALSMS_675, "vm_sal_sms_get_sc_address_syn:start")
    TRC_MSG(TRC_MRE_VMSALSMS_681, "vm_sal_sms_get_sc_address_syn:sc_addr=[0x%x]")
    TRC_MSG(TRC_MRE_VMSALSMS_696, "[SMS]-vm_sms_sys_set_interrupt_event_handler:start")
    TRC_MSG(TRC_MRE_VMSALSMS_702, "[SMS]-vm_sms_set_interrupt_event_handler:end")
    TRC_MSG(TRC_MRE_VMSALSMS_721, "[SMS]-vm_sms_set_interrupt_event_handler:start")
    TRC_MSG(TRC_MRE_VMSALSMS_741, "[SMS]-vm_sms_set_interrupt_event_handler:vm_res_save_data error%d")
    TRC_MSG(TRC_MRE_VMSALSMS_744, "[SMS]-vm_sms_set_interrupt_event_handler:vm_res_save_data = %d,%x,%x")
    TRC_MSG(TRC_MRE_VMSALSMS_745, "[SMS]-vm_sms_set_interrupt_event_handler:end")
    TRC_MSG(TRC_MRE_VMSALSMS_755, "[SMS]-vm_sms_sys_clear_interrupt_event_handler:start")
    TRC_MSG(TRC_MRE_VMSALSMS_761, "[SMS]-vm_sms_sys_clear_interrupt_event_handler:end")
    TRC_MSG(TRC_MRE_VMSALSMS_774, "[SMS]-vm_sms_clear_interrupt_event_handler:start")
    TRC_MSG(TRC_MRE_VMSALSMS_785, "[SMS]-vm_sms_clear_interrupt_event_handler:vm_res_get_data_list_by_proecss error")
    TRC_MSG(TRC_MRE_VMSALSMS_790, "[SMS]-vm_sms_clear_interrupt_event_handler:vm_res_release_data = %d")
    TRC_MSG(TRC_MRE_VMSALSMS_793, "[SMS]-vm_sms_clear_interrupt_event_handler:vm_res_release_data error")
    TRC_MSG(TRC_MRE_VMSALSMS_796, "[SMS]-vm_sms_clear_interrupt_event_handler:end")
    TRC_MSG(TRC_MRE_VMSALSMS_812, "[SMS]-vm_sms_set_interrupt_event_handler:start")
    TRC_MSG(TRC_MRE_VMSALSMS_829, "[SMS]-vm_sms_set_interrupt_event_handler:vm_res_save_data error%d")
    TRC_MSG(TRC_MRE_VMSALSMS_832, "[SMS]-vm_sms_set_interrupt_event_handler:vm_res_save_data = %d,%x,%x")
    TRC_MSG(TRC_MRE_VMSALSMS_833, "[SMS]-vm_sms_set_interrupt_event_handler:end")
    TRC_MSG(TRC_MRE_VMSALSMS_845, "[SMS]-vm_sms_clear_interrupt_event_handler:start")
    TRC_MSG(TRC_MRE_VMSALSMS_856, "[SMS]-vm_sms_clear_interrupt_event_handler:vm_res_get_data_list_by_proecss error")
    TRC_MSG(TRC_MRE_VMSALSMS_861, "[SMS]-vm_sms_clear_interrupt_event_handler:vm_res_release_data = %d")
    TRC_MSG(TRC_MRE_VMSALSMS_864, "[SMS]-vm_sms_clear_interrupt_event_handler:vm_res_release_data error")
    TRC_MSG(TRC_MRE_VMSALSMS_867, "[SMS]-vm_sms_clear_interrupt_event_handler:end")
    TRC_MSG(TRC_MRE_VMSALSMS_928, "[SMS]-vm_sms_interrupt_event_callback:event_data == NULL")
    TRC_MSG(TRC_MRE_VMSALSMS_934, "[SMS]-vm_sms_interrupt_event_callback:not EVT_ID_SRV_SMS_NEW_MSG or event_info is NULL")
    TRC_MSG(TRC_MRE_VMSALSMS_941, "[SMS]-vm_sms_interrupt_event_callback:new_msg == NULL")
    TRC_MSG(TRC_MRE_VMSALSMS_956, "[SMS]-vm_sms_event_ptr size=%d,%d")
    TRC_MSG(TRC_MRE_VMSALSMS_968, "[SMS]-vm_sms_interrupt_event_callback:vm_event_new_msg_content == NULL")
    TRC_MSG(TRC_MRE_VMSALSMS_984, "[SMS]-vm_sms_interrupt_event_callback:vm_event_new_msg_content == NULL")
    TRC_MSG(TRC_MRE_VMSALSMS_998, "[SMS]-vm_sms_interrupt_event_callback:vm_event_new_msg_content == NULL")
    TRC_MSG(TRC_MRE_VMSALSMS_1009, "[SMS]-vm_event_new_msg msg_id=%d,%d")
    TRC_MSG(TRC_MRE_VMSALSMS_1010, "[SMS]-vm_event_new_msg content=[0x%x],[0x%x]")
    TRC_MSG(TRC_MRE_VMSALSMS_1038, "[SMS]-vm_new_msg msg_id=%d,%d")
    TRC_MSG(TRC_MRE_VMSALSMS_1039, "[SMS]-vm_new_msg dest_port=%d,%d")
    TRC_MSG(TRC_MRE_VMSALSMS_1040, "[SMS]-vm_new_msg src_port=%d,%d")
    TRC_MSG(TRC_MRE_VMSALSMS_1042, "[SMS]-vm_new_msg message_len=%d,%d")
    TRC_MSG(TRC_MRE_VMSALSMS_1043, "[SMS]-vm_new_msg ref=%d,%d")
    TRC_MSG(TRC_MRE_VMSALSMS_1046, "===========================================")
    TRC_MSG(TRC_MRE_VMSALSMS_1047, "[SMS]-vm_sms_block addr = %x,%x,%x")
    TRC_MSG(TRC_MRE_VMSALSMS_1048, "[SMS]-vm_sms_block name addr = %x")
    TRC_MSG(TRC_MRE_VMSALSMS_1049, "===========================================")
    TRC_MSG(TRC_MRE_VMSALSMS_1052, "[SMS]-vm_new_msg number=[0x%x],[0x%x]")
    TRC_MSG(TRC_MRE_VMSALSMS_1053, "[SMS]-vm_new_msg sc_number=[0x%x],[0x%x]")
    TRC_MSG(TRC_MRE_VMSALSMS_1055, "[SMS]-vm_new_msg year=%d,%d")
    TRC_MSG(TRC_MRE_VMSALSMS_1056, "[SMS]-vm_new_msg mon=%d,%d")
    TRC_MSG(TRC_MRE_VMSALSMS_1057, "[SMS]-vm_new_msg day=%d,%d")
    TRC_MSG(TRC_MRE_VMSALSMS_1058, "[SMS]-vm_new_msg hour=%d,%d")
    TRC_MSG(TRC_MRE_VMSALSMS_1059, "[SMS]-vm_new_msg min=%d,%d")
    TRC_MSG(TRC_MRE_VMSALSMS_1060, "[SMS]-vm_new_msg sec=%d,%d")
    TRC_MSG(TRC_MRE_VMSALSMS_1062, "[SMS]-vm_new_msg total_seg=%d,%d")
    TRC_MSG(TRC_MRE_VMSALSMS_1063, "[SMS]-vm_new_msg seg=%d,%d")
    TRC_MSG(TRC_MRE_VMSALSMS_1064, "[SMS]-vm_new_msg dcs=%d,%d")
    TRC_MSG(TRC_MRE_VMSALSMS_1065, "[SMS]-vm_new_msg mti=%d,%d")
    TRC_MSG(TRC_MRE_VMSALSMS_1066, "[SMS]-vm_new_msg pid=%d,%d")
    TRC_MSG(TRC_MRE_VMSALSMS_1067, "[SMS]-vm_new_msg fo=%d,%d")
    TRC_MSG(TRC_MRE_VMSALSMS_1068, "[SMS]-vm_new_msg data=%c,%c")
    TRC_MSG(TRC_MRE_VMSALSMS_1069, "[SMS]-vm_new_msg sim_id=%d,%d")
    TRC_MSG(TRC_MRE_VMSALSMS_1070, "[SMS]-vm_new_msg storage_type=%d,%d")
    TRC_MSG(TRC_MRE_VMSALSMS_1073, "[SMS]- vm_sms_interrupt_action - begin")
    TRC_MSG(TRC_MRE_VMSALSMS_1080, "[SMS]- vm_sms_interrupt_action - p_state:%d, res_handle=%d")
    TRC_MSG(TRC_MRE_VMSALSMS_1084, "[SMS]- vm_sms_interrupt_action - 2 p_state:%d, res_handle=%d")
    TRC_MSG(TRC_MRE_VMSALSMS_1088, "[SMS]- vm_sms_interrupt_action - 2 p_state:%d, res_handle=%d, p_handle:%d")
    TRC_MSG(TRC_MRE_VMSALSMS_1091, "[SMS]- vm_sms_interrupt_action - 3 p_state:%d, res_handle=%d, p_handle:%d")
    TRC_MSG(TRC_MRE_VMSALSMS_1094, "[SMS]- vm_sms_interrupt_action - p_state=%d, cb=%x")
    TRC_MSG(TRC_MRE_VMSALSMS_1105, "[SMS]- interupted: cb=%x")
    TRC_MSG(TRC_MRE_VMSALSMS_1116, "[SMS]- vm_sms_interrupt_action - end")
    TRC_MSG(TRC_MRE_VMSHA1_103, "Failed to regisiter sha1 moudle. Error Code : %d")
    TRC_MSG(TRC_MRE_VMSHA1_120, "{sha1 MODULE}Receive [%d] event.")
    TRC_MSG(TRC_MRE_VMSHA1_128, "vm_sha1_release_callback...process_handle:%d.. sys_state:%d")
    TRC_MSG(TRC_MRE_VMSHA1_145, "vm_res_release_data....")
    TRC_MSG(TRC_MRE_VMSHA1_178, "...vm_get_cheinfo_from_processid()....*res_id:%d.")
    TRC_MSG(TRC_MRE_VMSHA1_197, "if ((!res_node) || (!sha1_ctx_p) ).....")
    TRC_MSG(TRC_MRE_VMSHA1_200, " malloc sha1_ctx_p failed in vm_sha1_reset()...")
    TRC_MSG(TRC_MRE_VMSHA1_226, " context   is Null")
    TRC_MSG(TRC_MRE_VMSHA1_234, "  sha1_ctx_p  is NULL  in vm_sha1_result...")
    TRC_MSG(TRC_MRE_VMSHA1_255, " context || message_array is NULL OR  (length<0)...")
    TRC_MSG(TRC_MRE_VMSHA1_257, " sha1_ctx_p is NULL...")
    TRC_MSG(TRC_MRE_VMSMS_297, "{SMS MODULE}Receive unkown [%d] event.")
    TRC_MSG(TRC_MRE_VMSMS_310, "Failed to regisiter sms module. Error Code : %d")
    TRC_MSG(TRC_MRE_VMSMS_322, "vm_sms_process_status_callback:process_handle=%d")
    TRC_MSG(TRC_MRE_VMSMS_329, "vm_sms_process_status_callback:VM_PMNG_UNLOAD start")
    TRC_MSG(TRC_MRE_VMSMS_333, "vm_sms_process_status_callback: VM_PMNG_UNLOAD ret=%d")
    TRC_MSG(TRC_MRE_VMSMS_362, "vm_sms_queue_manager:start")
    TRC_MSG(TRC_MRE_VMSMS_366, "vm_sms_queue_manager  delete time1=%d")
    TRC_MSG(TRC_MRE_VMSMS_370, "vm_sms_queue_manager:vm_delete_timer fail")
    TRC_MSG(TRC_MRE_VMSMS_374, "vm_sms_queue_manager:vm_delete_timer success")
    TRC_MSG(TRC_MRE_VMSMS_379, "vm_sms_queue_manager:sms_busy_flag=1")
    TRC_MSG(TRC_MRE_VMSMS_386, "vm_sms_queue_manager:vm_res_get_data fail")
    TRC_MSG(TRC_MRE_VMSMS_389, "vm_sms_queue_manager:res=%d")
    TRC_MSG(TRC_MRE_VMSMS_393, "vm_sms_queue_manager:data_buffer[0]=%d")
    TRC_MSG(TRC_MRE_VMSMS_399, "vm_sms_queue_manager:VM_SEND_SMS")
    TRC_MSG(TRC_MRE_VMSMS_411, "vm_sms_queue_manager:vm_sal_send_sms fail")
    TRC_MSG(TRC_MRE_VMSMS_414, "vm_sms_queue_manager:VM_SEND_SMS_PERSON")
    TRC_MSG(TRC_MRE_VMSMS_429, "vm_sms_queue_manager:vm_sal_sms_read_msg fail")
    TRC_MSG(TRC_MRE_VMSMS_432, "vm_sms_queue_manager:VM_SMS_READ")
    TRC_MSG(TRC_MRE_VMSMS_446, "vm_sms_queue_manager:vm_sal_sms_add_msg fail")
    TRC_MSG(TRC_MRE_VMSMS_449, "vm_sms_queue_manager:VM_SMS_ADD")
    TRC_MSG(TRC_MRE_VMSMS_464, "vm_sms_queue_manager:vm_sal_sms_delete_msg fail")
    TRC_MSG(TRC_MRE_VMSMS_467, "vm_sms_queue_manager:VM_SMS_DELETE")
    TRC_MSG(TRC_MRE_VMSMS_481, "vm_sms_queue_manager:vm_sal_sms_delete_msg_list fail")
    TRC_MSG(TRC_MRE_VMSMS_484, "vm_sms_queue_manager:VM_SMS_DELETE_LIST")
    TRC_MSG(TRC_MRE_VMSMS_498, "vm_sms_queue_manager:vm_sal_sms_get_msg_id_list fail")
    TRC_MSG(TRC_MRE_VMSMS_501, "vm_sms_queue_manager:VM_SMS_GET_MSG_ID_LIST")
    TRC_MSG(TRC_MRE_VMSMS_515, "vm_sms_queue_manager:vm_sal_sms_get_sc_address_asyn fail")
    TRC_MSG(TRC_MRE_VMSMS_518, "vm_sms_queue_manager:VM_SMS_GET_MSG_ID_LIST")
    TRC_MSG(TRC_MRE_VMSMS_523, "vm_sms_queue_manager:default type")
    TRC_MSG(TRC_MRE_VMSMS_531, "vm_sms_queue_manager:end")
    TRC_MSG(TRC_MRE_VMSMS_573, "vm_sms_release_node_by_process, data_buffer[0]=%d")
    TRC_MSG(TRC_MRE_VMSMS_583, "vm_sms_release_node_by_process, VM_SMS_SEND")
    TRC_MSG(TRC_MRE_VMSMS_589, "vm_sms_release_node_by_process, VM_SMS_READ")
    TRC_MSG(TRC_MRE_VMSMS_597, "vm_sms_release_node_by_process, VM_SMS_ADD")
    TRC_MSG(TRC_MRE_VMSMS_603, "vm_sms_release_node_by_process, VM_SMS_DELETE")
    TRC_MSG(TRC_MRE_VMSMS_608, "vm_sms_release_node_by_process, VM_SMS_DELETE_FOR_PAY")
    TRC_MSG(TRC_MRE_VMSMS_614, "vm_sms_release_node_by_process, VM_SMS_DELETE_LIST")
    TRC_MSG(TRC_MRE_VMSMS_620, "vm_sms_release_node_by_process, VM_SMS_GET_MSG_ID_LIST")
    TRC_MSG(TRC_MRE_VMSMS_626, "vm_sms_release_node_by_process, VM_SMS_GET_SC_ADDR")
    TRC_MSG(TRC_MRE_VMSMS_629, "vm_sms_release_node_by_process: error type data_buffer[0]=%d")
    TRC_MSG(TRC_MRE_VMSMS_636, "vm_sms_release_node_by_process : data handle=%d")
    TRC_MSG(TRC_MRE_VMSMS_653, "vm_sms_release_node_by_process timer fail")
    TRC_MSG(TRC_MRE_VMSMS_670, "vm_cancel_send_sms :start phandle=%d")
    TRC_MSG(TRC_MRE_VMSMS_674, "vm_cancel_send_sms:process_handle=%d")
    TRC_MSG(TRC_MRE_VMSMS_680, "vm_cancel_send_sms :end")
    TRC_MSG(TRC_MRE_VMSMS_700, "vm_send_sms: no sim card")
    TRC_MSG(TRC_MRE_VMSMS_706, "vm_send_sms : the ptr of phone or content is NULL")
    TRC_MSG(TRC_MRE_VMSMS_711, "vm_send_sms : the length of phone_number is out of range")
    TRC_MSG(TRC_MRE_VMSMS_716, "vm_send_sms : the length of sms's content is out of range(0-500)")
    TRC_MSG(TRC_MRE_VMSMS_723, "vm_send_sms : pid=%d")
    TRC_MSG(TRC_MRE_VMSMS_728, "vm_send_sms : avaliable <= 0")
    TRC_MSG(TRC_MRE_VMSMS_732, "vm_send_sms : avaliable =%d")
    TRC_MSG(TRC_MRE_VMSMS_737, "vm_send_sms : !sms_send")
    TRC_MSG(TRC_MRE_VMSMS_745, "vm_send_sms : !vm_number")
    TRC_MSG(TRC_MRE_VMSMS_754, "vm_send_sms : !vm_content")
    TRC_MSG(TRC_MRE_VMSMS_773, "vm_send_sms timer fail")
    TRC_MSG(TRC_MRE_VMSMS_777, "vm_send_sms: vm_res_save_data")
    TRC_MSG(TRC_MRE_VMSMS_781, "vm_send_sms data_handle < 0")
    TRC_MSG(TRC_MRE_VMSMS_787, "vm_send_sms count = %d")
    TRC_MSG(TRC_MRE_VMSMS_808, "vm_send_sms_person: no sim card")
    TRC_MSG(TRC_MRE_VMSMS_812, "vm_send_sms_person : ready")
    TRC_MSG(TRC_MRE_VMSMS_815, "vm_send_sms_person : the ptr of phone or content is NULL")
    TRC_MSG(TRC_MRE_VMSMS_820, "vm_send_sms_person : the length of phone_number is  out of range")
    TRC_MSG(TRC_MRE_VMSMS_825, "vm_send_sms_person : the length of sms's content is out of range(0-500)")
    TRC_MSG(TRC_MRE_VMSMS_851, "vm_send_sms_person : the phone number is not person")
    TRC_MSG(TRC_MRE_VMSMS_857, "vm_send_sms_person : the phone number is not person")
    TRC_MSG(TRC_MRE_VMSMS_863, "vm_send_sms_person : the length of phone number is error")
    TRC_MSG(TRC_MRE_VMSMS_870, "vm_send_sms_person : pid=%d")
    TRC_MSG(TRC_MRE_VMSMS_877, "vm_send_sms_person : avaliable <= 0")
    TRC_MSG(TRC_MRE_VMSMS_881, "vm_send_sms_person : avaliable =%d")
    TRC_MSG(TRC_MRE_VMSMS_886, "vm_send_sms_person : !sms_send")
    TRC_MSG(TRC_MRE_VMSMS_893, "vm_send_sms_person : !vm_number")
    TRC_MSG(TRC_MRE_VMSMS_901, "vm_send_sms_person : !vm_content")
    TRC_MSG(TRC_MRE_VMSMS_923, "vm_send_sms_person timer fail")
    TRC_MSG(TRC_MRE_VMSMS_927, "vm_send_sms_person: vm_res_save_data")
    TRC_MSG(TRC_MRE_VMSMS_931, "vm_send_sms_person data_handle < 0")
    TRC_MSG(TRC_MRE_VMSMS_937, "vm_send_sms_person count = %d")
    TRC_MSG(TRC_MRE_VMSMS_951, "vm_sms_read_msg:start")
    TRC_MSG(TRC_MRE_VMSMS_954, "vm_sms_read_msg:msg_data == NULL || msg_data->content_buff == NULL")
    TRC_MSG(TRC_MRE_VMSMS_965, "vm_sms_read_msg : avaliable <= 0")
    TRC_MSG(TRC_MRE_VMSMS_971, "vm_sms_read_msg:srv_sms_is_sms_ready()==0")
    TRC_MSG(TRC_MRE_VMSMS_978, "vm_sms_read_msg: sms_read == NULL")
    TRC_MSG(TRC_MRE_VMSMS_993, "vm_sms_read_msg timer fail")
    TRC_MSG(TRC_MRE_VMSMS_1001, "vm_sms_read_msg data_handle < 0")
    TRC_MSG(TRC_MRE_VMSMS_1005, "vm_sms_read_msg count = %d")
    TRC_MSG(TRC_MRE_VMSMS_1007, "vm_sms_read_msg:end")
    TRC_MSG(TRC_MRE_VMSMS_1022, "vm_sms_add_msg:start")
    TRC_MSG(TRC_MRE_VMSMS_1025, "vm_sms_add_msg:msg_data ==NULL")
    TRC_MSG(TRC_MRE_VMSMS_1031, "vm_sms_add_msg:status invalid")
    TRC_MSG(TRC_MRE_VMSMS_1037, "vm_send_sms : msg_data->content_size > VM_SMS_MSG_CONTENT_LEN")
    TRC_MSG(TRC_MRE_VMSMS_1042, "vm_sms_add_msg:sim_id  error")
    TRC_MSG(TRC_MRE_VMSMS_1047, "vm_sms_add_msg:storage_type  error")
    TRC_MSG(TRC_MRE_VMSMS_1053, "vm_sms_add_msg:srv_sms_is_sms_ready()==0")
    TRC_MSG(TRC_MRE_VMSMS_1063, "vm_sms_add_msg : avaliable <= 0")
    TRC_MSG(TRC_MRE_VMSMS_1070, "vm_sms_add_msg:msg_data_ptr == NULL")
    TRC_MSG(TRC_MRE_VMSMS_1077, "vm_sms_add_msg:sms_add == NULL")
    TRC_MSG(TRC_MRE_VMSMS_1086, "vm_sms_add_msg:content == NULL")
    TRC_MSG(TRC_MRE_VMSMS_1108, "vm_sms_add_msg timer fail")
    TRC_MSG(TRC_MRE_VMSMS_1117, "vm_sms_add_msg data_handle < 0")
    TRC_MSG(TRC_MRE_VMSMS_1123, "vm_sms_add_msg count = %d")
    TRC_MSG(TRC_MRE_VMSMS_1125, "vm_sms_add_msg:end")
    TRC_MSG(TRC_MRE_VMSMS_1138, "vm_sms_delete_msg:start")
    TRC_MSG(TRC_MRE_VMSMS_1142, "vm_sms_delete_msg:srv_sms_is_sms_ready()==0")
    TRC_MSG(TRC_MRE_VMSMS_1152, "vm_sms_delete_msg:avaliable <= 0")
    TRC_MSG(TRC_MRE_VMSMS_1158, "vm_sms_delete_msg:sms_delete == NULL")
    TRC_MSG(TRC_MRE_VMSMS_1170, "vm_sms_delete_msg timer fail")
    TRC_MSG(TRC_MRE_VMSMS_1179, "vm_sms_delete_msg data_handle < 0")
    TRC_MSG(TRC_MRE_VMSMS_1183, "vm_sms_delete_msg count = %d")
    TRC_MSG(TRC_MRE_VMSMS_1185, "vm_sms_delete_msg:end")
    TRC_MSG(TRC_MRE_VMSMS_1196, "vm_sms_delete_msg_for_pay:start")
    TRC_MSG(TRC_MRE_VMSMS_1202, "vm_sms_delete_msg:srv_sms_is_sms_ready()==0")
    TRC_MSG(TRC_MRE_VMSMS_1213, "vm_sms_delete_msg_for_pay:avaliable <= 0")
    TRC_MSG(TRC_MRE_VMSMS_1219, "vm_sms_delete_msg_for_pay:sms_delete == NULL")
    TRC_MSG(TRC_MRE_VMSMS_1231, "vm_sms_delete_msg_for_pay timer fail")
    TRC_MSG(TRC_MRE_VMSMS_1240, "vm_sms_delete_msg_for_pay data_handle < 0")
    TRC_MSG(TRC_MRE_VMSMS_1244, "vm_sms_delete_msg_for_pay count = %d")
    TRC_MSG(TRC_MRE_VMSMS_1246, "vm_sms_delete_msg_for_pay:end")
    TRC_MSG(TRC_MRE_VMSMS_1259, "vm_sms_delete_msg_list:start")
    TRC_MSG(TRC_MRE_VMSMS_1263, "vm_sms_delete_msg_list:list_type is not valid")
    TRC_MSG(TRC_MRE_VMSMS_1268, "vm_sms_delete_msg_list:sim_id  error")
    TRC_MSG(TRC_MRE_VMSMS_1273, "vm_sms_delete_msg_list:srv_sms_is_sms_ready()==0")
    TRC_MSG(TRC_MRE_VMSMS_1283, "vm_sms_delete_msg_list:avaliable <= 0")
    TRC_MSG(TRC_MRE_VMSMS_1289, "vm_sms_delete_msg_list:sms_delete_list == NULL")
    TRC_MSG(TRC_MRE_VMSMS_1303, "vm_sms_delete_msg_list timer fail")
    TRC_MSG(TRC_MRE_VMSMS_1311, "vm_sms_delete_msg_list data_handle < 0")
    TRC_MSG(TRC_MRE_VMSMS_1315, "vm_sms_delete_msg_list count = %d")
    TRC_MSG(TRC_MRE_VMSMS_1317, "vm_sms_delete_msg_list:end")
    TRC_MSG(TRC_MRE_VMSMS_1332, "vm_sms_get_msg_id_list:start")
    TRC_MSG(TRC_MRE_VMSMS_1335, "vm_sms_get_msg_id_list:query_data == NULL")
    TRC_MSG(TRC_MRE_VMSMS_1340, "vm_sms_get_msg_id_list:srv_sms_is_sms_ready()==0")
    TRC_MSG(TRC_MRE_VMSMS_1346, "vm_sms_get_msg_id_list:status invalid")
    TRC_MSG(TRC_MRE_VMSMS_1357, "vm_sms_get_msg_id_list:avaliable <= 0")
    TRC_MSG(TRC_MRE_VMSMS_1363, "vm_sms_get_msg_id_list:query_data_ptr ==NULL")
    TRC_MSG(TRC_MRE_VMSMS_1370, "vm_sms_get_msg_id_list:sms_query ==NULL")
    TRC_MSG(TRC_MRE_VMSMS_1387, "vm_sms_get_msg_id_list timer fail")
    TRC_MSG(TRC_MRE_VMSMS_1395, "vm_sms_get_msg_id_list data_handle < 0")
    TRC_MSG(TRC_MRE_VMSMS_1400, "vm_sms_get_msg_id_list count = %d")
    TRC_MSG(TRC_MRE_VMSMS_1402, "vm_sms_get_msg_id_list:end")
    TRC_MSG(TRC_MRE_VMSMS_1411, "vm_sms_get_msg_id:start")
    TRC_MSG(TRC_MRE_VMSMS_1415, "vm_sms_get_list_size:box_type is not valid,box_type=%d")
    TRC_MSG(TRC_MRE_VMSMS_1420, "vm_sms_get_msg_id:end msg_id=%d")
    TRC_MSG(TRC_MRE_VMSMS_1431, "vm_sms_get_list_size:start")
    TRC_MSG(TRC_MRE_VMSMS_1434, "vm_sms_get_list_size:box_type is not valid,box_type=%0x")
    TRC_MSG(TRC_MRE_VMSMS_1440, "vm_sms_get_list_size:end size=%d")
    TRC_MSG(TRC_MRE_VMSMS_1450, "vm_sms_sim_is_valid:sim_id is not valid")
    TRC_MSG(TRC_MRE_VMSMS_1461, "vm_sms_sim_is_valid:vm_is_card1Absent ")
    TRC_MSG(TRC_MRE_VMSMS_1469, "vm_sms_sim_is_valid:vm_is_card2Absent")
    TRC_MSG(TRC_MRE_VMSMS_1481, "vm_sms_sim_is_valid:vm_has_sim_card fail")
    TRC_MSG(TRC_MRE_VMSMS_1487, "vm_sms_sim_is_valid:sim_id ==VM_SMS_SIM_2  error")
    TRC_MSG(TRC_MRE_VMSMS_1507, "vm_sms_get_sc_address:start")
    TRC_MSG(TRC_MRE_VMSMS_1511, "vm_sms_get_sc_address:srv_sms_is_sms_ready()==0")
    TRC_MSG(TRC_MRE_VMSMS_1516, "vm_sms_get_sc_address:sim_id  error")
    TRC_MSG(TRC_MRE_VMSMS_1526, "vm_sms_get_sc_address:avaliable <= 0")
    TRC_MSG(TRC_MRE_VMSMS_1532, "vm_sms_get_sc_address:sms_delete == NULL")
    TRC_MSG(TRC_MRE_VMSMS_1544, "vm_sms_get_sc_address timer fail")
    TRC_MSG(TRC_MRE_VMSMS_1553, "vm_sms_get_sc_address data_handle < 0")
    TRC_MSG(TRC_MRE_VMSMS_1557, "vm_sms_get_sc_address count = %d")
    TRC_MSG(TRC_MRE_VMSMS_1559, "vm_sms_get_sc_address:end")
    TRC_MSG(TRC_MRE_VMSMS_1568, "vm_sms_get_sc_address_syn:vm_sc_addr== NULL")
    TRC_MSG(TRC_MRE_VMSMS_1574, "vm_sms_get_sc_address_syn:sim_id  error")
    TRC_MSG(TRC_MRE_VMSMS_1580, "vm_sms_get_sc_address_syn:sc_addr=[0x%x]")
    TRC_MSG(TRC_MRE_VMSMS_1621, "vm_sms_callback:callback_data->cause=%d,callback_data->action=%d")
    TRC_MSG(TRC_MRE_VMSMS_1624, "vm_sms_callback:callback_data == NULL")
    TRC_MSG(TRC_MRE_VMSMS_1630, "vm_sms_callback:res=%d count = %d")
    TRC_MSG(TRC_MRE_VMSMS_1634, "vm_sms_callback:res <= 0")
    TRC_MSG(TRC_MRE_VMSMS_1638, "vm_sms_callback:sms_process_handle =%d res_node.phandle=%d")
    TRC_MSG(TRC_MRE_VMSMS_1646, "vm_sms_callback:res_node.phandle=%d")
    TRC_MSG(TRC_MRE_VMSMS_1649, "vm_sms_callback:res_node->res_id=%d")
    TRC_MSG(TRC_MRE_VMSMS_1651, "vm_sms_callback:release_data i=%d")
    TRC_MSG(TRC_MRE_VMSMS_1682, "vm_sms_callback:SRV_SMS_ACTION_SEND sendresult=%d")
    TRC_MSG(TRC_MRE_VMSMS_1718, "user_msg_data->number=[0x%x]")
    TRC_MSG(TRC_MRE_VMSMS_1721, "user_msg_data->status=%d")
    TRC_MSG(TRC_MRE_VMSMS_1724, "user_msg_data->mti =%d")
    TRC_MSG(TRC_MRE_VMSMS_1727, "user_msg_data->tp_st =%d")
    TRC_MSG(TRC_MRE_VMSMS_1730, "user_msg_data->folder_id =%d")
    TRC_MSG(TRC_MRE_VMSMS_1733, "user_msg_data->para_flag =%d")
    TRC_MSG(TRC_MRE_VMSMS_1742, "user_msg_data->timestamp.year =%d")
    TRC_MSG(TRC_MRE_VMSMS_1743, "user_msg_data->timestamp.mon =%d")
    TRC_MSG(TRC_MRE_VMSMS_1744, "user_msg_data->timestamp.day =%d")
    TRC_MSG(TRC_MRE_VMSMS_1745, "user_msg_data->timestamp.hour =%d")
    TRC_MSG(TRC_MRE_VMSMS_1746, "user_msg_data->timestamp.min =%d")
    TRC_MSG(TRC_MRE_VMSMS_1747, "user_msg_data->timestamp.sec  =%d")
    TRC_MSG(TRC_MRE_VMSMS_1750, " user_msg_data->storage_type  =%d")
    TRC_MSG(TRC_MRE_VMSMS_1753, "user_msg_data->sim_id =%d")
    TRC_MSG(TRC_MRE_VMSMS_1756, "user_msg_data->sc_address =[0x%x]")
    TRC_MSG(TRC_MRE_VMSMS_1759, "user_msg_data->pid=%d")
    TRC_MSG(TRC_MRE_VMSMS_1762, "user_msg_data->vp=%d")
    TRC_MSG(TRC_MRE_VMSMS_1765, "user_msg_data->status_report =%d")
    TRC_MSG(TRC_MRE_VMSMS_1768, "user_msg_data->reply_path =%d")
    TRC_MSG(TRC_MRE_VMSMS_1771, "user_msg_data->src_port =%d")
    TRC_MSG(TRC_MRE_VMSMS_1774, "user_msg_data->dest_port =%d")
    TRC_MSG(TRC_MRE_VMSMS_1777, "user_msg_data->dcs =%d")
    TRC_MSG(TRC_MRE_VMSMS_1780, "user_msg_data->msg_class =%d")
    TRC_MSG(TRC_MRE_VMSMS_1783, "user_msg_data->content_buff_size =%d")
    TRC_MSG(TRC_MRE_VMSMS_1787, "user_msg_data->content_buff=[0x%x]")
    TRC_MSG(TRC_MRE_VMSMS_1797, "vm_sms_callback:  vm_free(sms_read)")
    TRC_MSG(TRC_MRE_VMSMS_1799, "vm_sms_callback:SRV_SMS_ACTION_READ end")
    TRC_MSG(TRC_MRE_VMSMS_1831, "vm_sms_callback:vm_free(sms_add->msg_data->content)")
    TRC_MSG(TRC_MRE_VMSMS_1836, "vm_sms_callback:vm_free(sms_add->msg_data)")
    TRC_MSG(TRC_MRE_VMSMS_1840, "vm_sms_callback:vm_free(callback_data_ptr.action == SRV_SMS_ACTION_SAVE)")
    TRC_MSG(TRC_MRE_VMSMS_1857, "vm_sms_callback:vm_free(callback_data_ptr.action == SRV_SMS_ACTION_DELETE)")
    TRC_MSG(TRC_MRE_VMSMS_1884, "vm_sms_callback:msg_id_list == NULL")
    TRC_MSG(TRC_MRE_VMSMS_1890, "vm_sms_callback:callback_data->action_data->msg_id_list== NULL")
    TRC_MSG(TRC_MRE_VMSMS_1905, "vm_sms_callback:vm_free(sms_get_msg_id_list->query_data)")
    TRC_MSG(TRC_MRE_VMSMS_1909, "vm_sms_callback:vm_free(sms_get_msg_id_list)")
    TRC_MSG(TRC_MRE_VMSMS_1923, "vm_sms_callback:vm_free(sms_get_msg_id_list)")
    TRC_MSG(TRC_MRE_VMSMS_1930, "vm_sms_callback:VM_SMS_ACTION_GET_SC_ADDR")
    TRC_MSG(TRC_MRE_VMSMS_1952, "vm_sms_callback:vm_free(query_msg_ptr.msg_id_list)")
    TRC_MSG(TRC_MRE_VMSMS_1959, "vm_sms_callback:vm_res_release_data fail")
    TRC_MSG(TRC_MRE_VMSMS_1962, "vm_sms_callback:release_data i=%d")
    TRC_MSG(TRC_MRE_VMSMS_1971, "vm_sms_callback:count=%d")
    TRC_MSG(TRC_MRE_VMSMS_1982, "vm_sms_callback:vm_create_timer fail")
    TRC_MSG(TRC_MRE_VMSMS_1985, "vm_sms_callback:vm_create_timer success")
    TRC_MSG(TRC_MRE_VMSMS_1992, "vm_sms_callback:end")
    TRC_MSG(TRC_MRE_VMSMS_2016, "vm_sms_event_callback")
    TRC_MSG(TRC_MRE_VMSMS_2020, "vm_sms_event_callback:event_data == NULL")
    TRC_MSG(TRC_MRE_VMSMS_2028, "vm_sms_event_callback:event_data->event_info == NULL")
    TRC_MSG(TRC_MRE_VMSMS_2034, "vm_sms_event_callback:new_msg->number=[0x%x]")
    TRC_MSG(TRC_MRE_VMSMS_2036, "vm_sms_event_callback:number =[0x%x]")
    TRC_MSG(TRC_MRE_VMSMS_2040, "vm_sms_event_callback:strcmp(number, \"12520\")==0")
    TRC_MSG(TRC_MRE_VMSMS_2044, "new_msg == NULL")
    TRC_MSG(TRC_MRE_VMSMS_2050, "vm_sms_event_callback:handle < 0")
    TRC_MSG(TRC_MRE_VMSMS_2061, "vm_sms_event_callback: new_msg_ptr->dest_port =%d")
    TRC_MSG(TRC_MRE_VMSMS_2064, "vm_sms_event_callback: new_msg_ptr->src_port =%d")
    TRC_MSG(TRC_MRE_VMSMS_2069, "vm_sms_event_callback:new_msg_ptr->message_len=%d")
    TRC_MSG(TRC_MRE_VMSMS_2072, "vm_sms_event_callback: new_msg_ptr->ref=%d")
    TRC_MSG(TRC_MRE_VMSMS_2075, "vm_sms_event_callback:new_msg->number=[0x%x]")
    TRC_MSG(TRC_MRE_VMSMS_2079, "vm_sms_event_callback:new_msg->number=[0x%x]")
    TRC_MSG(TRC_MRE_VMSMS_2091, "vm_sms_event_callback:new_msg_ptr->total_seg=%d")
    TRC_MSG(TRC_MRE_VMSMS_2094, "vm_sms_event_callback:new_msg_ptr->seg=%d")
    TRC_MSG(TRC_MRE_VMSMS_2097, "vm_sms_event_callback:new_msg_ptr->dcs=%d")
    TRC_MSG(TRC_MRE_VMSMS_2102, "vm_sms_event_callback:new_msg_ptr->mti=%d")
    TRC_MSG(TRC_MRE_VMSMS_2106, "vm_sms_event_callback:new_msg_ptr->pid=%d")
    TRC_MSG(TRC_MRE_VMSMS_2110, "vm_sms_event_callback:new_msg_ptr->fo=%d")
    TRC_MSG(TRC_MRE_VMSMS_2114, "vm_sms_event_callback: new_msg_ptr->sim_id=%d")
    TRC_MSG(TRC_MRE_VMSMS_2118, "vm_sms_event_callback:new_msg_ptr->storage_type=%d")
    TRC_MSG(TRC_MRE_VMSMS_2125, "vm_sms_event_callback:event_new_msg->content=[0x%x]")
    TRC_MSG(TRC_MRE_VMSMS_2126, "vm_sms_event_callback:event_new_msg->content_len=%d")
    TRC_MSG(TRC_MRE_VMSMS_2128, "vm_sms_event_callback:new_msg_ptr->data=[0x%x]")
    TRC_MSG(TRC_MRE_VMSMS_2129, "vm_sms_event_callback:new_msg_ptr->data=[0x%x]")
    TRC_MSG(TRC_MRE_VMSMS_2134, "vm_sms_event_callback")
    TRC_MSG(TRC_MRE_VMSMS_2145, "vm_sms_event_callback:before user_event_func")
    TRC_MSG(TRC_MRE_VMSMS_2150, "vm_sms_event_callback:after user_event_func")
    TRC_MSG(TRC_MRE_VMSMS_2161, "vm_sms_event_callback:after user_event_func 2")
    TRC_MSG(TRC_MRE_VMSMS_2166, "event_data->evt_id != EVT_ID_SRV_SMS_NEW_MSG")
    TRC_MSG(TRC_MRE_VMSOCK_378, "[TCP MODULE]Failed to get socket id form resource manager.")
    TRC_MSG(TRC_MRE_VMSOCK_390, "Finish init data account.")
    TRC_MSG(TRC_MRE_VMSOCK_438, "Data account is ready now.")
    TRC_MSG(TRC_MRE_VMSOCK_452, "Failed hold cbm bearer.ErrorCode = %d.")
    TRC_MSG(TRC_MRE_VMSOCK_479, "[TCP MODULE]Failed to get socket id form resource manager.")
    TRC_MSG(TRC_MRE_VMSOCK_514, "[TCP MODULE]Receive unkown[%d] event.")
    TRC_MSG(TRC_MRE_VMSOCK_564, "[TCP MODULE]Alloc resource[%d] socket context")
    TRC_MSG(TRC_MRE_VMSOCK_581, "[TCP MODULE]Free resource[%d] socket context.")
    TRC_MSG(TRC_MRE_VMSOCK_672, "[TCP MODULE]Failed to regisiter tcp module. Error Code : %d")
    TRC_MSG(TRC_MRE_VMSOCK_692, "[TCP MODULE]PID[%d] HEAP memory is not enough.")
    TRC_MSG(TRC_MRE_VMSOCK_768, "[TCP MODULE]Phone is in flight mode.")
    TRC_MSG(TRC_MRE_VMSOCK_776, "[TCP MODULE]Failed to check params.")
    TRC_MSG(TRC_MRE_VMSOCK_788, "[TCP MODULE] Error apn = %d.")
    TRC_MSG(TRC_MRE_VMSOCK_798, "[TCP MODULE] Error apn = %d.")
    TRC_MSG(TRC_MRE_VMSOCK_807, "[TCP MODULE]Failed to alloc socket context.")
    TRC_MSG(TRC_MRE_VMSOCK_828, "[TCP MODULE]Don't find account.")
    TRC_MSG(TRC_MRE_VMSOCK_845, "[TCP MODULE]Failed to set socket option(non block).")
    TRC_MSG(TRC_MRE_VMSOCK_856, "[TCP MODULE]Failed to set socket option(read/write/close/connect).")
    TRC_MSG(TRC_MRE_VMSOCK_1005, "[TCP MODULE]Failed to get host by name.")
    TRC_MSG(TRC_MRE_VMSOCK_1049, "[TCP MODULE]Failed to create socket.")
    TRC_MSG(TRC_MRE_VMSOCK_1074, "[TCP MODULE]Abort tcp[%d] dns query operation.")
    TRC_MSG(TRC_MRE_VMSOCK_1076, "[TCP MODULE]TCP[%d] closed")
    TRC_MSG(TRC_MRE_VMSOCK_1102, "[TCP MODULE]TCP[%d] can't read data.")
    TRC_MSG(TRC_MRE_VMSOCK_1110, "[TCP MODULE]TCP[%d] read block.")
    TRC_MSG(TRC_MRE_VMSOCK_1116, "[TCP MODULE]TCP[%d] receive FIN.")
    TRC_MSG(TRC_MRE_VMSOCK_1121, "[TCP MODULE]TCP[%d] read data error.")
    TRC_MSG(TRC_MRE_VMSOCK_1127, "[TCP MODULE]TCP[%d] read data %d bytes.")
    TRC_MSG(TRC_MRE_VMSOCK_1150, "[TCP MODULE]TCP[%d] can't write data.")
    TRC_MSG(TRC_MRE_VMSOCK_1158, "[TCP MODULE]TCP[%d] write block.")
    TRC_MSG(TRC_MRE_VMSOCK_1164, "[TCP MODULE]TCP[%d] write data error.")
    TRC_MSG(TRC_MRE_VMSOCK_1170, "[TCP MODULE]TCP[%d] write data %d bytes.")
    TRC_MSG(TRC_MRE_VMSOCK_1202, "[TCP MODULE]Failed to alloc socket context.")
    TRC_MSG(TRC_MRE_VMSOCK_1432, "[TCP MODULE]Failed to set Wi-Fi bearer.")
    TRC_MSG(TRC_MRE_VMSOCK_1552, "[TCP MODULE]MTK socket notify callback function param error.")
    TRC_MSG(TRC_MRE_VMSOCK_1563, "[TCP MODULE]PCB[%d] of TCP[%d] receive %d message, res handle=%d")
    TRC_MSG(TRC_MRE_VMSOCK_1574, "[TCP MODULE]TCP[%d] can write callback.")
    TRC_MSG(TRC_MRE_VMSOCK_1591, "[TCP MODULE]TCP[%d] can read callback.")
    TRC_MSG(TRC_MRE_VMSOCK_1608, "[TCP MODULE]TCP[socket = %d] connected")
    TRC_MSG(TRC_MRE_VMSOCK_1615, "[TCP MODULE]TCP[%d] connected callback.")
    TRC_MSG(TRC_MRE_VMSOCK_1636, "[TCP MODULE]Failed to connected. TCP[%d] callback.")
    TRC_MSG(TRC_MRE_VMSOCK_1656, "[TCP MODULE]TCP[%d] closed callback.")
    TRC_MSG(TRC_MRE_VMSOCK_1669, "[TCP MODULE]Unkown sock evt, value is :%d")
    TRC_MSG(TRC_MRE_VMSOCK_2034, "[TCP MODULE]Socket %d has error connection state: %d, but in conn_host_by_name state.")
    TRC_MSG(TRC_MRE_VMSOCK_2068, "[TCP MODULE]Error Process handle[%d].")
    TRC_MSG(TRC_MRE_VMSOCK_2081, "[TCP MODULE]Failed to get host by name, socket id is :d")
    TRC_MSG(TRC_MRE_VMSOCK_2106, "[TCP MODULE]Error Process handle[%d].")
    TRC_MSG(TRC_MRE_VMSOCK_2125, "[TCP MODULE]get apn info: mre_account_id =[%d].")
    TRC_MSG(TRC_MRE_VMSOCK_2164, "[TCP MODULE]get apn info: proxy_ip =[[0x%x]].")
    TRC_MSG(TRC_MRE_VMSOCK_2170, "[TCP MODULE]get apn info: user_name =[[0x%x]].")
    TRC_MSG(TRC_MRE_VMSOCK_2173, "[TCP MODULE]get apn info: pass_word =[[0x%x]].")
    TRC_MSG(TRC_MRE_VMSOCK_2211, "[WIFI LOC] vm_wlan_loc_notify_process_status")
    TRC_MSG(TRC_MRE_VMSOCK_2215, "[WIFI LOC] Failed to get WIFI LOC id form resource manager.")
    TRC_MSG(TRC_MRE_VMSOCK_2234, "[WIFI LOC] vm_wlan_loc_initialize_resource")
    TRC_MSG(TRC_MRE_VMSOCK_2254, "[WIFI LOC] vm_wlan_loc_finialize_resource")
    TRC_MSG(TRC_MRE_VMSOCK_2258, "[WIFI LOC] Failed to get WIFI LOC id form resource manager.")
    TRC_MSG(TRC_MRE_VMSOCK_2287, "[WIFI LOC] Receive unkown[%d] event.")
    TRC_MSG(TRC_MRE_VMSOCK_2300, "[WIFI LOC] Failed to regisiter WIFI LOC module. Error Code : %d")
    TRC_MSG(TRC_MRE_VMSOCK_2385, "[WIFI LOC] vm_srv_dtcnt_wlan_scan_res_cb ctx_p NULL (maybe ABORT)")
    TRC_MSG(TRC_MRE_VMSOCK_2392, "[WIFI LOC] vm_srv_dtcnt_wlan_scan_res_cb p_handle < 0")
    TRC_MSG(TRC_MRE_VMSOCK_2398, "[WIFI LOC] vm_srv_dtcnt_wlan_scan_res_cb scan_res NULL")
    TRC_MSG(TRC_MRE_VMSOCK_2414, "[WIFI LOC] bssid[%x %x %x %x %x %x], rssi[%d]")
    TRC_MSG(TRC_MRE_VMSOCK_2428, "[WIFI LOC] vm_srv_dtcnt_wlan_scan_res_cb num[%d] rid[%d] ret[%d]")
    TRC_MSG(TRC_MRE_VMSOCK_2447, "[WIFI LOC] vm_wlan_loc_search S")
    TRC_MSG(TRC_MRE_VMSOCK_2468, "[WIFI LOC] vm_wlan_loc_search jid[%d] callback[0x%x] E")
    TRC_MSG(TRC_MRE_VMSOCK_2475, "[WIFI LOC] vm_wlan_loc_search NS E1")
    TRC_MSG(TRC_MRE_VMSOCK_2487, "[WIFI LOC] vm_wlan_loc_search_abort S")
    TRC_MSG(TRC_MRE_VMSOCK_2510, "[WIFI LOC] vm_wlan_loc_search_abort jid[%d] E")
    TRC_MSG(TRC_MRE_VMSOCK_2514, "[WIFI LOC] vm_wlan_loc_search_abort NS E1")
    TRC_MSG(TRC_MRE_VMSOCK_2522, "[WIFI LOC] vm_wlan_loc_get_connected_info S")
    TRC_MSG(TRC_MRE_VMSOCK_2542, "[WIFI LOC] bssid[%x %x %x %x %x %x], rssi[%d]")
    TRC_MSG(TRC_MRE_VMSOCK_2554, "[WIFI LOC] vm_wlan_loc_get_connected_info E1")
    
    TRC_MSG(TRC_MRE_VMSOCK_2792, "[WIFI LOC] vm_wlan_loc_free_ctx S")
    TRC_MSG(TRC_MRE_VMSOCK_2796, "[WIFI LOC] vm_wlan_loc_free_ctx 1")
    TRC_MSG(TRC_MRE_VMSOCK_2700, "[WIFI LOC] vm_wlan_loc_free_ctx 2")
    TRC_MSG(TRC_MRE_VMSOCK_2704, "[WIFI LOC] vm_wlan_loc_free_ctx E")
    TRC_MSG(TRC_MRE_VMSOCK_2733, "[WIFI LOC] vm_wlan_loc_search_abort VM_WLAN_LOC_ERR_BAD_PARAM")
    TRC_MSG(TRC_MRE_VMSOCK_2740, "[WIFI LOC] vm_wlan_loc_search_abort 1 VM_WLAN_LOC_ERR_INTERNAL")
    TRC_MSG(TRC_MRE_VMSOCK_2747, "[WIFI LOC] vm_wlan_loc_search_abort 2 VM_WLAN_LOC_ERR_INTERNAL")
    TRC_MSG(TRC_MRE_VMSOCK_2853, "[PRELOAD] _vm_preload_free_ctx S")
    TRC_MSG(TRC_MRE_VMSOCK_2856, "[PRELOAD] _vm_preload_free_ctx E1")
    TRC_MSG(TRC_MRE_VMSOCK_2863, "[PRELOAD] _vm_preload_free_ctx E")
    TRC_MSG(TRC_MRE_VMSOCK_2884, "vm_preload_query  S")
    TRC_MSG(TRC_MRE_VMSOCK_2893, "vm_preload_query  -2")
    TRC_MSG(TRC_MRE_VMSOCK_2907, "vm_preload_query net host[%s]")
    TRC_MSG(TRC_MRE_VMSOCK_2923, "vm_preload_query apn_info.proxy_ip")
    TRC_MSG(TRC_MRE_VMSOCK_2929, "vm_preload_query wap host[%s]")
    TRC_MSG(TRC_MRE_VMSOCK_2933, "vm_preload_query  -3")
    TRC_MSG(TRC_MRE_VMSOCK_2943, "vm_preload_query res not enough -4")
    TRC_MSG(TRC_MRE_VMSOCK_2959, "vm_preload_query  [%s:%d] apn[%d]")
    TRC_MSG(TRC_MRE_VMSOCK_2965, "vm_preload_query  vm_tcp_close")
    TRC_MSG(TRC_MRE_VMSOCK_2973, "vm_preload_query  ctx_p->soc_id < 0")
    TRC_MSG(TRC_MRE_VMSOCK_2983, "vm_preload_query  E")
    TRC_MSG(TRC_MRE_VMSOCK_2997, "vm_preload_download  S")
    TRC_MSG(TRC_MRE_VMSOCK_3000, "vm_preload_download  E1")
    TRC_MSG(TRC_MRE_VMSOCK_3009, "vm_preload_download  E2")
    TRC_MSG(TRC_MRE_VMSOCK_3023, "vm_preload_download vm_tcp_connect ctx_p->soc_id E3")
    TRC_MSG(TRC_MRE_VMSOCK_3026, "vm_preload_download  ctx_p->soc_id E")
    TRC_MSG(TRC_MRE_VMSOCK_3051, "vm_preload_download  url[%s],port[%d],host[%s]")
    TRC_MSG(TRC_MRE_VMSOCK_3058, "vm_preload_download  vm_tcp_write ret[%d]")
    TRC_MSG(TRC_MRE_VMSOCK_3060, "vm_preload_download  E")
    TRC_MSG(TRC_MRE_VMSOCK_3068, "vm_preload_cancel  S")
    TRC_MSG(TRC_MRE_VMSOCK_3075, "vm_preload_cancel  E1")
    TRC_MSG(TRC_MRE_VMSOCK_3081, "vm_preload_cancel  E")
    TRC_MSG(TRC_MRE_VMSOCK_3114, "_vm_preload_try_query  S")
    TRC_MSG(TRC_MRE_VMSOCK_3117, "_vm_preload_try_query  E1")
    TRC_MSG(TRC_MRE_VMSOCK_3130, "_vm_preload_try_query E")
    TRC_MSG(TRC_MRE_VMSOCK_3190, "_vm_preload_try_query  written[%d]")
    TRC_MSG(TRC_MRE_VMSOCK_3200, "_vm_preload_try_query  ret[%d]")
    TRC_MSG(TRC_MRE_VMSOCK_3201, "_vm_preload_try_query  E")
    TRC_MSG(TRC_MRE_VMSOCK_3223, "_vm_preload_read_address S")
    TRC_MSG(TRC_MRE_VMSOCK_3227, "_vm_preload_read_address ret[%d] len[%d]")
    TRC_MSG(TRC_MRE_VMSOCK_3264, "preload query http_content_length [%d] feed_back[%d]")
    TRC_MSG(TRC_MRE_VMSOCK_3284, "rsp[%s]")
    TRC_MSG(TRC_MRE_VMSOCK_3287, "generalmobi FOUND")
    TRC_MSG(TRC_MRE_VMSOCK_3297, "url[E_PRELOAD_AVAILABLE_UPDATE]")
    TRC_MSG(TRC_MRE_VMSOCK_3318, "url[E_PRELOAD_NO_UPDATE]")
    TRC_MSG(TRC_MRE_VMSOCK_3335, "_vm_preload_read_address E")
    TRC_MSG(TRC_MRE_VMSOCK_3358, "_vm_preload_read_data  S g_http_content_length[%d]")
    TRC_MSG(TRC_MRE_VMSOCK_3369, "_vm_preload_read_data ret[%d] len[%d]")
    TRC_MSG(TRC_MRE_VMSOCK_3411, "_vm_preload_read_data cb EXIST, delete")
    TRC_MSG(TRC_MRE_VMSOCK_3429, "_vm_preload_read_data cb CREATE F[%s]")
    TRC_MSG(TRC_MRE_VMSOCK_3448, "_vm_preload_read_data cb would block")
    TRC_MSG(TRC_MRE_VMSOCK_3454, "_vm_preload_read_data cb RECVED BLOCK")
    TRC_MSG(TRC_MRE_VMSOCK_3462, "_vm_preload_read_data  len[%d]")
    TRC_MSG(TRC_MRE_VMSOCK_3469, "_vm_preload_read_data [%d/%d]")
    TRC_MSG(TRC_MRE_VMSOCK_3470, "_vm_preload_read_data cb E_PRELOAD_DOWNLOADING")
    TRC_MSG(TRC_MRE_VMSOCK_3485, "_vm_preload_read_data total[%d]")
    TRC_MSG(TRC_MRE_VMSOCK_3486, "_vm_preload_read_data cb E_PRELOAD_DOWNLOADED")
    TRC_MSG(TRC_MRE_VMSOCK_3514, "fail open [%s]")
    TRC_MSG(TRC_MRE_VMSOCK_3522, "_vm_preload_read_data cb E_PRELOAD_DOWNLOADING")
    TRC_MSG(TRC_MRE_VMSOCK_3540, "_vm_preload_read_data total[%d]")
    TRC_MSG(TRC_MRE_VMSOCK_3541, "_vm_preload_read_data cb E_PRELOAD_DOWNLOADING")
    TRC_MSG(TRC_MRE_VMSOCK_3559, "_vm_preload_read_data cb E_PRELOAD_DOWNLOADING")
    TRC_MSG(TRC_MRE_VMSOCK_3582, "_vm_preload_try_query  E")
    TRC_MSG(TRC_MRE_VMSOCK_3622, "_vm_preload_cb : VM_TCP_EVT_HOST_NOT_FOUND")
    TRC_MSG(TRC_MRE_VMSOCK_3630, "_vm_preload_cb : VM_TCP_EVT_CONNECTED")
    TRC_MSG(TRC_MRE_VMSOCK_3637, "_vm_preload_try_query E")
    TRC_MSG(TRC_MRE_VMSOCK_3643, "vm_preload_download E")
    TRC_MSG(TRC_MRE_VMSOCK_3649, "_vm_preload_cb : VM_TCP_EVT_CAN_WRITE")
    TRC_MSG(TRC_MRE_VMSOCK_3656, "_vm_preload_cb : READ _vm_preload_read_address")
    TRC_MSG(TRC_MRE_VMSOCK_3662, "_vm_preload_cb : READ _vm_preload_read_data")
    TRC_MSG(TRC_MRE_VMSOCK_3670, "_vm_preload_cb : VM_TCP_EVT_PIPE_BROKEN")
    TRC_MSG(TRC_MRE_VMSOCK_3678, "_vm_preload_cb : VM_TCP_EVT_PIPE_CLOSED")
    TRC_MSG(TRC_MRE_VMSOCK_3689, "_vm_preload_cb : default")
    TRC_MSG(TRC_MRE_VMSOCK_PRELOAD_S, "[PRELOAD] @[%d][%d] S")
    TRC_MSG(TRC_MRE_VMSOCK_PRELOAD_E1, "[PRELOAD] @[%d][%d] E1")
    TRC_MSG(TRC_MRE_VMSOCK_PRELOAD_E, "[PRELOAD] @[%d][%d] E")
    TRC_MSG(TRC_MRE_VMSOCK_PRELOAD_LOG, "[PRELOAD] LOG[%d][%d][%d][%d][%d][%d] @[%d][%d]")

    TRC_MSG(TRC_MRE_VMSOCK_UDP_S, "[UDP] @[%d][%d] S")
    TRC_MSG(TRC_MRE_VMSOCK_UDP_E, "[UDP] @[%d][%d] E")
    TRC_MSG(TRC_MRE_VMSOCK_UDP_E1, "[UDP] @[%d][%d] E1")
    TRC_MSG(TRC_MRE_VMSOCK_UDP_E2, "[UDP] @[%d][%d] E2")
    TRC_MSG(TRC_MRE_VMSOCK_UDP_E3, "[UDP] @[%d][%d] E3")
    TRC_MSG(TRC_MRE_VMSOCK_UDP_E4, "[UDP] @[%d][%d] E4")
    TRC_MSG(TRC_MRE_VMSOCK_UDP_E5, "[UDP] @[%d][%d] E5")
    TRC_MSG(TRC_MRE_VMSOCK_UDP_E6, "[UDP] @[%d][%d] E6")
    TRC_MSG(TRC_MRE_VMSOCK_UDP_E7, "[UDP] @[%d][%d] E7")
    TRC_MSG(TRC_MRE_VMSOCK_UDP_LOG, "[UDP] LOG[%d][%d][%d][%d][%d][%d] @[%d][%d]")

    TRC_MSG(TRC_MRE_VMSOCK_HTTPS_S, "[HTTPS] @[%d][%d] S")
    TRC_MSG(TRC_MRE_VMSOCK_HTTPS_E, "[HTTPS] @[%d][%d] E")
    TRC_MSG(TRC_MRE_VMSOCK_HTTPS_E1, "[HTTPS] @[%d][%d] E1")
    TRC_MSG(TRC_MRE_VMSOCK_HTTPS_E2, "[HTTPS] @[%d][%d] E2")
    TRC_MSG(TRC_MRE_VMSOCK_HTTPS_E3, "[HTTPS] @[%d][%d] E3")
    TRC_MSG(TRC_MRE_VMSOCK_HTTPS_E4, "[HTTPS] @[%d][%d] E4")
    TRC_MSG(TRC_MRE_VMSOCK_HTTPS_E5, "[HTTPS] @[%d][%d] E5")
    TRC_MSG(TRC_MRE_VMSOCK_HTTPS_E6, "[HTTPS] @[%d][%d] E6")
    TRC_MSG(TRC_MRE_VMSOCK_HTTPS_E7, "[HTTPS] @[%d][%d] E7")
    TRC_MSG(TRC_MRE_VMSOCK_HTTPS_LOG, "[HTTPS] LOG[%d][%d][%d][%d][%d][%d] @[%d][%d]")    

    TRC_MSG(TRC_MRE_VMSOCK_APN_DFT_S, "[APN DFT] @[%d][%d] S")
    TRC_MSG(TRC_MRE_VMSOCK_APN_DFT_E, "[APN DFT] @[%d][%d] E")
    TRC_MSG(TRC_MRE_VMSOCK_APN_DFT_E1, "[APN DFT] @[%d][%d] E1")
    TRC_MSG(TRC_MRE_VMSOCK_APN_DFT_E2, "[APN DFT] @[%d][%d] E2")
    TRC_MSG(TRC_MRE_VMSOCK_APN_DFT_LOG, "[APN DFT] LOG[%d][%d][%d][%d][%d][0x%x] @[%d][%d]")

    TRC_MSG(TRC_MRE_VMSTATUSBAR_434, "vm_pmng_apply_to_run_in_fg() notify_type = %d")
    TRC_MSG(TRC_MRE_VMSTATUSBAR_1473, "[vm_check_ifallow_process] IN")
    TRC_MSG(TRC_MRE_VMSTATUSBAR_1488, "[vm_check_ifallow_process] OUT FALSE")
    TRC_MSG(TRC_MRE_VMSTATUSBAR_1491, "[vm_check_ifallow_process] OUT TRUE")
    TRC_MSG(TRC_MRE_VMSTATUSBAR_1576, "[STATUS BAR]Failed to play notiftication midi. ErrorCode = %d.")
    TRC_MSG(TRC_MRE_VMSTATUSBAR_1581, "[STATUS BAR]Failed to open notiftication midi. ErrorCode = %d.")
    TRC_MSG(TRC_MRE_VMSYS_1272, "vm_get_time : malloc vm_time_t fail")
    TRC_MSG(TRC_MRE_VMSYS_1405, "MRE initialize....")
    TRC_MSG(TRC_MRE_VMSYS_1523, "MRE start autorun.")
    TRC_MSG(TRC_MRE_VMSYS_1525, "MRE finish autorun.")
    TRC_MSG(TRC_MRE_VMSYS_1531, "MRE initialize complete. MRE version is [0x%x].")
    TRC_MSG(TRC_MRE_VMSYS_1538, "vm_start_mre_envirment:log_out=%d, log_mtk=%d, log_level =%d")
    TRC_MSG(TRC_MRE_VMSYS_2321, "vm_set_touch_feedback =%d")
    TRC_MSG(TRC_MRE_VMTEL_98, "vm_callout_ucm_callback : callcount=%d")
    TRC_MSG(TRC_MRE_VMTEL_197, "vm_callout_finialize : callcount=%d, status=%d")
    TRC_MSG(TRC_MRE_VMTEL_221, "_vm_reg_callout_modual : failed to register callout module. errorcode=%d")
    TRC_MSG(TRC_MRE_VMTEL_260, "vm_callout: state is not foreground")
    TRC_MSG(TRC_MRE_VMTEL_267, "vm_callout: no sim card")
    TRC_MSG(TRC_MRE_VMTEL_274, "vm_callout: flight mode")
    TRC_MSG(TRC_MRE_VMTEL_280, "vm_callout: device is busy now")
    TRC_MSG(TRC_MRE_VMTEL_286, "vm_callout : the ptr of phnum is NULL")
    TRC_MSG(TRC_MRE_VMTEL_291, "vm_callout : the len of phnum is error")
    TRC_MSG(TRC_MRE_VMTEL_296, "vm_callout : the content of phnum is error")
    TRC_MSG(TRC_MRE_VMTEL_301, "vm_callout : phandle is error")
    TRC_MSG(TRC_MRE_VMTEL_307, "vm_callout: res save error")
    TRC_MSG(TRC_MRE_VMTEL_312, "vm_callout : before mmi_ucm_init_call_para")
    TRC_MSG(TRC_MRE_VMTEL_314, "vm_callout : after mmi_ucm_init_call_para")
    TRC_MSG(TRC_MRE_VMTEL_336, "vm_callout : before mmi_ucm_call_launch")
    TRC_MSG(TRC_MRE_VMTEL_338, "vm_callout : after mmi_ucm_call_launch")
    TRC_MSG(TRC_MRE_VMTHEME_55, "[vmgraph] :vm_set_active_wallpaper  start")
    TRC_MSG(TRC_MRE_VMTHEME_76, "[vmgraph] vm_set_active_wallpaper filename =%d , ")
    TRC_MSG(TRC_MRE_VMTHEME_85, "[vmgraph] vm_set_active_wallpaper not find file")
    TRC_MSG(TRC_MRE_VMTHEME_139, "[vmgraph] vm_set_active_wallpaper VM_GDI_ERR_UNSUPPORT_IMAGE_TYPE")
    TRC_MSG(TRC_MRE_VMTIMER_241, "vm_timer_proc_internal: start: user_data = %x")
    TRC_MSG(TRC_MRE_VMTIMER_256, "vm_timer_proc_internal start again TIMER:mtkid = %d")
    TRC_MSG(TRC_MRE_VMTIMER_261, "vm_timer_proc_internal start again TIMER_EX:mtkid = %d")
    TRC_MSG(TRC_MRE_VMTIMER_266, "vm_timer_proc_internal: bad timer type")
    TRC_MSG(TRC_MRE_VMTIMER_289, "vm_timer_proc_internal: bad user data")
    TRC_MSG(TRC_MRE_VMTIMER_325, "vm_timer_process_state_pro : delete timerid=%d")
    TRC_MSG(TRC_MRE_VMTIMER_364, "vm_timer_ex_process_state_pro : delete timerexid=%d")
    TRC_MSG(TRC_MRE_VMTIMER_437, "vm_timer_finialize start")
    TRC_MSG(TRC_MRE_VMTIMER_440, "vm_timer_finialize : will delete timerid=%d")
    TRC_MSG(TRC_MRE_VMTIMER_442, "vm_timer_finialize : have delete timerid=%d")
    TRC_MSG(TRC_MRE_VMTIMER_446, "vm_timer_finialize free timer end")
    TRC_MSG(TRC_MRE_VMTIMER_448, "vm_timer_finialize free timer_ex start")
    TRC_MSG(TRC_MRE_VMTIMER_452, "vm_timer_finialize : delete timerexid=%d")
    TRC_MSG(TRC_MRE_VMTIMER_456, "vm_timer_finialize free timer_ex end")
    TRC_MSG(TRC_MRE_VMTIMER_465, "vm_timer_finialize end2")
    TRC_MSG(TRC_MRE_VMTIMER_523, "_vm_reg_timer_modual : failed to register timer module. errorcode=%d")
    TRC_MSG(TRC_MRE_VMTIMER_559, "_vm_create_timer : _vm_kernel_malloc fail!!")
    TRC_MSG(TRC_MRE_VMTIMER_565, "_vm_create_timer : _vm_kernel_malloc success: timer_p = %x")
    TRC_MSG(TRC_MRE_VMTIMER_576, "_vm_create_timer : save res fail!!")
    TRC_MSG(TRC_MRE_VMTIMER_583, "_vm_create_timer : save res success!!")
    TRC_MSG(TRC_MRE_VMTIMER_592, "_vm_create_timer:mtk_id = %d,interval = %d,res_id = %d")
    TRC_MSG(TRC_MRE_VMTIMER_596, "vm_timer_proc_internal start again TIMER")
    TRC_MSG(TRC_MRE_VMTIMER_605, "vm_timer_proc_internal start again TIMER_EX")
    TRC_MSG(TRC_MRE_VMTIMER_611, "_vm_create_timer bad timer type")
    TRC_MSG(TRC_MRE_VMTIMER_639, "vm_create_timer interval=%d,callback = %d")
    TRC_MSG(TRC_MRE_VMTIMER_665, "vm_create_timer_ex interval=%d,callback = %d")
    TRC_MSG(TRC_MRE_VMTIMER_697, "_vm_delete_timer : current_pro = %d,type=%d, timerid=%d")
    TRC_MSG(TRC_MRE_VMTIMER_710, "_vm_delete_timer:vm_res_get_data success")
    TRC_MSG(TRC_MRE_VMTIMER_714, "_vm_delete_timer:_vm_kernel_free addr = %x")
    TRC_MSG(TRC_MRE_VMTIMER_725, "_vm_delete_timer:vm_res_release_data success")
    TRC_MSG(TRC_MRE_VMTIMER_731, "_vm_delete_timer: will stoptimer mtkid = %d")
    TRC_MSG(TRC_MRE_VMWPS_230, "[WPS MODULE]Failed to get wps id form resource manager.")
    TRC_MSG(TRC_MRE_VMWPS_290, "[WPS MODULE]Failed to get wps id form resource manager.")
    TRC_MSG(TRC_MRE_VMWPS_321, "[WPS MODULE]Receive unkown[%d] event.")
    TRC_MSG(TRC_MRE_VMWPS_334, "[WPS MODULE]Failed to regisiter wps module. Error Code : %d")
    TRC_MSG(TRC_MRE_VMXML_130, "[XML MODULE] xml_doctype_start_handler - vm_res_get_data failed, current_handle:%d.")
    TRC_MSG(TRC_MRE_VMXML_154, "[XML MODULE] xml_doctype_end_handler - vm_res_get_data failed, current_handle:%d.")
    TRC_MSG(TRC_MRE_VMXML_181, "[XML MODULE] xml_elem_start_handler - vm_res_get_data failed, current_handle:%d.")
    TRC_MSG(TRC_MRE_VMXML_205, "[XML MODULE] xml_elem_end_handler - vm_res_get_data failed, current_handle:%d.")
    TRC_MSG(TRC_MRE_VMXML_234, "[XML MODULE] xml_data_handler - vm_res_get_data failed, current_handle:%d.")
    TRC_MSG(TRC_MRE_VMXML_262, "[XML MODULE] vm_xml_new_parser - parser is null")
    TRC_MSG(TRC_MRE_VMXML_278, "[XML MODULE] vm_xml_set_doctype_handlers - parser is null")
    TRC_MSG(TRC_MRE_VMXML_294, "[XML MODULE] vm_xml_set_element_handlers - parser is null")
    TRC_MSG(TRC_MRE_VMXML_318, "[XML MODULE] vm_xml_set_data_handler - parser is null")
    TRC_MSG(TRC_MRE_VMXML_336, "[XML MODULE] vm_xml_parse - xml_new_parser() is not XML_RESULT_OK - ret:%d")
    TRC_MSG(TRC_MRE_VMXML_343, "[XML MODULE] vm_xml_parse - after xml_new_parser - length:%d .")
    TRC_MSG(TRC_MRE_VMXML_347, "[XML MODULE] vm_xml_parse - after xml_configure_memory - length:%d .")
    TRC_MSG(TRC_MRE_VMXML_356, "[XML MODULE] vm_xml_parse - after xml_register_doctype_handler - length:%d .")
    TRC_MSG(TRC_MRE_VMXML_365, "[XML MODULE] vm_xml_parse - after xml_register_element_handler - length:%d .")
    TRC_MSG(TRC_MRE_VMXML_372, "[XML MODULE] vm_xml_parse - after xml_register_data_handler - length:%d .")
    TRC_MSG(TRC_MRE_VMXML_376, "[XML MODULE] vm_xml_parse - to parse file - [0x%x]")
    TRC_MSG(TRC_MRE_VMXML_380, "[XML MODULE] vm_xml_parse - after xml_parse - length:%d .")
    TRC_MSG(TRC_MRE_VMXML_384, "[XML MODULE] vm_xml_parse - to parse buffer - %p, %d")
    TRC_MSG(TRC_MRE_VMXML_388, "[XML MODULE] vm_xml_parse - after xml_parse_buffer - length:%d .")
    TRC_MSG(TRC_MRE_VMXML_393, "[XML MODULE] vm_xml_parse - after xml_close_parser - length:%d .")
    TRC_MSG(TRC_MRE_VMXML_398, "[XML MODULE] vm_xml_parse - parse result is not XML_RESULT_OK - ret:%d, Error:[0x%x]")
    TRC_MSG(TRC_MRE_VMXML_411, "[XML MODULE] vm_xml_free_handle - vm_res_release_data - failed - ")

    TRC_MSG(TRC_MRE_FRM_GROUP_PROC, "[MRE][FRM]vm_frm_group_proc, pHandle = %d, evt id = %d")
    TRC_MSG(TRC_MRE_FRM_ENTRY_FUNC, "[MRE][FRM]vm_frm_entry_func, pHandle = %d")
    TRC_MSG(TRC_MRE_FRM_ENTRY_APP_SCREEN, "[MRE][FRM]vm_frm_entry_app_screen, pHandle = %d, groupid = %d")
    TRC_MSG(TRC_MRE_FRM_EXIT_APP_SCREEN, "[MRE][FRM]vm_frm_exit_app_screen, pHandle = %d, groupid = %d")
    TRC_MSG(TRC_MRE_PRO_STACK_PUSH, "[MRE][PRO]stack.num[%d]->[%d], push r9:[%d]->[%d]")
    TRC_MSG(TRC_MRE_PRO_STACK_POPUP1, "[MRE][PRO]stack.num[%d]->[%d], pop r9:[%d] -> [%d]")
    TRC_MSG(TRC_MRE_PRO_STACK_POPUP2, "[MRE][PRO]_vm_sb_stack_pop g_vm_stub_sb = [%d]")
    TRC_MSG(TRC_MRE_PRO_KEY_EVENT, "[MRE][PRO]vm_pmng_deal_key_event vmKeyCode=%d,vmKeyEvent=%d")
    TRC_MSG(TRC_MRE_PRO_PEN_EVENT, "[MRE][PRO]vm_pmng_deal_pen_event vmPenEvent=%d,x=%d,y=%d")
    TRC_MSG(TRC_MRE_PRO_MSG_PROC, "[MRE][PRO]vm_pmng_exec_msg_proc sender=%d,receiver=%d,msg_id=%d")
    TRC_MSG(TRC_MRE_PRO_SYS_HANDLE, "[MRE][PRO]vm_pmng_exec_sysevent_handler phandle=%d,msg_id=%d,param=%d")
    TRC_MSG(TRC_MRE_PRO_SET_FG, "[MRE][PRO]vm_pmng_set_fg_int phandle=%d,status=%d")
    TRC_MSG(TRC_MRE_PRO_SET_BG, "[MRE][PRO]vm_pmng_set_bg_int phandle=%d,status=%d")
    TRC_MSG(TRC_MRE_PRO_SET_INACTIVE, "[MRE][PRO]vm_pmng_set_inactive phandle=%d")
    TRC_MSG(TRC_MRE_PRO_DELETE, "[MRE][PRO]vm_pmng_delete_process_int phandle=%d,status=%d,quit=%d")
    //TRC_MSG(TRC_MRE_PRO_ALLOC_PCB, "[MRE][PRO]vm_alloc_pcb phandle=%d,is card=%d,is bg=%d")
    TRC_MSG(TRC_MRE_PRO_SEND_MSG, "[MRE][PRO]_vm_pmng_send_sysevt_msg phandle=%d,msg=%d")
    TRC_MSG(TRC_MRE_PRO_CLEAN_UNLOAD, "[MRE][PRO]vm_cleanup_unload_status_pcb phandle=%d")
    TRC_MSG(TRC_MRE_PRO_ALWAYS_CAN_ENTER_BG, "[MRE][PRO]vm_pmng_can_set_bg, always can enter bg")
    TRC_MSG(TRC_MRE_PRO_ALWAYS_CANNOT_ENTER_BG, "[MRE][PRO]vm_pmng_can_set_bg, always can not enter bg")
    TRC_MSG(TRC_MRE_PRO_SET_BG_APP_MEM_SIZE, "[MRE][PRO]vm_pmng_can_set_bg, app mem, phandle=%d, bgmem=%d")
    TRC_MSG(TRC_MRE_PRO_SET_BG_SO_MEM_SIZE, "[MRE][PRO]vm_pmng_can_set_bg, so mem, so_mem_index=%d, bgmem=%d")
    TRC_MSG(TRC_MRE_PRO_SET_BG_VSM_MEM_SIZE, "[MRE][PRO]vm_pmng_can_set_bg, vsm total mem, bgmem=%d")
    TRC_MSG(TRC_MRE_PRO_CAN_ENTER_BG, "[MRE][PRO]vm_pmng_can_set_bg, can enter bg, bgmem=%d, threshold=%d")
    TRC_MSG(TRC_MRE_PRO_CANNOT_ENTER_BG, "[MRE][PRO]vm_pmng_can_set_bg, can not enter bg, bgmem=%d, threshold=%d")


    TRC_MSG(TRC_MRE_VMIO_ASYNC_FS_S, "[ASYNC FS] @[%d][%d] S")
    TRC_MSG(TRC_MRE_VMIO_ASYNC_FS_E, "[ASYNC FS] @[%d][%d] E")
    TRC_MSG(TRC_MRE_VMIO_ASYNC_FS_E1, "[ASYNC FS] @[%d][%d] E1")
    TRC_MSG(TRC_MRE_VMIO_ASYNC_FS_E2, "[ASYNC FS] @[%d][%d] E2")
    TRC_MSG(TRC_MRE_VMIO_ASYNC_FS_E3, "[ASYNC FS] @[%d][%d] E3")
    TRC_MSG(TRC_MRE_VMIO_ASYNC_FS_LOG, "[ASYNC FS] LOG[%d][%d][%d][%d][0x%x][0x%x] @[%d][%d]")
    
    TRC_MSG(TRC_MRE_VMSOCK_ABM_HOLD_BEARER_S, "[ABM HOLD BEARER] @[%d][%d] S")
    TRC_MSG(TRC_MRE_VMSOCK_ABM_HOLD_BEARER_E, "[ABM HOLD BEARER] @[%d][%d] E")
    TRC_MSG(TRC_MRE_VMSOCK_ABM_HOLD_BEARER_E1, "[ABM HOLD BEARER] @[%d][%d] E1")
    TRC_MSG(TRC_MRE_VMSOCK_ABM_HOLD_BEARER_E2, "[ABM HOLD BEARER] @[%d][%d] E2")
    TRC_MSG(TRC_MRE_VMSOCK_ABM_HOLD_BEARER_LOG, "[ABM HOLD BEARER] LOG[%d][%d][%d][%d][%d][0x%x] @[%d][%d]")
    
    TRC_MSG(TRC_MRE_DA_S, "[DA] @[%d][%d] S")
    TRC_MSG(TRC_MRE_DA_E1, "[DA] @[%d][%d] E1")
    TRC_MSG(TRC_MRE_DA_E2, "[DA] @[%d][%d] E2")
    TRC_MSG(TRC_MRE_DA_E3, "[DA] @[%d][%d] E3")
    TRC_MSG(TRC_MRE_DA_E4, "[DA] @[%d][%d] E4")
    TRC_MSG(TRC_MRE_DA_E5, "[DA] @[%d][%d] E5")
    TRC_MSG(TRC_MRE_DA_E, "[DA] @[%d][%d] E")
    TRC_MSG(TRC_MRE_DA_LOG, "[DA] LOG[%d][%d][%d][%d][0x%x][0x%x] @[%d][%d]")

    TRC_MSG(TRC_MRE_CUST_APN_S, "[CUST_APN] @[%d][%d] S")
    TRC_MSG(TRC_MRE_CUST_APN_E1, "[CUST_APN] @[%d][%d] E1")
    TRC_MSG(TRC_MRE_CUST_APN_E2, "[CUST_APN] @[%d][%d] E2")
    TRC_MSG(TRC_MRE_CUST_APN_E3, "[CUST_APN] @[%d][%d] E3")
    TRC_MSG(TRC_MRE_CUST_APN_E4, "[CUST_APN] @[%d][%d] E4")
    TRC_MSG(TRC_MRE_CUST_APN_E5, "[CUST_APN] @[%d][%d] E5")
    TRC_MSG(TRC_MRE_CUST_APN_E, "[CUST_APN] @[%d][%d] E")
    TRC_MSG(TRC_MRE_CUST_APN_LOG, "[CUST_APN] LOG[%d][%d][%d][%d][0x%x][0x%x] @[%d][%d]")
    
    TRC_MSG(TRC_MRE_VMSOCK_PN_S, "[PN] @[%d][%d] S")
    TRC_MSG(TRC_MRE_VMSOCK_PN_E, "[PN] @[%d][%d] E")
    TRC_MSG(TRC_MRE_VMSOCK_PN_E1, "[PN] @[%d][%d] E1")
    TRC_MSG(TRC_MRE_VMSOCK_PN_E2, "[PN] @[%d][%d] E2")
    TRC_MSG(TRC_MRE_VMSOCK_PN_E3, "[PN] @[%d][%d] E3")
    TRC_MSG(TRC_MRE_VMSOCK_PN_E4, "[PN] @[%d][%d] E4")
    TRC_MSG(TRC_MRE_VMSOCK_PN_E5, "[PN] @[%d][%d] E5")
    TRC_MSG(TRC_MRE_VMSOCK_PN_LOG, "[PN] LOG[%d][%d][%d][%d][%d][0x%x] @[%d][%d]")

    TRC_MSG(TRC_MRE_UPDATE_CHECK, "[MRE]update check version result %d")
    TRC_MSG(TRC_MRE_UPDATE_CHECK_EX_S, "[MRE]update check version ex")
    TRC_MSG(TRC_MRE_UPDATE_CHECK_EX_E, "[MRE]update check version ex result %d")
    TRC_MSG(TRC_MRE_UPDATE_DOWNLOAD_S, "[MRE]update download")
    TRC_MSG(TRC_MRE_UPDATE_DOWNLOAD_E, "[MRE]update download result %d")
    TRC_MSG(TRC_MRE_UPDATE_DOWNLOAD_EX_S, "[MRE]update download ex")
    TRC_MSG(TRC_MRE_UPDATE_DOWNLOAD_EX_E, "[MRE]update download ex result %d")    
    TRC_MSG(TRC_MRE_UPDATE_FILE_S, "[MRE]update file")
    TRC_MSG(TRC_MRE_UPDATE_FILE_E, "[MRE]update file result %d")
    TRC_MSG(TRC_MRE_UPDATE_FILE_EX_S, "[MRE]update file ex")
    TRC_MSG(TRC_MRE_UPDATE_FILE_EX_E, "[MRE]update file ex result %d")
    TRC_MSG(TRC_MRE_UPDATE_FILE_CB_S, "[MRE]update file cb")
    TRC_MSG(TRC_MRE_UPDATE_FILE_CB_E, "[MRE]update file cb result %d")
    TRC_MSG(TRC_MRE_UPDATE_MOVE_CB, "[MRE]update file move cb %d,%d,%d")
    TRC_MSG(TRC_MRE_UPDATE_CB_S, "[MRE]update cb %d")
    TRC_MSG(TRC_MRE_UPDATE_CB_E, "[MRE]update cb end")

    TRC_MSG(TRC_MRE_SRV_MSPACE_S, "[SRV_MSPACE] @[%d][%d] S")
    TRC_MSG(TRC_MRE_SRV_MSPACE_E1, "[SRV_MSPACE] @[%d][%d] E1")
    TRC_MSG(TRC_MRE_SRV_MSPACE_E2, "[SRV_MSPACE] @[%d][%d] E2")
    TRC_MSG(TRC_MRE_SRV_MSPACE_E3, "[SRV_MSPACE] @[%d][%d] E3")
    TRC_MSG(TRC_MRE_SRV_MSPACE_E4, "[SRV_MSPACE] @[%d][%d] E4")
    TRC_MSG(TRC_MRE_SRV_MSPACE_E5, "[SRV_MSPACE] @[%d][%d] E5")
    TRC_MSG(TRC_MRE_SRV_MSPACE_E6, "[SRV_MSPACE] @[%d][%d] E6")
    TRC_MSG(TRC_MRE_SRV_MSPACE_E7, "[SRV_MSPACE] @[%d][%d] E7")
    TRC_MSG(TRC_MRE_SRV_MSPACE_E8, "[SRV_MSPACE] @[%d][%d] E8")
    TRC_MSG(TRC_MRE_SRV_MSPACE_E9, "[SRV_MSPACE] @[%d][%d] E9")
    TRC_MSG(TRC_MRE_SRV_MSPACE_E, "[SRV_MSPACE] @[%d][%d] E")
    TRC_MSG(TRC_MRE_SRV_MSPACE_LOG, "[SRV_MSPACE] LOG[%d][%d][%d][%d][%d][0x%x] @[%d][%d]")
    
    TRC_MSG(TRC_MRE_DLS_S, "[DLS] @[%d][%d] S")
    TRC_MSG(TRC_MRE_DLS_E1, "[DLS] @[%d][%d] E1")
    TRC_MSG(TRC_MRE_DLS_E2, "[DLS] @[%d][%d] E2")
    TRC_MSG(TRC_MRE_DLS_E3, "[DLS] @[%d][%d] E3")
    TRC_MSG(TRC_MRE_DLS_E4, "[DLS] @[%d][%d] E4")
    TRC_MSG(TRC_MRE_DLS_E5, "[DLS] @[%d][%d] E5")
    TRC_MSG(TRC_MRE_DLS_E6, "[DLS] @[%d][%d] E6")
    TRC_MSG(TRC_MRE_DLS_E7, "[DLS] @[%d][%d] E7")
    TRC_MSG(TRC_MRE_DLS_E8, "[DLS] @[%d][%d] E8")
    TRC_MSG(TRC_MRE_DLS_E9, "[DLS] @[%d][%d] E9")
    TRC_MSG(TRC_MRE_DLS_E, "[DLS] @[%d][%d] E")
    TRC_MSG(TRC_MRE_DLS_LOG, "[DLS] LOG[%d][%d][%d][%d][%d][0x%x] @[%d][%d]")
    
    TRC_MSG(TRC_MMI_MSPACE_START_S, "[MSPACE] start")
    TRC_MSG(TRC_MMI_MSPACE_OPTION_MENU_S, "[MSPACE] option_menu_handler, evt_id=%d, h_menu_id=%d")
    TRC_MSG(TRC_MMI_MSPACE_GROUP_PROC_EVT_S, "[MSPACE] grp_proc, evt_id=%d")
    TRC_MSG(TRC_MMI_MSPACE_ASM_STOP_CB_S, "[MSPACE] asm_stop_cb, start")
    TRC_MSG(TRC_MMI_MSPACE_ASM_STOP_CB_E, "[MSPACE] asm_stop_cb, end")
    TRC_MSG(TRC_MMI_MSPACE_ALLOC_MEM_CB_S, "[MSPACE] alloc_mem_cb, start, pool=0x%X")
    TRC_MSG(TRC_MMI_MSPACE_ALLOC_MEM_CB_E, "[MSPACE] alloc_mem_cb, end, pool=0x%X")
    TRC_MSG(TRC_MMI_MSPACE_ALLOCATE_MEM_FAIL, "[MSPACE] start_int, allocate asm fail")
    
    TRC_MSG(TRC_MMI_MSPACE_INVALID_ITEM_INDEX, "[MSPACE] get_item, item_idx=%d, app_num=%d")
    TRC_MSG(TRC_MMI_MSPACE_ENTRY_MAIN_SCRN_S, "[MSPACE] entry_main_scrn, start")
    TRC_MSG(TRC_MMI_MSPACE_ENTRY_MAIN_SCRN_FAIL, "[MSPACE] entry_main_scrn, fail, ret=%d")
    TRC_MSG(TRC_MMI_MSPACE_GI_APP_STATUS, "[MSPACE] get_item, app item status is %d")
    TRC_MSG(TRC_MMI_MSPACE_MSLH_APP_STATUS, "[MSPACE] main_scrn_lsk_hdlr, fail, app item status is %d")
    TRC_MSG(TRC_MMI_MSPACE_GET_STAT_LIST_MEM_FAIL, "[MSPACE] get_item, alloc app list stat mem fail, s_idx=%d, d_size=%d")
    TRC_MSG(TRC_MMI_MSPACE_GET_DYNM_LIST_MEM_FAIL, "[MSPACE] get_item, alloc app list dynm mem fail, s_idx=%d, d_size=%d")
    TRC_MSG(TRC_MMI_MSPACE_GET_LIST_INFO_FAIL, "[MSPACE] get_item, srv_as_list_get_info fail, s_idx=%d, d_size=%d, ret=%d")
    TRC_MSG(TRC_MMI_MSPACE_GET_IMG_STAT_INFO_MEM_FAIL, "[MSPACE] get_image_info, alloc app stat info mem fail, idx=%d")
    TRC_MSG(TRC_MMI_MSPACE_GET_IMG_APP_INFO_FAIL, "[MSPACE] get_image_info, srv_as_list_get_info fail, ret=%d, idx=%d")    
    TRC_MSG(TRC_MMI_MSPACE_GET_IMG_APP_ICON_MEM_FAIL, "[MSPACE] get_image_info, alloc icon mem fail, idx=%d, icon_size=%d")  
    TRC_MSG(TRC_MMI_MSPACE_GET_IMG_NEW_MAX_SIZE, "[MSPACE] get_image_info, new max icon size, new=%d, max=%d")  
    TRC_MSG(TRC_MMI_MSPACE_GET_IMG_ICON_INFO_FAIL, "[MSPACE] get_image_info, srv_as_list_get_icon fail, ret=%d, idx=%d")  
    TRC_MSG(TRC_MMI_MSPACE_HILITE_APP_INFO_FAIL, "[MSPACE] update_hilite_app_item, srv_as_list_get_info fail, ret=%d, idx=%d")    
    TRC_MSG(TRC_MMI_MSPACE_HILITE_GET_ICON_MEM_FAIL, "[MSPACE] update_hilite_app_item, alloc icon mem fail, idx=%d, icon_size=%d") 
    TRC_MSG(TRC_MMI_MSPACE_HILITE_GET_ICON_INFO_FAIL, "[MSPACE] update_hilite_app_item, srv_as_list_get_icon fail, ret=%d, idx=%d")  
    
    TRC_MSG(TRC_MMI_MSPACE_OPEN_SCRN_ENTRY_S, "[MSPACE] entry_open_scrn, start")
    TRC_MSG(TRC_MMI_MSPACE_EOS_APP_STATUS, "[MSPACE] entry_open_scrn, app status is %d")
    
    TRC_MSG(TRC_MMI_MSPACE_UPDATING_EVT_S, "[MSPACE] as_display_updating_confirmCb, eid=%d, result=%d")
    TRC_MSG(TRC_MMI_MSPACE_CONNECT_FAIL_EVT_S, "[MSPACE] as_display_connect_server_failed_confirmCb, eid=%d, result=%d")
    TRC_MSG(TRC_MMI_MSPACE_DATA_QUERY_EVT_S, "[MSPACE] as_data_query_handler, hdl=%d, state=%d, g_hdl=%d")
    TRC_MSG(TRC_MMI_MSPACE_DATA_QUERY_EVT_E, "[MSPACE] as_data_query_handler, g_hdl=%d")
    TRC_MSG(TRC_MMI_MSPACE_DATA_DOWNLOAD_EVT_S, "[MSPACE] as_data_download_handler, hdl=%d, state=%d, g_hdl=%d")
    TRC_MSG(TRC_MMI_MSPACE_DATA_DOWNLOAD_EVT_E, "[MSPACE] as_data_download_handler, g_hdl=%d")
    TRC_MSG(TRC_MMI_MSPACE_RUN_APP_DOWNLOAD_EVT_S, "[MSPACE] run, as_app_download_handler, hdl=%d, state=%d, g_hdl=%d")
    TRC_MSG(TRC_MMI_MSPACE_RUN_APP_DOWNLOAD_EVT_E, "[MSPACE] run, as_app_download_handler, g_hdl=%d")
    TRC_MSG(TRC_MMI_MSPACE_EXIT_APP_DOWNLOAD_EVT_S, "[MSPACE] exit, as_app_download_handler, hdl=%d, state=%d")
    TRC_MSG(TRC_MMI_MSPACE_EXIT_APP_DOWNLOAD_EVT_E, "[MSPACE] exit, as_app_download_handler")
    TRC_MSG(TRC_MMI_MSPACE_GET_STAT_INFO_MEM_FAIL, "[MSPACE] as_get_list, allocate app stat info memory fail")
    TRC_MSG(TRC_MMI_MSPACE_GET_DYNM_INFO_MEM_FAIL, "[MSPACE] as_get_list, allocate app dynm info memory fail")
    TRC_MSG(TRC_MMI_MSPACE_GET_LIST_NUM_ZERO, "[MSPACE] as_get_list, srv_as_list_get_record_num, num=%d")
    TRC_MSG(TRC_MMI_MSPACE_GET_LIST_NUM_FAIL, "[MSPACE] as_get_list, srv_as_list_get_record_num, ret=%d")
    TRC_MSG(TRC_MMI_MSPACE_UPDATE_APP_GET_INFO_FAIL, "[MSPACE] as_update_app_item, srv_as_list_get_info fail, idx=%d, ret=%d")
    TRC_MSG(TRC_MMI_MSPACE_ADSR_CANCEL_S, "[MSPACE] as_downloading_scrn_rsk_cancel_hdlr, as cancel, hdl=%d, ret=%d")
    TRC_MSG(TRC_MMI_MSPACE_AWSR_CANCEL_S, "[MSPACE] as_waiting_scrn_rsk_cancel_hdlr, as cancel, hdl=%d, ret=%d")
    TRC_MSG(TRC_MMI_MSPACE_ADUC_CANCEL_S, "[MSPACE] as_display_updating_confirmCb, as cancel, hdl=%d, ret=%d")
    
    TRC_MSG(TRC_MRE_VPF_S, "[VPF] @[%d][%d] S")
    TRC_MSG(TRC_MRE_VPF_E1, "[VPF] @[%d][%d] E1")
    TRC_MSG(TRC_MRE_VPF_E2, "[VPF] @[%d][%d] E2")
    TRC_MSG(TRC_MRE_VPF_E3, "[VPF] @[%d][%d] E3")
    TRC_MSG(TRC_MRE_VPF_E4, "[VPF] @[%d][%d] E4")
    TRC_MSG(TRC_MRE_VPF_E5, "[VPF] @[%d][%d] E5")
    TRC_MSG(TRC_MRE_VPF_E, "[VPF] @[%d][%d] E")
    
    TRC_MSG(TRC_MRE_SSO_S, "[SSO] @[%d][%d] S")
    TRC_MSG(TRC_MRE_SSO_E1, "[SSO] @[%d][%d] E1")
    TRC_MSG(TRC_MRE_SSO_E2, "[SSO] @[%d][%d] E2")
    TRC_MSG(TRC_MRE_SSO_E3, "[SSO] @[%d][%d] E3")
    TRC_MSG(TRC_MRE_SSO_E4, "[SSO] @[%d][%d] E4")
    TRC_MSG(TRC_MRE_SSO_E5, "[SSO] @[%d][%d] E5")
    TRC_MSG(TRC_MRE_SSO_E, "[SSO] @[%d][%d] E")
    TRC_MSG(TRC_MRE_SSO_LOG, "[SSO] LOG[%d][%d][%d][%d][0x%x][0x%x] @[%d][%d]")
    
    TRC_MSG(TRC_MRE_VMALARM_101, "vm_alarm_set: get current app handle fail")
    TRC_MSG(TRC_MRE_VMALARM_107, "vm_alarm_set: get memory fail")
    TRC_MSG(TRC_MRE_VMALARM_124, "vm_alarm_set: get resource fail")
    TRC_MSG(TRC_MRE_VMALARM_142, "vm_alarm_set: set alarm success, id=%d, ret=%d")
    TRC_MSG(TRC_MRE_VMALARM_147, "vm_alarm_set: srv reminder invalid time, id=%d, ret=%d")
    TRC_MSG(TRC_MRE_VMALARM_152, "vm_alarm_set: srv reminder set fail, id=%d, ret=%d")
    TRC_MSG(TRC_MRE_VMALARM_157, "vm_alarm_set: srv reminder stop, id=%d, ret=%d")
    TRC_MSG(TRC_MRE_VMALARM_162, "vm_alarm_set: set alarm fail, id=%d, ret=%d")
    TRC_MSG(TRC_MRE_VMALARM_179, "vm_alarm_cancel: no process for id=%d")
    TRC_MSG(TRC_MRE_VMALARM_187, "vm_alarm_cancel: cancel from another app, %d, %d")
    TRC_MSG(TRC_MRE_VMALARM_194, "vm_alarm_cancel: no resource for id=%d")
    TRC_MSG(TRC_MRE_VMALARM_202, "vm_alarm_cancel: release resource fail, id=%d")
    TRC_MSG(TRC_MRE_VMALARM_210, "vm_alarm_cancel: srv reminder cancel fail, id=%d")
    TRC_MSG(TRC_MRE_VMALARM_214, "vm_alarm_cancel: cancel alarm success, alarm_id=%d")
    TRC_MSG(TRC_MRE_VMALARM_227, "vm_alarm_expire_handler: no resource for id=%d")
    TRC_MSG(TRC_MRE_VMALARM_231, "vm_alarm_expire_handler: alarm expire, alarm_id=%d")
    TRC_MSG(TRC_MRE_VMALARM_240, "vm_alarm_expire_handler: release resource fail, id=%d")
    TRC_MSG(TRC_MRE_VMALARM_250, "vm_alarm_notify_hdlr: reminder_type=%d, usr_data=%d")
    TRC_MSG(TRC_MRE_VMALARM_280, "vm_alarm_mibr_notify_callback: cancel alarm_id=%d")
    TRC_MSG(TRC_MRE_VMALARM_302, "vm_alarm_finialize: cancel alarm_id=%d")
    TRC_MSG(TRC_MRE_VMALARM_343, "_vm_reg_alarm_modual : failed to register alarm module. errorcode=%d")

    
    TRC_MSG(TRC_MRE_SSL_S, "[SSL] @[%d][%d] S")
    TRC_MSG(TRC_MRE_SSL_E1, "[SSL] @[%d][%d] E1")
    TRC_MSG(TRC_MRE_SSL_E2, "[SSL] @[%d][%d] E2")
    TRC_MSG(TRC_MRE_SSL_E3, "[SSL] @[%d][%d] E3")
    TRC_MSG(TRC_MRE_SSL_E4, "[SSL] @[%d][%d] E4")
    TRC_MSG(TRC_MRE_SSL_E5, "[SSL] @[%d][%d] E5")
    TRC_MSG(TRC_MRE_SSL_E6, "[SSL] @[%d][%d] E6")
    TRC_MSG(TRC_MRE_SSL_E7, "[SSL] @[%d][%d] E7")
    TRC_MSG(TRC_MRE_SSL_E8, "[SSL] @[%d][%d] E8")
    TRC_MSG(TRC_MRE_SSL_E9, "[SSL] @[%d][%d] E9")
    TRC_MSG(TRC_MRE_SSL_E, "[SSL] @[%d][%d] E")
    TRC_MSG(TRC_MRE_SSL_LOG, "[SSL] LOG[%d][%d][%d][%d][0x%x][0x%x] @[%d][%d]")
    
    TRC_MSG(TRC_MRE_OPERA_S, "[OPERA] @[%d][%d] S")
    TRC_MSG(TRC_MRE_OPERA_E1, "[OPERA] @[%d][%d] E1")
    TRC_MSG(TRC_MRE_OPERA_E2, "[OPERA] @[%d][%d] E2")
    TRC_MSG(TRC_MRE_OPERA_E3, "[OPERA] @[%d][%d] E3")
    TRC_MSG(TRC_MRE_OPERA_E4, "[OPERA] @[%d][%d] E4")
    TRC_MSG(TRC_MRE_OPERA_E5, "[OPERA] @[%d][%d] E5")
    TRC_MSG(TRC_MRE_OPERA_E, "[OPERA] @[%d][%d] E")
    TRC_MSG(TRC_MRE_OPERA_LOG, "[OPERA] LOG[%d][%d][%d][%d][0x%x][0x%x] @[%d][%d]")
    
    TRC_MSG(TRC_MRE_COMMON_UI_REG_FAIL, "_vm_reg_common_ui_module : failed to register common ui module. errorcode=%d")
    TRC_MSG(TRC_MRE_COMMON_UI_MIBR_CB_CANCEL, "vm_common_ui_mibr_notify_callback: cancel common_ui_id=%d")
    TRC_MSG(TRC_MRE_COMMON_UI_FINIALIZE_CANCEL, "vm_common_ui_finialize: cancel common_ui_id=%d")
    TRC_MSG(TRC_MRE_COMMON_UI_BASIC_INFO, "vm_common_ui_show: ui_type=%d, behavior_mask=%d")
    TRC_MSG(TRC_MRE_COMMON_UI_POPUP_INFO, "vm_common_ui_show: popup_type=%d")
    TRC_MSG(TRC_MRE_COMMON_UI_CONFIRM_INFO, "vm_common_ui_show: confirm_type=%d, confirm_popup_type=%d")
    TRC_MSG(TRC_MRE_COMMON_UI_CONFIRM_GET_CUR_HANDLE_FAIL, "vm_nmgr_confirm_popup: get current app handle fail")
    TRC_MSG(TRC_MRE_COMMON_UI_CONFIRM_GET_MEM_FAIL, "vm_nmgr_confirm_popup: get memory fail")
    TRC_MSG(TRC_MRE_COMMON_UI_CONFIRM_SAVE_RES_FAIL, "vm_nmgr_confirm_popup: get resource fail")
    TRC_MSG(TRC_MRE_COMMON_UI_CONFIRM_RESLEASE_RES_FAIL, "vm_nmgr_confirm_popup: release resource fail, id=%d")
    TRC_MSG(TRC_MRE_COMMON_UI_CONFIRM_POPUP_INFO, "vm_nmgr_confirm_popup: grp_id=%d, common_ui_id=%d")
    TRC_MSG(TRC_MRE_COMMON_UI_CONFIRM_USER_CB_GET_RES_FAIL, "confirm_popup_user_callback: no resource for id=%d")
    TRC_MSG(TRC_MRE_COMMON_UI_CONFIRM_USER_CB_WRONG_EVT_ID, "confirm_popup_user_callback: gpType=%d, evt_id=%d")
    TRC_MSG(TRC_MRE_COMMON_UI_CONFIRM_RELEASE_RES_FAIL, "confirm_popup_user_callback: release resource fail, id=%d")
    TRC_MSG(TRC_MRE_COMMON_UI_CANCEL_GET_PRO_FAIL, "vm_common_ui_cancel: no process for id=%d")
    TRC_MSG(TRC_MRE_COMMON_UI_CANCEL_FROM_OTHER_PROCESS, "vm_common_ui_cancel: cancel from another app, %d, %d")
    TRC_MSG(TRC_MRE_COMMON_UI_CANCEL_GET_RES_FAIL, "vm_common_ui_cancel: no resource for id=%d")
    TRC_MSG(TRC_MRE_COMMON_UI_CANCEL_RELEASE_RES_FAIL, "vm_common_ui_cancel: release resource fail, id=%d")    

    
    TRC_MSG(TRC_MRE_VMSOCK_DIS_WLAN_S, "[DIS WLAN] @[%d][%d] S")
    TRC_MSG(TRC_MRE_VMSOCK_DIS_WLAN_E1, "[DIS WLAN] @[%d][%d] E1")
    TRC_MSG(TRC_MRE_VMSOCK_DIS_WLAN_E2, "[DIS WLAN] @[%d][%d] E2")
    TRC_MSG(TRC_MRE_VMSOCK_DIS_WLAN_E3, "[DIS WLAN] @[%d][%d] E3")
    TRC_MSG(TRC_MRE_VMSOCK_DIS_WLAN_E4, "[DIS WLAN] @[%d][%d] E4")
    TRC_MSG(TRC_MRE_VMSOCK_DIS_WLAN_E5, "[DIS WLAN] @[%d][%d] E5")
    TRC_MSG(TRC_MRE_VMSOCK_DIS_WLAN_E, "[DIS WLAN] @[%d][%d] E")
    TRC_MSG(TRC_MRE_VMSOCK_DIS_WLAN_LOG, "[DIS WLAN] LOG[%d][%d][%d][%d][0x%x][0x%x] @[%d][%d]")

    TRC_MSG(TRC_MRE_ZLIB_S, "[ZLIB] @[%d][%d] S")
    TRC_MSG(TRC_MRE_ZLIB_E1, "[ZLIB] @[%d][%d] E1")
    TRC_MSG(TRC_MRE_ZLIB_E2, "[ZLIB] @[%d][%d] E2")
    TRC_MSG(TRC_MRE_ZLIB_E3, "[ZLIB] @[%d][%d] E3")
    TRC_MSG(TRC_MRE_ZLIB_E4, "[ZLIB] @[%d][%d] E4")
    TRC_MSG(TRC_MRE_ZLIB_E5, "[ZLIB] @[%d][%d] E5")
    TRC_MSG(TRC_MRE_ZLIB_E, "[ZLIB] @[%d][%d] E")
    TRC_MSG(TRC_MRE_ZLIB_LOG, "[ZLIB] LOG[%d][%d][%d][%d][0x%x][0x%x] @[%d][%d]")

    TRC_MSG(TRC_MRE_XYSSL_S, "[XYSSL] @[%d][%d] S")
    TRC_MSG(TRC_MRE_XYSSL_E1, "[XYSSL] @[%d][%d] E1")
    TRC_MSG(TRC_MRE_XYSSL_E2, "[XYSSL] @[%d][%d] E2")
    TRC_MSG(TRC_MRE_XYSSL_E3, "[XYSSL] @[%d][%d] E3")
    TRC_MSG(TRC_MRE_XYSSL_E4, "[XYSSL] @[%d][%d] E4")
    TRC_MSG(TRC_MRE_XYSSL_E5, "[XYSSL] @[%d][%d] E5")
    TRC_MSG(TRC_MRE_XYSSL_E, "[XYSSL] @[%d][%d] E")
    TRC_MSG(TRC_MRE_XYSSL_LOG, "[XYSSL] LOG[%d][%d][%d][%d][0x%x][0x%x] @[%d][%d]")
    
    TRC_MSG(TRC_MRE_SYNC_TCP_S, "[SYNC TCP] @[%d][%d] S")
    TRC_MSG(TRC_MRE_SYNC_TCP_E1, "[SYNC TCP] @[%d][%d] E1")
    TRC_MSG(TRC_MRE_SYNC_TCP_E2, "[SYNC TCP] @[%d][%d] E2")
    TRC_MSG(TRC_MRE_SYNC_TCP_E3, "[SYNC TCP] @[%d][%d] E3")
    TRC_MSG(TRC_MRE_SYNC_TCP_E4, "[SYNC TCP] @[%d][%d] E4")
    TRC_MSG(TRC_MRE_SYNC_TCP_E5, "[SYNC TCP] @[%d][%d] E5")
    TRC_MSG(TRC_MRE_SYNC_TCP_E6, "[SYNC TCP] @[%d][%d] E6")
    TRC_MSG(TRC_MRE_SYNC_TCP_E7, "[SYNC TCP] @[%d][%d] E7")
    TRC_MSG(TRC_MRE_SYNC_TCP_E8, "[SYNC TCP] @[%d][%d] E8")
    TRC_MSG(TRC_MRE_SYNC_TCP_E9, "[SYNC TCP] @[%d][%d] E9")
    TRC_MSG(TRC_MRE_SYNC_TCP_E, "[SYNC TCP] @[%d][%d] E")
    TRC_MSG(TRC_MRE_SYNC_TCP_LOG, "[SYNC TCP] LOG[%d][%d][%d][%d][0x%x][0x%x] @[%d][%d]")
    
    TRC_MSG(TRC_MRE_SYNC_NWSETTING_S, "[NWSETTING] @[%d][%d] S")
    TRC_MSG(TRC_MRE_SYNC_NWSETTING_E1, "[NWSETTING] @[%d][%d] E1")
    TRC_MSG(TRC_MRE_SYNC_NWSETTING_E2, "[NWSETTING] @[%d][%d] E2")
    TRC_MSG(TRC_MRE_SYNC_NWSETTING_E3, "[NWSETTING] @[%d][%d] E3")
    TRC_MSG(TRC_MRE_SYNC_NWSETTING_E4, "[NWSETTING] @[%d][%d] E4")
    TRC_MSG(TRC_MRE_SYNC_NWSETTING_E5, "[NWSETTING] @[%d][%d] E5")
    TRC_MSG(TRC_MRE_SYNC_NWSETTING_E6, "[NWSETTING] @[%d][%d] E6")
    TRC_MSG(TRC_MRE_SYNC_NWSETTING_E7, "[NWSETTING] @[%d][%d] E7")
    TRC_MSG(TRC_MRE_SYNC_NWSETTING_E8, "[NWSETTING] @[%d][%d] E8")
    TRC_MSG(TRC_MRE_SYNC_NWSETTING_E9, "[NWSETTING] @[%d][%d] E9")
    TRC_MSG(TRC_MRE_SYNC_NWSETTING_E, "[NWSETTING] @[%d][%d] E")
    TRC_MSG(TRC_MRE_SYNC_NWSETTING_LOG, "[NWSETTING] LOG[%d][%d][%d][%d][0x%x][0x%x] @[%d][%d]")
    TRC_MSG(TRC_MRE_SYNC_NWSETTING_AUTH_SWITCH_FAIL, "[Security check][NWSETTING]WLAN switch failed")
    TRC_MSG(TRC_MRE_SYNC_NWSETTING_AUTH_SWITCH_BEGIN, "[Security check][NWSETTING]WLAN switch begin")
    TRC_MSG(TRC_MRE_SYNC_NWSETTING_AUTH_INIT_FAIL, "[Security check][NWSETTING]WLAN init failed")
    TRC_MSG(TRC_MRE_SYNC_NWSETTING_AUTH_INIT_BEGIN, "[Security check][NWSETTING]WLAN init begin")

    TRC_MSG(TRC_MRE_ASYNC_SERVER_S, "[ASYNC SERVER] @[%d][%d] S")
    TRC_MSG(TRC_MRE_ASYNC_SERVER_E1, "[ASYNC SERVER] @[%d][%d] E1")
    TRC_MSG(TRC_MRE_ASYNC_SERVER_E2, "[ASYNC SERVER] @[%d][%d] E2")
    TRC_MSG(TRC_MRE_ASYNC_SERVER_E3, "[ASYNC SERVER] @[%d][%d] E3")
    TRC_MSG(TRC_MRE_ASYNC_SERVER_E4, "[ASYNC SERVER] @[%d][%d] E4")
    TRC_MSG(TRC_MRE_ASYNC_SERVER_E5, "[ASYNC SERVER] @[%d][%d] E5")
    TRC_MSG(TRC_MRE_ASYNC_SERVER_E6, "[ASYNC SERVER] @[%d][%d] E6")
    TRC_MSG(TRC_MRE_ASYNC_SERVER_E7, "[ASYNC SERVER] @[%d][%d] E7")
    TRC_MSG(TRC_MRE_ASYNC_SERVER_E8, "[ASYNC SERVER] @[%d][%d] E8")
    TRC_MSG(TRC_MRE_ASYNC_SERVER_E9, "[ASYNC SERVER] @[%d][%d] E9")
    TRC_MSG(TRC_MRE_ASYNC_SERVER_E, "[ASYNC SERVER] @[%d][%d] E")
    TRC_MSG(TRC_MRE_ASYNC_SERVER_LOG, "[ASYNC SERVER] LOG[%d][%d][%d][%d][0x%x][0x%x] @[%d][%d]")
    
        TRC_MSG(TRC_MRE_VMSETTINGSRV_101, "vm_setting_srv_command: cb is null")
    TRC_MSG(TRC_MRE_VMSETTINGSRV_102, "vm_setting_srv_command: cb is not null")
    TRC_MSG(TRC_MRE_VMSETTINGSRV_103, "vm_setting_srv_run_callback: res_id = %d")
    TRC_MSG(TRC_MRE_VMSETTINGSRV_104, "vm_setting_srv_run_callback: get res data fail")
    TRC_MSG(TRC_MRE_VMSETTINGSRV_105, "vm_setting_srv_run_callback: run callback")
    TRC_MSG(TRC_MRE_VMSETTINGSRV_106, "vm_setting_srv_register_callback: get process handle fail")
    TRC_MSG(TRC_MRE_VMSETTINGSRV_107, "vm_setting_srv_register_callback: malloc mem fail")
    TRC_MSG(TRC_MRE_VMSETTINGSRV_108, "vm_setting_srv_register_callback: save data fail")
    TRC_MSG(TRC_MRE_VMSETTINGSRV_109, "_vm_reg_setting_srv_module: register module fail")
    TRC_MSG(TRC_MRE_VMSETTINGSRV_110, "vm_setting_srv_initial")
    TRC_MSG(TRC_MRE_VMSETTINGSRV_111, "vm_setting_srv_finialize")
    TRC_MSG(TRC_MRE_VMSETTINGSRV_112, "vm_setting_srv_notify_callback: sys_state = %d")
    TRC_MSG(TRC_MRE_VMSETTINGSRV_113, "vm_setting_srv_cancel")
    TRC_MSG(TRC_MRE_VMSETTINGSRV_114, "vm_setting_srv_cancel: get process handle fail")
    TRC_MSG(TRC_MRE_VMSETTINGSRV_115, "vm_setting_srv_cancel:phanle is different from current handle")
    TRC_MSG(TRC_MRE_VMSETTINGSRV_116, "vm_setting_srv_cancel:get data fail")
    TRC_MSG(TRC_MRE_VMSETTINGSRV_117, "vm_setting_srv_cancel:release data fail")
    
    TRC_MSG(TRC_MRE_DNSD_S, "[DNSD] @[%d][%d] S")
    TRC_MSG(TRC_MRE_DNSD_E1, "[DNSD] @[%d][%d] E1")
    TRC_MSG(TRC_MRE_DNSD_E2, "[DNSD] @[%d][%d] E2")
    TRC_MSG(TRC_MRE_DNSD_E3, "[DNSD] @[%d][%d] E3")
    TRC_MSG(TRC_MRE_DNSD_E4, "[DNSD] @[%d][%d] E4")
    TRC_MSG(TRC_MRE_DNSD_E, "[DNSD] @[%d][%d] E")
    TRC_MSG(TRC_MRE_DNSD_LOG, "[DNSD] LOG[%d][%d][%d][%d][0x%x][0x%x] @[%d][%d]")
    
    TRC_MSG(TRC_MRE_BTNTF_S, "[BTNTF] @[%d][%d] S")
    TRC_MSG(TRC_MRE_BTNTF_E1, "[BTNTF] @[%d][%d] E1")
    TRC_MSG(TRC_MRE_BTNTF_E2, "[BTNTF] @[%d][%d] E2")
    TRC_MSG(TRC_MRE_BTNTF_E3, "[BTNTF] @[%d][%d] E3")
    TRC_MSG(TRC_MRE_BTNTF_E4, "[BTNTF] @[%d][%d] E4")
    TRC_MSG(TRC_MRE_BTNTF_E5, "[BTNTF] @[%d][%d] E5")
    TRC_MSG(TRC_MRE_BTNTF_E, "[BTNTF] @[%d][%d] E")
    TRC_MSG(TRC_MRE_BTNTF_LOG, "[BTNTF] LOG[%d][%d][%d][%d][0x%x][0x%x] @[%d][%d]")
    
    TRC_MSG(TRC_MRE_NAT_S, "[NAT] @[%d][%d] S")
    TRC_MSG(TRC_MRE_NAT_E1, "[NAT] @[%d][%d] E1")
    TRC_MSG(TRC_MRE_NAT_E2, "[NAT] @[%d][%d] E2")
    TRC_MSG(TRC_MRE_NAT_E3, "[NAT] @[%d][%d] E3")
    TRC_MSG(TRC_MRE_NAT_E4, "[NAT] @[%d][%d] E4")
    TRC_MSG(TRC_MRE_NAT_E, "[NAT] @[%d][%d] E")
    TRC_MSG(TRC_MRE_NAT_LOG, "[NAT] LOG[%d][%d][%d][%d][0x%x][0x%x] @[%d][%d]")
    
    TRC_MSG(TRC_MRE_BTGATT_S, "[BTGATT] @[%d][%d] S")
    TRC_MSG(TRC_MRE_BTGATT_E1, "[BTGATT] @[%d][%d] E1")
    TRC_MSG(TRC_MRE_BTGATT_E2, "[BTGATT] @[%d][%d] E2")
    TRC_MSG(TRC_MRE_BTGATT_E3, "[BTGATT] @[%d][%d] E3")
    TRC_MSG(TRC_MRE_BTGATT_E4, "[BTGATT] @[%d][%d] E4")
    TRC_MSG(TRC_MRE_BTGATT_E5, "[BTGATT] @[%d][%d] E5")
    TRC_MSG(TRC_MRE_BTGATT_E, "[BTGATT] @[%d][%d] E")
    TRC_MSG(TRC_MRE_BTGATT_LOG, "[BTGATT] LOG[%d][%d][%d][%d][0x%x][0x%x] @[%d][%d]")
    
    TRC_MSG(TRC_MRE_CALL_S, "[CALL] @[%d][%d] S")
    TRC_MSG(TRC_MRE_CALL_E1, "[CALL] @[%d][%d] E1")
    TRC_MSG(TRC_MRE_CALL_E2, "[CALL] @[%d][%d] E2")
    TRC_MSG(TRC_MRE_CALL_E3, "[CALL] @[%d][%d] E3")
    TRC_MSG(TRC_MRE_CALL_E4, "[CALL] @[%d][%d] E4")
    TRC_MSG(TRC_MRE_CALL_E5, "[CALL] @[%d][%d] E5")
    TRC_MSG(TRC_MRE_CALL_E6, "[CALL] @[%d][%d] E6")
    TRC_MSG(TRC_MRE_CALL_E7, "[CALL] @[%d][%d] E7")
    TRC_MSG(TRC_MRE_CALL_E8, "[CALL] @[%d][%d] E8")
    TRC_MSG(TRC_MRE_CALL_E9, "[CALL] @[%d][%d] E9")
    TRC_MSG(TRC_MRE_CALL_E, "[CALL] @[%d][%d] E")
    TRC_MSG(TRC_MRE_CALL_LOG, "[CALL] LOG[%d][%d][%d][%d][0x%x][0x%x] @[%d][%d]")
    TRC_MSG(TRC_MRE_BTPDMS_LOGE, "[BTPDMS] LOG[%d] [%d] E")
    TRC_MSG(TRC_MRE_BTPDMS_LOGS, "[BTPDMS] LOG[%d] [%d] S")
    TRC_MSG(TRC_MRE_BTPDMS_LOGM, "[BTPDMS] LOG[%d] [%d] [%d] S")
    TRC_MSG(TRC_MRE_SMS_READ_SUCCESS, "[Security check]begin to read sms")
    TRC_MSG(TRC_MRE_SMS_READ_FAIL, "[Security check]fail to read sms")
    TRC_MSG(TRC_MRE_SMS_SEND_SUCCESS, "[Security check]begin to send sms")
    TRC_MSG(TRC_MRE_SMS_SEND_FAIL, "[Security check]fail to send sms")
    TRC_MSG(TRC_MRE_SMS_DELETE_SUCCESS, "[Security check]begin to delete sms")
    TRC_MSG(TRC_MRE_SMS_DELETE_FAIL, "[Security check]fail to delete sms")
    TRC_MSG(TRC_MRE_SMS_DELETE_LIST_SUCCESS, "[Security check]begin to delete sms list")
    TRC_MSG(TRC_MRE_SMS_DELETE_LIST_FAIL, "[Security check]fail to delete sms list")
    TRC_MSG(TRC_MRE_MMS_READ_SUCCESS, "[Security check]begin to read mms")
    TRC_MSG(TRC_MRE_MMS_READ_FAIL, "[Security check]fail to read mms")
    TRC_MSG(TRC_MRE_MMS_SEND_SUCCESS, "[Security check]begin to send mms")
    TRC_MSG(TRC_MRE_MMS_SEND_FAIL, "[Security check]fail to send mms")
    TRC_MSG(TRC_MRE_TIMER_LOGE, "[BlockTimer] LOG[%d] [%d] E")
    TRC_MSG(TRC_MRE_TIMER_LOGS, "[BlockTimer] LOG[%d] [%d] S")
    TRC_MSG(TRC_MRE_TIMER_LOGM, "[BlockTimer] LOG[%d] [%d] [%d] S")    
    TRC_MSG(TRC_MRE_BTHFP_HF_LOGE, "[BTHFPHF] LOG[%d] [%d] E")
    TRC_MSG(TRC_MRE_BTHFP_HF_LOGS, "[BTHFPHF] LOG[%d] [%d] S")
    TRC_MSG(TRC_MRE_BTHFP_HF_LOGM, "[BTHFPHF] LOG[%d] [%d] [%d] S")
    TRC_MSG(TRC_MRE_BTGATT_CM_S, "[BTGATT CM] @[%d][%d] S")
    TRC_MSG(TRC_MRE_BTGATT_CM_E1, "[BTGATT CM] @[%d][%d] E1")
    TRC_MSG(TRC_MRE_BTGATT_CM_E2, "[BTGATT CM] @[%d][%d] E2")
    TRC_MSG(TRC_MRE_BTGATT_CM_E3, "[BTGATT CM] @[%d][%d] E3")
    TRC_MSG(TRC_MRE_BTGATT_CM_E4, "[BTGATT CM] @[%d][%d] E4")
    TRC_MSG(TRC_MRE_BTGATT_CM_E5, "[BTGATT CM] @[%d][%d] E5")
    TRC_MSG(TRC_MRE_BTGATT_CM_E, "[BTGATT CM] @[%d][%d] E")
    TRC_MSG(TRC_MRE_BTGATT_CM_LOG, "[BTGATT CM] LOG[%d][%d][%d][%d][0x%x][0x%x] @[%d][%d]")
END_TRACE_MAP(MOD_MRE)

#endif /* _MMI_MRE_TRC_H_ */




