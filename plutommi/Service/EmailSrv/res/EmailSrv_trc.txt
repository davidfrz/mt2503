[APP NAME] = SRV_EMAIL
[SCOPE] = PLUTO, COSMOS
[MODULE] = MOD_MMI_INET_APP

# Emai Srv Main
TRC_MSG(MMI_EMAIL_MAIN_INIT_DOING,      "[EmailSrvMain] LINE:[%d], INITING...")
TRC_MSG(MMI_EMAIL_MAIN_INIT_ERROR,      "[EmailSrvMain] LINE:[%d], INIT ERROR, errno:[%d]")
TRC_MSG(MMI_EMAIL_MAIN_INIT_DONE,       "[EmailSrvMain] INIT Done, result:[%Msrv_email_result_enum]")
TRC_MSG(MMI_EMAIL_MAIN_FS_ERROR,        "[EmailSrvMain] LINE:[%d], FS ERROR, errno:[%d]")

# Email Srv Storage
TRC_MSG(MMI_EMAIL_STOR_FS_SEEK,         "[EmailSrvStorage] FILE:[%c], LINE:[%d], FS SEEK ERROR, errno:[%d]")
TRC_MSG(MMI_EMAIL_STOR_FS_COPY,         "[EmailSrvStorage] FILE:[%c], LINE:[%d], FS COPY ERROR, errno:[%d]")
TRC_MSG(MMI_EMAIL_STOR_FS_RENAME,       "[EmailSrvStorage] FILE:[%c], LINE:[%d], FS RENAME ERROR, errno:[%d]")
TRC_MSG(MMI_EMAIL_STOR_FS_DEL,          "[EmailSrvStorage] FILE:[%c], LINE:[%d], FS DELETE ERROR, errno:[%d]")
TRC_MSG(MMI_EMAIL_STOR_FS_OPEN,         "[EmailSrvStorage] FILE:[%c], LINE:[%d], FS OPEN ERROR, errno:[%d]")
TRC_MSG(MMI_EMAIL_STOR_FS_OPEN_ACS_DND, "[EmailSrvStorage] FILE:[%c], LINE:[%d], ACCESS DENIED")
TRC_MSG(MMI_EMAIL_STOR_FS_WRITE,        "[EmailSrvStorage] FILE:[%c], LINE:[%d], FS WRIT ERROR, errno:[%d], size:[%d]")
TRC_MSG(MMI_EMAIL_STOR_FS_READ,         "[EmailSrvStorage] FILE:[%c], LINE:[%d], FS READ ERROR, errno:[%d], size:[%d]")
TRC_MSG(MMI_EMAIL_STOR_FS_CREATE_DIR,   "[EmailSrvStorage] FILE:[%c], LINE:[%d], FS CREATE DIR ERROR, errno:[%d]")
TRC_MSG(MMI_EMAIL_STOR_MALLOC,          "[EmailSrvStorage] FILE:[%c], LINE:[%d], MALLOC FAIL, size:[%d]")
TRC_MSG(MMI_EMAIL_STOR_INIT,            "[EmailSrvStorage] FILE:[%c], LINE:[%d], STOR INIT FAIL, errno:[%d]")
TRC_MSG(MMI_EMAIL_STOR_INIT_START,      "[EmailSrvStorage] FILE:[%c], LINE:[%d], INIT START DOING ...")
TRC_MSG(MMI_EMAIL_STOR_INIT_ACCT,       "[EmailSrvStorage] FILE:[%c], LINE:[%d], INIT ACCT CHK, acct:[%d]")
TRC_MSG(MMI_EMAIL_STOR_INIT_ACCT_FLDR,  "[EmailSrvStorage] FILE:[%c], LINE:[%d], INIT ACCT CHK, acct:[%d] FLDR:[%d]")
TRC_MSG(MMI_EMAIL_STOR_INIT_CNTX,       "[EmailSrvStorage] FILE:[%c], LINE:[%d], INIT CNTX FAIL, errno:[%d]")
TRC_MSG(MMI_EMAIL_STOR_INIT_DONE,       "[EmailSrvStorage] INIT DONE **************")
TRC_MSG(MMI_EMAIL_STOR_INIT_ACCT_CHK,   "[EmailSrvStorage] FILE:[%c], LINE:[%d], INIT ACCT CHECK, res: %Msrv_email_result_enum")
TRC_MSG(MMI_EMAIL_STOR_RESTORE_START,   "[EmailSrvStorage] FILE:[%c], LINE:[%d], STOR RESTORE START")
TRC_MSG(MMI_EMAIL_STOR_ACCT_REACH_MAX,  "[EmailSrvStorage] FILE:[%c], LINE:[%d], ACCT REACH MAX, acct:[%d]")
TRC_MSG(MMI_EMAIL_STOR_FLDR_REACH_MAX,  "[EmailSrvStorage] FILE:[%c], LINE:[%d], FLDR REACH MAX, acct:[%d] fldr:[%d]")
TRC_MSG(MMI_EMAIL_STOR_OFST_REACH_MAX,  "[EmailSrvStorage] FILE:[%c], LINE:[%d], OFST REACH MAX, acct:[%d] fldr:[%d] ofst:[%d]")
TRC_MSG(MMI_EMAIL_STOR_ACCT_DEL,        "[EmailSrvStorage] FILE:[%c], LINE:[%d], ACCT DELETE,  acct:[%d], start/done:[%d]")
TRC_MSG(MMI_EMAIL_STOR_FLDR_LIST_ID,    "[EmailSrvStorage] FILE:[%c], LINE:[%d], FLDR LIST ID, acct:[%d], start/done:[%d]")
TRC_MSG(MMI_EMAIL_STOR_FLDR_DEL,        "[EmailSrvStorage] FILE:[%c], LINE:[%d], FLDR DELETE,  acct:[%d], fldr:[%d], start/done:[%d]")
TRC_MSG(MMI_EMAIL_STOR_MSG_SYNC,        "[EmailSrvStorage] FILE:[%c], LINE:[%d], MSG SYNC,     acct:[%d], fldr:[%d], ofst:[%d] start/done:[%d]")
TRC_MSG(MMI_EMAIL_STOR_MSG_DEL,         "[EmailSrvStorage] FILE:[%c], LINE:[%d], MSG DELETE,   acct:[%d], fldr:[%d], start/done:[%d]")
TRC_MSG(MMI_EMAIL_STOR_MSG_EDIT,        "[EmailSrvStorage] FILE:[%c], LINE:[%d], MSG EDIT,     acct:[%d], fldr:[%d], ofst:[%d] create/update: %Memail_stor_msg_edit_type errno: %Msrv_email_result_enum")
TRC_MSG(MMI_EMAIL_STOR_MSG_EDIT_FSM,    "[EmailSrvStorage] FILE:[%c], LINE:[%d], MSG EDIT FSM, state: %Memail_stor_msg_edit_state_enum, in/out:[%d], result: %Msrv_email_result_enum") 
TRC_MSG(MMI_EMAIL_STOR_MSG_SET_FLAG,    "[EmailSrvStorage] FILE:[%c], LINE:[%d], MSG SET FLAG, acct:[%d], fldr:[%d], start/done:[%d]")
TRC_MSG(MMI_EMAIL_STOR_MSG_LIST,        "[EmailSrvStorage] FILE:[%c], LINE:[%d], MSG LIST,     acct:[%d], fldr:[%d], start/done:[%d]")
TRC_MSG(MMI_EMAIL_STOR_MSG_NUM_UPDATE,  "[EmailSrvStorage] FILE:[%c], LINE:[%d], MSG NUM UPDATE, acct:[%d], fldr:[%d], total/unread:[%d], num:[%d]")
TRC_MSG(MMI_EMAIL_STOR_MSG_NUM_CHANGE,  "[EmailSrvStorage] FILE:[%c], LINE:[%d], MSG NUM CHANGE, total/unread:[%d], old:[%d] change:[%d] new:[%d]")
TRC_MSG(MMI_EMAIL_STOR_MSG_IND_DEL_ERR, "[EmailSrvStorage] FILE:[%c], LINE:[%d], MSG NOT FOUND IN INDEX, offset:[%d]")
TRC_MSG(MMI_EMAIL_STOR_FLDR_CREATE,     "[EmailSrvStorage] FILE:[%c], LINE:[%d], email_stor_fs_fldr_create, start/done:[%d]") 

# Emai Srv Composer
TRC_MSG(MMI_EMAIL_COMP_START,           "[EmailSrvComposer] LINE:[%d], Start by %Memail_comp_type_enum")
TRC_MSG(MMI_EMAIL_COMP_DESTORY,         "[EmailSrvComposer] LINE:[%d], Destory")
TRC_MSG(MMI_EMAIL_COMP_STOP,            "[EmailSrvComposer] LINE:[%d], Stop")
TRC_MSG(MMI_EMAIL_COMP_CHK_DESTORY,     "[EmailSrvComposer] LINE:[%d], Check destory, [%d] (Destroy:0, Abort:1)")
TRC_MSG(MMI_EMAIL_COMP_DONE,            "[EmailSrvComposer] LINE:[%d], Compose done!!! result: %Msrv_email_result_enum")

# Email Network Function
TRC_MSG(SRV_EMAIL_FUNC_NWK_CREATE, "[EmailSrvNwk] Create network handle, acct_id[%d], incoming[%d], handle[%x].")
TRC_MSG(SRV_EMAIL_FUNC_NWK_DESTROY, "[EmailSrvNwk] Destroy network handle, handle[%x].")
TRC_MSG(SRV_EMAIL_FUNC_NWK_SET_PROC_NOTIFY, "[EmailSrvNwk] Set the process notify, handle[%x], callback[%x], user_data[%x].")
TRC_MSG(SRV_EMAIL_FUNC_NWK_SET_FINISH_NOTIFY, "[EmailSrvNwk] Set the finish notify, handle[%x], callback[%x], user_data[%x].")
TRC_MSG(SRV_EMAIL_FUNC_NWK_CONNECT, "[EmailSrvNwk] Connect the server, handle[%x].")
TRC_MSG(SRV_EMIAL_FUNC_NWK_DISCONNECT, "[EmailSrvNwk] Disconnect the server, handle[%x].")
TRC_MSG(SRV_EMAIL_FUNC_NWK_SEND, "[EmailSrvNwk] Send the email(s), handle[%x], opt[%x].")
TRC_MSG(SRV_EMAIL_FUNC_NWK_RETRIEVE, "[EmailSrvNwk] Retrieve the email, handle[%x], opt[%x].")
TRC_MSG(SRV_EMAIL_FUNC_NWK_RECEIVE, "[EmailSrvNwk] Receive the email(s), handle[%x], opt[%x].")
TRC_MSG(SRV_EMAIL_FUNC_NWK_SYNC, "[EmailSrvNwk] Sync the email(s), handle[%x], opt[%x].")
TRC_MSG(SRV_EMAIL_FUNC_NWK_LIST_FOLDER, "[EmailSrvNwk] List the remote folders, handle[%x], opt[%x].")
TRC_MSG(SRV_EMAIL_FUNC_NWK_REFRESH, "[EmailSrvNwk] Refresh inbox, handle[%x], opt[%x].")
TRC_MSG(SRV_EMAIL_FUNC_NWK_ABORT, "[EmailSrvNwk] Network abort, handle[%x].")

TRC_MSG(SRV_EMAIL_FUNC_NWK_BEARER_INFO_IND, "[EmailSrvNwk] Bearer info indication received, nwk_cntx[%x], nwk_acct_id[%x], bearer_state[%d].")
TRC_MSG(SRV_EMAIL_FUNC_NWK_BEARER_EVENT_IND, "[EmailSrvNwk] Bearer event indication received, nwk_cntx[%x], nwk_acct_id[%x], event[%d].")
TRC_MSG(SRV_EMAIL_FUNC_NWK_FSM_REFRESH, "[EmailSrvNwk] Network context[%x] refresh the inbox, flag[%d], type[%x].")
TRC_MSG(SRV_EMAIL_FUNC_NWK_FSM_INIT, "[EmailSrvNwk] Network context[%x] initialize.")
TRC_MSG(SRV_EMAIL_FUNC_NWK_FSM_CREATED, "[EmailSrvNwk] Network context[%x] PS instance created, destroy[%d], abort[%d].")
TRC_MSG(SRV_EMAIL_FUNC_NWK_FSM_ACTIVATED, "[EmailSrvNwk] Network context[%x] bearer activated, abort[%d].")
TRC_MSG(SRV_EMAIL_FUNC_NWK_FSM_CONNECTED, "[EmailSrvNwk] Network context[%x] server connected, protocol[%d], auth_type[%d].")
TRC_MSG(SRV_EMAIL_FUNC_NWK_FSM_AUTHORIZED, "[EmailSrvNwk] Network context[%x] authorized, reauth[%d], protocol[%d].")
TRC_MSG(SRV_EMAIL_FUNC_NWK_FSM_QUERIED, "[EmailSrvNwk] Network context[%x] user info queried.")
TRC_MSG(SRV_EMAIL_FUNC_NWK_FSM_READY, "[EmailSrvNwk] Network context[%x] ready, action[%d].")
TRC_MSG(SRV_EMAIL_FUNC_NWK_FSM_UPDATED, "[EmailSrvNwk] Network context[%x] updated, action[%d].")
TRC_MSG(SRV_EMAIL_FUNC_NWK_FSM_SENT, "[EmailSrvNwk] Network context[%x] email(s) sent.")
TRC_MSG(SRV_EMAIL_FUNC_NWK_FSM_RECEIVED, "[EmailSrvNwk] Network context[%x] email(s) received, fldr_index[%d], fldr_count[%d].")
TRC_MSG(SRV_EMAIL_FUNC_NWK_FSM_SYNCED, "[EmailSrvNwk] Network context[%x] email(s) synced, action[%d], fldr_index[%d], fldr_count[%d].")
TRC_MSG(SRV_EMAIL_FUNC_NWK_FSM_FOLDER_LISTED, "[EmailSrvNwk] Network context[%x] remote folders listed, prev_state[%d].")
TRC_MSG(SRV_EMAIL_FUNC_NWK_FSM_DISCONNECTED, "[EmailSrvNwk] Network context[%x] disconnected.")
TRC_MSG(SRV_EMAIL_FUNC_NWK_FSM_ERROR, "[EmailSrvNwk] Network context[%x] FSM error, state[%d], major[%d], minor[%d].")
TRC_MSG(SRV_EMAIL_FUNC_NWK_FSM_QUERY_DONE, "[EmailSrvNwk] Network context querys user info done.")
TRC_MSG(SRV_EMAIL_FUNC_NWK_FSM_SEND_DONE, "[EmailSrvNwk] Network context sends email(s) done.")
TRC_MSG(SRV_EMAIL_FUNC_NWK_FSM_UPDATE_DONE, "[EmailSrvNwk] Network context updates done.")
TRC_MSG(SRV_EMAIL_FUNC_NWK_FSM_RECEIVE_DONE, "[EmailSrvNwk] Network context recieves emails done.")
TRC_MSG(SRV_EMAIL_FUNC_NWK_FSM_SYNC_DONE, "[EmailSrvNwk] Network context syncs emails done.")
TRC_MSG(SRV_EMAIL_FUNC_NWK_FSM_LIST_FOLDER_DONE, "[EmailSrvNwk] Network context lists remote folders done.")
TRC_MSG(SRV_EMAIL_FUNC_NWK_FSM_DISCONNECT_DONE, "[EmailSrvNwk] Network context disconnects server done.")
TRC_MSG(SRV_EMAIL_FUNC_NWK_FSM_REFRESH_DONE, "[EmailSrvNwk] Network context refreshes inbox done.")
TRC_MSG(SRV_EMAIL_FUNC_NWK_FSM_ABORT, "[EmailSrvNwk] Network context[%x] FSM abort, state[%d].")
TRC_MSG(SRV_EMAIL_FUNC_NWK_FSM_DISCONNECT_IND, "[EmailSrvNwk] Network context[%x] is disconnected, state[%d].")
TRC_MSG(SRV_EMAIL_FUNC_NWK_FSM_IMAP4_PUSH_IND, "[EmailSrvNwk] Network context[%x] receives IMAP4 push[%d], state[%d], refresh_flag[%d], refresh_type[%x].")

TRC_MSG(SRV_EMAIL_FUNC_NWK_OPEN_BEARER, "[EmailSrvNwk] Open bearer[%x], ret[%d].")
TRC_MSG(SRV_EMAIL_FUNC_NWK_GET_BEARER_STATUS, "[EmailSrvNwk] Get bearer[%x] status[%d].")
TRC_MSG(SRV_EMAIL_FUNC_NWK_RELEASE_BEARER, "[EmailSrvNwk] Release bearer[%x], app_id[%d].")

TRC_MSG(SRV_EMAIL_FUNC_NWK_GET_CBM_APP_INFO, "[EmailSrvNwk] Get app info, ret[%d], str_id[%d], icon_id[%d].")
TRC_MSG(SRV_EMAIL_FUNC_NWK_REGISTER_CBM_APP_ID, "[EmailSrvNwk] Register app id, ret[%d], app_id[%d].")
TRC_MSG(SRV_EMAIL_FUNC_NWK_DEREGISTER_CBM_APP_ID, "[EmailSrvNwk] Deregister app id, ret[%d], app_id[%d].")

TRC_MSG(SRV_EMAIL_FUNC_SMTP_LOAD_LOCAL_MSG, "[EmailSrvNwk] SMTP context[%x] loads local msgs.")
TRC_MSG(SRV_EMAIL_FUNC_SMTP_COMPOSE_MSG_DONE, "[EmailSrvNwk] SMTP context[%x] composes msg done, ret[%d], major[%d], minor[%d].")
TRC_MSG(SRV_EMAIL_FUNC_SMTP_COMPOSE_MSG, "[EmailSrvNwk] SMTP context[%x] starts composing msg, first[%d].")
TRC_MSG(SRV_EMAIL_FUNC_SMTP_SEND_FSM_INIT, "[EmailSrvNwk] SMTP context[%x] SEND FSM initialize, send outbox[%d], msg_handle[%d] or msg_id[%d].")
TRC_MSG(SRV_EMAIL_FUNC_STMP_SEND_FSM_LISTED, "[EmailSrvNwk] SMTP context[%x] SEND FSM listed, curr_count[%d], total_count[%d].")
TRC_MSG(SRV_EMAIL_FUNC_SMTP_SEND_FSM_COMPOSED, "[EmailSrvNwk] SMTP context[%x] SEND FSM composed.")
TRC_MSG(SRV_EMAIL_FUNC_SMTP_SEND_FSM_SENT, "[EmailSrvNwk] SMTP context[%x] SEND FSM sent.")
TRC_MSG(SRV_EMAIL_FUNC_SMTP_SEND_FSM_DONE, "[EmailSrvNwk] SMTP context[%x] SEND FSM done, callback[%x], ret[%d], major[%d], minor[%d].")
TRC_MSG(SRV_EMAIL_FUNC_SMTP_SEND_ABORT, "[EmailSrvNwk] SMTP context[%x] SEND FSM abort, sub_state[%d].")
TRC_MSG(SRV_EMAIL_FUNC_SMTP_PROC_OM_NOTIFY, "[EmailSrvNwk] SMTP context[%x] processes the OM notify, sub_state[%d], type[%d].")

TRC_MSG(SRV_EMAIL_FUNC_POP3_LOAD_LOCAL_MSG, "[EmailSrvNwk] POP3 context[%x] loads local msg callback.")
TRC_MSG(SRV_EMAIL_FUNC_POP3_UPDATE_FSM_INIT, "[EmailSrvNwk] POP3 context[%x] UPDATE FSM initializes.")
TRC_MSG(SRV_EMAIL_FUNC_POP3_UPDATE_FSM_FLDR_OPENED, "[EmailSrvNwk] POP3 context[%x] UPDATE FSM fldr opened, total_msg[%d].")
TRC_MSG(SRV_EMAIL_FUNC_POP3_UPDATE_FSM_UID_LISTED, "[EmailSrvNwk] POP3 context[%x] UPDATE FSM uid listed, curr_count[%d], total_count[%d].")
TRC_MSG(SRV_EMAIL_FUNC_POP3_UPDATE_FSM_SIZE_LISTED, "[EmailSrvNwk] POP3 context[%x] UPDATE FSM size listed, curr_count[%d], total_count[%d].")
TRC_MSG(SRV_EMAIL_FUNC_POP3_UPDATE_FSM_LOCAL_UPDATED, "[EmailSrvNwk] POP3 context[%x] UPDATE FSM local updated.")
TRC_MSG(SRV_EMAIL_FUNC_POP3_UPDATE_FSM_DONE, "[EmailSrvNwk] POP3 context[%x] UPDATE FSM done, ret[%d], major[%d], minor[%d].")
TRC_MSG(SRV_EMAIL_FUNC_POP3_MSG_PARSE_SAVE_DONE, "[EmailSrvNwk] POP3 context[%x] parse/save msg done, ret[%d], major[%d], minor[%d].")
TRC_MSG(SRV_EMAIL_FUNC_POP3_RECV_FSM_INIT, "[EmailSrvNwk] POP3 context[%x] RECV FSM initializes.")
TRC_MSG(SRV_EMAIL_FUNC_POP3_RECV_FSM_RECEIVED, "[EmailSrvNwk] POP3 context[%x] RECV FSM received.")
TRC_MSG(SRV_EMAIL_FUNC_POP3_RECV_FSM_PARSED, "[EmailSrvNwk] POP3 context[%x] RECV FSM parsed.")
TRC_MSG(SRV_EMAIL_FUNC_POP3_RECV_FSM_SAVED, "[EmailSrvNwk] POP3 context[%x] RECV FSM saved.")
TRC_MSG(SRV_EMAIL_FUNC_POP3_RECV_FSM_DONE, "[EmailSrvNwk] POP3 context[%x] RECV FSM done, ret[%d], major[%d], minor[%d].")
TRC_MSG(SRV_EMAIL_FUNC_POP3_DISC_FSM_INIT, "[EmailSrvNwk] POP3 context[%x] DISC FSM initializes.")
TRC_MSG(SRV_EMAIL_FUNC_POP3_DISC_FSM_SERVER_DELETED, "[EmailSrvNwk] POP3 context[%x] DISC FSM server deleted.")
TRC_MSG(SRV_EMAIL_FUNC_POP3_DISC_FSM_DISCONNECTED, "[EmailSrvNwk] POP3 context[%x] DISC FSM disconnected, fail_flag[%d].")
TRC_MSG(SRV_EMAIL_FUNC_POP3_DISC_FSM_LOCAL_DELETED, "[EmailSrvNwk] POP3 context[%x] DISC FSM local deleted.")
TRC_MSG(SRV_EMAIL_FUNC_POP3_DISC_FSM_DONE, "[EmailSrvNwk] POP3 context[%x] DISC FSM done, ret[%d], major[%d], minor[%d].")
TRC_MSG(SRV_EMAIL_FUNC_POP3_UPDATE_ABORT, "[EmailSrvNwk] POP3 context[%x] UPDATE FSM abort, sub_state[%d].")
TRC_MSG(SRV_EMAIL_FUNC_POP3_RECV_ABORT, "[EmailSrvNwk] POP3 context[%x] RECV FSM abort, sub_state[%d].")
TRC_MSG(SRV_EMAIL_FUNC_POP3_PROC_OM_NOTIFY, "[EmailSrvNwk] POP3 context[%x] processes the OM notify, type[%d].")

TRC_MSG(SRV_EMAIL_FUNC_IMAP4_DECODE, "[EmailSrvNwk] IMAP4 context[%x] decodes base64/QP callback.")
TRC_MSG(SRV_EMAIL_FUNC_IMAP4_PARSE_DRM, "[EmailSrvNwk] IMAP4 context[%x] parses drm callback, ret[%d].")
TRC_MSG(SRV_EMAIL_FUNC_IMAP4_PARSE_ABORT, "[EmailSrvNwk] IMAP4 context parse abort, parse_state[%d].")
TRC_MSG(SRV_EMAIL_FUNC_IMAP4_LOAD_LOCAL_MSG, "[EmailSrvNwk] IMAP4 context[%x] loads local msg callback.")
TRC_MSG(SRV_EMAIL_FUNC_IMAP4_UPDATE_FSM_INIT, "[EmailSrvNwk] IMAP4 context[%x] UPDATE FSM initializes, fldr_id[%x].")
TRC_MSG(SRV_EMAIL_FUNC_IMAP4_UPDATE_FSM_FLDR_OPENED, "[EmailSrvNwk] IMAP4 context[%x] UPDATE FSM fldr opened, total_msg[%d].")
TRC_MSG(SRV_EMAIL_FUNC_IMAP4_UPDATE_FSM_UID_LISTED, "[EmailSrvNwk] IMAP4 context[%x] UPDATE FSM uid listed, curr_count[%d], total_count[%d].")
TRC_MSG(SRV_EMAIL_FUNC_IMAP4_UPDATE_FSM_SIZE_LISTED, "[EmailSrvNwk] IMAP4 context[%x] UPDATE FSM size listed, curr_count[%d], total_count[%d].")
TRC_MSG(SRV_EMAIL_FUNC_IMAP4_UPDATE_FSM_FLAG_LISTED, "[EmailSrvNwk] IMAP4 context[%x] UPDATE FSM flag listed, curr_count[%d], total_count[%d].")
TRC_MSG(SRV_EMAIL_FUNC_IMAP4_UPDATE_FSM_LOCAL_UPDATED, "[EmailSrvNwk] IMAP4 context[%x] UPDATE FSM local updated.")
TRC_MSG(SRV_EMAIL_FUNC_IMAP4_UPDATE_FSM_DONE, "[EmailSrvNwk] IMAP4 context[%x] UPDATE FSM done, ret[%d], major[%d], minor[%d].")
TRC_MSG(SRV_EMAIL_FUNC_IMAP4_STOR_QUERY_TEXT, "[EmailSrvNwk] IMAP4 context[%x] storage query text, type[%d].")
TRC_MSG(SRV_EMAIL_FUNC_IMAP4_STOR_QUERY_ADDR, "[EmailSrvNwk] IMAP4 context[%x] storage query address, type[%d], index[%d].")
TRC_MSG(SRV_EMAIL_FUNC_IMAP4_STOR_QUERY_ATTACH, "[EmailSrvNwk] IMAP4 context[%x] storage query attach, type[%d].")
TRC_MSG(SRV_EMAIL_FUNC_IMAP4_MSG_SAVE_DONE, "[EmailSrvNwk] IMAP4 context[%x] save msg done, ret[%d], msg_id[%x].")
TRC_MSG(SRV_EMAIL_FUNC_IMAP4_RECV_FSM_INIT, "[EmailSrvNwk] IMAP4 context[%x] RECV FSM initializes, fetch_type[%d].")
TRC_MSG(SRV_EMAIL_FUNC_IMAP4_RECV_FSM_RECEIVED, "[EmailSrvNwk] IMAP4 context[%x] RECV FSM received, fetch_type[%d].")
TRC_MSG(SRV_EMAIL_FUNC_IMAP4_RECV_FSM_PARSED, "[EmailSrvNwk] IMAP4 context[%x] RECV FSM parsed, fetch_type[%d].")
TRC_MSG(SRV_EMAIL_FUNC_IMAP4_RECV_FSM_SAVED, "[EmailSrvNwk] IMAP4 context[%x] RECV FSM saved.")
TRC_MSG(SRV_EMAIL_FUNC_IMAP4_RECV_FSM_DONE, "[EmailSrvNwk] IMAP4 context[%x] RECV FSM done, ret[%d], major[%d], minor[%d].")
TRC_MSG(SRV_EMAIL_FUNC_IMAP4_LIST_FLDR_FSM_INIT, "[EmailSrvNwk] IMAP4 context[%x] LIST_FLDR FSM initializes.")
TRC_MSG(SRV_EMAIL_FUNC_IMAP4_LIST_FLDR_FSM_SERVER_LISTED, "[EmailSrvNwk] IMAP4 context[%x] LIST_FLDR FSM server listed.")
TRC_MSG(SRV_EMAIL_FUNC_IMAP4_LIST_FLDR_FSM_LOCAL_LISTED, "[EmailSrvNwk] IMAP4 context[%x] LIST_FLDR FSM local listed.")
TRC_MSG(SRV_EMAIL_FUNC_IMAP4_UPDATE_ABORT, "[EmailSrvNwk] IMAP4 context[%x] UPDATE FSM abort, sub_state[%d].")
TRC_MSG(SRV_EMAIL_FUNC_IMAP4_RECV_ABORT, "[EmailSrvNwk] IMAP4 context[%x] RECV FSM abort, sub_state[%d].")
TRC_MSG(SRV_EMAIL_FUNC_IMAP4_LIST_FLDR_ABORT, "[EmailSrvNwk] IMAP4 context[%x] LIST_FLDR FSM abort, sub_state[%d].")
TRC_MSG(SRV_EMAIL_FUNC_IMAP4_PROC_OM_NOTIFY, "[EmailSrvNwk] IMAP4 context[%x] processes the OM notify, type[%d].")

TRC_MSG(SRV_EMAIL_FUNC_NWK_EMN_RECEIVED, "[EmailSrvNwk] EMN received, callback[%x].")
TRC_MSG(SRV_EMAIL_FUNC_NWK_OTAP_RECEIVED, "[EmailSrvNwk] OTAP received, callback[%x].")

# Email Network State
TRC_MSG(SRV_EMAIL_STATE_NWK_FSM_SET_STATE, "[EmailSrvNwk] Network context[%x] changes state[%d].")
TRC_MSG(SRV_EMAIL_STATE_SMTP_SET_SUB_STATE, "[EmailSrvNwk] SMTP context[%x] changes sub_state[%d].")
TRC_MSG(SRV_EMAIL_STATE_POP3_SET_SUB_STATE, "[EmailSrvNwk] POP3 context[%x] changes sub_state[%d].")
TRC_MSG(SRV_EMAIL_STATE_IMAP4_SET_SUB_STATE, "[EmailSrvNwk] IMAP4 context[%x] changes sub_state[%d].")

# Email Network Info
TRC_MSG(SRV_EMAIL_INFO_NWK_SEND_OPTION, "[EmailSrvNwk] Send option, send_outbox[%d], msg_handle[%x], msg_id[%x], move_to_sent[%d].")
TRC_MSG(SRV_EMAIL_INFO_NWK_RETRIEVE_OPTION, "[EmailSrvNwk] Retrieve option, fldr_id[%x], msg_id[%x], opt[%d], attach_id[%x].")
TRC_MSG(SRV_EMAIL_INFO_NWK_RECEIVE_OPTION, "[EmailSrvNwk] Receive option, all_fldr[%d], fldr_id[%x], opt[%d].")
TRC_MSG(SRV_EMAIL_INFO_NWK_SYNC_OPTION, "[EmailSrvNwk] Sync option, all_fldr[%d], fldr_id[%x], all_msg[%d], msg_id[%x].")
TRC_MSG(SRV_EMAIL_INFO_NWK_LIST_FOLDER_OPTION, "[EmailSrvNwk] List remote folder option, fldr_num[%d], subscribed_only[%d].")
TRC_MSG(SRV_EMAIL_INFO_NWK_REFRESH_OPTION, "[EmailSrvNwk] Refresh option, opt[%d].")

TRC_MSG(SRV_EMAIL_INFO_NWK_CNTX_BEARER_STATE, "[EmailSrvNwk] Network context[%x], state[%d], wait_bearer[%x].")
TRC_MSG(SRV_EMAIL_INFO_NWK_FSM_SEND, "[EmailSrvNwk] Network context[%x] sends email, retval[%d].")
TRC_MSG(SRV_EMAIL_INFO_NWK_FSM_UPDATE, "[EmailSrvNwk] Network context[%x] updates folder[%x], retval[%d].")
TRC_MSG(SRV_EMAIL_INFO_NWK_FSM_RETRIEVE, "[EmailSrvNwk] Network context[%x] retrieves email, retval[%d].")
TRC_MSG(SRV_EMAIL_INFO_NWK_FSM_RECEIVE, "[EmailSrvNwk] Network context[%x] receives emails, retval[%d].")
TRC_MSG(SRV_EMAIL_INFO_NWK_FSM_SYNC, "[EmailSrvNwk] Network context[%x] syncs email(s), retval[%d].")
TRC_MSG(SRV_EMAIL_INFO_NWK_FSM_LIST_FOLDER, "[EmailSrvNwk] Network context[%x] lists remote folders, retval[%d].")
TRC_MSG(SRV_EMAIL_INFO_NWK_FSM_REFRESH, "[EmailSrvNwk] Network context[%x] refresh the inbox, retval[%d].")

TRC_MSG(SRV_EMAIL_INFO_SMTP_COMPOSE_MSG, "[EmailSrvNwk] SMTP context[%x] composes msg return[%d].")
TRC_MSG(SRV_EMAIL_INFO_SMTP_OM_DEL_MSG_CURR_RECORD, "[EmailSrvNwk] SMTP context[%x] deletes the current sending msg.")
TRC_MSG(SRV_EMAIL_INFO_SMTP_OM_DEL_MSG_ALREADY_SENT, "[EmailSrvNwk] SMTP context[%x] deletes the sent msg.")

TRC_MSG(SRV_EMAIL_INFO_NWK_EMN_NO_ACCT_IN_LOCAL, "[EmailSrvNwk] EMN received but no account in local.")
TRC_MSG(SRV_EMAIL_INFO_NWK_EMN_PARSE_DONE, "[EmailSrvNwk] EMN parse done, matched_acct_id[%d].")

TRC_MSG(SRV_EMAIL_INFO_NWK_OTAP_PARSE_DONE, "[EmailSrvNwk] OTAP parse done, ret[%d].")

TRC_MSG(SRV_EMAIL_INFO_NWK_DEV_PLUG_IN, "[EmailSrvNwk] Plug in device[%c], email_drv[%c], cloud_drv[%c], card_used[%d].")

# Email Network Error
TRC_MSG(SRV_EMAIL_ERROR_NWK_HANDLE_INVALID, "[EmailSrvNwk] Network handle[%x] is invalid.")
TRC_MSG(SRV_EMAIL_ERROR_NWK_IN_PROGRESS, "[EmailSrvNwk] Network handle[%x] is in progress, action[%d].")
TRC_MSG(SRV_EMAIL_ERROR_NWK_STATE_WRONG, "[EmailSrvNwk] Network handle[%x] is in wrong state[%d].")
TRC_MSG(SRV_EMAIL_ERROR_NWK_NO_OPERATION, "[EmailSrvNwk] No operation in this Network handle[%x].")

TRC_MSG(SRV_EMAIL_ERROR_NWK_FSM_INIT, "[EmailSrvNwk] Network context[%x] initializes fail, index[%d], major[%d], minor[%d].")
TRC_MSG(SRV_EMAIL_ERROR_NWK_FSM_CREATED, "[EmailSrvNwk] Network context[%x] activates bearer fail, index[%d], major[%d], minor[%d].")

TRC_MSG(SRV_EMAIL_ERROR_NWK_CONTEXT_INVALID, "[EmailSrvNwk] Network context[%x] is invalid.")

TRC_MSG(SRV_EMAIL_ERROR_SMTP_GET_BASIC_FLDR_INFO, "[EmailSrvNwk] SMTP context[%x] gets basic folder info fail, ret[%d].")
TRC_MSG(SRV_EMAIL_ERROR_SMTP_MSG_GET_RCPT, "[EmailSrvNwk] SMTP context[%x] gets msg recipients fail, ret[%d].")
TRC_MSG(SRV_EMAIL_ERROR_SMTP_COMPOSE_BY_MSG_HANDLE, "[EmailSrvNwk] SMTP context[%x] composes msg by handle fail, ret[%d].")
TRC_MSG(SRV_EMAIL_ERROR_SMTP_STOR_GET_MSG_HEADER, "[EmailSrvNwk] SMTP context[%x] gets msg header fail, ret[%d].")
TRC_MSG(SRV_EMAIL_ERROR_SMTP_STOR_GET_MSG_ADDR_OPEN, "[EmailSrvNwk] SMTP context[%x] gets msg address open fail, ret[%d].")
TRC_MSG(SRV_EMAIL_ERROR_SMTP_STOR_GET_MSG_ADDR_NEXT, "[EmailSrvNwk] SMTP context[%x] gets msg address next fail, ret[%d].")
TRC_MSG(SRV_EMAIL_ERROR_SMTP_COMPOSE_BY_MSG_ID, "[EmailSrvNwk] SMTP context[%x] composes msg by id fail, ret[%d].")
TRC_MSG(SRV_EMAIL_ERROR_SMTP_COMPOSE_MSG, "[EmailSrvNwk] SMTP context[%x] composes msg fail, major[%d], minor[%d].")
TRC_MSG(SRV_EMAIL_ERROR_SMTP_GET_FLDR_INFO, "[EmailSrvNwk] SMTP context[%x] gets folder[%x] info fail, ret[%d].")
TRC_MSG(SRV_EMAIL_ERROR_SMTP_STOR_GET_MSG_OPEN, "[EmailSrvNwk] SMTP context[%x] gets msg open fail, ret[%d].")
TRC_MSG(SRV_EMAIL_ERROR_SMTP_STOR_GET_MSG_NEXT, "[EmailSrvNwk] SMTP context[%x] gets msg next fail, ret[%d], curr_count[%d].")
TRC_MSG(SRV_EMAIL_ERROR_SMTP_COMP_CREATE_HANDLE, "[EmailSrvNwk] SMTP context[%x] creates composer handle fail, ret[%d].")
TRC_MSG(SRV_EMAIL_ERROR_SMTP_STOR_MOVE_MSG, "[EmailSrvNwk] SMTP context[%x] moves msg fail, ret[%d].")
TRC_MSG(SRV_EMAIL_ERROR_SMTP_STOR_DEL_MSG_OPEN, "[EmailSrvNwk] SMTP context[%x] deletes msg open fail, ret[%d].")
TRC_MSG(SRV_EMAIL_ERROR_SMTP_STOR_DEL_MSG_NEXT, "[EmailSrvNwk] SMTP context[%x] deletes msg next fail, ret[%d].")
TRC_MSG(SRV_EMAIL_ERROR_SMTP_OM_ADD_MSG, "[EmailSrvNwk] SMTP context[%x] allocates memory fail for OM new msg.")
TRC_MSG(SRV_EMAIL_ERROR_SMTP_OM_DEL_MSG_GET_RECORD, "[EmailSrvNwk] SMTP context[%x] deletes msg but not find.")

TRC_MSG(SRV_EMAIL_ERROR_POP3_STOR_SYNC_MSG_DEL, "[EmailSrvNwk] POP3 context[%x] syncs msg delete fail, msg_id[%x], ret[%d].")
TRC_MSG(SRV_EMAIL_ERROR_POP3_GET_FLDR_INFO, "[EmailSrvNwk] POP3 context[%x] gets folder[%x] info fail, ret[%d].")
TRC_MSG(SRV_EMAIL_ERROR_POP3_STOR_SYNC_MSG_OPEN, "[EmailSrvNwk] POP3 context[%x] syncs msg open fail, fldr_id[%x], ret[%d].")
TRC_MSG(SRV_EMAIL_ERROR_POP3_LIST_UID, "[EmailSrvNwk] POP3 context[%x] lists uid fail, ret[%d].")
TRC_MSG(SRV_EMAIL_ERROR_POP3_LIST_SIZE, "[EmailSrvNwk] POP3 context[%x] lists size fail, ret[%d].")
TRC_MSG(SRV_EMAIL_ERROR_POP3_STOR_SYNC_MSG_GET_NEXT, "[EmailSrvNwk] POP3 context[%x] syncs msg get next fail, ret[%d].")
TRC_MSG(SRV_EMAIL_ERROR_POP3_MSG_CREATE_HANDLE, "[EmailSrvNwk] POP3 context[%x] creates msg handle fail, ret[%d].")
TRC_MSG(SRV_EMAIL_ERROR_POP3_MSG_PARSE, "[EmailSrvNwk] POP3 context[%x] parses msg file fail, ret[%d].")
TRC_MSG(SRV_EMAIL_ERROR_POP3_MSG_SAVE, "[EmailSrvNwk] POP3 context[%x] saves msg fail, ret[%d].")
TRC_MSG(SRV_EMAIL_ERROR_POP3_MAKE_DISC_REQ_FILE, "[EmailSrvNwk] POP3 context[%x] makes disc req file fail, ret[%d].")
TRC_MSG(SRV_EMAIL_ERROR_POP3_OM_DEL_MSG_GET_RECORD, "[EmailSrvNwk] POP3 context[%x] processes OM notify but not find msg.")

TRC_MSG(SRV_EMAIL_ERROR_IMAP4_PARSE_DRM, "[EmailSrvNwk] IMAP4 context[%x] parses drm fail, ret[%d].")
TRC_MSG(SRV_EMAIL_ERROR_IMAP4_INVALID_DRM_SERIAL, "[EmailSrvNwk] IMAP4 context[%x] receives invalid drm serial, serial[%d].")
TRC_MSG(SRV_EMAIL_ERROR_IMAP4_STOR_GET_ATTACH_OPEN, "[EmailSrvNwk] IMAP4 context gets attach open fail, msg_id[%x], ret[%d].")
TRC_MSG(SRV_EMAIL_ERROR_IMAP4_STOR_GET_ATTACH_NEXT, "[EmailSrvNwk] IMAP4 context gets attach next fail, ret[%d].")
TRC_MSG(SRV_EMAIL_ERROR_IMAP4_STOR_SYNC_MSG_DEL, "[EmailSrvNwk] IMAP4 context[%x] syncs msg delete fail, msg_id[%x], ret[%d].")
TRC_MSG(SRV_EMAIL_ERROR_IMAP4_GET_FLDR_INFO, "[EmailSrvNwk] IMAP4 context[%x] gets folder[%x] info fail, ret[%d].")
TRC_MSG(SRV_EMAIL_ERROR_IMAP4_STOR_SYNC_MSG_OPEN, "[EmailSrvNwk] IMAP4 context[%x] syncs msg open fail, fldr_id[%x], ret[%d].")
TRC_MSG(SRV_EMAIL_ERROR_IMAP4_LIST_UID, "[EmailSrvNwk] IMAP4 context[%x] lists uid fail, ret[%d].")
TRC_MSG(SRV_EMAIL_ERROR_IMAP4_LIST_SIZE, "[EmailSrvNwk] IMAP4 context[%x] lists size fail, ret[%d].")
TRC_MSG(SRV_EMAIL_ERROR_IMAP4_MAKE_REQ_FILE, "[EmailSrvNwk] IMAP4 context[%x] makes req file fail, ret[%d].")
TRC_MSG(SRV_EMAIL_ERROR_IMAP4_LIST_FLAG, "[EmailSrvNwk] IMAP4 context[%x] lists flag fail, ret[%d].")
TRC_MSG(SRV_EMAIL_ERROR_IMAP4_STOR_SYNC_MSG_GET_NEXT, "[EmailSrvNwk] IMAP4 context[%x] syncs msg get next fail, ret[%d].")
TRC_MSG(SRV_EMAIL_ERROR_IMAP4_STOR_CREATE_MSG, "[EmailSrvNwk] IMAP4 context[%x] create new msg fail, ret[%d].")
TRC_MSG(SRV_EMAIL_ERROR_IMAP4_STOR_LOAD_CONTENT, "[EmailSrvNwk] IMAP4 context[%x] local content[%d] fail, ret[%d].")
TRC_MSG(SRV_EMAIL_ERROR_IMAP4_STOR_LOAD_ATTACH, "[EmailSrvNwk] IMAP4 context[%x] local attach fail, ret[%d].")
TRC_MSG(SRV_EMAIL_ERROR_IMAP4_READ_ENVELOPE, "[EmailSrvNwk] IMAP4 context reads envelope fail, ret[%d], major[%d], minor[%d].")
TRC_MSG(SRV_EMAIL_ERROR_IMAP4_READ_BODYSTRUCT, "[EmailSrvNwk] IMAP4 context reads body structure fail, ret[%d], major[%d], minor[%d].")
TRC_MSG(SRV_EMAIL_ERROR_IMAP4_READ_CONTENT, "[EmailSrvNwk] IMAP4 context reads content fail, ret[%d], major[%d], minor[%d].")
TRC_MSG(SRV_EMAIL_ERROR_IMAP4_READ_ATTACH, "[EmailSrvNwk] IMAP4 context reads attachment fail, ret[%d], major[%d], minor[%d].")
TRC_MSG(SRV_EMAIL_ERROR_IMAP4_STOR_GET_FLDR_ID_OPEN, "[EmailSrvNwk] IMAP4 context[%x] gets fldr id open fail, ret[%d].")
TRC_MSG(SRV_EMAIL_ERROR_IMAP4_STOR_GET_FLDR_ID_NEXT, "[EmailSrvNwk] IMAP4 context[%x] gets fldr id next fail, ret[%d].")
TRC_MSG(SRV_EMAIL_ERROR_IMAP4_STOR_FLDR_DEL, "[EmailSrvNwk] IMAP4 context[%x] deletes fldr[%x] fail, ret[%d].")
TRC_MSG(SRV_EMAIL_ERROR_IMAP4_STOR_GET_CONTENT, "[EmailSrvNwk] IMAP4 context[%x] gets content[%d] info fail, ret[%d].")
TRC_MSG(SRV_EMAIL_ERROR_IMAP4_STOR_GET_ATTACH_INFO, "[EmailSrvNwk] IMAP4 context[%x] gets attach info fail, ret[%d].")
TRC_MSG(SRV_EMAIL_ERROR_IMAP4_OM_DEL_MSG_GET_RECORD, "[EmailSrvNwk] IMAP4 context[%x] processes OM notify but not find msg.")

TRC_MSG(SRV_EMAIL_ERROR_NWK_EMN_PARSE_FILE, "[EmailSrvNwk] Parse EMN file fail, ret[%d].")
TRC_MSG(SRV_EMAIL_ERROR_NWK_EMN_READ_ACCT_INFO, "[EmailSrvNwk] EMN read account info fail, ret[%d].")

TRC_MSG(SRV_EMAIL_ERROR_NWK_OTAP_NEW_CNTX, "[EmailSrvNwk] OTAP creates new context fail.")

TRC_MSG(SRV_EMAIL_ERROR_NWK_GET_PROVIDER_FAIL, "[EmailSrvNwk] Get provider fail, provider_id[%x].")
TRC_MSG(SRV_EMAIL_ERROR_NWK_LOAD_CLOUD_PLUGIN_FAIL, "[EmailSrvNwk] Load Cloud plugin fail, line[%d].")
TRC_MSG(SRV_EMAIL_ERROR_NWK_UPGRADE_CLOUD_PLUGIN_FAIL, "[EmailSrvNwk] Upgrade Cloud plugin fail, line[%d].")

# Email Network Warning
TRC_MSG(SRV_EMAIL_WARNING_NWK_STATE_INVALID, "[EmailSrvNwk] Network context[%x] is in invalid state[%d], sub_state[%d], expect state[%d], sub_state[%d].")
TRC_MSG(SRV_EMAIL_WARNING_NWK_PS_HANDLE_INVALID, "[EmailSrvNwk] PS handle[%x] is invalid.")

# Email IMAP Sync
TRC_MSG(SRV_EMAIL_FUNC_IMAP4_SYNC, "[EmailSrvIMAPSync] Enter imap4_sync(all_msg = %d, uid = %d)")
TRC_MSG(SRV_EMAIL_INFO_IMAP4_SYNC_INIT_DONE, "[EmailSrvIMAPSync] imap4_sync_init returns %d")
TRC_MSG(SRV_EMAIL_ERROR_IMAP4_SYNC_INIT, "[EmailSrvIMAPSync] imap4_sync_init failed, errorcode(%d)")
TRC_MSG(SRV_EMAIL_ERROR_IMAP4_SYNC_OPEN_FILE, "[EmailSrvIMAPSync] Open request file failed (errcode = %d)")
TRC_MSG(SRV_EMAIL_INFO_IMAP4_SYNC_LIST_RECORD, "[EmailSrvIMAPSync] List sync records nwk_seq = %u, nwk_uid = %u, nwk_flag = %08x")
TRC_MSG(SRV_EMAIL_ERROR_IMAP4_SYNC_WRITE_FILE, "[EmailSrvIMAPSync] Write request file failed, (errcode = %d")
TRC_MSG(SRV_EMAIL_ERROR_IMAP4_SYNC_GET_RECORD, "[EmailSrvIMAPSync] get_record_by_msgid failed, (msgid=%u)")
TRC_MSG(SRV_EMAIL_INFO_IMAP4_SYNC_GET_RECORD, "[EmailSrvIMAPSync] get_record_by_msgid success, (msgid=%u, nwk_seq = %u, nwk_uid = %u, nwk_flag = %08x)")
TRC_MSG(SRV_EMAIL_ERROR_IMAP4_SYNC_STORAGE_OPEN, "[EmailSrvIMAPSync] stor_fldr_sync_msg_open failed (errcode = %d, major = %d, minor = %d)")
TRC_MSG(SRV_EMAIL_INFO_IMAP4_SYNC_UPDATE_RECORD, "[EmailSrvIMAPSync] Update sync records nwk_seq = %u, nwk_uid = %u, nwk_flag = %08x")
TRC_MSG(SRV_EMAIL_INFO_IMAP4_SYNC_UPDATE_LOCAL, "[EmailSrvIMAPSync] imap4_sync_update_item return %d")
TRC_MSG(SRV_EMAIL_ERROR_IMAP4_SYNC_STORAGE_XXX, "[EmailSrvIMAPSync] stor_fldr_sync_xxx failed (errcode = %d, major = %d, minor = %d)")
TRC_MSG(SRV_EMAIL_INFO_IMAP4_SYNC_DONE, "[EmailSrvIMAPSync] imap4 sync finished, result = %d, callback = %x, userdata = %x")
TRC_MSG(SRV_EMAIL_INFO_IMAP4_SYNC_ABORT, "[EmailSrvIMAPSync] imap4 sync abort at state %d")
TRC_MSG(SRV_EMAIL_INFO_IMAP4_SYNC_FSM, "[EmailSrvIMAPSync] Enter imap4 sync FSM, cntx_p->sub_state = %d")

# Email service account
TRC_MSG(SRV_EMAIL_ACCT_INVALID_PARAMETER, "[EmailSrvAccount] Call api with invalid parameter, line[%d].")
TRC_MSG(SRV_EMAIL_ACCT_INVALID_HANDLE, "[EmailSrvAccount] Call api with invalid handle, line[%d].")
TRC_MSG(SRV_EMAIL_ACCT_INVALID_STATE, "[EmailSrvAccount] Call api with invalid state of handle, line[%d].")
TRC_MSG(SRV_EMAIL_ACCT_NWK_RESULT, "[EmailSrvAccount] Account network api result, operation[%d], nwk_result: %Msrv_email_result_enum")
TRC_MSG(SRV_EMAIL_ACCT_INIT_ACCT_INFO, "[EmailSrvAccount] Entry srv_email_acct_init_acct_info.")
TRC_MSG(SRV_EMAIL_ACCT_ID_VALID, "[EmailSrvAccount] Account id check, acct_id[%d], is_valid[%d].")
TRC_MSG(SRV_EMAIL_ACCT_GET_ACCT_ID, "[EmailSrvAccount] Get account id, start_index[%d], *acct_cnt[%d], total_num[%d]")
TRC_MSG(SRV_EMAIL_ACCT_DEFAULT, "[EmailSrvAccount] Set default account, is_set[%d], acct_id[%d]")
TRC_MSG(SRV_EMAIL_ACCT_DELETE, "[EmailSrvAccount] Delete account, acct_id[%d]")
TRC_MSG(SRV_EMAIL_ACCT_DELETE_IN_USE, "[EmailSrvAccount] Delete account in use, acct_id[%d]")
TRC_MSG(SRV_EMAIL_ACCT_CREATE_SUCC, "[EmailSrvAccount] Create account handle success, total_handle[%d], curren_handle[%x]")
TRC_MSG(SRV_EMAIL_ACCT_CREATE_FAIL, "[EmailSrvAccount] Create account handle fail, total_handle[%d]")
TRC_MSG(SRV_EMAIL_ACCT_DESTROY, "[EmailSrvAccount] Destroy account handle, total_handle[%d], curren_handle[%x]")
TRC_MSG(SRV_EMAIL_ACCT_NEW, "[EmailSrvAccount] New account, operation_result= %Msrv_email_result_enum, new_acct_id[%d]")
TRC_MSG(SRV_EMAIL_ACCT_NEW_CANCEL, "[EmailSrvAccount] New account cancel, acct_id[%d]")
TRC_MSG(SRV_EMAIL_ACCT_OPEN, "[EmailSrvAccount] Open account, acct_id[%d]")
TRC_MSG(SRV_EMAIL_ACCT_GET_PERMISSION, "[EmailSrvAccount] Get account permission, acct_id[%d], result[(BOOL)%d]")
TRC_MSG(SRV_EMAIL_ACCT_EDIT, "[EmailSrvAccount] Edit account, acct_id[%d], acct_info_p[%x]")
TRC_MSG(SRV_EMAIL_ACCT_SAVE, "[EmailSrvAccount] Save account, acct_handle[%x]")
TRC_MSG(SRV_EMAIL_ACCT_READ, "[EmailSrvAccount] Read account, acct_handle[%x], acct_state[%d], acct_id[%d]")
TRC_MSG(SRV_EMAIL_ACCT_REGISTER_CALLBACK, "[EmailSrvAccount] Register callback, is_proc_callback[%d], acct_handle[%x], callback[%x], user_data[%x]")
TRC_MSG(SRV_EMAIL_ACCT_CLEAR_CALLBACK, "[EmailSrvAccount] Clear callback, is_proc_callback[%d], acct_handle[%x]")
TRC_MSG(SRV_EMAIL_ACCT_CONNECT, "[EmailSrvAccount] Account connect, acct_handle[%x], incoming[%d], acct_incoming_state[%d], acct_outgoing_state[%d]")
TRC_MSG(SRV_EMAIL_ACCT_DISCONNECT, "[EmailSrvAccount] Account disconnect, acct_handle[%x], incoming[%d], force_disconnect[%d], acct_incoming_state[%d], acct_outgoing_state[%d]")
TRC_MSG(SRV_EMAIL_ACCT_SEND, "[EmailSrvAccount] Account send, acct_handle[%x], move_to_sent[%d], acct_outgoing_state[%d]")
TRC_MSG(SRV_EMAIL_ACCT_RECEIVE, "[EmailSrvAccount] Account receive, acct_handle[%x], recv_opt[%d], acct_incoming_state[%d]")
TRC_MSG(SRV_EMAIL_ACCT_REFRESH, "[EmailSrvAccount] Account refresh, acct_handle[%x], recv_opt[%d], acct_incoming_state[%d]")
TRC_MSG(SRV_EMAIL_ACCT_SYNC, "[EmailSrvAccount] Account sync, acct_handle[%x], acct_incoming_state[%d]")
TRC_MSG(SRV_EMAIL_ACCT_GET_FLDR_NUM, "[EmailSrvAccount] Get account folder number, acct_id[%d], type[%d], fldr_num[%d]")
TRC_MSG(SRV_EMAIL_ACCT_GET_FLDR_ID, "[EmailSrvAccount] Get account folder id, acct_id[%d], fdlr_type[%d], start_index[%d], fldr_cnt[%d]")
TRC_MSG(SRV_EMAIL_ACCT_GET_FLDR_INFO, "[EmailSrvAccount] Get account folder info, acct_id[%d], fdlr_id[%d], unread[%d], read[%d], operation_result: %Msrv_email_result_enum")
TRC_MSG(SRV_EMAIL_ACCT_LIST_REMOTE_FLDR, "[EmailSrvAccount] Account list remote folder, max_fldr_cnt[%d]")
TRC_MSG(SRV_EMAIL_ACCT_SUBSCRIBE, "[EmailSrvAccount] Account subscribe remote folder, acct_id[%d], index[%d], is_subscribe[%d]")
TRC_MSG(SRV_EMAIL_ACCT_GET_REMOTE_FLDR_NUM, "[EmailSrvAccount] Account get remote folder number, acct_id[%d], number[%d]")
TRC_MSG(SRV_EMAIL_ACCT_GET_REMOTE_FLDR_INFO, "[EmailSrvAccount] Account get remote folder info, acct_id[%d], start_index[%d], fldr_cnt[%d]")
TRC_MSG(SRV_EMAIL_ACCT_GET_REMOTE_FLDR_INFO_SUB, "[EmailSrvAccount] Account get remote folder info subscribe, acct_id[%d], index[%d], is_subscribe[%d]")
TRC_MSG(SRV_EMAIL_ACCT_REMOTE_FLDR_SUBMIT, "[EmailSrvAccount] Account submit remote folder subscribe, acct_id[%d]")
TRC_MSG(SRV_EMAIL_ACCT_REMOTE_FLDR_SUBMIT_INFO, "[EmailSrvAccount] Account submit remote folder info, index[%d], handle_subscribe[%d], file_subscribe[%d], local_fldr_id[%d]")
TRC_MSG(SRV_EMAIL_ACCT_READ_REMOTE_FLDR_INFO, "[EmailSrvAccount] Account read remote folder info, acct_id[%d], remote_fldr_info[%d], remote_fldr_seperator[%d]")
TRC_MSG(SRV_EMAIL_ACCT_READ_REMOTE_FLDR_INFO_DETAIL, "[EmailSrvAccount] Account read remote folder detail info, index[%d], subscribe[%d], fldr_id[%d]")
TRC_MSG(SRV_EMAIL_ACCT_ABORT, "[EmailSrvAccount] Account abort async operation, acct_id[%d], req_id[%d], action[%d]")
TRC_MSG(SRV_EMAIL_ACCT_NWK_CALLBACK, "[EmailSrvAccount] Account network operation callback, acct_id[%d], req_id[%d], action[%d], result[(BOOL)%d]")
TRC_MSG(SRV_EMAIL_ACCT_APPEND, "[EmailSrvAccount] Account append, acct_handle[%x], incoming_connected[%d]")
TRC_MSG(SRV_EMAIL_ACCT_RETRIEVE_UID_LIST_CLOUD, "[EmailSrvAccount] Account retrieve uid list (cloud), acct_handle[%x], incoming_connected[%d], max_uid_num[%u]")
TRC_MSG(SRV_EMAIL_ACCT_RETRIEVE_MSG_CLOUD, "[EmailSrvAccount] Account retrieve msg (cloud), acct_handle[%x], incoming_connected[%d], imap_uid[%u]")

# Email service folder
TRC_MSG(SRV_EMAIL_FLDR_INVALID_PARAMETER, "[EmailSrvFolder] Call api with invalid parameter, line[%d].")
TRC_MSG(SRV_EMAIL_FLDR_INVALID_HANDLE, "[EmailSrvFolder] Call api with invalid handle, line[%d].")
TRC_MSG(SRV_EMAIL_FLDR_INVALID_STATE, "[EmailSrvFolder] Call api with invalid state of handle, line[%d].")
TRC_MSG(SRV_EMAIL_FLDR_CREATE, "[EmailSrvFolder] Create folder handle, acct_id[%d], fldr_id[%d], fldr_type[%d], msg_num[%d], unread_msg_num[%d]")
TRC_MSG(SRV_EMAIL_FLDR_CREATE_BY_TYPE, "[EmailSrvFolder] Create folder handle by type, fldr_type[%d], msg_num[%d], unread_msg_num[%d]")
TRC_MSG(SRV_EMAIL_FLDR_DESTROY, "[EmailSrvFolder] Destroy folder handle, acct_id[%d], fldr_id[%d], fldr_type[%d], valid_number[%d]")
TRC_MSG(SRV_EMAIL_FLDR_REGITER_CALLBACK, "[EmailSrvFolder] Register callback, fldr_id[%d], fldr_type[%d], is_proc_callback[%d]")
TRC_MSG(SRV_EMAIL_FLDR_CLEAR_CALLBACK, "[EmailSrvFolder] Clear callback, fldr_id[%d], fldr_type[%d], is_proc_callback[%d]")
TRC_MSG(SRV_EMAIL_FLDR_REGITER_OM_NOTIFY, "[EmailSrvFolder] Register om notify, fldr_id[%d], fldr_type[%d]")
TRC_MSG(SRV_EMAIL_FLDR_CLEAR_OM_NOTIFY, "[EmailSrvFolder] Clear om notify, fldr_id[%d], fldr_type[%d]")
TRC_MSG(SRV_EMAIL_FLDR_LIST_MSG, "[EmailSrvFolder] Folder list message, fldr_id[%d], fldr_type[%d], msg_num[%d], text_type[%d], date_type[%d]")
TRC_MSG(SRV_EMAIL_FLDR_LIST_MSG_MEMORY_FAIL, "[EmailSrvFolder] Folder list message malloc fail, line[%d]")
TRC_MSG(SRV_EMAIL_FLDR_LIST_MSG_STOR_FAIL, "[EmailSrvFolder] Folder list message fail, result: %Msrv_email_result_enum, line[%d]")
TRC_MSG(SRV_EMAIL_FLDR_LIST_MSG_JOB, "[EmailSrvFolder] Folder list message job, canceled[%d]")
TRC_MSG(SRV_EMAIL_FLDR_GET_MSG_LIST, "[EmailSrvFolder] Folder get message list, fldr_msg_num[%d], start_index[%d], msg_count[%d]")
TRC_MSG(SRV_EMAIL_FLDR_GET_BASIC_INFO, "[EmailSrvFolder] Folder get basic info, acct_id[%d], fldr_id[%d], sort_mode[%d], sort_order[%d], list_field[%x]")
TRC_MSG(SRV_EMAIL_FLDR_GET_MSG_NUM, "[EmailSrvFolder] Folder get message number, msg_num_type[%d], msg_num[%d]")
TRC_MSG(SRV_EMAIL_FLDR_SORT_MSG, "[EmailSrvFolder] Folder sort message, org_sort_mode[%d], org_sort_order[%d], dst_sort_mode[%d], dst_sort_order[%d]")
TRC_MSG(SRV_EMAIL_FLDR_MARK_MSG, "[EmailSrvFolder] Folder mark message, mark_all[%d], msg_id[%x], mark_msg[%d], curr_marked_num[%d]")
TRC_MSG(SRV_EMAIL_FLDR_SET_MSG_FLAG, "[EmailSrvFolder] Folder set message flag, set_all[%d], set_all_marked[%d], msg_id[%x], msg_flag[%x], flag_mask[%x]")
TRC_MSG(SRV_EMAIL_FLDR_SET_MGS_FLAG_JOB, "[EmailSrvFolder] Folder set message flag job, canceled[%d]")
TRC_MSG(SRV_EMAIL_FLDR_SET_MSG_FLAG_STOR_FAIL, "[EmailSrvFolder] Folder set message flag fail, result: %Msrv_email_result_enum, line[%d]")
TRC_MSG(SRV_EMAIL_FLDR_DELETE_MSG, "[EmailSrvFolder] Folder delete message, del_all[%d], del_all_marked[%d], msg_id[%x], del_header[%d], del_server[%d]")
TRC_MSG(SRV_EMAIL_FLDR_DEL_MSG_STOR_FAIL, "[EmailSrvFolder] Folder delete message fail, result: %Msrv_email_result_enum, line[%d], msg_num[%d], unread_msg_num[%d]")
TRC_MSG(SRV_EMAIL_FLDR_DLE_MGS_JOB, "[EmailSrvFolder] Folder delete message job, canceled[%d]")
TRC_MSG(SRV_EMAIL_FLDR_SEND, "[EmailSrvFolder] Folder send, move_to_sent[%d], fldr_id[%d], fldr_type[%d]")
TRC_MSG(SRV_EMAIL_FLDR_SEND_RESULT, "[EmailSrvFolder] Folder send result, result: %Msrv_email_result_enum")
TRC_MSG(SRV_EMAIL_FLDR_RECEIVE, "[EmailSrvFolder] Folder receive, recv_opt[%d], fldr_id[%d], fldr_type[%d]")
TRC_MSG(SRV_EMAIL_FLDR_RECEIVE_RESULT, "[EmailSrvFolder] Folder receive result, result: %Msrv_email_result_enum")
TRC_MSG(SRV_EMAIL_FLDR_SYNC, "[EmailSrvFolder] Folder sync, fldr_id[%d], fldr_type[%d]")
TRC_MSG(SRV_EMAIL_FLDR_SYNC_RESULT, "[EmailSrvFolder] Folder sync result, result: %Msrv_email_result_enum")
TRC_MSG(SRV_EMAIL_FLDR_ABORT, "[EmailSrvFolder] Folder operation abort, req_id[%d], action[%d]")
TRC_MSG(SRV_EMAIL_FLDR_NWK_FINISH, "[EmailSrvFolder] Folder network finish, req_id[%d], action[%d], msg_num[%d], unread_msg_num[%d]")
TRC_MSG(SRV_EMAIL_FLDR_OM_NOTIFY, "[EmailSrvFolder] Folder om notify, notify_type[%d]")
TRC_MSG(SRV_EMAIL_FLDR_OM_NOTIFY_ADD_MSG, "[EmailSrvFolder] Folder om notify add message, msg_id[%x], fldr_id[%d], acct_id[%d], fldr_handle_index[%d]")
TRC_MSG(SRV_EMAIL_FLDR_OM_NOTIFY_UPDATE_MSG, "[EmailSrvFolder] Folder om notify update message, msg_id[%x], fldr_id[%d], acct_id[%d], fldr_handle_index[%d]")
TRC_MSG(SRV_EMAIL_FLDR_OM_NOTIFY_UPDATE_MSG_INFO, "[EmailSrvFolder] Folder om notify update message info, change_mask[%x], msg_flag[%x], msg_state[%x], msg_has_attach[%d], msg_priority[%x]")
TRC_MSG(SRV_EMAIL_FLDR_OM_NOTIFY_MSG_NUM_CHG, "[EmailSrvFolder] Folder om notify message number change, fldr_id[%d], acct_id[%d], msg_num[%d], unread_msg_num[%d]")

# Email service message
TRC_MSG(SRV_EMAIL_MSG_INVALID_PARAMETER, "[EmailSrvMessage] Call api with invalid parameter, line[%d].")
TRC_MSG(SRV_EMAIL_MSG_INVALID_HANDLE, "[EmailSrvMessage] Call api with invalid handle, line[%d].")
TRC_MSG(SRV_EMAIL_MSG_INVALID_STATE, "[EmailSrvMessage] Call api with invalid state of handle, line[%d].")
TRC_MSG(SRV_EMAIL_MSG_ID_CHECK, "[EmailSrvMessage] Message id check, msg_id[%x], is_valid[%d].")
TRC_MSG(SRV_EMAIL_MSG_CREATE, "[EmailSrvMessage] Message handle create, msg_handle[%x], valid_num[%d].")
TRC_MSG(SRV_EMAIL_MSG_SET_NEW, "[EmailSrvMessage] Message handle set new, msg_handle[%x].")
TRC_MSG(SRV_EMAIL_MSG_PARSE_FILE, "[EmailSrvMessage] Message handle parse file, msg_handle[%x], save_attach_info[%d], save_attach[%d].")
TRC_MSG(SRV_EMAIL_MSG_OPEN, "[EmailSrvMessage] Message handle open, msg_handle[%x], msg_id[%x], fldr_id[%d], acct_id[%d].")
TRC_MSG(SRV_EMAIL_MSG_OPEN_NUM, "[EmailSrvMessage] Message handle open num, to_addr_num[%d], cc_addr_num[%d], bcc_addr_num[%d], attach_num[%d].")
TRC_MSG(SRV_EMAIL_MSG_DESTROY, "[EmailSrvMessage] Message handle destroy, msg_handle[%x].")
TRC_MSG(SRV_EMAIL_MSG_REGISTER_CALLBACK, "[EmailSrvMessage] Message handle register callback, is_proc_callback[%d], msg_handle[%x].")
TRC_MSG(SRV_EMAIL_MSG_CLEAR_CALLBACK, "[EmailSrvMessage] Message handle clear callback, is_proc_callback[%d], msg_handle[%x].")
TRC_MSG(SRV_EMAIL_MSG_GET_BASIC_INFO, "[EmailSrvMessage] Message handle get basic info, msg_handle[%x], msg_access_state[%d].")
TRC_MSG(SRV_EMAIL_MSG_GET_RECIPIENT, "[EmailSrvMessage] Message handle get recipient, msg_handle[%x], msg_access_state[%d], start_index[%d], count[%d].")
TRC_MSG(SRV_EMAIL_MSG_GET_SUBJECT_LEN, "[EmailSrvMessage] Message handle get subject len, msg_handle[%x], msg_access_state[%d].")
TRC_MSG(SRV_EMAIL_MSG_GET_SUBJECT_LEN_RESULT, "[EmailSrvMessage] Message handle get subject len result, len[%d], charset[%d].")
TRC_MSG(SRV_EMAIL_MSG_GET_SUBJECT, "[EmailSrvMessage] Message handle get subject, msg_handle[%x], msg_access_state[%d].")
TRC_MSG(SRV_EMAIL_MSG_GET_CONTENT_LEN, "[EmailSrvMessage] Message handle get content len, msg_handle[%x], msg_access_state[%d].")
TRC_MSG(SRV_EMAIL_MSG_GET_CONTENT_STATUS, "[EmailSrvMessage] Message handle get content status, text_status[%x], html_status[%x].")
TRC_MSG(SRV_EMAIL_MSG_GET_CONTENT_LEN_RESULT, "[EmailSrvMessage] Message handle get subject len result, len[%d], charset[%d].")
TRC_MSG(SRV_EMAIL_MSG_GET_CONTENT, "[EmailSrvMessage] Message handle get content, msg_handle[%x], msg_access_state[%d].")
TRC_MSG(SRV_EMAIL_MSG_GET_HTML_FILE, "[EmailSrvMessage] Message handle get html file, len[%d], charset[%d].")
TRC_MSG(SRV_EMAIL_MSG_GET_ATTACH_INFO, "[EmailSrvMessage] Message handle attachment info, msg_handle[%x], msg_access_state[%d], start_index[%d], number[%d], total_num[%d].")
TRC_MSG(SRV_EMAIL_MSG_GET_ATTACH_INFO_DETAIL, "[EmailSrvMessage] Message get attachment info, attach_index[%d], size[%d], mime_type[%d], mime_subtype[%d]")
TRC_MSG(SRV_EMAIL_MSG_GET_PERMISSION, "[EmailSrvMessage] Message handle get permission, msg_handle[%x], msg_access_state[%d].")
TRC_MSG(SRV_EMAIL_MSG_ABLE_TO_GET_PERMISSION, "[EmailSrvMessage] Message handle able to get permission, msg_id[%x], permission_type[%d].")
TRC_MSG(SRV_EMAIL_MSG_UPDATE_BASIC_INFO, "[EmailSrvMessage] Message handle update basic info, msg_handle[%x], acct_id[%d], fldr_id[%d], priority[%d], msg_flag[%x].")
TRC_MSG(SRV_EMAIL_MSG_UPDATE_RECIPIENT, "[EmailSrvMessage] Message handle update recipient, msg_handle[%x], addr_type[%d], addr_num[%d].")
TRC_MSG(SRV_EMAIL_MSG_UPDATE_ATTACH, "[EmailSrvMessage] Message handle update attachment, msg_handle[%x], attach_num[%d].")
TRC_MSG(SRV_EMAIL_MSG_UPDATE_SUBJECT, "[EmailSrvMessage] Message handle update subject, msg_handle[%x], len[%d], charset[%d].")
TRC_MSG(SRV_EMAIL_MSG_UPDATE_CONTENT, "[EmailSrvMessage] Message handle update content, msg_handle[%x], buff_type[%d], len[%d], charset[%d].")
TRC_MSG(SRV_EMAIL_MSG_UPDATE_EXTRA_FIELD, "[EmailSrvMessage] Message handle update extra field, msg_handle[%x], type[%d], len[%d]")
TRC_MSG(SRV_EMAIL_MSG_SET_FLAG, "[EmailSrvMessage] Message handle set flag, msg_handle[%x], flag_mask[%x], flag[%x].")
TRC_MSG(SRV_EMAIL_MSG_SAVE, "[EmailSrvMessage] Message handle save, msg_handle[%x].")
TRC_MSG(SRV_EMAIL_MSG_SAV_FOR_NWK, "[EmailSrvMessage] Message handle save for network, msg_handle[%x].")
TRC_MSG(SRV_EMAIL_MSG_SAVE_NEW, "[EmailSrvMessage] Message handle save new, msg_handle[%x].")
TRC_MSG(SRV_EMAIL_MSG_SAVE_NEW_FOR_NWK, "[EmailSrvMessage] Message handle save new for network, msg_handle[%x].")
TRC_MSG(SRV_EMAIL_MSG_SEND, "[EmailSrvMessage] Message handle send, msg_handle[%x], move_to_sent[%d].")
TRC_MSG(SRV_EMAIL_MSG_SEND_RESULT, "[EmailSrvMessage] Message handle send result, result: %Msrv_email_result_enum.")
TRC_MSG(SRV_EMAIL_MSG_RETRIEVE, "[EmailSrvMessage] Message handle retrieve, msg_handle[%x], msg_id[%x], retrieve_opt[%d], attach_id[%d].")
TRC_MSG(SRV_EMAIL_MSG_RETRIEVE_RESULT, "[EmailSrvMessage] Message handle retrieve result, result: %Msrv_email_result_enum.")
TRC_MSG(SRV_EMAIL_MSG_DELETE, "[EmailSrvMessage] Message handle delete message, msg_handle[%x], msg_id[%x], delete_header[%d], delete_server[%d].")
TRC_MSG(SRV_EMAIL_MSG_DELETE_RESULT, "[EmailSrvMessage] Message handle delete result, result: %Msrv_email_result_enum.")
TRC_MSG(SRV_EMAIL_MSG_MOVE, "[EmailSrvMessage] Message handle move message, msg_handle[%x], msg_id[%x], dst_acct_id[%d], dst_fldr_id[%d].")
TRC_MSG(SRV_EMAIL_MSG_MOVE_RESULT, "[EmailSrvMessage] Message handle move result, result: %Msrv_email_result_enum, new_msg_id[%d].")
TRC_MSG(SRV_EMAIL_MSG_COPY, "[EmailSrvMessage] Message handle copy message, msg_handle[%x], msg_id[%x], dst_acct_id[%d], dst_fldr_id[%d].")
TRC_MSG(SRV_EMAIL_MSG_COPY_RESULT, "[EmailSrvMessage] Message handle copy result, result: %Msrv_email_result_enum, new_msg_id[%d].")
TRC_MSG(SRV_EMAIL_MSG_ABORT, "[EmailSrvMessage] Message handle abort, msg_handle[%x], req_id[%d], action[%d].")
TRC_MSG(SRV_EMAIL_MSG_GET_FILE_PATH_COMP, "[EmailSrvMessage] Message handle get file path comp, msg_handle[%x].")
TRC_MSG(SRV_EMAIL_MSG_QUERY_TEXT, "[EmailSrvMessage] Message handle query text, text_type[%d], buff_size[%d].")
TRC_MSG(SRV_EMAIL_MSG_QUERY_ADDR, "[EmailSrvMessage] Message handle query addr, addr_type[%d], index[%d].")
TRC_MSG(SRV_EMAIL_MSG_QUERY_ATTACH, "[EmailSrvMessage] Message handle query attachment, type[%d], index[%d], keep_src[%d].")
TRC_MSG(SRV_EMAIL_MSG_SAVE_NEW_CALLBACK, "[EmailSrvMessage] Message handle save new callback, result: %Msrv_email_result_enum, msg_id[%x].")
TRC_MSG(SRV_EMAIL_MSG_SAVE_CALLBACK, "[EmailSrvMessage] Message handle save callback, result: %Msrv_email_result_enum, msg_id[%x].")
TRC_MSG(SRV_EMAIL_MSG_NWK_FINISH_CALLBACK, "[EmailSrvMessage] Message handle network finishi callback, result[(BOOL)%d], req_id[%d], action[%d], move_to_sent[%d].")
TRC_MSG(SRV_EMAIL_MSG_COPY_CALLBACK, "[EmailSrvMessage] Message handle copy callback, result: %Msrv_email_result_enum, to_msg_id[%x].")
TRC_MSG(SRV_EMAIL_MSG_PARSR_CALLBACK, "[EmailSrvMessage] Message handle parser callback, result: %Msrv_email_result_enum canceled[%d].")
TRC_MSG(SRV_EMAIL_MSG_PARSR_TEXT_INFO, "[EmailSrvMessage] Message handle header info, subject_charset[%d] content_charset[%d], has_html[%d], html_charset[%d].")
TRC_MSG(SRV_EMAIL_MSG_PARSR_ADDR_INFO, "[EmailSrvMessage] Message handle addr info, to_addr_num[%d] cc_addr_num[%d], bcc_addr_num[%d].")
TRC_MSG(SRV_EMAIL_MSG_PARSR_ATTACH_INFO, "[EmailSrvMessage] Message handle attachment info, attach_num[%d].")
TRC_MSG(SRV_EMAIL_MSG_PARSR_HEADER_INFO, "[EmailSrvMessage] Message handle header info, priority[%d], state[%x].")
TRC_MSG(SRV_EMAIL_MSG_MIME_PARSER_ABORT, "[EmailSrvMessage] Message handle mime parser abort.")
TRC_MSG(SRV_EMAIL_MSG_UPDATE_MSG_BY_HANDLE, "[EmailSrvMessage] Message handle update by handle, msg_handle[%x], msg_id[%x], from_index[%d], to_index[%d].")
TRC_MSG(SRV_EMAIL_MSG_GET_CONT_FOR_COMP, "[EmailSrvMessage] Message handle get content for comp, msg_handle[%x], cont_type[%d].")
TRC_MSG(SRV_EMAIL_MSG_SAVE_INT, "[EmailSrvMessage] Message handle save int, msg_handle[%x], save_part[%d].")
TRC_MSG(SRV_EMAIL_MSG_SAVE_INT_TEXT_LEN, "[EmailSrvMessage] Message handle save int text len, subject_len[%d], content_len[%d], html_len[%d].")
TRC_MSG(SRV_EMAIL_MSG_SAVE_NEW_INT, "[EmailSrvMessage] Message handle save new int, msg_handle[%x], dest_acct_id[%d], dest_fldr_id[%d].")
TRC_MSG(SRV_EMAIL_MSG_SAVE_NEW_INT_TEXT_LEN, "[EmailSrvMessage] Message handle save new int text len, subject_len[%d], content_len[%d], html_len[%d].")

# Email Cloud
TRC_MSG(SRV_EMAIL_CLD_CREATE, "[EmailSrvCld] Cloud create, acct_id[%d], handle[%x].")
TRC_MSG(SRV_EMAIL_CLD_DESTROY, "[EmailSrvCld] Cloud destroy, handle[%x].")
TRC_MSG(SRV_EMAIL_CLD_SET_OPTION, "[EmailSrvCld] Cloud set option, handle[%x], prov_id[%d], acct_id[%d].")
TRC_MSG(SRV_EMAIL_CLD_SET_PROCESS_NOTIFY, "[EmailSrvCld] Cloud set process notify, handle[%x], callback[%x], data[%x].")
TRC_MSG(SRV_EMAIL_CLD_SET_FINISH_NOTIFY, "[EmailSrvCld] Cloud set finish notify, handle[%x], callback[%x], data[%x].")
TRC_MSG(SRV_EMAIL_CLD_CONNECT, "[EmailSrvCld] Cloud connect server, handle[%x], fldr_name[%x], fldr_create[%d].")
TRC_MSG(SRV_EMAIL_CLD_DISCONNECT, "[EmailSrvCld] Cloud disconnect server, handle[%x].")
TRC_MSG(SRV_EMAIL_CLD_APPEND, "[EmailSrvCld] Cloud append message, handle[%x], msg_handle[%x].")
TRC_MSG(SRV_EMAIL_CLD_RETRIEVE, "[EmailSrvCld] Cloud retrieve message, handle[%x], retr[%x].")
TRC_MSG(SRV_EMAIL_CLD_ABORT, "[EmailSrvCld] Cloud abort opeation, handle[%x].")
TRC_MSG(SRV_EMAIL_CLD_RETRY, "[EmailSrvCld] Cloud retry, handle[%x].")
TRC_MSG(SRV_EMAIL_CLD_HANDLE_INVALID, "[EmailSrvCld] Cloud handle is invalid, handle[%x].")
TRC_MSG(SRV_EMAIL_CLD_IN_PROGRESS, "[EmailSrvCld] Cloud handle is in progress, handle[%x], action[%d].")
TRC_MSG(SRV_EMAIL_CLD_FSM_SET_STATE, "[EmailSrvCld] Cloud context[%x] changes state[%d].")
TRC_MSG(SRV_EMAIL_CLD_FSM_SET_SUB_STATE, "[EmailSrvCld] Cloud context[%x] changes sub_state[%d].")
TRC_MSG(SRV_EMAIL_CLD_CONTEXT_INVALID, "[EmailSrvCld] Cloud context[%x] is invalid.")
TRC_MSG(SRV_EMAIL_CLD_STATE_INVALID, "[EmailSrvCld] Cloud context[%x] is in invalid state[%d], sub_state[%d], expect state[%d], sub_state[%d].")
TRC_MSG(SRV_EMAIL_CLD_APPEND_COMPOSE_DONE, "[EmailSrvCld] Cloud context[%x] composes msg done, ret[%d], major[%d], minor[%d].")
TRC_MSG(SRV_EMAIL_CLD_PARSE_ASYNC_FS_CALLBACK, "[EmailSrvCld] Cloud context[%x] parse attach async fs callback, job[%d], ret[%d].")
TRC_MSG(SRV_EMAIL_CLD_DECODE_B64QP, "[EmailSrvCld] Cloud context[%x] decodes base64/QP callback.")
TRC_MSG(SRV_EMAIL_CLD_PARSE_ABORT, "[EmailSrvCld] Cloud context parse abort, parse_state[%d].")
TRC_MSG(SRV_EMAIL_CLD_SSO_REFRESH_DONE, "[EmailSrvCld] Cloud context[%x] refreshes SSO done, ret[%d].")
TRC_MSG(SRV_EMAIL_CLD_CONN_FSM_INIT, "[EmailSrvCld] Cloud context[%x] CONNECT FSM init.")
TRC_MSG(SRV_EMAIL_CLD_CONN_FSM_OPENED, "[EmailSrvCld] Cloud context[%x] CONNECT FSM opened, open_fail_flag[%d].")
TRC_MSG(SRV_EMAIL_CLD_CONN_FSM_CREATED, "[EmailSrvCld] Cloud context[%x] CONNECT FSM created.")
TRC_MSG(SRV_EMAIL_CLD_CONN_FSM_DONE, "[EmailSrvCld] Cloud context[%x] CONNECT FSM done, result[%d], major[%d], minor[%d].")
TRC_MSG(SRV_EMAIL_CLD_APPD_FSM_INIT, "[EmailSrvCld] Cloud context[%x] APPEND FSM init.")
TRC_MSG(SRV_EMAIL_CLD_APPD_FSM_COMPOSED, "[EmailSrvCld] Cloud context[%x] APPEND FSM composed.")
TRC_MSG(SRV_EMAIL_CLD_APPD_FSM_APPENDED, "[EmailSrvCld] Cloud context[%x] APPEND FSM appended.")
TRC_MSG(SRV_EMAIL_CLD_APPD_FSM_DONE, "[EmailSrvCld] Cloud context[%x] APPEND FSM done, result[%d], major[%d], minor[%d].")
TRC_MSG(SRV_EMAIL_CLD_RETR_FSM_INIT, "[EmailSrvCld] Cloud context[%x] RETRIEVE FSM init, msg_part[%d].")
TRC_MSG(SRV_EMAIL_CLD_RETR_FSM_UID_LISTED, "[EmailSrvCld] Cloud context[%x] RETRIEVE FSM uid listed.")
TRC_MSG(SRV_EMAIL_CLD_RETR_FSM_RECEIVED, "[EmailSrvCld] Cloud context[%x] RETRIEVE FSM received, fetch_type[%d].")
TRC_MSG(SRV_EMAIL_CLD_RETR_FSM_PARSED, "[EmailSrvCld] Cloud context[%x] RETRIEVE FSM parsed, fetch_type[%d].")
TRC_MSG(SRV_EMAIL_CLD_RETR_FSM_DONE, "[EmailSrvCld] Cloud context[%x] RETRIEVE FSM done, result[%d], major[%d], minor[%d].")
TRC_MSG(SRV_EMAIL_CLD_FSM_CONNECT_START, "[EmailSrvCld] Cloud context[%x] FSM connect start, sync_with_server[%d], sub_state[%d].")
TRC_MSG(SRV_EMAIL_CLD_FSM_CONNECT_DONE, "[EmailSrvCld] Cloud context[%x] FSM connect done.")
TRC_MSG(SRV_EMAIL_CLD_FSM_CONNECT_ABORT, "[EmailSrvCld] Cloud context[%x] FSM connect abort, sub_state[%d].")
TRC_MSG(SRV_EMAIL_CLD_FSM_APPEND_START, "[EmailSrvCld] Cloud context[%x] FSM append start, sync_with_server[%d], sub_state[%d].")
TRC_MSG(SRV_EMAIL_CLD_FSM_APPEND_DONE, "[EmailSrvCld] Cloud context[%x] FSM append done.")
TRC_MSG(SRV_EMAIL_CLD_FSM_APPEND_ABORT, "[EmailSrvCld] Cloud context[%x] FSM append abort, sub_state[%d].")
TRC_MSG(SRV_EMAIL_CLD_FSM_RETRIEVE_START, "[EmailSrvCld] Cloud context[%x] FSM connect start, sync_with_server[%d], sub_state[%d], total_num[%d], msg_part[%d].")
TRC_MSG(SRV_EMAIL_CLD_FSM_RETRIEVE_DONE, "[EmailSrvCld] Cloud context[%x] FSM retrieve done.")
TRC_MSG(SRV_EMAIL_CLD_FSM_RETRIEVE_ABORT, "[EmailSrvCld] Cloud context[%x] FSM retrieve abort, sub_state[%d].")
TRC_MSG(SRV_EMAIL_CLD_BEARER_INFO_IND, "[EmailSrvCld] Bearer info indication received, cld_cntx[%x], nwk_acct_id[%x], bearer_state[%d].")
TRC_MSG(SRV_EMAIL_CLD_BEARER_STATE, "[EmailSrvCld] Cloud context[%x], state[%d], wait_bearer[%x].")
TRC_MSG(SRV_EMAIL_CLD_FSM_INIT, "[EmailSrvCld] Cloud context[%x] FSM init.")
TRC_MSG(SRV_EMAIL_CLD_FSM_CREATED, "[EmailSrvCld] Cloud context[%x] FSM created, destroy_flag[%d], abort_flag[%d].")
TRC_MSG(SRV_EMAIL_CLD_FSM_ACTIVATED, "[EmailSrvCld] Cloud context[%x] FSM activated, abort_flag[%d].")
TRC_MSG(SRV_EMAIL_CLD_FSM_CONNECTED, "[EmailSrvCld] Cloud context[%x] FSM connected.")
TRC_MSG(SRV_EMAIL_CLD_FSM_AUTHORIZED, "[EmailSrvCld] Cloud context[%x] FSM authorized.")
TRC_MSG(SRV_EMAIL_CLD_FSM_READY, "[EmailSrvCld] Cloud context[%x] FSM ready.")
TRC_MSG(SRV_EMAIL_CLD_FSM_UPDATED, "[EmailSrvCld] Cloud context[%x] FSM updated.")
TRC_MSG(SRV_EMAIL_CLD_FSM_SENT, "[EmailSrvCld] Cloud context[%x] FSM sent.")
TRC_MSG(SRV_EMAIL_CLD_FSM_RECEIVED, "[EmailSrvCld] Cloud context[%x] FSM received.")
TRC_MSG(SRV_EMAIL_CLD_FSM_DISCONNECTED, "[EmailSrvCld] Cloud context[%x] FSM disconnected.")
TRC_MSG(SRV_EMAIL_CLD_FSM_ERROR, "[EmailSrvCld] Cloud context[%x] FSM error, state[%d], major[%d], minor[%d].")
TRC_MSG(SRV_EMAIL_CLD_FSM_ABORT, "[EmailSrvCld] Cloud context[%x] FSM abort, state[%d].")
TRC_MSG(SRV_EMAIL_CLD_FSM_RETRY, "[EmailSrvCld] Cloud context[%x] FSM retry, state[%d].")
TRC_MSG(SRV_EMAIL_CLD_FSM_DISCONNECT_IND, "[EmailSrvCld] Cloud context[%x] is disconnected, state[%d].")
TRC_MSG(SRV_EMAIL_CLD_GET_SSO_ACCOUNT, "[EmailSrvCld] Cloud context[%x] get SSO account, prov_id[%d], acct_id[%d], valid[%d], login[%d].")
TRC_MSG(SRV_EMAIL_CLD_GET_SSO_CREDENTIAL, "[EmailSrvCld] Cloud context[%x] get SSO credential, prov_id[%d], acct_id[%d], valid[%d].")
TRC_MSG(SRV_EMAIL_CLD_REFRESH_SSO_CREDENTIAL, "[EmailSrvCld] Cloud context[%x] refresh SSO credential, prov_id[%d], acct_id[%d], req_id[%d].")
TRC_MSG(SRV_EMAIL_CLD_QUERY_SERVER_INFO_FAIL, "[EmailSrvCld] Cloud context[%x] query server info fail, provider_id[%d].")
TRC_MSG(SRV_EMAIL_CLD_REGISTER_BEARER_INFO_FAIL, "[EmailSrvCld] Cloud context[%x] register bearer info fail, app_id[%d], ret[%d].")
TRC_MSG(SRV_EMAIL_CLD_INVALID_EMAIL_ADDR, "[EmailSrvCld] Invalid cloud email address.")