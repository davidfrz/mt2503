#ifdef CLOUD_SUPPORT
[APP NAME] = SRV_BACKUP_RESTORE
[SCOPE] = PLUTO,COSMOS
[MODULE] = MOD_MMI_CONN_APP

#start trace
TRC_MSG(SRV_CLD_MOD_INIT, "[CLD SRV] srv_cloud_init()!")
TRC_MSG(SRV_CLD_PREPARE_SMS_LIST, "[CLD SRV] srv_cloud_post_sort_sms_evt()! index = [%d]")
TRC_MSG(SRV_CLD_PREPARE_VCARD_LIST, "[CLD SRV] srv_cloud_post_sort_vcard_evt()! index = [%d]")
TRC_MSG(SRV_CLD_SMS_SORT_LIST, "[CLD SRV] srv_cloud_sort_sms_list()!  index = [%d]")
TRC_MSG(SRV_CLD_VCARD_SORT_LIST, "[CLD SRV] srv_cloud_sort_vcard_list()!  index = [%d]")
TRC_MSG(SRV_CLD_PLUGIN_DISCOVER, "[CLD SRV] srv_cloud_plugin_discover()!")
TRC_MSG(SRV_CLD_GET_SYMBOL_ERROR, "[CLD SRV] srv_cloud_plugin_discover(), get symbol error!")
TRC_MSG(SRV_CLD_GET_LIB_ERROR, "[CLD SRV] srv_cloud_plugin_discover(), get lib error!")
TRC_MSG(SRV_CLD_RECORD_NUM, "[CLD SRV] record type is [%d], num is [%d]")

TRC_MSG(SRV_CLD_CREATE_MEM_POOL, "[CLD SRV] srv_cloud_create_mem_pool()!")
TRC_MSG(SRV_CLD_DEL_MEM_POOL, "[CLD SRV] srv_cloud_delete_mem_pool()!")
TRC_MSG(SRV_CLD_MEM_POOL_MALLOC, "[CLD SRV] srv_cloud_malloc(), size = [%d], address = [%x]")
TRC_MSG(SRV_CLD_MEM_POOL_FREE, "[CLD SRV] srv_cloud_free(), address = [%x]")


TRC_MSG(SRV_CLD_STATUS, "[CLD SRV]srv_cloud_is_init_done(), type = [%d], state = [%d]")

TRC_MSG(SRV_CLD_CLOUD_CREATE_HDLR, "[CLD SRV] srv_cloud_create(), type = [%d], ret = [%d]")
TRC_MSG(SRV_CLD_SETOPT, "[CLD SRV] srv_cloud_setopt(), handler = [%d], option = [%x]")
TRC_MSG(SRV_CLD_OPTION_ACCT_INFO, "[CLD_SRV] srv_cloud_setopt(), vendor = [%u], user acct id = [%d]" )
TRC_MSG(SRV_CLD_OPTION_DATA_TYPE, "[CLD SRV] srv_cloud_setopt(), data type = [%d]")
TRC_MSG(SRV_CLD_SET_OPTION_DTCNT, "[CLD SRV] srv_cloud_setopt_vcard(), data account = [%x]")
TRC_MSG(SRV_CLD_BACKUP_CHECK, "[CLD SRV] srv_cloud_backup_uid_check() index = [%d], type = [%d]")
TRC_MSG(SRV_CLD_NEED_BACKUP, "[CLD SRV] srv_cloud_backup_uid_check() index = [%d]")
TRC_MSG(SRV_CLD_GET_DATA_ACCOUNT_CALLBACK, "[CLD SRV] srv_cloud_get_data_account_callback(), evt = %d")


TRC_MSG(SRV_CLD_OPERATE, "[CLD SRV] srv_cloud_operate(), handler = [%d], service type = [%d]")
TRC_MSG(SRV_CLD_BEARER_INFO_STATE, "[CLD SRV] srv_cloud_bearer_info_ind(), bearer state = [%d]")
TRC_MSG(SRV_CLD_PROXY_INFO, "[CLD SRV] srv_cloud_bearer_info_ind(), ip = [%d.%d.%d.%d"])
TRC_MSG(SRV_CLD_GET_HOST_IND, "[CLD SRV] srv_cloud_get_host_by_name_ind()")
TRC_MSG(SRV_CLD_NETWORK_ERROR, "[CLD SRV] srv_cloud_post_network_error_evt(). type = [%d], error code = [%d]")
TRC_MSG(SRV_CLD_SET_CHANNEL_REQ, "[CLD SRV] srv_cloud_set_channel_req(). type = [%d]")
TRC_MSG(SRV_CLD_SET_CHANNEL_RSP, "[CLD SRV] srv_cloud_set_channel_rsp_hdlr(), result = [%d], channel id = [%u]")
TRC_MSG(SRV_CLD_REMOVE_CHANNEL_REQ, "[CLD SRV] srv_cloud_send_remove_channel_req()")
TRC_MSG(SRV_CLD_REMOVE_CHANNEL_RSP, "[CLD SRV] srv_cloud_send_remove_channel_rsp()")

TRC_MSG(SRV_CLD_GET_UID_LIST, "[CLD SRV] srv_cloud_get_uid_list(), uid count = [%d]")
TRC_MSG(SRV_CLD_ASYNC_SET_UID, "[CLD SRV] srv_cloud_async_set_store_uid(), uid num = [%d], type = [%d]")
TRC_MSG(SRV_CLD_ASYNC_SET_UID_ERROR_STATE, "[CLD SRV] srv_cloud_async_set_store_uid(), error state")
TRC_MSG(SRV_CLD_ASYNC_UID_DONE, "[CLD SRV] srv_cloud_post_async_done_evt(), type = [%d]")
TRC_MSG(SRV_CLD_BACKUP_BEGIN, "[CLD SRV]srv_cloud_post_backup_begin_evt(), type = [%d]" )
TRC_MSG(SRV_CLD_SYNC_SET_UID, "[CLD SRV] srv_cloud_sync_set_store_uid(), index = [%d], type = [%d], action = [%d]")
TRC_MSG(SRV_CLD_DEL_UID_CHECK, "[CLD SRV] srv_cloud_del_item_check(), index = [%d], type = [%d]")
TRC_MSG(SRV_CLD_FIND_UID, "[CLD SRV] srv_cloud_del_item_check(), find uid")
TRC_MSG(SRV_CLD_DEL_UID, "[CLD SRV] srv_cloud_del_nvram(), index = [%d], type = [%d]")
TRC_MSG(SRV_CLD_DEL_UID_INDEX, "[CLD SRV] srv_cloud_del_sort_list(), index = [%d]")
TRC_MSG(SRV_CLD_UPDATE_UID_CHECK, "[CLD SRV] srv_cloud_update_item_check(), index = [%d], type = [%d]")
TRC_MSG(SRV_CLD_SYNC_GET_UID, "[CLD SRV] srv_cloud_sync_get_store_uid(), index = [%d], uid = [%x], type = [%d]")
TRC_MSG(SRV_CLOUD_SETUP_BEARER, "[CLD SRV] srv_cloud_setup_bearer()")
TRC_MSG(SRV_CLD_ADD_UID_CHECK, "[CLD SRV] srv_cloud_add_item_check(), index = [%d], type = [%d]")
TRC_MSG(SRV_CLD_GEN_UID, "[CLD SRV] srv_cloud_gen_uid(), index = [%d], type = [%d]")
TRC_MSG(SRV_CLD_GET_HASH_VALUE, "[CLD SRV] srv_cloud_gen_hash_value(), hash value = [%u]")
TRC_MSG(SRV_CLD_TOO_BIG_DATA, "[CLD SRV] srv_cloud_parse_server_data(), too big data!!!")
TRC_MSG(SRV_CLD_POST_PAUSE_EVT, "[CLD SRV] srv_cloud_post_pause_evt()")
TRC_MSG(SRV_CLD_METHOD_RSP, "[CLD SRV] srv_cloud_method_rsp_hdlr() req id = [%d], result = [%d] status = [%d]")
TRC_MSG(SRV_CLD_HANDLE_UID, "[CLD SRV] srv_cloud_handle_uid()!")
TRC_MSG(SRV_CLD_COMPARE_CTAG, "[CLD SRV] srv_cloud_handle_uid()! compare ctag")
TRC_MSG(SRV_CLD_GET_CTAG, "[CLD SRV] srv_cloud_handle_uid()! get ctag")
TRC_MSG(SRV_CLD_STORE_URL, "[CLD SRV] srv_cloud_handle_uid()! store url")
TRC_MSG(SRV_CLD_GET_DETAIL_UID, "[CLD SRV] srv_cloud_handle_uid()! get detail uid")
TRC_MSG(SRV_CLD_HANDLE_UID_END, "[CLD SRV] srv_cloud_handle_uid()! handle uid end")
TRC_MSG(SRV_CLD_GET_DATA_IND, "[CLD SRV] srv_cloud_post_get_data_ind(), flag = [%d]")
TRC_MSG(SRV_CLD_UID_LOCAL_NOT_EXIST, "[CLD SRV] srv_cloud_handle_uid(), uid not exist! op_type = [%d]")
TRC_MSG(SRV_CLD_UID_LOCAL_EXIST, "[CLD SRV] srv_cloud_handle_uid(), uid exist! index = [%d], op_type = [%d]")
TRC_MSG(SRV_CLD_SEND_DATA_TO_SEV, "[CLD SRV] srv_cloud_send_data() index = [%d]")
TRC_MSG(SRV_CLD_PUT_DATA_COMMIT, "[CLD SRV] srv_cloud_put_data_commit() handler = [%d]")
TRC_MSG(SRV_CLD_CLOSE, "[CLD SRV] srv_cloud_close() handler = [%d]")
TRC_MSG(SRV_CLD_CLOSE_DONE, "[CLD SRV] srv_cloud_close_done() type = [%d]")
TRC_MSG(SRV_CLD_INIT_BACKUP_LIST, "[CLD SRV] srv_cloud_init_backup_list() handler = [%d]")
TRC_MSG(SRV_CLD_POST_CLOSE_DONE, "[CLD SRV] srv_cloud_post_close_done() type = [%d]")
TRC_MSG(SRV_CLD_SET_BACKUP_FLAG, "[CLD SRV] srv_cloud_set_backup_flag() index = [%d], flag = [%d], type = [%d]")
TRC_MSG(SRV_CLD_SEND_ONE_ITEM_RESULT, "[CLD SRV] srv_cloud_post_backup_item_done_evt() result = [%d]")
TRC_MSG(SRV_CLD_PARSE_SERVER_DATA,"[CLD SRV] srv_cloud_parse_server_data()!")
TRC_MSG(SRV_CLD_PARSE_SERVER_DATA_BIG_FILE, "[CLD SRV]srv_cloud_parse_server_data() file = [%d], length = [%d]")
TRC_MSG(SRV_CLD_PARSE_SERVER_DATA_MOVE, "[CLD SRV]srv_cloud_parse_server_data() result = [%d]")



TRC_MSG(SRV_CLOUD_SMS_ACCT_PROC_CALLBACK, "[CLD SRV] sms_proc_callback(), status[%Msrv_email_nwk_status_enum]")
TRC_MSG(SRV_CLOUD_SMS_ACCT_RESULT_CALLBACK, "[CLD SRV] sms_acct_result_callback, result[%d], sub_result[%d], major[%d], minor[%d], op_state[%Msrv_cloud_sms_op_state_enum]")
TRC_MSG(SRV_CLOUD_SMS_MSG_RESULT_CALLBACK, "[CLD SRV] sms_msg_result_callback, result[%d], sub_result[%d], major[%d], minor[%d], op_state[%Msrv_cloud_sms_op_state_enum]")
TRC_MSG(SRV_CLOUD_SMS_OP, "[CLD SRV] srv_cloud_sms_op, op_type[%Msrv_cloud_op_enum], op_state[%Msrv_cloud_sms_op_state_enum]")
TRC_MSG(SRV_CLOUD_SMS_OP_INIT_START, "[CLD SRV] srv_cloud_sms_op_init, start, op_type[%Msrv_cloud_op_enum], op_state[%Msrv_cloud_sms_op_state_enum]")
TRC_MSG(SRV_CLOUD_SMS_OP_INIT_END, "[CLD SRV] srv_cloud_sms_op_init, end, ret[%d]")
TRC_MSG(SRV_CLOUD_SMS_OP_CONN_START, "[CLD SRV] srv_cloud_sms_op_conn, start, op_type[%Msrv_cloud_op_enum], op_state[%Msrv_cloud_sms_op_state_enum]")
TRC_MSG(SRV_CLOUD_SMS_OP_CONN_END, "[CLD SRV] srv_cloud_sms_op_conn, end, ret[%d]")
TRC_MSG(SRV_CLOUD_SMS_OP_GET_UID_LIST_START, "[CLD SRV] srv_cloud_sms_op_get_uid_list, start, op_type[%Msrv_cloud_op_enum], op_state[%Msrv_cloud_sms_op_state_enum]")
TRC_MSG(SRV_CLOUD_SMS_OP_GET_UID_LIST_END, "[CLD SRV] srv_cloud_sms_op_get_uid_list, end, ret[%d]")
TRC_MSG(SRV_CLOUD_SMS_OP_MARK_UID_START, "[CLD SRV] srv_cloud_sms_op_mark_uid, start, uid_fhd[%d], uid_hd_index[%d], uid_items_num[%d]")
TRC_MSG(SRV_CLOUD_SMS_OP_MARK_UID_INIT, "[CLD SRV] srv_cloud_sms_op_mark_uid, init, uid_fhd[%d], uid_items_num[%d]")
TRC_MSG(SRV_CLOUD_SMS_OP_MARK_UID_LOOP, "[CLD SRV] srv_cloud_sms_op_mark_uid, loop, uid_hd_index[%d]")
TRC_MSG(SRV_CLOUD_SMS_OP_MARK_UID_CLOSE, "[CLD SRV] srv_cloud_sms_op_mark_uid, close, ret[%d]")
TRC_MSG(SRV_CLOUD_SMS_OP_GET_MSG_START, "[CLD SRV] srv_cloud_sms_op_get_msg, start, uid_fhd[%d], uid_hd_index[%d], uid_items_num[%d]")
TRC_MSG(SRV_CLOUD_SMS_OP_GET_MSG_INIT, "[CLD SRV] srv_cloud_sms_op_get_msg, init, uid_fhd[%d], uid_items_num[%d]")
TRC_MSG(SRV_CLOUD_SMS_OP_GET_MSG_LOOP, "[CLD SRV] srv_cloud_sms_op_get_msg, loop, imap_uid[%d]")
TRC_MSG(SRV_CLOUD_SMS_OP_GET_MSG_CLOSE, "[CLD SRV] srv_cloud_sms_op_get_msg, close, ret[%d]")
TRC_MSG(SRV_CLOUD_SMS_NOTIFY_APP, "[CLD SRV] srv_cloud_sms_op_notify_app, op_type[%Msrv_cloud_op_enum], op_state[%Msrv_cloud_sms_op_state_enum]")
TRC_MSG(SRV_CLOUD_SMS_RETRY, "[CLD SRV] srv_cloud_sms_retry, op_type[%Msrv_cloud_op_enum], op_state[%Msrv_cloud_sms_op_state_enum], prov_id[%d], acct_id[%d]")
TRC_MSG(SRV_CLOUD_SMS_CLOSE, "[CLD SRV] srv_cloud_sms_close, op_type[%Msrv_cloud_op_enum], op_state[%Msrv_cloud_sms_op_state_enum]")
TRC_MSG(SRV_CLOUD_SMS_ABORT, "[CLD SRV] srv_cloud_sms_abort, op_type[%Msrv_cloud_op_enum], op_state[%Msrv_cloud_sms_op_state_enum]")
TRC_MSG(SRV_CLOUD_SMS_CALL_EMAIL_ERR, "[CLD SRV] call email srv error, ret[%Msrv_email_result_enum], line[%d]")
TRC_MSG(SRV_CLOUD_SMS_PUT_DATA_START, "[CLD SRV] srv_cloud_sms_put_data, start, sms_index[%d], msg_handle[%x]")
TRC_MSG(SRV_CLOUD_SMS_PUT_DATA_END, "[CLD SRV] srv_cloud_sms_put_data, end, ret[%d]")
TRC_MSG(SRV_CLOUD_SMS_GET_DATA_START, "[CLD SRV] srv_cloud_sms_get_data, start, op_state[%Msrv_cloud_sms_op_state_enum], index[%d], total[%d], msg_handle[%x]")
TRC_MSG(SRV_CLOUD_SMS_GET_DATA_END, "[CLD SRV] srv_cloud_sms_get_data, end, ret[%d]")
TRC_MSG(SRV_CLOUD_SMS_DATA_BUF_NOT_ENOUGH, "[CLD SRV] srv_cloud_sms_get_data, data buf not enough, buf_len[%d], data_len[%d]")
TRC_MSG(SRV_CLOUD_SMS_OP_ERROR, "[CLD SRV] sms op error, op_type[%Msrv_cloud_op_enum], op_state[%Msrv_cloud_sms_op_state_enum], ret[%d]")
TRC_MSG(SRV_CLOUD_SMS_OP_MARK_UID_UID_TOO_LONG, "[CLD SRV] srv_cloud_sms_op_mark_uid, uid too long, uid_len[%d], max_len[%d]")
TRC_MSG(SRV_CLOUD_SMS_OP_GET_MSG_UID_TOO_LONG, "[CLD SRV] srv_cloud_sms_op_get_msg, uid too long, uid_len[%d], max_len[%d]")
#endif /* CLOUD_SUPPORT */

