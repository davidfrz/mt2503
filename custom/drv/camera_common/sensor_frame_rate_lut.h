/*******************************************************************************
*  Copyright Statement:
*  --------------------
*  This software is protected by Copyright and the information contained
*  herein is confidential. The software may not be copied and the information
*  contained herein may not be used or disclosed except with the written
*  permission of MediaTek Inc. (C) 2005
*
*  BY OPENING THIS FILE, BUYER HEREBY UNEQUIVOCALLY ACKNOWLEDGES AND AGREES
*  THAT THE SOFTWARE/FIRMWARE AND ITS DOCUMENTATIONS ("MEDIATEK SOFTWARE")
*  RECEIVED FROM MEDIATEK AND/OR ITS REPRESENTATIVES ARE PROVIDED TO BUYER ON
*  AN "AS-IS" BASIS ONLY. MEDIATEK EXPRESSLY DISCLAIMS ANY AND ALL WARRANTIES,
*  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE IMPLIED WARRANTIES OF
*  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE OR NONINFRINGEMENT.
*  NEITHER DOES MEDIATEK PROVIDE ANY WARRANTY WHATSOEVER WITH RESPECT TO THE
*  SOFTWARE OF ANY THIRD PARTY WHICH MAY BE USED BY, INCORPORATED IN, OR
*  SUPPLIED WITH THE MEDIATEK SOFTWARE, AND BUYER AGREES TO LOOK ONLY TO SUCH
*  THIRD PARTY FOR ANY WARRANTY CLAIM RELATING THERETO. MEDIATEK SHALL ALSO
*  NOT BE RESPONSIBLE FOR ANY MEDIATEK SOFTWARE RELEASES MADE TO BUYER'S
*  SPECIFICATION OR TO CONFORM TO A PARTICULAR STANDARD OR OPEN FORUM.
*
*  BUYER'S SOLE AND EXCLUSIVE REMEDY AND MEDIATEK'S ENTIRE AND CUMULATIVE
*  LIABILITY WITH RESPECT TO THE MEDIATEK SOFTWARE RELEASED HEREUNDER WILL BE,
*  AT MEDIATEK'S OPTION, TO REVISE OR REPLACE THE MEDIATEK SOFTWARE AT ISSUE,
*  OR REFUND ANY SOFTWARE LICENSE FEES OR SERVICE CHARGE PAID BY BUYER TO
*  MEDIATEK FOR SUCH MEDIATEK SOFTWARE AT ISSUE. 
*
*  THE TRANSACTION CONTEMPLATED HEREUNDER SHALL BE CONSTRUED IN ACCORDANCE
*  WITH THE LAWS OF THE STATE OF CALIFORNIA, USA, EXCLUDING ITS CONFLICT OF
*  LAWS PRINCIPLES.  ANY DISPUTES, CONTROVERSIES OR CLAIMS ARISING THEREOF AND
*  RELATED THERETO SHALL BE SETTLED BY ARBITRATION IN SAN FRANCISCO, CA, UNDER
*  THE RULES OF THE INTERNATIONAL CHAMBER OF COMMERCE (ICC).
*
*******************************************************************************/

/*******************************************************************************
 * Filename:
 * ---------
 *	isp_yuv_if_v2.h
 *
 * Project:
 * --------
 *   MT6238
 *
 * Description:
 * ------------
 *   This file is intends for ISP SW Interface about raw camera.
 *
 * Author:
 * -------
 * -------
 *
 *============================================================================
 *             HISTORY
 * Below this line, this part is controlled by PVCS VM. DO NOT MODIFY!!
 *------------------------------------------------------------------------------
 *------------------------------------------------------------------------------
 * Upper this line, this part is controlled by PVCS VM. DO NOT MODIFY!!
 *============================================================================
 ****************************************************************************/
#ifndef _SENSOR_FRAME_RATE_LUT_H_
#define _SENSOR_FRAME_RATE_LUT_H_


#if (defined(ISP_SUPPORT))
#include "kal_release.h"
#include "drv_features.h"
//#if (defined(DRV_ISP_6235_SERIES)&&(defined(MT6253E)||defined(MT6253L)))
//#include "isp_if.h"
#include "Sensor_comm_def.h"

//#include "typedefs.h"
//#include "sccb_v2.h"
//#include "sensor.h"
//#include "isp_if_hw.h"
//#include "cirq.h"
//#include "img_common_enum.h"
//#include "idp_test.h"
//#include "Sensor_common_interface.h"


//#define __SENSOR_FRAME_RATE_SUPPORT__


//#define __EMI_BURST_MODE__

/*
typedef enum
{
	CAM_SCENARIO_PREVIEW=0,
	CAM_SCENARIO_CAPTURE,
	CAM_SCENARIO_MP4,
	CAM_SCENARIO_MJPEG,
	CAM_SCENARIO_VT,
	CAM_SCENARIO_TOTAL_NO
} CAM_SCENARIO_ENUM;
*/



/* fill in by DE ISP owner */

typedef struct
{
	kal_uint32 MaxPclk;
	kal_uint16 MaxActiveLines;
	kal_uint16 MaxActivePixels;
	kal_uint16 MaxDummyLines;
	kal_uint16 MinDummyLines;
	kal_uint16 MaxDummyPixels;
	kal_uint16 MinDummyPixels;
} SENSOR_FRAME_RATE_ISP_LIMIT_PARA_STRUCT, *PSENSOR_FRAME_RATE_ISP_LIMIT_PARA_STRUCT;



typedef struct
{
	IMAGE_SENSOR_INTERFACE_ENUM CameraIf;
	IMAGE_SENSOR_DATA_OUT_FORMAT_ENUM DataFormat;
	kal_uint16 SourceWidth;
	kal_uint16 SourceHeight;
	SENSOR_FRAME_RATE_ISP_LIMIT_PARA_STRUCT IspLimitPara;
} SENSOR_FRAME_RATE_ISP_STRUCT, *PSENSOR_FRAME_RATE_ISP_STRUCT;


typedef struct
{
	//SENSOR_FRAME_RATE_SCENARIO_ENUM Scenario;
	IMAGE_SENSOR_INTERFACE_ENUM CameraIf;
	IMAGE_SENSOR_DATA_OUT_FORMAT_ENUM DataFormat;	
	kal_uint16 SourceWidth;
	kal_uint16 SourceHeight;
	kal_uint16 TargetWidth;
	kal_uint16 TargetHeight;
	kal_uint16 MaxDzFactor;/* Dz factor * 100 */
	kal_uint16 OtfCriticalDzFactor;/* Dz factor * 100 */
	kal_uint16 MaxSensorFrameRate;/* frame rate * 100 */
	kal_uint16 NightModeFrameRate;/* frame rate * 100 */
	kal_bool CrzTwoPassEnable;/* 1: encode frame= sensor frame rate/2, 0: sensor frame rate=enciode frame rate */
} SENSOR_FRAME_RATE_CHIP_RECORD_STRUCT, *PSENSOR_FRAME_RATE_CHIP_SUB_STRUCT;


typedef struct
{
	const PSENSOR_FRAME_RATE_CHIP_SUB_STRUCT pPreviewChipLUT;
	const PSENSOR_FRAME_RATE_CHIP_SUB_STRUCT pCaptureChipLUT;
	const PSENSOR_FRAME_RATE_CHIP_SUB_STRUCT pVideoChipLUT;
	
} SENSOR_FRAME_RATE_CHIP_STRUCT, *PSENSOR_FRAME_RATE_CHIP_STRUCT;

typedef struct
{
	kal_bool	SensorFrameRateLutSupport;
	kal_uint16 IspLutNo;
	kal_uint16 IspLutTotalSize;
	const PSENSOR_FRAME_RATE_ISP_STRUCT pIspLutPara;
	kal_uint16 ChipLutNo;
	kal_uint16 ChipLutTotalSize;
	const PSENSOR_FRAME_RATE_CHIP_STRUCT pChipLutPara;
} SENSOR_FRAME_RATE_OVERALL_STRUCT, *PSENSOR_FRAME_RATE_OVERALL_STRUCT;


typedef struct
{
	CAL_SCENARIO_ENUM Scenario;     /* current scenatio */
	IMAGE_SENSOR_INTERFACE_ENUM CameraIf;     /*  current data format  */
	IMAGE_SENSOR_DATA_OUT_FORMAT_ENUM DataFormat;     /*  current data format  */
	kal_uint16 SourceWidth;		/* the resizer input width of first run */
	kal_uint16 SourceHeight;		/* the resizer input height of first run */
	kal_uint16 TargetWidth;		/* the resier output width of first run for MPEG4/JPEG encoder */
	kal_uint16 TargetHeight;		/* the resizer output height of first run for MPEG4/JPEG encoder */
	kal_uint16 EncodeFramRate;		/* the video target encode frame rate*/
	kal_bool NighhtMode;		/* 0: normal  1: night mode*/
}SENSOR_FRAMERATE_IN_STRUCT, *PSENSOR_FRAMERATE_IN_STRUCT;

typedef struct
{
	kal_uint16 MaxSensorFrameRate;     /* Max sensor frame rate */
	kal_uint16 OtfCriticalDzFactor;     /* Critical digital zoom factor  */
	SENSOR_FRAME_RATE_ISP_LIMIT_PARA_STRUCT IspHwLimitation;
}SENSOR_FRAMERATE_OUT_STRUCT, *PSENSOR_FRAMERATE_OUT_STRUCT;


/*************************************************************************************/
/*                                                      ISP Limitation LUT                                                                 */
/*************************************************************************************/
#if (defined(MT6253E) || defined(MT6253L)||defined(MT6252) || defined(MT6252H)) 
  /*** Parralell ***/
  /*** Serial ***/

  #if defined(__SERIAL_SENSOR_V1_SUPPORT__)
  #define MAX_ISP_HW_LIMITATION_LUT_NO	(3)
  #define ISP_HW_LIMITATION_LUT  \
  {\
 	{IMAGE_SENSOR_IF_SERIAL, IMAGE_SENSOR_DATA_OUT_FORMAT_UYVY, 640, 480, 96000000,  1023, 1023, 72, 0, 3455, 0},\
	{IMAGE_SENSOR_IF_SERIAL, IMAGE_SENSOR_DATA_OUT_FORMAT_UYVY, 352, 288, 96000000,  1023, 1023, 43, 0, 3743, 0},\
	{IMAGE_SENSOR_IF_SERIAL, IMAGE_SENSOR_DATA_OUT_FORMAT_UYVY, 320, 240, 96000000,  1023, 1023, 36, 0, 3775, 0},\
  }
  #elif defined(__DIRECT_SENSOR_V2_SUPPORT__)
  #define MAX_ISP_HW_LIMITATION_LUT_NO	(3)
  #define ISP_HW_LIMITATION_LUT  \
  {\
	\//{SENSOR_IF_DIRECT, 	IMAGE_SENSOR_DATA_OUT_FORMAT_RGB565, 	352, 288, 9460000,  1023, 1023, 43, 0, 3743, 0},\
	\//{SENSOR_IF_DIRECT, 	IMAGE_SENSOR_DATA_OUT_FORMAT_RGB565, 	320, 240, 9460000,  1023, 1023, 36, 0, 3775, 0},\
	{IMAGE_SENSOR_IF_PARALLEL, IMAGE_SENSOR_DATA_OUT_FORMAT_UYVY, 640, 480, 48000000,  1023, 1023, 72, 0, 3455, 0},\
	{IMAGE_SENSOR_IF_PARALLEL, IMAGE_SENSOR_DATA_OUT_FORMAT_UYVY, 352, 288, 48000000,  1023, 1023, 43, 0, 3743, 0},\
	{IMAGE_SENSOR_IF_PARALLEL, IMAGE_SENSOR_DATA_OUT_FORMAT_UYVY, 320, 240, 48000000,  1023, 1023, 36, 0, 3775, 0},\
  }
  #else
  #define MAX_ISP_HW_LIMITATION_LUT_NO	(3)
  #define ISP_HW_LIMITATION_LUT  \
  {\
	{IMAGE_SENSOR_IF_PARALLEL, IMAGE_SENSOR_DATA_OUT_FORMAT_UYVY, 640, 480, 48000000,  1023, 1023, 72, 0, 3455, 0},\
	{IMAGE_SENSOR_IF_PARALLEL, IMAGE_SENSOR_DATA_OUT_FORMAT_UYVY, 352, 288, 48000000,  1023, 1023, 43, 0, 3743, 0},\
	{IMAGE_SENSOR_IF_PARALLEL, IMAGE_SENSOR_DATA_OUT_FORMAT_UYVY, 320, 240, 48000000,  1023, 1023, 36, 0, 3775, 0},\
  }
  #endif
#elif (defined(MT6276) || defined(MT6256)|| defined(MT6255))
  #define MAX_ISP_HW_LIMITATION_LUT_NO	(6)
  #define ISP_HW_LIMITATION_LUT  \
  {\
	{IMAGE_SENSOR_IF_PARALLEL, IMAGE_SENSOR_DATA_OUT_FORMAT_UYVY, 2048, 1536, 96000000,  4095, 4095, 230, 0, 6143, 0},\
	{IMAGE_SENSOR_IF_PARALLEL, IMAGE_SENSOR_DATA_OUT_FORMAT_UYVY, 1600, 1200, 96000000,  4095, 4095, 180, 0, 6591, 0},\
	{IMAGE_SENSOR_IF_PARALLEL, IMAGE_SENSOR_DATA_OUT_FORMAT_UYVY, 1024, 768, 96000000,  4095, 4095, 115, 0, 7167, 0},\
	{IMAGE_SENSOR_IF_PARALLEL, IMAGE_SENSOR_DATA_OUT_FORMAT_UYVY, 800, 600, 96000000,  4095, 4095, 90, 0, 7391, 0},\
	{IMAGE_SENSOR_IF_PARALLEL, IMAGE_SENSOR_DATA_OUT_FORMAT_UYVY, 640, 480, 96000000,  4095, 4095, 72, 0, 7551, 0},\
 	{IMAGE_SENSOR_IF_PARALLEL, IMAGE_SENSOR_DATA_OUT_FORMAT_UYVY, 320, 240, 96000000,  4095, 4095, 36, 0, 7871, 0},\
  }

#elif (defined(MT6253)||defined(MT6235)||defined(MT6235B)) 
  #define MAX_ISP_HW_LIMITATION_LUT_NO	(4)
  #define ISP_HW_LIMITATION_LUT  \
  {\
	{IMAGE_SENSOR_IF_PARALLEL, IMAGE_SENSOR_DATA_OUT_FORMAT_UYVY, 1600, 1200, 48000000,  2047, 2047, 180, 0, 2495, 0},\
	{IMAGE_SENSOR_IF_PARALLEL, IMAGE_SENSOR_DATA_OUT_FORMAT_UYVY, 800, 600, 48000000,  2047, 2047, 90, 0, 3295, 0},\
	{IMAGE_SENSOR_IF_PARALLEL, IMAGE_SENSOR_DATA_OUT_FORMAT_UYVY, 640, 480, 48000000,  2047, 2047, 72, 0, 3455, 0},\
 	{IMAGE_SENSOR_IF_PARALLEL, IMAGE_SENSOR_DATA_OUT_FORMAT_UYVY, 320, 240, 48000000,  2047, 2047, 36, 0, 3775, 0},\
  }

#elif (defined(MT6253DV)) 
  #define MAX_ISP_HW_LIMITATION_LUT_NO	(2)
  #define ISP_HW_LIMITATION_LUT  \
  {\
	{IMAGE_SENSOR_IF_PARALLEL, IMAGE_SENSOR_DATA_OUT_FORMAT_UYVY, 640, 480, 48000000,  2047, 1023, 72, 0, 3445, 0},\
 	{IMAGE_SENSOR_IF_PARALLEL, IMAGE_SENSOR_DATA_OUT_FORMAT_UYVY, 320, 240, 48000000,  2047, 1023, 36, 0, 3775, 0},\
  }

#elif (defined(MT6236) ||defined(MT6268)) 
  #define MAX_ISP_HW_LIMITATION_LUT_NO	(11)
  #define ISP_HW_LIMITATION_LUT  \
  {\
	{IMAGE_SENSOR_IF_PARALLEL, IMAGE_SENSOR_DATA_OUT_FORMAT_RAW_B_FIRST, 2592, 1944, 96000000,  4095, 4095, 291, 0, 5599, 146},\
	{IMAGE_SENSOR_IF_PARALLEL, IMAGE_SENSOR_DATA_OUT_FORMAT_RAW_B_FIRST, 1944, 1458, 96000000,  4095, 4095, 218, 0, 6247, 146},\
	{IMAGE_SENSOR_IF_PARALLEL, IMAGE_SENSOR_DATA_OUT_FORMAT_RAW_B_FIRST, 1620, 1215, 96000000,  4095, 4095, 218, 0, 6247, 146},\
	{IMAGE_SENSOR_IF_PARALLEL, IMAGE_SENSOR_DATA_OUT_FORMAT_RAW_B_FIRST, 1296, 972, 48000000,  4095, 4095, 145, 0, 6895, 146},\
	{IMAGE_SENSOR_IF_PARALLEL, IMAGE_SENSOR_DATA_OUT_FORMAT_RAW_B_FIRST, 1038,  778, 48000000,  4095, 4095, 145, 0, 6895, 146},\
	{IMAGE_SENSOR_IF_PARALLEL, IMAGE_SENSOR_DATA_OUT_FORMAT_RAW_B_FIRST, 810, 608, 48000000,  4095, 4095, 145, 0, 6895, 146},\
	{IMAGE_SENSOR_IF_PARALLEL, IMAGE_SENSOR_DATA_OUT_FORMAT_RAW_B_FIRST, 648, 486, 48000000,  4095, 4095, 72, 0, 7543, 146},\
	{IMAGE_SENSOR_IF_PARALLEL, IMAGE_SENSOR_DATA_OUT_FORMAT_UYVY, 1600, 1200, 96000000,  4095, 4095, 218, 0, 6247, 146},\
	{IMAGE_SENSOR_IF_PARALLEL, IMAGE_SENSOR_DATA_OUT_FORMAT_UYVY, 1024, 768, 48000000,  4095, 4095, 145, 0, 6895, 146},\
	{IMAGE_SENSOR_IF_PARALLEL, IMAGE_SENSOR_DATA_OUT_FORMAT_UYVY, 800, 600, 48000000,  4095, 4095, 145, 0, 6895, 146},\
	{IMAGE_SENSOR_IF_PARALLEL, IMAGE_SENSOR_DATA_OUT_FORMAT_UYVY, 640, 480, 48000000,  4095, 4095, 72, 0, 7543, 146},\
  }

#else// other chip default table
  #define MAX_ISP_HW_LIMITATION_LUT_NO	(1)
  #define ISP_HW_LIMITATION_LUT  \
  {\
 	{IMAGE_SENSOR_IF_SERIAL, IMAGE_SENSOR_DATA_OUT_FORMAT_UYVY, 640, 480, 96000000,  1023, 1023, 72, 0, 3455, 0},\
  }


#endif
/*************************************************************************************/
/*                                                        Chip LUT (Scenario)                                                            */
/*************************************************************************************/
#if ((defined(MT6253E)||defined(MT6252)||defined(MT6252H)) && (!defined(__DIRECT_SENSOR_V2_SUPPORT__)) && (!defined(__SERIAL_SENSOR_V1_SUPPORT__))/* && defined(__EMI_BURST_MODE__)*/)
/* scenario, camera if, data format, */
/* source_width, source_height, target_width, target_height, display width, display height, */
/* min dz, max dz, critical dz, critical dz frame_rate, sensor frame rate, sensor frame rate double encode frame rate flag */

	#define SENSOR_FRAME_CHIP_LUT_PREVIEW_NO	(1)
	#define SENSOR_FRAME_CHIP_LUT_CAPTURE_NO	(1)
	#define SENSOR_FRAME_CHIP_LUT_MP4_NO		(1)

	#define SENSOR_FRAME_RATE_CHIP_PREIVEW_LUT  \
	{\
	  { IMAGE_SENSOR_IF_PARALLEL, IMAGE_SENSOR_DATA_OUT_FORMAT_UYVY,	640, 480, 640, 480, 200, 200,  300,150, KAL_FALSE},\
	}
	#define SENSOR_FRAME_RATE_CHIP_CAPTURE_LUT  \
	{\
	  { IMAGE_SENSOR_IF_PARALLEL, IMAGE_SENSOR_DATA_OUT_FORMAT_UYVY,	640, 480, 640, 480, 200, 200,  150,75, KAL_FALSE},\
	}
	#define SENSOR_FRAME_RATE_CHIP_MP4_LUT  \
	{\
	  {IMAGE_SENSOR_IF_PARALLEL, IMAGE_SENSOR_DATA_OUT_FORMAT_UYVY, 	640, 480, 176, 144, 200, 200,  300,150, KAL_TRUE},\
	}

#elif ((defined(MT6253E)||defined(MT6252)||defined(MT6252H)) && defined(__SERIAL_SENSOR_V1_SUPPORT__) /*&& defined(__EMI_BURST_MODE__)*/)

	#define SENSOR_FRAME_CHIP_LUT_PREVIEW_NO	(1)
	#define SENSOR_FRAME_CHIP_LUT_CAPTURE_NO	(1)
	#define SENSOR_FRAME_CHIP_LUT_MP4_NO		(1)
	#define SENSOR_FRAME_RATE_CHIP_PREIVEW_LUT  \
	{\
	  {IMAGE_SENSOR_IF_SERIAL, IMAGE_SENSOR_DATA_OUT_FORMAT_UYVY,	320, 240, 320, 240, 200, 200,  300,150, KAL_FALSE},\
	}
	#define SENSOR_FRAME_RATE_CHIP_CAPTURE_LUT  \
	{\
	  {IMAGE_SENSOR_IF_SERIAL, IMAGE_SENSOR_DATA_OUT_FORMAT_UYVY,	640, 480, 640, 480, 200, 200,   150,75, KAL_FALSE},\
	}
	#define SENSOR_FRAME_RATE_CHIP_MP4_LUT  \
	{\
	  {IMAGE_SENSOR_IF_SERIAL, IMAGE_SENSOR_DATA_OUT_FORMAT_UYVY, 	320, 240, 176, 144, 200, 200,  300,150, KAL_TRUE},\
	}

#elif (defined(MT6253L) && defined(__DIRECT_SENSOR_V2_SUPPORT__) /*&& defined(__EMI_BURST_MODE__)*/)

	#define SENSOR_FRAME_CHIP_LUT_PREVIEW_NO	(2)
	#define SENSOR_FRAME_CHIP_LUT_CAPTURE_NO	(1)
	#define SENSOR_FRAME_CHIP_LUT_MP4_NO		(2)
	#define SENSOR_FRAME_RATE_CHIP_PREIVEW_LUT  \
	{\
	  { SENSOR_IF_DIRECT, IMAGE_SENSOR_DATA_OUT_FORMAT_RGB565,		352, 288, 176, 144, 200, 200,  300,150, KAL_FALSE},\
	  { SENSOR_IF_DIRECT, IMAGE_SENSOR_DATA_OUT_FORMAT_RGB565,		320, 240, 176, 144, 200, 200,  300,150, KAL_FALSE},\
	}
	#define SENSOR_FRAME_RATE_CHIP_CAPTURE_LUT  \
	{\
	  { IMAGE_SENSOR_IF_PARALLEL, IMAGE_SENSOR_DATA_OUT_FORMAT_UYVY,	640, 480, 640, 480, 200, 200,  150,75, KAL_FALSE},\
	}
	#define SENSOR_FRAME_RATE_CHIP_MP4_LUT  \
	{\
	  {SENSOR_IF_DIRECT, IMAGE_SENSOR_DATA_OUT_FORMAT_RGB565, 		352, 288, 176, 144, 200, 200,  150,75, KAL_FALSE},\
	  {SENSOR_IF_DIRECT, IMAGE_SENSOR_DATA_OUT_FORMAT_RGB565, 		320, 240, 176, 144, 200, 200,  150,75, KAL_FALSE},\
	}



#elif (defined(MT6253L) && defined(__SERIAL_SENSOR_V1_SUPPORT__)/* && defined(__EMI_BURST_MODE__)*/)
//#elif (defined(MT6253L) && defined(__SERIAL_SENSOR_V1_SUPPORT__) && defined(__SERIAL_LCM__) && defined(__EMI_BURST_MODE__))

	#define SENSOR_FRAME_CHIP_LUT_PREVIEW_NO	(1)
	#define SENSOR_FRAME_CHIP_LUT_CAPTURE_NO	(1)
	#define SENSOR_FRAME_CHIP_LUT_MP4_NO		(1)
	#define SENSOR_FRAME_RATE_CHIP_PREIVEW_LUT  \
	{\
	  { IMAGE_SENSOR_IF_SERIAL, IMAGE_SENSOR_DATA_OUT_FORMAT_UYVY,	352, 288, 176, 144, 200, 200,  300,150,  KAL_FALSE},\
	}
	#define SENSOR_FRAME_RATE_CHIP_CAPTURE_LUT  \
	{\
	  { IMAGE_SENSOR_IF_SERIAL, IMAGE_SENSOR_DATA_OUT_FORMAT_UYVY,	352, 288, 352, 288, 200, 200,  150,75,  KAL_FALSE},\
	}
	#if defined(__SERIAL_LCM__)
	#define SENSOR_FRAME_RATE_CHIP_MP4_LUT  \
	{\
	  {IMAGE_SENSOR_IF_SERIAL, IMAGE_SENSOR_DATA_OUT_FORMAT_UYVY, 	352, 288, 176, 144, 200, 200,  150,75,  KAL_TRUE},\
	}
	#else//Parallel LCM
	#define SENSOR_FRAME_RATE_CHIP_MP4_LUT  \
	{\
	  {IMAGE_SENSOR_IF_SERIAL, IMAGE_SENSOR_DATA_OUT_FORMAT_UYVY, 	352, 288, 176, 144, 200, 200,  200,100 KAL_TRUE},\
	}
	#endif

#elif (defined(MT6276) || defined(MT6256)) 
	#define SENSOR_FRAME_CHIP_LUT_PREVIEW_NO	(3)
	#define SENSOR_FRAME_CHIP_LUT_CAPTURE_NO	(4)
	#define SENSOR_FRAME_CHIP_LUT_MP4_NO		(2)

	#define SENSOR_FRAME_RATE_CHIP_PREIVEW_LUT  \
	{\
	  { IMAGE_SENSOR_IF_PARALLEL, IMAGE_SENSOR_DATA_OUT_FORMAT_UYVY,	1024, 768, 1024, 768, 800, 800,  300,150, KAL_FALSE},\
	  { IMAGE_SENSOR_IF_PARALLEL, IMAGE_SENSOR_DATA_OUT_FORMAT_UYVY,	 800,  600,  640,  480, 800, 800,  300,150, KAL_FALSE},\
	  { IMAGE_SENSOR_IF_PARALLEL, IMAGE_SENSOR_DATA_OUT_FORMAT_UYVY,	 640,  480,  640,  480, 800, 800,  300,150, KAL_FALSE},\
	}
	#define SENSOR_FRAME_RATE_CHIP_CAPTURE_LUT  \
	{\
	  { IMAGE_SENSOR_IF_PARALLEL, IMAGE_SENSOR_DATA_OUT_FORMAT_UYVY,	2048, 1536, 2048, 1536, 800, 800,  150,  75, KAL_FALSE},\
	  { IMAGE_SENSOR_IF_PARALLEL, IMAGE_SENSOR_DATA_OUT_FORMAT_UYVY,	 1024,  768,  1024,  768, 800, 800,  300,150, KAL_FALSE},\
	  { IMAGE_SENSOR_IF_PARALLEL, IMAGE_SENSOR_DATA_OUT_FORMAT_UYVY,	  800,   600,   800,  600, 800, 800,  300,150, KAL_FALSE},\
	  { IMAGE_SENSOR_IF_PARALLEL, IMAGE_SENSOR_DATA_OUT_FORMAT_UYVY,	  640,   480,   640,  480, 800, 800,  300,150, KAL_FALSE},\
	}
	#define SENSOR_FRAME_RATE_CHIP_MP4_LUT  \
	{\
	  {IMAGE_SENSOR_IF_PARALLEL, IMAGE_SENSOR_DATA_OUT_FORMAT_UYVY, 	800, 600, 800, 600, 800, 800,  150, 75, KAL_FALSE},\
	  {IMAGE_SENSOR_IF_PARALLEL, IMAGE_SENSOR_DATA_OUT_FORMAT_UYVY, 	640, 480, 640, 480, 800, 800,  150, 75, KAL_FALSE},\
	}

#elif (defined(MT6255))
	#define SENSOR_FRAME_CHIP_LUT_PREVIEW_NO	(3)
	#define SENSOR_FRAME_CHIP_LUT_CAPTURE_NO	(4)
	#define SENSOR_FRAME_CHIP_LUT_MP4_NO		(2)

	#define SENSOR_FRAME_RATE_CHIP_PREIVEW_LUT  \
	{\
	  { IMAGE_SENSOR_IF_PARALLEL, IMAGE_SENSOR_DATA_OUT_FORMAT_UYVY,	1024, 768, 1024, 768, 400, 400,  300,150, KAL_FALSE},\
	  { IMAGE_SENSOR_IF_PARALLEL, IMAGE_SENSOR_DATA_OUT_FORMAT_UYVY,	 800,  600,  640,  480, 400, 400,  300,150, KAL_FALSE},\
	  { IMAGE_SENSOR_IF_PARALLEL, IMAGE_SENSOR_DATA_OUT_FORMAT_UYVY,	 640,  480,  640,  480, 400, 400,  300,150, KAL_FALSE},\
	}
	#define SENSOR_FRAME_RATE_CHIP_CAPTURE_LUT  \
	{\
	  { IMAGE_SENSOR_IF_PARALLEL, IMAGE_SENSOR_DATA_OUT_FORMAT_UYVY,	2048, 1536, 2048, 1536, 400, 400,  150,  75, KAL_FALSE},\
	  { IMAGE_SENSOR_IF_PARALLEL, IMAGE_SENSOR_DATA_OUT_FORMAT_UYVY,	 1024,  768,  1024,  768, 400, 400,  300,150, KAL_FALSE},\
	  { IMAGE_SENSOR_IF_PARALLEL, IMAGE_SENSOR_DATA_OUT_FORMAT_UYVY,	  800,   600,   800,  600, 400, 400,  300,150, KAL_FALSE},\
	  { IMAGE_SENSOR_IF_PARALLEL, IMAGE_SENSOR_DATA_OUT_FORMAT_UYVY,	  640,   480,   640,  480, 400, 400,  300,150, KAL_FALSE},\
	}
	#define SENSOR_FRAME_RATE_CHIP_MP4_LUT  \
	{\
	  {IMAGE_SENSOR_IF_PARALLEL, IMAGE_SENSOR_DATA_OUT_FORMAT_UYVY, 	800, 600, 800, 600, 400, 400,  150, 75, KAL_FALSE},\
	  {IMAGE_SENSOR_IF_PARALLEL, IMAGE_SENSOR_DATA_OUT_FORMAT_UYVY, 	640, 480, 640, 480, 400, 400,  150, 75, KAL_FALSE},\
	}

#elif (defined(MT6253)||defined(MT6235)||defined(MT6235B)) 
	#define SENSOR_FRAME_CHIP_LUT_PREVIEW_NO	(2)
	#define SENSOR_FRAME_CHIP_LUT_CAPTURE_NO	(3)
	#define SENSOR_FRAME_CHIP_LUT_MP4_NO		(2)

	#define SENSOR_FRAME_RATE_CHIP_PREIVEW_LUT  \
	{\
	  { IMAGE_SENSOR_IF_PARALLEL, IMAGE_SENSOR_DATA_OUT_FORMAT_UYVY,	800, 600, 320, 240, 400, 400,  300,150, KAL_FALSE},\
	  { IMAGE_SENSOR_IF_PARALLEL, IMAGE_SENSOR_DATA_OUT_FORMAT_UYVY,	640, 480, 320, 240, 400, 400,  300,150, KAL_FALSE},\
	}
	#define SENSOR_FRAME_RATE_CHIP_CAPTURE_LUT  \
	{\
	  { IMAGE_SENSOR_IF_PARALLEL, IMAGE_SENSOR_DATA_OUT_FORMAT_UYVY,	1600, 1200, 1600, 1200, 400, 400,   80,  40, KAL_FALSE},\
	  { IMAGE_SENSOR_IF_PARALLEL, IMAGE_SENSOR_DATA_OUT_FORMAT_UYVY,	  800,   600,   800,  600, 400, 400,  300,150, KAL_FALSE},\
	  { IMAGE_SENSOR_IF_PARALLEL, IMAGE_SENSOR_DATA_OUT_FORMAT_UYVY,	  640,   480,   640,  480, 400, 400,  300,150, KAL_FALSE},\
	}
	#define SENSOR_FRAME_RATE_CHIP_MP4_LUT  \
	{\
	  {IMAGE_SENSOR_IF_PARALLEL, IMAGE_SENSOR_DATA_OUT_FORMAT_UYVY, 	800, 600, 320, 240, 400, 400,  300,150, KAL_TRUE},\
	  {IMAGE_SENSOR_IF_PARALLEL, IMAGE_SENSOR_DATA_OUT_FORMAT_UYVY, 	640, 480, 320, 240, 400, 400,  300,150, KAL_TRUE},\
	}

#elif (defined(MT6253DV)) 
	#define SENSOR_FRAME_CHIP_LUT_PREVIEW_NO	(1)
	#define SENSOR_FRAME_CHIP_LUT_CAPTURE_NO	(1)
	#define SENSOR_FRAME_CHIP_LUT_MP4_NO		(1)

	#define SENSOR_FRAME_RATE_CHIP_PREIVEW_LUT  \
	{\
	  { IMAGE_SENSOR_IF_PARALLEL, IMAGE_SENSOR_DATA_OUT_FORMAT_UYVY,	640, 480, 320, 240, 200, 200,  300,150, KAL_FALSE},\
	}
	#define SENSOR_FRAME_RATE_CHIP_CAPTURE_LUT  \
	{\
	  { IMAGE_SENSOR_IF_PARALLEL, IMAGE_SENSOR_DATA_OUT_FORMAT_UYVY,	640, 480, 320, 240, 200, 200,  300,150, KAL_FALSE},\
	}
	#define SENSOR_FRAME_RATE_CHIP_MP4_LUT  \
	{\
	  {IMAGE_SENSOR_IF_PARALLEL, IMAGE_SENSOR_DATA_OUT_FORMAT_UYVY, 	640, 480, 320, 240, 200, 200,  300,150, KAL_TRUE},\
	}
#elif (defined(MT6236)||defined(MT6268) ) 
	#define SENSOR_FRAME_CHIP_LUT_PREVIEW_NO	(4)
	#define SENSOR_FRAME_CHIP_LUT_CAPTURE_NO	(11)
	#define SENSOR_FRAME_CHIP_LUT_MP4_NO		(1)

	#define SENSOR_FRAME_RATE_CHIP_PREIVEW_LUT  \
	{\
	  { IMAGE_SENSOR_IF_PARALLEL, IMAGE_SENSOR_DATA_OUT_FORMAT_RAW_B_FIRST,	800, 600, 640, 480, 400, 400,  300,150, KAL_FALSE},\
	  { IMAGE_SENSOR_IF_PARALLEL, IMAGE_SENSOR_DATA_OUT_FORMAT_RAW_B_FIRST,	640, 480, 640, 480, 400, 400,  300,150, KAL_FALSE},\
	  { IMAGE_SENSOR_IF_PARALLEL, IMAGE_SENSOR_DATA_OUT_FORMAT_UYVY,	              800, 600, 640, 480, 400, 400,  300,150, KAL_FALSE},\
	  { IMAGE_SENSOR_IF_PARALLEL, IMAGE_SENSOR_DATA_OUT_FORMAT_UYVY,	              640, 480, 640, 480, 400, 400,  300,150, KAL_FALSE},\
	}
	#define SENSOR_FRAME_RATE_CHIP_CAPTURE_LUT  \
	{\
	  { IMAGE_SENSOR_IF_PARALLEL, IMAGE_SENSOR_DATA_OUT_FORMAT_RAW_B_FIRST,	2592, 1944, 2592, 1944, 400, 400,  150,75, KAL_FALSE},\
	  { IMAGE_SENSOR_IF_PARALLEL, IMAGE_SENSOR_DATA_OUT_FORMAT_RAW_B_FIRST,	1944, 1458, 1944, 1458, 400, 400,  150,75, KAL_FALSE},\
	  { IMAGE_SENSOR_IF_PARALLEL, IMAGE_SENSOR_DATA_OUT_FORMAT_RAW_B_FIRST,	1620, 1215, 1600, 1200, 400, 400,  150,75, KAL_FALSE},\
	  { IMAGE_SENSOR_IF_PARALLEL, IMAGE_SENSOR_DATA_OUT_FORMAT_RAW_B_FIRST,	1296,  972,  1296,  972, 400, 400,  300,150, KAL_FALSE},\
	  { IMAGE_SENSOR_IF_PARALLEL, IMAGE_SENSOR_DATA_OUT_FORMAT_RAW_B_FIRST,	1038,  778,  1038,  778, 400, 400,  300,150, KAL_FALSE},\
	  { IMAGE_SENSOR_IF_PARALLEL, IMAGE_SENSOR_DATA_OUT_FORMAT_RAW_B_FIRST,	810,  608,  810,  628, 400, 400,  300,150, KAL_FALSE},\
	  { IMAGE_SENSOR_IF_PARALLEL, IMAGE_SENSOR_DATA_OUT_FORMAT_RAW_B_FIRST,	  648,  486,   648,   486, 400, 400,  300,150, KAL_FALSE},\
	  { IMAGE_SENSOR_IF_PARALLEL, IMAGE_SENSOR_DATA_OUT_FORMAT_UYVY,	1600, 1200, 1600, 1200, 400, 400,  150,75, KAL_FALSE},\
	  { IMAGE_SENSOR_IF_PARALLEL, IMAGE_SENSOR_DATA_OUT_FORMAT_UYVY,    1024,  768,  1024,  768, 400, 400,  300,150, KAL_FALSE},\
	  { IMAGE_SENSOR_IF_PARALLEL, IMAGE_SENSOR_DATA_OUT_FORMAT_UYVY,	  800,  600,  800,  600, 400, 400,  300,150, KAL_FALSE},\
	  { IMAGE_SENSOR_IF_PARALLEL, IMAGE_SENSOR_DATA_OUT_FORMAT_UYVY,	  640,  480,   640,   480, 400, 400,  300,150, KAL_FALSE},\
	}
	#define SENSOR_FRAME_RATE_CHIP_MP4_LUT  \
	{\
	  {IMAGE_SENSOR_IF_PARALLEL, IMAGE_SENSOR_DATA_OUT_FORMAT_RAW_B_FIRST, 	640, 480, 320, 240, 400, 400,  300,150, KAL_TRUE},\
	}

#else// other chip default table
	//should add table here
	#define SENSOR_FRAME_CHIP_LUT_PREVIEW_NO	(1)
	#define SENSOR_FRAME_CHIP_LUT_CAPTURE_NO	(1)
	#define SENSOR_FRAME_CHIP_LUT_MP4_NO		(1)

	#define SENSOR_FRAME_RATE_CHIP_PREIVEW_LUT  \
	{\
	  { IMAGE_SENSOR_IF_PARALLEL, IMAGE_SENSOR_DATA_OUT_FORMAT_UYVY,	640, 480, 640, 480, 200, 200,  300,150, KAL_FALSE},\
	}
	#define SENSOR_FRAME_RATE_CHIP_CAPTURE_LUT  \
	{\
	  { IMAGE_SENSOR_IF_PARALLEL, IMAGE_SENSOR_DATA_OUT_FORMAT_UYVY,	640, 480, 640, 480, 200, 200,  150,75, KAL_FALSE},\
	}
	#define SENSOR_FRAME_RATE_CHIP_MP4_LUT  \
	{\
	  {IMAGE_SENSOR_IF_PARALLEL, IMAGE_SENSOR_DATA_OUT_FORMAT_UYVY, 	640, 480, 176, 144, 200, 200,  300,150, KAL_TRUE},\
	}

#endif


#define MAX_SENSOR_FRAME_CHIP_LUT_NO	(SENSOR_FRAME_CHIP_LUT_PREVIEW_NO+SENSOR_FRAME_CHIP_LUT_CAPTURE_NO+SENSOR_FRAME_CHIP_LUT_MP4_NO)

#define SENSOR_FRAME_RATE_CHIP_LUT  \
{\
	(PSENSOR_FRAME_RATE_CHIP_SUB_STRUCT)&ChipPreviewLutPara[0],\
	(PSENSOR_FRAME_RATE_CHIP_SUB_STRUCT)&ChipCaptureLutPara[0],\
	(PSENSOR_FRAME_RATE_CHIP_SUB_STRUCT)&ChipMp4LutPara[0],\
}

#define SENSOR_FRAME_RATE_OVERALL_LUT \
{\
	KAL_TRUE,\
	MAX_ISP_HW_LIMITATION_LUT_NO,\
	MAX_ISP_HW_LIMITATION_LUT_NO*sizeof(SENSOR_FRAME_RATE_ISP_STRUCT),\
	(PSENSOR_FRAME_RATE_ISP_STRUCT)&IspLutPara[0],\
	MAX_SENSOR_FRAME_CHIP_LUT_NO,\
	MAX_SENSOR_FRAME_CHIP_LUT_NO*sizeof(SENSOR_FRAME_RATE_CHIP_RECORD_STRUCT),\
	(PSENSOR_FRAME_RATE_CHIP_STRUCT)&ChipLutPara\
}

extern MM_ERROR_CODE_ENUM SensorCommonGetFrameRate(SENSOR_FRAMERATE_IN_STRUCT *InPara, SENSOR_FRAMERATE_OUT_STRUCT *OutPara);


//#endif /* MT6235 */
#endif /* ISP_SUPPORT */
#endif /* _SENSOR_FRAME_RATE_LUT_H_ */
